; IRA V2.08 (Apr 18 2015) (c)1993-95 Tim Ruehsen, (c)2009-2014 Frank Wille

EXT_0000	EQU	$0
ABSEXECBASE	EQU	$4
EXT_0002	EQU	$A
EXT_0003	EQU	$25
EXT_0004	EQU	$1B1
EXT_0005	EQU	$1BF
EXT_0006	EQU	$336
EXT_0007	EQU	$33B
EXT_0008	EQU	$1306
EXT_0009	EQU	$2000
EXT_000a	EQU	$2020
EXT_000b	EQU	$202C
EXT_000c	EQU	$2042
EXT_000d	EQU	$2048
EXT_000e	EQU	$2056
EXT_000f	EQU	$260C
EXT_0010	EQU	$2920
EXT_0011	EQU	$2940
EXT_0012	EQU	$2C26
EXT_0013	EQU	$2E2E
EXT_0014	EQU	$3030
EXT_0015	EQU	$3032
EXT_0016	EQU	$3E3A
EXT_0017	EQU	$4100
EXT_0018	EQU	$4254
EXT_0019	EQU	$48E7
EXT_001a	EQU	$6710
EXT_001b	EQU	$6714
EXT_001c	EQU	$7820
EXT_001d	EQU	$53656C
CIAA_PRA	EQU	$BFE001
HARDBASE	EQU	$DFF000
POTGOR		EQU	$DFF016
COP1LCH		EQU	$DFF080
COPJMP1		EQU	$DFF088
DMACON		EQU	$DFF096
INTENA		EQU	$DFF09A
INTREQ		EQU	$DFF09C
ADKCON		EQU	$DFF09E
AUD0VOL		EQU	$DFF0A8
AUD1VOL		EQU	$DFF0B8
AUD2VOL		EQU	$DFF0C8
AUD3VOL		EQU	$DFF0D8
COLOR00		EQU	$DFF180
EXT_002c	EQU	$1F201EC
EXT_002d	EQU	$1FF0205
EXT_002e	EQU	$2C262630
EXT_002f	EQU	$2C262D30
EXT_0030	EQU	$392C2626
EXT_0031	EQU	$39392062
EXT_0032	EQU	$42697400
EXT_0033	EQU	$6D420000
EXT_0034	EQU	$6D4D0000
EXT_0035	EQU	$6D534454
EXT_0036	EQU	$6D534F4E





	SECTION S_0,CODE

SECSTRT_0:
	MOVE.L	ABSEXECBASE.W,EXECBASE+2
rb_HunkStart:
	SUBA.L	A1,A1
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-294(A6)
	MOVEA.L	D0,A4
	TST.L	172(A4)
	BNE.S	rb_FromCLI
	CLR.W	Para_PTR+2
	LEA	92(A4),A0
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-384(A6)
	LEA	92(A4),A0
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-372(A6)
	MOVE.L	D0,WBMSG_PTR
	BSR.S	j
	BRA.S	rb_dexit
rb_FromCLI:
	BSR.S	j
rb_dexit:
	DC.W	$4aba
	DC.W	$001c
	BEQ.S	rb_exit
	MOVEA.L	WBMSG_PTR(PC),A1
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-132(A6)
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-378(A6)
rb_exit:
	MOVEQ	#0,D0
	RTS
WBMSG_PTR:
	ORI.B	#$00,D0
rb_DOSname:
	DC.W	$646f
	DC.W	$732e
	DC.W	$6c69
	BHI.S	LAB_000E
	BSR.S	LAB_000E+2
	DC.W	$7900
	DC.W	$0000
UseParsedParams:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
AutoStartMod:
	RTS
BatchProc:
AutoLoadMod:
	ORI.B	#$00,D0
AutoPlayMod:
EXECBASE:
	ORI.B	#$00,D0
	DC.W	$0000
j:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	SUBA.L	A1,A1
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-294(A6)
	MOVE.L	D0,SymphonieTask_PTR
	MOVE.L	D0,LAB_12A4+2
	JSR	GetProcessor
	MOVE.W	Processor_FLAGS,D0
	BTST	#1,D0
	BNE.S	Processor_Ok
	BTST	#2,D0
	BNE.S	Processor_Ok
	BTST	#3,D0
	BNE.S	Processor_Ok
	BRA.W	Processor_Fail
VersionString:
	MOVEA.L	(A6),A2
	DC.W	$4552
	MOVE.W	-(A0),D5
	DC.W	$5379
	BLT.S	LAB_0014+6
	DC.W	$686f
	DC.W	$6e69
	BCS.S	LAB_0011+8
	DC.W	$5072
	BLE.S	LAB_0012+2
	MOVE.W	13156(A6),-(A1)
LAB_000E:
	ORI.B	#$01,D0
	ORI.B	#$00,D0
Processor_Ok:
	MOVE.W	#$ffff,ERROR_FLAG+2
LAB_0011:
	MOVE.L	#ERRNoLibs_TXT+1,ErrorText_TXT+2
LAB_0012:
	JSR	_OpenLibs
	TST.W	D0
	BNE.W	ERR_Libs
	MOVE.L	#ERRNoResMem_TXT+1,ErrorText_TXT+2
	LEA	Resident_AUTOMEM,A0
	JSR	AutoGetMem
	CMPI.W	#$ffff,D0
	BNE.W	ERR_NOSCRMODEReqA
ChangeScreenModeDO:
	JSR	InitMacroMem
	JSR	InitColTTab
	JSR	LoadTempPrefs
	CLR.B	OnWBScreen
LAB_0014:
	MOVE.L	#ERRNoScrMode_TXT,ErrorText_TXT+2
	MOVEQ	#3,D0
	SUBA.L	A0,A0
	MOVEA.L	_ReqToolsBase+2,A6
	JSR	-30(A6)
	MOVE.L	D0,ScreenModeReq_PTR
	TST.L	D0
	BEQ.W	ERR_NOSCRMODEReqA
	CMPI.W	#$ffff,Para_PTR+2
	BNE.S	ReAsk_ModeID
	LEA	TempPrefs_Head,A2
	MOVE.W	#$0002,30(A2)
	JSR	SetWBScreen
	BRA.W	OpenWBScreen
ReAsk_ModeID:
	MOVEA.L	ScreenModeReq_PTR(PC),A1
	MOVE.W	#$0004,52(A1)
	LEA	ScreenModeReq_TAGS(PC),A0
	LEA	ScreenModeReq_txt,A3
	MOVE.L	#ERRNoScrMode_TXT,ErrorText_TXT+2
	MOVEA.L	_ReqToolsBase+2,A6
	JSR	-144(A6)
	TST.W	D0
	BNE.S	LAB_0016
	BSR.W	xxx
	CLR.L	LAB_1062+2
	LEA	TryWbScr_CTXT+3,A0
	JSR	MulitChoiceRequest
	TST.W	D0
	BEQ.W	ScrMdExit
	CMPI.W	#$0001,D0
	BEQ.S	ReAsk_ModeID
	LEA	TempPrefs_Head,A2
	MOVE.W	#$0002,30(A2)
	JSR	SetWBScreen
	BRA.S	OpenWBScreen
LAB_0016:
	MOVEQ	#0,D0
	MOVEA.L	ScreenModeReq_PTR(PC),A0
	MOVE.L	16(A0),LAB_1299+2
	MOVE.W	20(A0),D0
	MOVE.L	D0,LAB_129A+2
	MOVE.W	22(A0),D0
	MOVE.L	D0,LAB_129C
	MOVE.L	D0,SCOPEBM_H
	MOVE.W	52(A0),D0
	MOVE.L	D0,LAB_129D+2
	CMPI.W	#$0001,D0
	BNE.S	LAB_0017
	CLR.W	MENUCOL
LAB_0017:
	LEA	LAB_1297,A1
	SUBA.L	A0,A0
	MOVEA.L	_IntuitionBase,A6
	JSR	-612(A6)
	MOVE.L	D0,MainScreen_PTR+2
	BEQ.W	ReAsk_ModeID
OpenScreen_OK:
	MOVE.L	D0,LAB_0073+2
	MOVEA.L	D0,A0
	JSR	SetRequesterScreen
	JSR	MakeScreenPublic
OpenWBScreen:
	MOVE.L	#ERRNoFileReq_TXT,ErrorText_TXT+2
	CLR.L	RQReqStruct_PTR
	MOVEQ	#0,D0
	SUBA.L	A0,A0
	MOVEA.L	_ReqToolsBase+2,A6
	JSR	-30(A6)
	TST.L	D0
	BEQ.W	ERR_NOASLFR
	MOVE.L	D0,RQReqStruct_PTR
	MOVEA.L	SuperSupportTable_PTR,A0
	MOVE.L	MainScreen_PTR+2,1650(A0)
	JSR	AllocateScopeBM
	LEA	Test_VOICEEXPANDER,A0
	MOVE.L	Test_SAMPLE+2,6(A0)
	MOVEQ	#10,D0
	MOVEQ	#0,D1
	MOVEA.L	AutoMenu_PTR,A0
	LEA	MenuDef_TXT+1,A1
	JSR	AutoMenu
	MOVE.L	#ERRNoVisualInfo_TXT+3,ErrorText_TXT+2
	MOVEA.L	MainScreen_PTR+2,A0
	SUBA.L	A1,A1
	JSR	InitProjectTitle
	JSR	BuildMainTitle
	MOVE.L	ScreenTitle_PTR+2,LAB_03E0+2
	MOVE.L	#ERRNoWindow_TXT+1,ErrorText_TXT+2
	LEA	TestWin_TAGS(PC),A1
	SUBA.L	A0,A0
	MOVEA.L	_IntuitionBase,A6
	JSR	-606(A6)
	MOVE.L	D0,TestWin2_PTR
	BEQ.W	ERR_NoMenus
	MOVEA.L	TestWin2_PTR(PC),A0
	LEA	TestWin_SCR,A1
	JSR	GetWinStruct
	MOVEA.L	TestWin2_PTR(PC),A0
	JSR	InitWinFontDim
	MOVEA.L	TestWin2_PTR(PC),A0
	MOVEA.L	_IntuitionBase,A6
	JSR	-72(A6)
	JSR	LoadDefaultPrefs
	BSR.W	NGOpenWindows
	JSR	GetAudioDevice
	TST.B	AUDIODEV_TAKEN+1
	BEQ.S	ERR_NGWIN
	JSR	Build14BitTab
	JSR	BuildSinusTab
	JSR	Init9BitStream
	JSR	CDtoProgramDir
	JSR	SetZeroVolume
	BSR.W	MainLoop
	JSR	SetOldCList
	JSR	DeInitMidi
	JSR	SaveTempPrefs
	JSR	DSPPlugCleanup
	JSR	FreeAudioDevice
	JSR	CDtoOldDir
ERR_NGWIN:
	BSR.W	NGCloseWindows
ERR_NoMenus:
	JSR	FreeScopeBM
	MOVEA.L	RQReqStruct_PTR,A1
	BSR.W	FreeReqtoolsRequest
ERR_NOASLFR:
	TST.B	OnWBScreen
	BNE.S	ERR_NOSCRMODEReqA
	MOVEA.L	MainScreen_PTR+2,A0
	DC.W	$4a88
	BEQ.S	ERR_NOSCRMODEReqA
	MOVEA.L	_IntuitionBase,A6
	JSR	-66(A6)
	CLR.L	MainScreen_PTR+2
	BRA.S	ERR_NOSCRMODEReqA
ScrMdExit:
	CLR.W	ERROR_FLAG+2
	CLR.L	ErrorText_TXT+2
ERR_NOSCRMODEReqA:
	LEA	Resident_AUTOMEM,A0
	MOVE.L	#$00010001,MEM_DEBUG_INFO
	CLR.L	LAB_109F
	JSR	AutoFreeMem
	DC.W	$0c3a
	DC.W	$00ff
	DC.W	$00c6
	BNE.S	ERR_Libs
	CLR.W	MAINEXIT_FLAG
	CLR.B	CHANGE_SCREENMODE
	CLR.W	ERROR_FLAG+2
	SUBA.L	A0,A0
	JSR	SetRequesterScreen
	BSR.W	ClrSystemRequesterScreen
	MOVE.L	#ERRNoResMem_TXT+1,ErrorText_TXT+2
	LEA	Resident_AUTOMEM,A0
	JSR	AutoGetMem
	CMPI.W	#$ffff,D0
	BNE.S	ERR_Libs
	BRA.W	ChangeScreenModeDO
ERR_Libs:
	JSR	_CloseLibs
	CMPI.W	#$ffff,ERROR_FLAG+2
	BEQ.W	MAIN_ERREXIT
	JSR	PrintErrorMsg
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
xxx:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$00004e20,D0
LAB_0021:
	MOVE.W	#$0ff0,COLOR00
	MOVE.W	#$0f00,COLOR00
	DBF	D0,LAB_0021
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ScreenModeReq_PTR:
	ORI.B	#$00,D0
ScreenModeReq_TAGS:
	OR.B	D0,D0
	ORI.B	#$00,24576(A0)
	OR.B	D0,D0
	ORI.W	#$0000,(A4)+
	BCHG	D0,D0
	OR.B	D0,D0
	ORI.W	#$0000,(A6)+
	DC.W	$00c8
	ORI.B	#$00,D0
FreeReqtoolsRequest:
	DC.W	$4a89
	BEQ.S	LAB_0025
	MOVEA.L	_ReqToolsBase+2,A6
	JSR	-36(A6)
LAB_0025:
	RTS
ChangeScreenMode:
	MOVE.W	#$ffff,MAINEXIT_FLAG
	MOVE.B	#$ff,CHANGE_SCREENMODE
	RTS
CHANGE_SCREENMODE:
	DC.W	$0000
MainLoop:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	InitRenderPrefs
LAB_0029:
	BSR.W	ClrLockState
	JSR	SetZeroVolume
	JSR	PreCalcMemUsage
	CLR.W	Restart_FLAG
	MOVE.W	#$ffff,ERROR_FLAG+2
	CLR.W	MAINEXIT_FLAG
	MOVE.L	#ERRNoMainMem_TXT+1,ErrorText_TXT+2
	LEA	Main_AUTOMEM,A0
	JSR	AutoGetMem
	CMPI.W	#$ffff,D0
	BNE.W	LAB_002D
	JSR	ClearInstrNameList
	LEA	Standard_KEYTRANS,A0
	JSR	InitKeyTrans
	BSR.W	InitSongDatas
	BSR.W	TestInitPatterns
	LEA	Test_PATTED+2,A0
	LEA	Test_SONG,A1
	MOVE.W	#$0200,(A1)
	MOVE.L	TestSongData_PTR,4(A1)
	MOVE.W	#$ffff,12(A1)
	MOVE.W	#$0005,14(A1)
	MOVE.W	CHANNEL_NUMB+2,18(A1)
	BSR.W	InitSequences
	JSR	ForceAllTracksOn
	JSR	InitSpecNoteAdd
	JSR	SetQuaterTabs
	MOVE.L	#ERRNoVoiceEx_TXT+1,ErrorText_TXT+2
	JSR	GetVoiceExpander
	CMPI.W	#$ffff,D0
	BNE.W	LAB_002C
	JSR	BuildFreqList
	MOVE.W	#$0400,DMACON
	BSR.W	CollectAutoSignalMask
	JSR	ClearPED
	LEA	Test_PATTED+2,A0
	LEA	Test_SONG,A1
	BSR.W	InitPattEd
	JSR	RedrawSpectrum
	BSR.W	InitAutoUpdate
	MOVEA.L	SAMPLEMANLIST_PTR,A0
	JSR	InitSampleManagement
	MOVEA.L	FirstEntry_INSTR,A0
	JSR	InitInstrList
	JSR	StopAllChannels
	JSR	StopSong
	CLR.B	LowCPUWarn+1
	JSR	SetAudioRegisters
	JSR	SetAudioIRQ
	MOVE.W	#$00ff,ADKCON
	JSR	AudioDMAOn
	BSR.W	ClrStreamCount
	JSR	SwapSyncBuffer
	MOVE.W	#$ffff,IRQStuff_STATUS
	CLR.W	ERROR_FLAG+2
	CLR.L	ErrorText_TXT+2
	BSR.W	PattEdDrawStatus
	BSR.W	DrawPositionCacheReset
	BSR.W	DrawSongAll
	BSR.W	DrawInstrumentReset
	BSR.W	DrawInstrument
	BSR.W	ResetRelMasterTime
	JSR	DrawPattedTitle
	BSR.W	RedrawMEventAll
	JSR	StartupMode
	JSR	BuildSuperSupportTable
	JSR	RebuildSoundSystem2
	BSR.W	DrawSystemSetup
	BSR.W	ShowDspStatus
	BSR.W	InitActionDelay
	CMPI.W	#$ffff,MOD_RELOAD
	BNE.S	LAB_002A
	MOVEA.L	SAMPLEMANLIST_PTR,A0
	JSR	FreeAllSamples
	JSR	LoadActualModule
	BSR.W	PattEdDrawStatus
	BSR.W	DrawPositionCacheReset
	BSR.W	DrawSongAll
	BSR.W	DrawInstrumentReset
	BSR.W	DrawInstrument
	JSR	RebuildSoundSystem
	BSR.W	DrawSystemSetup
	BSR.W	ShowDspStatus
	BSR.W	InitActionDelay
LAB_002A:
	JSR	AnimateSpecialFX
	JSR	CheckBufferMem
	BSR.W	GetAutoSignalMask
	TST.L	D0
	BEQ.S	LAB_002B
	BSR.W	ResyncCheck
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-318(A6)
	JSR	CheckMidiMsg
	BSR.W	CheckXYInBlockRange
	JSR	CheckQJMsg
	BSR.W	ProcessAutoUpdate
LAB_002B:
	BSR.W	ResetWinMsgCounter
	BSR.W	HandleAllMsgs
	DC.W	$4aba
	BCLR	D2,D4
	BEQ.S	LAB_002A
	CMPI.W	#$ffff,MAINEXIT_FLAG
	BNE.S	LAB_002B
	CLR.W	IRQStuff_STATUS
	JSR	RemoveAudioIRQ
LAB_002C:
	CLR.W	IRQStuff_STATUS
	JSR	StopVoices
	JSR	FreeVoiceExpander
	MOVEA.L	SAMPLEMANLIST_PTR,A0
	JSR	FreeAllSamples
	JSR	FreeTempSample
LAB_002D:
	LEA	Main_AUTOMEM,A0
	MOVE.L	#$00010000,MEM_DEBUG_INFO
	CLR.L	LAB_109F
	JSR	AutoFreeMem
	JSR	FreeModuleDiz
	JSR	FreeModuleDiz2
	CMPI.W	#$ffff,ERROR_FLAG+2
	BEQ.S	LAB_002E
	CMPI.W	#$ffff,MOD_RELOAD
	BEQ.W	LAB_0029
	CMPI.W	#$ffff,Restart_FLAG
	BEQ.W	LAB_0029
LAB_002E:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
SetResync:
	MOVE.B	#$ff,Resync_FLAG+2
	RTS
	DC.W	$0000
ResyncCheck:
	TST.B	Resync_FLAG+2
	BNE.S	ResyncCheck_do
	RTS
	DC.W	$0000
ResyncCheck_do:
	JSR	RebuildSoundSystem2
	CLR.B	Resync_FLAG+2
	RTS
Processor_Fail:
	MOVE.L	#ERRProc_TXT,ErrorText_TXT+2
MAIN_ERREXIT:
	JSR	PrintErrorMsg
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
InitAutoUpdate:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	AutoUpdate_Handler(PC),A5
	SUBA.L	A1,A1
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-294(A6)
	MOVE.L	D0,(A5)
	MOVE.L	#$4354524c,D0
	BSR.W	NGFindWindow
	DC.W	$4a88
	BEQ.S	LAB_0036
	MOVE.L	76(A0),4(A5)
	CLR.W	12(A5)
LAB_0035:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0036:
	MOVE.L	#NoUpdateSigtxt+1,AssText_TXT
	JSR	PrintAssTextF
	BRA.S	LAB_0035
SignalAutoUpdate:
	MOVEM.L	D0-D1/A0-A1/A5-A6,-(A7)
	LEA	AutoUpdate_Handler(PC),A5
	MOVEA.L	(A5),A1
	MOVE.L	4(A5),D0
	MOVE.W	#$ffff,12(A5)
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-324(A6)
	MOVEM.L	(A7)+,D0-D1/A0-A1/A5-A6
	RTS
	DC.W	$0000
CheckBreakSig:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#0,D0
	MOVEQ	#0,D1
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-306(A6)
	ANDI.L	#$00001000,D0
	TST.L	D0
	BEQ.S	CheckBreakSig_X
	JSR	MAINEXIT
CheckBreakSig_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ProcessAutoUpdate:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	CheckBreakSig
	LEA	AutoUpdate_Handler(PC),A5
	BSR.W	NGWDoAnimations
	CMPI.W	#$ffff,12(A5)
	BNE.S	LAB_003C
	JSR	NotifyDSPPlugIn
	CLR.W	12(A5)
	MOVEQ	#-1,D2
	MOVEA.L	8(A5),A4
LAB_003B:
	MOVEM.L	(A4)+,D0-D1/A3
	CMPI.L	#$00008000,D0
	BEQ.S	LAB_003C
	CMP.W	D2,D1
	BNE.S	LAB_003B
	CMP.W	D2,D0
	BNE.S	LAB_003B
	JSR	(A3)
	BRA.S	LAB_003B
LAB_003C:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
AutoUpdate_Handler:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.L	AutoUpdate_Scopes
	DC.W	$0000
AutoUpdate_Scopes:
	DC.W	$ffff
	DC.W	$ffff
LAB_003F:
	DC.W	$ffff
	DC.W	$ffff
	DC.L	BuildScopeImage
AutoUpdate_Spectrum:
	DC.W	$ffff
	DC.W	$ffff
LAB_0041:
	DC.W	$ffff
	DC.W	$ffff
	DC.L	UpdateDrawSpectrum
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.L	DrawTime
AutoUpdate_DrSeq:
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.L	UpdateDrawSequence
AutoUpdate_DrPos:
	DC.W	$ffff
	DC.W	$ffff
LAB_0044:
	DC.W	$ffff
	DC.W	$ffff
	DC.L	UpdateDrawPosition
AutoUpdate_NextLine:
	ORI.B	#$00,D0
LAB_0046:
	ORI.B	#$00,D0
	DC.L	UpdateGotoNextLine
	DC.W	$0000
	OR.B	D0,D0
	DC.W	$0000
ToogleNoPosChange:
	MOVEM.L	A0,-(A7)
	LEA	AutoUpdate_DrPos(PC),A0
	NOT.L	4(A0)
	MOVEA.L	(A7)+,A0
	RTS
ToogleNoScroll_SAVE:
	ORI.B	#$00,D0
ToogleNoScroll:
	MOVEM.L	A0,-(A7)
	LEA	AutoUpdate_NextLine(PC),A0
	NOT.L	4(A0)
	MOVEA.L	(A7)+,A0
	RTS
ToogleNoSpectrum:
	MOVEM.L	A0,-(A7)
	LEA	AutoUpdate_Spectrum(PC),A0
	NOT.L	4(A0)
	MOVEA.L	(A7)+,A0
	RTS
ToogleNoScopes:
	MOVEM.L	A0,-(A7)
	LEA	AutoUpdate_Scopes(PC),A0
	NOT.L	4(A0)
	MOVEA.L	(A7)+,A0
	RTS
ToogleNoInstr:
	NOT.L	InstrUpdate
	RTS
InstrUpdate:
	DC.W	$ffff
	DC.W	$ffff
ToogleForceUpdate:
	NOT.B	ForceUpdate
	RTS
ClrStreamCount:
	MOVEM.L	D0,-(A7)
	CLR.L	StreamCount
	BSR.W	GetStreamBufBytes
	MOVE.L	D0,StreamBufLen
	MOVEM.L	(A7)+,D0
	RTS
	DC.W	$0000
ResetRelTime:
	MOVEM.L	D0-D1,-(A7)
	BSR.W	GetTimeTicks
	MOVE.L	D0,RelTimeBase_STAMP
	MOVE.L	#$ffffffff,DrawTime_OLD
	MOVEM.L	(A7)+,D0-D1
	RTS
	DC.W	$0000
ResetRelMasterTime:
	BSR.S	ResetRelTime
	MOVEM.L	D0-D1,-(A7)
	BSR.W	GetTimeTicks
	MOVE.L	D0,RelTimeMaster_STAMP
	MOVEM.L	(A7)+,D0-D1
	RTS
	DC.W	$0000
BackupActTime:
	MOVE.W	#$ffff,NotifySeqEnd+2
	MOVE.L	SongDuration,LAB_113F
	MOVE.L	SequenceDuration,LAB_1141
	RTS
	DC.W	$0000
DrawSeqEndTime:
	TST.W	NotifySeqEnd+2
	BNE.S	LAB_0054
	RTS
LAB_0054:
	MOVEM.L	D0-D1,-(A7)
	BSR.S	GetTimeTicks
	MOVE.L	LAB_113F,D0
	BEQ.S	LAB_0055
	MOVE.L	LAB_1141,D1
	BEQ.S	LAB_0055
	BSR.W	BuildTime
	BSR.W	ShowTime
LAB_0055:
	CLR.W	NotifySeqEnd+2
	MOVEM.L	(A7)+,D0-D1
	RTS
GetStreamChunkLen:
	MOVEM.L	A0,-(A7)
	LEA	Test_VOICEEXPANDER,A0
	MOVEA.L	26(A0),A0
	MOVEQ	#0,D0
	MOVE.W	4(A0),D0
	MOVEA.L	(A7)+,A0
	RTS
GetStreamBufBytes:
	BSR.S	GetStreamChunkLen
	TST.W	OverSamp_FLAG
	BEQ.S	LAB_0058
	LSR.W	#1,D0
LAB_0058:
	RTS
	DC.W	$0000
GetTimeTicks:
	MOVEM.L	D1,-(A7)
	MOVE.L	StreamCount,D0
	MOVE.L	StreamBufLen,D1
	DC.W	$4c01
	DC.W	$0000
	MOVEM.L	(A7)+,D1
	RTS
	DC.W	$0000
GetRelTime:
	MOVEM.L	D2-D7/A0-A6,-(A7)
	JSR	GetRealSystemFreq
	MOVE.L	D0,D2
	BSR.S	GetTimeTicks
	MOVE.L	D0,ActTime_STAMP
	LEA	ActTime_STAMP,A1
	LEA	RelTimeBase_STAMP,A0
	MOVE.L	(A1),D0
	SUB.L	(A0),D0
	DC.W	$4c42
	DC.W	$0000
	LEA	RelTimeMaster_STAMP,A0
	MOVE.L	(A1),D1
	SUB.L	(A0),D1
	DC.W	$4c42
	MOVE.B	D1,D0
	MOVEM.L	(A7)+,D2-D7/A0-A6
	RTS
DrawTime:
	BSR.W	DrawSamplePosition
	CMPI.W	#$ffff,PLAYER_STATUS+2
	BEQ.S	LAB_005C
	RTS
LAB_005C:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	GetRelTime
	CMP.L	DrawTime_OLD(PC),D0
	BEQ.S	LAB_005E
	MOVE.L	D1,SongDuration
	MOVE.L	D0,SequenceDuration
	BSR.S	BuildTime
	MOVE.L	D0,DrawTime_OLD
	MOVE.L	#$53593348,D0
	LEA	TimeString_TXT,A0
	BSR.W	NGODrawText
	DC.W	$4a3a
	DC.W	$001e
	BEQ.S	LAB_005D
	JSR	ShowMainTitle
	BSR.W	ShowDspStatus
	CLR.B	PREDSP_UPDATE
LAB_005D:
	BSR.W	DrawSeqEndTime
LAB_005E:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PREDSP_UPDATE:
	BTST	D0,D0
DrawTime_OLD:
	ORI.B	#$00,D0
	DC.W	$0000
BuildTime:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	TimeString_TXT,A0
	BSR.S	AddTimeString
	MOVE.L	D1,D0
	BSR.S	AddTimeString
	CLR.B	(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
AddTimeString:
	MOVEM.L	D0-D2/A1-A2,-(A7)
	MOVEA.L	A0,A2
	MOVE.L	D0,D2
	DIVU	#$003c,D2
	MOVEQ	#0,D0
	MOVE.B	D2,D0
	JSR	ConvertToDecByte
	LEA	LAB_10C5+1,A0
	MOVE.B	(A0)+,(A2)+
	MOVE.B	(A0)+,(A2)+
	MOVE.B	#$3a,(A2)+
	MOVEQ	#0,D0
	SWAP	D2
	MOVE.B	D2,D0
	JSR	ConvertToDecByte
	LEA	LAB_10C5+1,A0
	MOVE.B	(A0),(A2)+
	MOVE.B	1(A0),(A2)+
	MOVE.B	#$20,(A2)+
	MOVEA.L	A2,A0
	MOVEM.L	(A7)+,D0-D2/A1-A2
	RTS
CheckInstrument:
	MOVEM.L	D7/A0,-(A7)
	MOVEQ	#-1,D7
	JSR	GetActualInstrName
	TST.B	(A0)
	BEQ.S	LAB_0064
	CMPI.W	#$fffc,128(A0)
	BEQ.S	LAB_0064
	MOVEQ	#1,D7
	CMPI.W	#$fff8,128(A0)
	BEQ.S	LAB_0064
	MOVEQ	#0,D7
LAB_0064:
	MOVE.W	D7,D0
	MOVEM.L	(A7)+,D7/A0
	RTS
DrawSamplePosition:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	CheckInstrument
	TST.W	D0
	BNE.W	DrawSamplePosition_X
	JSR	GetActualInstrName
	MOVEA.L	A0,A2
	JSR	GetActualInstrument
	MOVE.L	60(A0),D7
	BEQ.S	DrawSamplePosition_X
	MOVE.L	8(A0),D0
	BEQ.S	DrawSamplePosition_X
	MOVE.L	12(A0),D6
	BEQ.S	DrawSamplePosition_X
	ADD.L	D0,D6
	SUB.L	D0,D6
	BMI.S	DrawSamplePosition_X
	SUB.L	D0,D7
	BMI.S	DrawSamplePosition_X
	MOVE.L	#$57494e53,D0
	MOVE.L	#$53574156,D1
	BSR.W	NGGetInnerAreaData
	DC.W	$4a89
	BEQ.S	LAB_0067
	TST.B	128(A2)
	BEQ.S	LAB_0066
	BTST	#4,140(A2)
	BEQ.S	LAB_0066
	MOVE.W	D2,D5
	LSR.W	#2,D5
	SUB.W	D5,D2
LAB_0066:
	MOVE.W	D0,D5
	ANDI.L	#$0000ffff,D2
	DC.W	$4c02
	MOVEQ	#0,D0
	DC.W	$4c46
	MOVEQ	#7,D0
	MOVE.W	D7,D2
	ADD.W	D1,D3
	BSR.W	NGRInvDrMd
	BSR.W	NGRDarkAPen
	MOVE.W	D7,D0
	ADD.W	D5,D0
	ADD.W	D5,D2
	BSR.S	ClrSaPoLine
	JSR	DrawLine
	MOVEM.W	D0-D3,OLDSAPOL_LINE
LAB_0067:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawSamplePosition_X:
	MOVE.L	#$57494e53,D0
	MOVE.L	#$53574156,D1
	BSR.W	NGGetInnerAreaData
	DC.W	$4a89
	BEQ.S	LAB_0069
	BSR.W	NGRInvDrMd
	BSR.W	NGRDarkAPen
	BSR.S	ClrSaPoLine
LAB_0069:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ClrSaPoLine:
	DC.W	$4a7a
	DC.W	$002c
	BNE.S	LAB_006B
	RTS
LAB_006B:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEM.W	OLDSAPOL_LINE(PC),D0-D3
	JSR	DrawLine
	CLR.W	OLDSAPOL_LINE
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$ffff
SampleMark_INFO:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
OLDSAPOL_LINE:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
TestWin2_PTR:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
MESSAGE_PARAM:
	ORI.B	#$00,D0
ResetWinMsgCounter_ADR:
	ORI.B	#$00,D0
TestWin_PTR:
	ORI.B	#$00,D0
TestWin_TAGS:
	OR.B	D0,D0
LAB_0073:
	ORI.W	#$0000,0(A0,D0.W)
	OR.B	D0,D0
	ORI.W	#$0000,-(A4)
	DC.W	$0000
	OR.B	D0,D0
	ORI.W	#$0000,-(A5)
	DC.W	$0010
	OR.B	D0,D0
	ORI.W	#$0000,-(A6)
	DC.W	$001e
	OR.B	D0,D0
	ORI.W	#$0000,-(A7)
	DC.W	$000c
	OR.B	D0,D0
	ORI.L	#$ffffffff,(A0)
	ORI.B	#$00,D0
AutoActWindow:
	ORI.B	#$00,D0
ToogleAutoActWindow:
	NOT.B	AutoActWindow
	RTS
ToogleDMBAbort:
	NOT.B	EmAbort+1
	RTS
SetSystemRequesterScreen:
	MOVEM.L	A1,-(A7)
	MOVEA.L	SymphonieTask_PTR,A1
	MOVE.L	A0,184(A1)
	MOVEA.L	(A7)+,A1
	RTS
ClrSystemRequesterScreen:
	TST.L	SymphonieTask_PTR
	BEQ.S	LAB_0079
	MOVEA.L	SymphonieTask_PTR,A0
	CLR.L	184(A0)
LAB_0079:
	RTS
	DC.W	$0000
SetAutoMenuStrip:
	DC.W	$4a88
	BNE.S	LAB_007B
	RTS
LAB_007B:
	BSR.S	SetSystemRequesterScreen
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	AutoMenu_PTR,A1
	MOVEA.L	_IntuitionBase,A6
	JSR	-264(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
GetWindowSignal:
	MOVEM.L	D1/A0,-(A7)
	DC.W	$4a88
	BEQ.S	LAB_007E
	JSR	GetWindowUP
	MOVEQ	#0,D1
	DC.W	$4a88
	BEQ.S	LAB_007E
	MOVE.B	15(A0),D1
	MOVEQ	#1,D0
	LSL.L	D1,D0
LAB_007D:
	MOVEM.L	(A7)+,D1/A0
	RTS
	DC.W	$0000
LAB_007E:
	MOVEQ	#0,D0
	BRA.S	LAB_007D
ResetWinMsgCounter:
	CLR.L	ResetWinMsgCounter_ADR
	RTS
ProcessWindowMsg:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$4a88
	BEQ.S	LAB_0081
	JSR	GetWindowUP
	MOVEM.L	A1,-(A7)
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-372(A6)
	MOVEA.L	(A7)+,A1
	TST.L	D0
	BEQ.S	LAB_0081
	ADDQ.L	#1,ResetWinMsgCounter_ADR
	MOVEA.L	D0,A0
	SUBA.L	A2,A2
	JSR	AnalyzeMsg
LAB_0081:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
CollectAutoSignalMask:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#0,D1
	BSR.W	NGWGetSignalMask
	OR.L	D0,D1
	MOVE.L	D1,ASIGMASK
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ASIGMASK:
	ORI.B	#$00,D0
GetAutoSignalMask:
	MOVE.L	ASIGMASK(PC),D0
	RTS
	DC.W	$0000
ShowDspStatus:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$53593835,D0
	MOVE.W	LAB_11E3,D2
	BSR.W	NGODrawDecWord4Char
	MOVE.L	#$53593831,D0
	MOVE.W	LAB_11E5,D2
	BSR.W	NGODrawDecWord3Char
	MOVE.L	#$53593532,D0
	MOVE.L	DSP_ECHO_LEN,D2
	BSR.W	NGODrawDecWord3Char
	MOVE.L	#$53593632,D0
	MOVEQ	#0,D2
	MOVE.W	DELAYINFO,D2
	BSR.W	NGODrawDecWord3Char
	MOVE.L	#$53593732,D0
	MOVE.W	HallInfo,D2
	BSR.W	NGODrawDecWord3Char
	BSR.S	DrawDspEchoLvl
	BSR.S	DrawDspDelayLvl
	BSR.S	DrawDspHallLvl
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
DrawDspEchoLvl:
	MOVEM.L	D0-D2,-(A7)
	MOVE.L	DSP_ECHO_LVL,D0
	BSR.W	LnLevelToWord
	MULU	#$0064,D0
	LSR.L	#8,D0
	CMPI.L	#$00000004,DSPFX
	BEQ.S	LAB_0087
	CMPI.L	#$00000003,DSPFX
	BCS.S	LAB_0087
	BSR.S	InvertLnWord
LAB_0087:
	MOVEQ	#0,D2
	MOVE.W	D0,D2
	MOVE.L	#$53593536,D0
	BSR.W	NGODrawFloatValue
	MOVEM.L	(A7)+,D0-D2
	RTS
	DC.W	$0000
DrawDspDelayLvl:
	MOVEM.L	D0-D2,-(A7)
	MOVEQ	#0,D0
	MOVE.W	LAB_118E,D0
	BSR.W	LnLevelToWord
	MULU	#$0064,D0
	LSR.L	#8,D0
	MOVE.L	D0,D2
	MOVE.L	#$53593636,D0
	BSR.W	NGODrawFloatValue
	MOVEM.L	(A7)+,D0-D2
	RTS
DrawDspHallLvl:
	MOVEM.L	D0-D2,-(A7)
	MOVEQ	#0,D0
	MOVE.W	LAB_1190+2,D0
	BSR.W	LnLevelToWord
	MULU	#$0064,D0
	LSR.L	#8,D0
	BSR.S	InvertLnWord
	MOVEQ	#0,D2
	MOVE.W	D0,D2
	MOVE.L	#$53593736,D0
	BSR.W	NGODrawFloatValue
	MOVEM.L	(A7)+,D0-D2
	RTS
InvertLnWord:
	MOVEM.L	D2,-(A7)
	MOVE.L	#$00002710,D2
	LSR.W	#1,D0
	SUB.W	D0,D2
	MOVE.W	D2,D0
	MOVEM.L	(A7)+,D2
	RTS
	DC.W	$0000
DrawNECache:
	DC.W	$ffff
	DC.W	$ffff
ClrDrawNECache:
	MOVE.L	#$ffffffff,DrawNECache
	RTS
DrawNoteEvent:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	CheckNoteType
	LEA	ENone,A2
	TST.W	D0
	BEQ.S	LAB_008E
	LEA	EKeyOn,A2
	CMPI.W	#$0001,D0
	BEQ.S	LAB_008E
	LEA	ESimpleFX,A2
	CMPI.W	#$0002,D0
	BEQ.S	LAB_008E
	LEA	EVibrato,A2
	SWAP	D0
	CMPI.W	#$0019,D0
	BHI.S	LAB_008F
	SUBQ.W	#1,D0
	BMI.S	LAB_008E
	LEA	EFXList,A2
	DC.W	$2472
	DC.W	$0400
LAB_008E:
	BSR.S	LAB_0090
LAB_008F:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
LAB_0090:
	CMP.W	DrawNECache(PC),D0
	BEQ.S	LAB_0091
	BSR.S	LAB_0092
	MOVE.W	D0,DrawNECache
LAB_0091:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$45453131,D6
	MOVEQ	#0,D7
	MOVEQ	#0,D2
	MOVE.B	1(A0),D2
	MOVEA.L	(A2)+,A3
	JSR	(A3)
	MOVE.L	#$45453231,D6
	MOVEQ	#1,D7
	MOVE.B	3(A0),D2
	MOVEA.L	(A2)+,A3
	JSR	(A3)
	MOVE.L	#$45453331,D6
	MOVEQ	#2,D7
	MOVE.B	2(A0),D2
	MOVEA.L	(A2)+,A3
	JSR	(A3)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0092:
	MOVEM.L	D0/A0-A2,-(A7)
	LEA	12(A2),A2
	MOVEA.L	A2,A0
	MOVE.L	#$45453032,D0
	BSR.W	NGODrawText
	JSR	MoveNextString
	CMPI.B	#$a7,(A0)
	BEQ.S	LAB_0093
	MOVE.L	#$45453130,D0
	BSR.W	NGODrawText
LAB_0093:
	JSR	MoveNextString
	MOVE.L	#$45453230,D0
	BSR.W	NGODrawText
	JSR	MoveNextString
	MOVE.L	#$45453330,D0
	BSR.W	NGODrawText
	MOVEM.L	(A7)+,D0/A0-A2
	RTS
	DC.W	$0000
DrawNoteVolume:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	TST.W	D2
	BEQ.S	LAB_0098
	CMPI.B	#$c8,D2
	BHI.S	LAB_0096
	MOVE.L	D6,D0
	BSR.W	EVENTDrawDecByte
LAB_0095:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0096:
	MOVEM.L	D0,-(A7)
	MOVEQ	#0,D0
	MOVE.B	D2,D0
	LEA	PEDSiFx_CONVTAB,A0
	JSR	ProcTabValuetoLong
	LEA	dummy(PC),A0
	MOVE.L	D0,(A0)
	MOVE.L	D0,D3
	MOVEM.L	(A7)+,D0
	CMPI.L	#$ffffffff,D3
	BNE.S	LAB_0097
	MOVE.L	D6,D0
	BSR.W	EVENTDrawDecByte
	BRA.S	LAB_0095
LAB_0097:
	LEA	LAB_0099+1(PC),A0
	MOVE.L	D6,D0
	BSR.W	NGODrawText
	BRA.S	LAB_0095
LAB_0098:
	MOVE.L	D6,D0
	BSR.W	EVENTDrawDecByte
	BRA.S	LAB_0095
LAB_0099:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
dummy:
	ORI.B	#$00,D0
	DC.W	$0000
DrawNotePitch:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CMPI.B	#$ff,D2
	BEQ.S	LAB_009D
	ANDI.L	#$000000ff,D2
	DIVU	LAB_119F,D2
	MOVE.W	D2,D3
	ANDI.B	#$07,D3
	ADDI.B	#$30,D3
	SWAP	D2
	LSL.W	#1,D2
	LEA	FinalNote_TXT,A0
	LEA	NoteName_TAB,A2
	MOVE.W	0(A2,D2.W),D4
	MOVE.W	D4,(A0)
	MOVE.B	D3,2(A0)
	MOVE.B	3(A0),D5
	CLR.B	3(A0)
	MOVE.L	D6,D0
	BSR.W	NGODrawText
	MOVE.B	D5,3(A0)
LAB_009C:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_009D:
	LEA	NoNote_TXT,A0
	MOVE.L	D6,D0
	BSR.W	NGODrawText
	BRA.S	LAB_009C
DrawCVIdXY:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	D2,D0
	EXT.L	D0
	LEA	LAB_1383+2,A0
	JSR	ProcTabLongtoLong
	MOVE.L	CVId_ill,CVId_TXT
	TST.L	D0
	BMI.S	LAB_009F
	MOVE.L	D0,CVId_TXT
LAB_009F:
	LEA	CVId_TXT,A0
	MOVE.L	D6,D0
	BSR.W	NGODrawText
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
EVENTDrawDecByte:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	ANDI.L	#$000000ff,D2
	MOVE.L	D6,D0
	BSR.S	NGODrawDecWord6Char
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
NGODrawDecWord6Char:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	EXG	D0,D2
	LEA	DecWordSave,A0
	ANDI.L	#$0000ffff,D0
	JSR	ConvertToDecWord
	DC.W	$2639
	DC.L	LAB_0835+1
	MOVE.L	D3,LAB_00A3
	MOVE.L	D2,D0
	LEA	LAB_00A2(PC),A0
	BSR.W	NGODrawText
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_00A2:
	MOVE.L	-(A0),D0
LAB_00A3:
	MOVE.L	11565(A5),-(A6)
	DC.W	$0000
DrawSignDecByte6:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	D6,D0
	BSR.W	NGODrawSignByte3Char
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawDecByte6:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.B	D2,D0
	JSR	ConvertToDecByte
	DC.W	$23f9
	DC.L	LAB_10C4+1
	DC.L	LAB_1386
	LEA	ValueText6+1,A0
	CLR.B	LAB_1389+1
	MOVE.L	D6,D0
	BSR.W	NGODrawText
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
EDrawNone:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	None_TXT,A0
	MOVE.L	D6,D0
	BSR.W	NGODrawText
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
EDrawFilterID:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	EFilter_Off+1(PC),A0
	TST.B	D2
	BEQ.W	LAB_00A9
	LEA	EFilter_LP+2(PC),A0
	SUBQ.W	#1,D2
	BEQ.W	LAB_00A9
	LEA	EFilter_HP+1(PC),A0
	SUBQ.W	#1,D2
	BEQ.W	LAB_00A9
	LEA	EFilter_BP(PC),A0
	SUBQ.W	#1,D2
	BEQ.W	LAB_00A9
	LEA	EFilter_NP+1(PC),A0
	SUBQ.W	#1,D2
	BEQ.S	LAB_00A9
	LEA	EFilter_Off2+3(PC),A0
	SUBQ.W	#1,D2
	BEQ.S	LAB_00A9
	LEA	EFilter_LP2(PC),A0
	SUBQ.W	#1,D2
	BEQ.S	LAB_00A9
	LEA	EFilter_HP2+1(PC),A0
	SUBQ.W	#1,D2
	BEQ.S	LAB_00A9
	LEA	EFilter_BP2(PC),A0
	SUBQ.W	#1,D2
	BEQ.S	LAB_00A9
	LEA	EFilter_NP2+1(PC),A0
	SUBQ.W	#1,D2
	BEQ.S	LAB_00A9
	LEA	EFilter_Off3+3(PC),A0
	SUBQ.W	#1,D2
	BEQ.S	LAB_00A9
	LEA	EFilter_LP3+2(PC),A0
	SUBQ.W	#1,D2
	BEQ.S	LAB_00A9
	LEA	EFilter_HP3+1(PC),A0
	SUBQ.W	#1,D2
	BEQ.S	LAB_00A9
	LEA	EFilter_BP3(PC),A0
	SUBQ.W	#1,D2
	BEQ.S	LAB_00A9
	LEA	EFilter_NP3+1(PC),A0
	SUBQ.W	#1,D2
	BEQ.S	LAB_00A9
	LEA	EFilter_Off4+3(PC),A0
	SUBQ.W	#1,D2
	BEQ.S	LAB_00A9
	LEA	EFilter_LP4(PC),A0
	SUBQ.W	#1,D2
	BEQ.S	LAB_00A9
	LEA	EFilter_HP4+1(PC),A0
	SUBQ.W	#1,D2
	BEQ.S	LAB_00A9
	LEA	EFilter_BP4(PC),A0
	SUBQ.W	#1,D2
	BEQ.S	LAB_00A9
	LEA	EFilter_NP4+1(PC),A0
	SUBQ.W	#1,D2
	BEQ.S	LAB_00A9
LAB_00A8:
	LEA	EFilter_Ill(PC),A0
LAB_00A9:
	CMPI.B	#$2d,(A0)
	BEQ.S	LAB_00A8
	MOVE.L	D6,D0
	BSR.W	NGODrawText
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
EFilter_Ill:
	DC.W	$496c
	DC.W	$6c65
	BEQ.S	LAB_00BA+2
EFilter_Off:
	ORI.W	#$6820,D3
	DC.W	$4f66
EFilter_LP:
	BNE.W	LAB_03B5+4
	MOVE.L	-(A0),D0
	DC.W	$4c50
EFilter_HP:
	ORI.W	#$6820,D3
	MOVEA.L	A0,A0
	ADDQ.B	#8,D0
EFilter_BP:
	DC.W	$4368
	MOVE.L	-(A0),D0
	CLR.W	(A0)
EFilter_NP:
	DC.W	$002d
	DC.W	$4368
	MOVE.L	-(A0),D0
EFilter_Off2:
	MOVE.L	87(A5),-(A6)
	BCS.S	LAB_00C1
	DC.W	$4f66
	DC.W	$6600
EFilter_LP2:
	SUBQ.W	#3,-(A5)
	MOVEQ	#32,D2
	DC.W	$4c50
EFilter_HP2:
	ORI.W	#$6574,(A7)
	MOVEA.L	A0,A0
	ADDQ.B	#8,D0
EFilter_BP2:
	SUBQ.W	#3,-(A5)
	MOVEQ	#32,D2
	CLR.W	(A0)
EFilter_NP2:
	DC.W	$002d
	SUBQ.W	#3,-(A5)
	MOVEQ	#32,D2
EFilter_Off3:
	MOVE.L	68(A5),-(A6)
	MOVEQ	#121,D1
	DC.W	$4f66
EFilter_LP3:
	BNE.W	LAB_03C5+4
	DC.W	$7920
	DC.W	$4c50
EFilter_HP3:
	ORI.W	#$7279,D4
	MOVEA.L	A0,A0
	ADDQ.B	#8,D0
EFilter_BP3:
	DC.W	$4472
	DC.W	$7920
	CLR.W	(A0)
EFilter_NP3:
	DC.W	$002d
	DC.W	$4472
	DC.W	$7920
EFilter_Off4:
LAB_00BA:
	MOVE.L	80(A5),-(A6)
	DC.W	$7374
	DC.W	$4f66
	DC.W	$6600
EFilter_LP4:
	ADDQ.W	#8,29556(A7)
	DC.W	$4c50
EFilter_HP4:
	ORI.W	#$6f73,(A0)
	MOVEQ	#72,D2
	ADDQ.B	#8,D0
EFilter_BP4:
	ADDQ.W	#8,29556(A7)
	CLR.W	(A0)
EFilter_NP4:
	DC.W	$002d
	ADDQ.W	#8,29556(A7)
	MOVE.L	0(A5),-(A6)
	DC.W	$0000
DrawFx8V:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	EXT.W	D2
	MOVE.W	D2,D0
LAB_00C1:
	MULS	#$0186,D0
	MOVEQ	#6,D3
	ASR.L	D3,D0
	ANDI.L	#$0000ffff,D0
	MOVE.L	D0,D2
	MOVE.L	D6,D0
	BSR.W	NGODrawFloatValue
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawEVDelayLvl:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	EXT.W	D2
	MOVE.W	D2,D0
	BSR.W	LnLevelToWord
	MULS	#$0064,D0
	DIVS	#$0100,D0
	ANDI.L	#$0000ffff,D0
	MOVE.L	D0,D2
	MOVE.L	D6,D0
	BSR.W	NGODrawFloatValue
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawEVEchoLvl:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	EXT.W	D2
	MOVE.W	D2,D0
	BSR.W	LnLevelToWord
	MULS	#$0064,D0
	DIVS	#$0100,D0
	DC.W	$0c3a
	DC.W	$0003
	BCHG	D0,26116(A6)
	BSR.W	InvertLnWord
	ANDI.L	#$0000ffff,D0
	MOVE.L	D0,D2
	MOVE.L	D6,D0
	BSR.W	NGODrawFloatValue
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawEVCV:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	EXT.W	D2
	MOVE.W	D2,D0
	MULS	#$0064,D0
	ANDI.L	#$0000ffff,D0
	MOVE.L	D0,D2
	MOVE.L	D6,D0
	BSR.W	NGODrawFloatValue
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawFx11V:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	EXT.W	D2
	MOVE.W	D2,D0
	ASL.W	#5,D0
	MULS	#$0064,D0
	DIVS	#$0100,D0
	ANDI.L	#$0000ffff,D0
	MOVE.L	D0,D2
	MOVE.L	D6,D0
	BSR.W	NGODrawFloatValue
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
DrawFx12V:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	EXT.W	D2
	MOVE.W	D2,D0
	MULS	#$2710,D0
	DIVS	#$0400,D0
	ANDI.L	#$0000ffff,D0
	MOVE.L	D0,D2
	MOVE.L	D6,D0
	BSR.W	NGODrawFloatValue2
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawPerHexXY:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	ANDI.W	#$00ff,D2
	MOVE.W	D2,D0
	MULU	#$2710,D0
	DIVU	#$0100,D0
	ANDI.L	#$0000ffff,D0
	MOVE.L	D0,D2
	MOVE.L	D6,D0
	BSR.W	NGODrawFloatValue
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
DrawFromInstr:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	TST.B	FromPi_FLAG
	BEQ.S	LAB_00C9
	CLR.B	FromPi_FLAG
	BSR.W	EVENTDrawDecByte
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_00C9:
	MOVE.L	D6,D0
	BSR.W	NGODrawText
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawOffText:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	DrawFromPi_TXT2+1,A0
	MOVE.L	D6,D0
	BSR.W	NGODrawText
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
DrawFromPi:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.B	FromPi_FLAG
	LEA	DrawFromPi_TXT2+1,A0
	CMPI.B	#$ff,D2
	BEQ.S	LAB_00CC
	LEA	DrawFromPi_TXT+1,A0
	MOVE.B	#$ff,FromPi_FLAG
LAB_00CC:
	MOVE.L	D6,D0
	BSR.W	NGODrawText
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawDecPlus1:
	MOVEM.L	D2,-(A7)
	ADDQ.W	#1,D2
	BSR.W	EVENTDrawDecByte
	MOVEM.L	(A7)+,D2
	RTS
DrawDspFxXY:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.B	D2,EVActDspFx
	TST.B	D2
	BMI.S	LAB_00D0
	CMPI.B	#$05,D2
	BHI.S	LAB_00D0
	LEA	DspTextList,A0
LAB_00CF:
	SUBQ.B	#1,D2
	BMI.S	LAB_00D1
	JSR	MoveNextString
	BRA.S	LAB_00CF
LAB_00D0:
	JSR	WarnFlash
	LEA	DspTextIll_TXT+1,A0
LAB_00D1:
	MOVE.L	D6,D0
	BSR.W	NGODrawText
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
EVActDspFx:
	DC.W	$0000
DrawLnDecByteXY:
	MOVEM.L	D0-D2,-(A7)
	EXG	D0,D2
	BSR.S	LnLevelToByte
	EXG	D0,D2
	BSR.W	EVENTDrawDecByte
	MOVEM.L	(A7)+,D0-D2
	RTS
LnLevelToByte:
	CMPI.B	#$20,D0
	BLS.S	LAB_00D5
	MOVEQ	#0,D0
	RTS
	DC.W	$0000
LAB_00D5:
	MOVEM.L	D1,-(A7)
	MOVE.L	#$000000c8,D1
LAB_00D6:
	LSR.W	#1,D1
	SUBQ.B	#1,D0
	BPL.S	LAB_00D6
	MOVE.L	D1,D0
	MOVEM.L	(A7)+,D1
	RTS
LnLevelToWord:
	CMPI.B	#$20,D0
	BLS.S	LAB_00D8
	MOVEQ	#0,D0
	RTS
	DC.W	$0000
LAB_00D8:
	MOVEM.L	D1,-(A7)
	MOVE.L	#$0000c800,D1
LAB_00D9:
	LSR.L	#1,D1
	SUBQ.B	#1,D0
	BPL.S	LAB_00D9
	MOVE.L	D1,D0
	MOVEM.L	(A7)+,D1
	RTS
DrawFloatValueXY:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	GFX_Move
	MOVE.L	D2,D0
	BSR.S	DrawFloatValue
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawFloatValue:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	DecWordSave,A0
	JSR	ConvertToDecWord
	MOVE.W	3(A0),D3
	MOVE.B	#$2e,3(A0)
	MOVE.W	D3,4(A0)
	TST.W	D2
	BPL.S	LAB_00DC
	MOVE.B	#$2d,(A0)
LAB_00DC:
	CMPI.B	#$20,4(A0)
	BNE.S	LAB_00DD
	MOVE.B	#$30,4(A0)
LAB_00DD:
	LEA	DecWordSave,A0
	MOVEQ	#6,D0
	MOVEA.L	_GraphicsBase,A6
	JSR	-60(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
OctaveDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	1(A1),D0
	TST.B	D0
	BLS.S	OctaveDown_X
	SUB.B	LAB_119F+1,D0
	BMI.S	OctaveDown_X
	TST.B	D0
	BCS.S	OctaveDown_X
	MOVE.B	D0,1(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
OctaveDown_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
OctaveUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	1(A1),D0
	CMPI.B	#$54,D0
	BCC.S	OctaveUp_X
	ADD.B	LAB_119F+1,D0
	CMPI.B	#$54,D0
	BCC.S	OctaveUp_X
	MOVE.B	D0,1(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
OctaveUp_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PitchUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A0
	BSR.W	PitchUpNote
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PitchDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A0
	BSR.W	PitchDownNote
	BSR.W	DrawEventStatus
	BSR.W	PatEdDrawActLine
PitchDown_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetNoteInstr:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	JSR	GetActualInstrNum
	MOVE.B	D0,3(A1)
	BSR.W	DrawEventStatus
	BSR.W	PatEdDrawActLine
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NoteInstrDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	3(A1),D0
	BSR.W	ProcessInstrDown
	MOVE.B	D0,3(A1)
	BSR.W	DrawEventStatus
	BSR.W	PatEdDrawActLine
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NoteInstrUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	3(A1),D0
	BSR.W	ProcessInstrUp
	MOVE.B	D0,3(A1)
	BSR.W	DrawEventStatus
	BSR.W	PatEdDrawActLine
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
FXPitchDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	2(A1),D0
	BEQ.S	FXSetPitchDown
	CMPI.B	#$f6,D0
	BEQ.S	FXNextPitchDown
	CMPI.B	#$f4,D0
	BEQ.S	FXNextPitchDown
	CMPI.B	#$f7,D0
	BEQ.S	FXPitchDownSetZero
	CMPI.B	#$f5,D0
	BEQ.S	FXPitchDownDown
	CMPI.B	#$f3,D0
	BEQ.S	FXPitchDownDown
	CMPI.B	#$f2,D0
	BEQ.S	FXPitchDown_X
FXSetPitchDown:
	MOVE.B	#$f6,D0
	BRA.S	FXPitchDown_X
FXPitchDownDown:
	ADDQ.B	#2,D0
	BRA.S	FXPitchDown_X
FXPitchDownSetZero:
	CLR.B	D0
	BRA.S	FXPitchDown_X
FXNextPitchDown:
	SUBQ.B	#2,D0
FXPitchDown_X:
	MOVE.B	D0,2(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
FXPitchUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	2(A1),D0
	BEQ.S	FXSetPitchUp
	CMPI.B	#$f7,D0
	BEQ.S	FXNextPitchUp
	CMPI.B	#$f5,D0
	BEQ.S	FXNextPitchUp
	CMPI.B	#$f6,D0
	BEQ.S	FXPitchUpSetZero
	CMPI.B	#$f4,D0
	BEQ.S	FXPitchDownUp
	CMPI.B	#$f2,D0
	BEQ.S	FXPitchDownUp
	CMPI.B	#$f3,D0
	BEQ.S	FXPitchUp_X
FXSetPitchUp:
	MOVE.B	#$f7,D0
	BRA.S	FXPitchUp_X
FXPitchDownUp:
	ADDQ.B	#2,D0
	BRA.S	FXPitchUp_X
FXPitchUpSetZero:
	CLR.B	D0
	BRA.S	FXPitchUp_X
FXNextPitchUp:
	SUBQ.B	#2,D0
FXPitchUp_X:
	MOVE.B	D0,2(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetKeyOff:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualPattEd
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A0
	BSR.W	FxClrNote_Whole
	MOVE.B	#$fb,2(A0)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
FXSetPitch:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$f8,2(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
SetStopSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A0
	BSR.W	FxClrNote_Whole
	MOVE.B	#$fe,2(A0)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetContSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A0
	BSR.W	FxClrNote_Whole
	MOVE.B	#$fd,2(A0)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SpeedFXDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$fa,2(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SpeedFXUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$f9,2(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetFxFilter:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	SetFxClrVol
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	CLR.L	(A1)
	MOVE.B	#$17,(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetFxPlayFrom:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	SetFxClrVol
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$05,(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetFxFromP:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	SetFxClrVol
LAB_00FD:
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$06,(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetFxTrem:
	MOVEM.L	D0-D7/A0-A6,-(A7)
LAB_00FF:
	BSR.W	BackupPattern
	BSR.W	SetFxClrAll
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$0d,(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
LAB_0100:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetFxVibrato:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	SetFxClrAll
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$0c,(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
LAB_0102:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetFxSampleVib:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	SetFxClrAll
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$0e,(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
LAB_0104:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetFxPSlideTo:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	SetFxClrVol
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$0f,(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
LAB_0106:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetFxRetrig:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.S	SetFxClrAll
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$10,(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetFxVFadeIn:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	GetActualNotePtr
	CLR.L	(A0)
	MOVE.B	#$11,(A0)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetFxClrAll:
	MOVEM.L	D0/A0,-(A7)
	BSR.W	GetActualNotePtr
	BSR.W	CheckNoteType
LAB_010A:
	CMPI.W	#$0003,D0
	BEQ.S	SetFxClrAll_X
	CLR.L	(A0)
SetFxClrAll_X:
	MOVEM.L	(A7)+,D0/A0
	RTS
SetFxClrNote:
	MOVE.L	#FxClrNote_Whole,FxClrNote
	BRA.S	DoFxClrNote
SetFxClrVol:
	MOVE.L	#FxClrNote_Vol,FxClrNote
	BRA.S	DoFxClrNote
	NOP
DoFxClrNote:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualNotePtr
	BSR.W	CheckNoteType
	TST.W	D0
	BEQ.S	SetFxClrNote_X
	CMPI.W	#$0003,D0
	BEQ.S	SetFxClrNote_X
	MOVEA.L	FxClrNote(PC),A1
	JSR	(A1)
SetFxClrNote_X:
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
FxClrNote:
	DC.L	FxClrNote_Whole
FxClrNote_Whole:
	MOVE.L	#$00ff0000,(A0)
	RTS
FxClrNote_Vol:
	CLR.B	2(A0)
	RTS
SetFxSetFromAdd:
LAB_0113:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$07,(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
LAB_0115:
	RTS
SetFxFromAdd:
LAB_0116:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$08,(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetFxSetSpeed:
LAB_0118:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$09,(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetFxCVolAdd:
LAB_011A:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	SetFxClrAll
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$14,(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetFxCVol:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	SetFxClrAll
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$13,(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetFxSetADDPITCH:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$0a,(A1)
	BSR.W	PatEdDrawActLine
LAB_011E:
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetFxSetADDHALVTONE:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$12,(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
LAB_0120:
	RTS
SetFxSetADDVOL:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$0b,(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetFxDspOn:
LAB_0122:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$18,(A1)
	MOVE.L	DSPFX,D0
	MOVE.B	D0,1(A1)
	MOVE.L	DSP_ECHO_LVL,D0
	MOVE.B	D0,3(A1)
LAB_0124:
	MOVE.L	DSP_ECHO_LEN,D0
	MOVE.B	D0,2(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DeactivateDelay:
	BCLR	#0,POSTDSP_FLAG+2
	BSR.W	SetPostDsp
	RTS
SetDspDelay:
LAB_0126:
	BSET	#0,POSTDSP_FLAG+2
	MOVE.L	#PrepPostDsp,POSTDSP
	RTS
SetDspCrossDelay:
	BSET	#0,POSTDSP_FLAG+2
	MOVE.L	#PrepPostDsp,POSTDSP
	RTS
SetFxDspDelay:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
LAB_012A:
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$19,(A1)
	MOVEQ	#1,D0
	BTST	#0,POSTDSP_FLAG+2
	BNE.S	SetFxDelayOn
	MOVEQ	#0,D0
SetFxDelayOn:
	MOVE.B	D0,1(A1)
	MOVE.W	LAB_118E,D0
	MOVE.B	D0,3(A1)
LAB_012C:
	MOVE.W	DELAYINFO,D0
	MOVE.B	D0,2(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetVolSlideUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
LAB_012E:
	MOVEA.L	8(A0),A1
	MOVE.B	#$01,(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetVolSlideDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
LAB_0130:
	MOVE.B	#$02,(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetPSlideUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$03,(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetPSlideDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$04,(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetNoneFX:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	CLR.B	(A1)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
EditVolume:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
LAB_0135:
	BSR.W	GetActualPattEd
	BSR.W	CalcActNoteData
	MOVEA.L	A0,A2
	MOVEA.L	8(A2),A3
EditVolume_REP:
	MOVEQ	#0,D0
	MOVE.B	2(A3),D0
	LEA	EditBuf(PC),A0
	MOVE.L	D0,(A0)
	LEA	EditVolume_TXT+1,A1
	MOVEQ	#1,D1
	MOVEQ	#100,D2
LAB_0137:
	JSR	ReqMinMaxLong
	TST.W	D0
	BEQ.S	EditVolume_X
	TST.L	(A0)
	BEQ.S	EditVolume_REP
	MOVE.L	(A0),D0
	MOVE.B	D0,2(A3)
	BSR.W	GetActualPattEd
	BSR.W	PatEdDrawActLine
EditVolume_X:
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
EditBuf:
	ORI.B	#$00,D0
	DC.W	$0000
EditPitch:
LAB_013A:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	GetActualPattEd
	BSR.W	CalcActNoteData
	MOVEA.L	A0,A2
	MOVEA.L	8(A2),A3
EditPitch_REP:
	MOVEQ	#0,D0
	MOVE.B	1(A3),D0
	LEA	EditBuf(PC),A0
	MOVE.L	D0,(A0)
	LEA	EditPitch_TXT+3,A1
	MOVEQ	#84,D1
	JSR	NaturalLongRequestZ
	TST.W	D0
	BEQ.S	EditPitch_X
	MOVE.L	(A0),D0
	MOVE.B	D0,1(A3)
	BSR.W	GetActualPattEd
	BSR.W	PatEdDrawActLine
EditPitch_X:
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
VolumeDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
LAB_013F:
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A0
	BSR.W	VolDownNote
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetVolume:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	GetActNote
	MOVE.B	#$01,2(A0)
LAB_0141:
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetActNoteVolume:
	MOVEM.L	A0,-(A7)
	JSR	GetActNote
	MOVE.B	D0,2(A0)
	MOVEA.L	(A7)+,A0
	RTS
SetActNotePitch:
	MOVEM.L	D0-D7/A0-A6,-(A7)
LAB_0144:
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	MULU	#$0054,D0
	DIVU	#$0064,D0
	MOVE.B	D0,1(A1)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
VolumeUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
LAB_0146:
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A0
	CMPI.L	#$00ff0000,(A0)
	BEQ.S	VolumeUp_SETCOM
	BSR.W	VolUpNote
VolumeUp_C:
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
VolumeUp_SETCOM:
	MOVE.B	#$01,2(A0)
	BRA.S	VolumeUp_C
NOTELEN:
LAB_0149:
	ORI.B	#$0a,D0
MoveFirstPattern:
	MOVEM.L	D0,-(A7)
	MOVEQ	#0,D0
	BSR.W	SetPatternNum
	BSR.W	PattedUpdateDisp
	BSR.W	UpdatePosList
	BSR.W	DrawEventStatusQ
	MOVEM.L	(A7)+,D0
	RTS
MoveLastPattern:
	MOVEM.L	D0,-(A7)
	MOVE.L	VEX_PattNumb,D0
	SUBQ.W	#1,D0
	BSR.W	SetPatternNum
	BSR.W	PattedUpdateDisp
	BSR.W	UpdatePosList
	BSR.W	DrawEventStatusQ
	MOVEM.L	(A7)+,D0
	RTS
	DC.W	$0000
MoveFirstPosition:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_SONG,A1
	MOVEA.L	42(A1),A1
	BSR.W	GetActualPattEd
	MOVE.W	(A1),114(A0)
	BSR.W	PosToPatNum
	BSR.W	PattedUpdateDisp
	BSR.W	UpdatePosList
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
GotoFirstPosition:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_SONG,A1
	MOVEA.L	42(A1),A1
LAB_014F:
	BSR.W	GetActualPattEd
	MOVE.W	(A1),114(A0)
	BSR.W	PosToPatNum
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
MoveLastPosition:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_SONG,A1
	MOVEA.L	42(A1),A1
	BSR.W	GetActualPattEd
	MOVE.W	(A1),D0
	ADD.W	2(A1),D0
	SUBQ.W	#1,D0
	MOVE.W	D0,114(A0)
	BSR.W	PosToPatNum
	BSR.W	PattedUpdateDisp
	BSR.W	UpdatePosList
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
MovePosUp:
	MOVEM.L	A0,-(A7)
	BSR.W	GetActualPattEd
	CMPI.W	#$01ff,114(A0)
LAB_0152:
	BCS.S	LAB_0153
	MOVE.W	#$01ff,114(A0)
	BRA.S	LAB_0154
LAB_0153:
	ADDQ.W	#1,114(A0)
LAB_0154:
	BSR.S	PosToPatNum
	MOVEA.L	(A7)+,A0
	RTS
	DC.W	$0000
MovePosDown:
	MOVEM.L	A0,-(A7)
	BSR.W	GetActualPattEd
	TST.W	114(A0)
	BEQ.S	LAB_0157
	SUBQ.W	#1,114(A0)
LAB_0156:
	BSR.S	PosToPatNum
LAB_0157:
	MOVEA.L	(A7)+,A0
	RTS
PosNumUp:
	BSR.W	HideBlockRange
	BSR.S	MovePosUp
	CMPI.B	#$ff,MACROPROCESS+2
	BEQ.S	LAB_0159
	BSR.W	PattedUpdateDisp
	BSR.W	UpdatePosList
LAB_0159:
	RTS
	DC.W	$0000
PosNumDown:
	BSR.W	HideBlockRange
	BSR.S	MovePosDown
LAB_015B:
	CMPI.B	#$ff,MACROPROCESS+2
	BEQ.S	LAB_015C
	BSR.W	PattedUpdateDisp
	BSR.W	UpdatePosList
LAB_015C:
	RTS
PosToPatNum:
	MOVEM.L	D0/A0,-(A7)
	BSR.W	GetActualPattEd
	MOVE.W	114(A0),D0
	BSR.S	SetPositonNum
	MOVEM.L	(A7)+,D0/A0
	RTS
SetPositonNum:
LAB_015E:
	MOVEM.L	D0/A0-A1,-(A7)
	CMPI.W	#$01ff,D0
	BHI.S	LAB_0160
	BSR.W	GetActualPattEd
	MOVEA.L	20(A0),A1
	MULU	#$0020,D0
	LEA	0(A1,D0.L),A1
	MOVE.L	A1,24(A0)
	MOVEA.L	A1,A0
	JSR	SetPatHeadPTR
LAB_0160:
	MOVEM.L	(A7)+,D0/A0-A1
	RTS
SetPatternNum:
	MOVEM.L	A0,-(A7)
	BSR.W	GetActualPattEd
	MOVEA.L	24(A0),A0
	MOVE.W	D0,8(A0)
	JSR	SetPatHeadPTR
	MOVEA.L	(A7)+,A0
	RTS
KbdCrsrUp:
LAB_0163:
	MOVE.L	#$58584355,XXMsg
	BSR.W	NGRecordXXMsg
CrsrUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	HideBlockRange
	BSR.W	GetActualPattEd
	CMPI.W	#$ffff,Shift_KEY+2
	BNE.S	LAB_0166
	BSR.W	PattEdMoveFirstLine
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0166:
	BSR.W	PattEdMovePrevLine
	BSR.W	ShowBlockRange
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
KbdCrsrDown:
	MOVE.L	#$58584344,XXMsg
	BSR.W	NGRecordXXMsg
CrsrDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	HideBlockRange
LAB_0169:
	CMPI.W	#$ffff,Shift_KEY+2
	BNE.S	LAB_016A
	BSR.W	PattEdMoveLastLine
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_016A:
	BSR.W	GetActualPattEd
	BSR.W	PattEdMoveNextLine
	BSR.W	ShowBlockRange
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
KbdCrsrRight:
	MOVE.L	#$58584352,XXMsg
	BSR.W	NGRecordXXMsg
CrsrRight:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	HideBlockRange
	CMPI.W	#$ffff,Shift_KEY+2
	BNE.S	LAB_016E
	BSR.W	PattEdMoveLastRow
	MOVEM.L	(A7)+,D0-D7/A0-A6
LAB_016D:
	RTS
LAB_016E:
	BSR.W	GetActualPattEd
	BSR.W	PattEdMoveNextVoice
	BSR.W	ShowBlockRange
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
KbdCrsrLeft:
	MOVE.L	#$5858434c,XXMsg
LAB_0170:
	BSR.W	NGRecordXXMsg
CrsrLeft:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	HideBlockRange
	CMPI.W	#$ffff,Shift_KEY+2
	BNE.S	LAB_0172
	BSR.W	PattEdMoveFirstRow
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0172:
	BSR.W	GetActualPattEd
	BSR.W	PattEdMovePrevVoice
	BSR.W	ShowBlockRange
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
CrsrT:
	BSR.W	HideBlockRange
	BSR.W	PattEdMoveFirstLine
	BSR.W	DrawEventStatus
	BRA.W	PattedUpdateDisp
CrsrTL:
	BSR.W	HideBlockRange
	BSR.W	PattEdMoveFirstLine
	BSR.W	PattEdMoveFirstRow
	BSR.W	DrawEventStatus
LAB_0175:
	BRA.W	PattedUpdateDisp
CrsrB:
	BSR.W	HideBlockRange
	BSR.W	PattEdMoveLastLine
	BSR.W	DrawEventStatus
	BRA.W	PattedUpdateDisp
CrsrBR:
	BSR.W	HideBlockRange
	BSR.W	PattEdMoveLastLine
	BSR.W	PattEdMoveLastRow
	BSR.W	DrawEventStatus
	BRA.W	PattedUpdateDisp
FastKeyboard:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	CheckInstrument
	TST.W	D0
	BNE.S	FastKeyboard_X
	JSR	IMSGInfo
	MOVE.B	D4,D0
	JSR	GetActualInstrument
	MOVEA.L	A0,A1
	JSR	GetActualInstrName
	MOVEA.L	A0,A2
	LEA	Standard_KEYTRANS,A0
	JSR	PlayKeyNote
	CMPI.B	#$01,132(A2)
	BNE.S	FastKeyboard_X
	BTST	#2,142(A2)
	BNE.S	FastKeyboard_X
	LEA	256(A2),A2
	CMPI.B	#$02,132(A2)
	BNE.S	FastKeyboard_X
	LEA	64(A1),A1
	MOVE.W	RECORD_STATUS,D7
	CLR.W	RECORD_STATUS
	MOVE.L	KeyboardEditPunch(PC),D6
	TST.L	D6
	BNE.S	LAB_0179
	MOVEQ	#100,D6
LAB_0179:
	MOVE.W	D6,KeyboardPunch
	JSR	PlayKeyNote
	MOVE.W	D7,RECORD_STATUS
	BSR.W	DrawEventStatus
FastKeyboard_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
Freq:
	ORI.B	#$00,D0
	DC.W	$0000
CalcActSongData:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	24(A0),A2
	MOVEA.L	(A2),A3
	MOVEA.L	4(A3),A4
	MOVE.L	A4,4(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
CalcActNoteData:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	CalcActSongData
	MOVEA.L	4(A0),A1
	MOVE.W	32(A0),D0
	ADD.W	60(A0),D0
	MOVE.W	30(A0),D2
	MULU	D2,D0
	MOVE.W	34(A0),D1
	ADD.W	62(A0),D1
	MOVE.W	28(A0),D2
	MULU	D2,D1
	ADD.L	D0,D1
	LEA	0(A1,D1.L),A1
	MOVE.L	A1,ActNoteData
	MOVE.L	A1,8(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ActNoteData:
	ORI.B	#$00,D0
GetFirstDispNoteData:
	MOVEM.L	D0-D7/A1-A6,-(A7)
	BSR.S	CalcActSongData
	MOVEA.L	4(A0),A1
	MOVE.W	32(A0),D0
	MOVE.W	30(A0),D2
	MULU	D2,D0
	MOVE.W	34(A0),D1
	MOVE.W	28(A0),D2
	MULU	D2,D1
	ADD.L	D0,D1
	LEA	0(A1,D1.L),A0
	MOVEM.L	(A7)+,D0-D7/A1-A6
	RTS
	DC.W	$0000
PatSimpleScrollUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualPattEd
	CMPI.W	#$0001,66(A0)
	BLS.S	LAB_0181
	BSR.S	PatEdGetScrollRange
	BSR.W	GetPEDRP+6
	DC.W	$4a89
	BEQ.S	LAB_0181
	MOVEQ	#0,D0
	MOVE.W	FONT_H(PC),D1
	BSR.W	GFX_ScrollRaster
LAB_0181:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PatEdScrollDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	PatEdCrsrOff
	BSR.W	GetActualPattEd
	CMPI.W	#$0001,66(A0)
	BLS.S	LAB_0183
	BSR.S	PatEdGetScrollRange
	BSR.W	GetPEDRP+6
	DC.W	$4a89
	BEQ.S	LAB_0183
	MOVEQ	#0,D0
	MOVE.W	FONT_H(PC),D1
	NEG.W	D1
	BSR.W	GFX_ScrollRaster
LAB_0183:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PatEdGetScrollRange:
	MOVE.W	64(A0),D0
	MOVE.W	66(A0),D1
	BSR.W	PatEdCrsrToPix
	MOVE.W	D0,D4
	MOVE.W	D1,D5
	MOVEQ	#0,D0
	MOVEQ	#0,D1
	BSR.W	PatEdCrsrToPix
	MOVE.W	40(A0),D2
	MOVE.W	D1,D3
	SUBQ.W	#1,D5
	RTS
	DC.W	$0000
CalcDispEdOffsets:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	32(A0),D0
	ADD.W	60(A0),D0
	MOVE.W	34(A0),D1
	ADD.W	62(A0),D1
LAB_0186:
	MOVE.W	30(A0),D2
	MULU	D2,D0
	MOVE.W	28(A0),D2
	MULU	D2,D1
	ADD.L	D1,D0
	MOVE.L	D0,76(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PattEdMoveFirstLine:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetPEDRP+6
	DC.W	$4a89
	BEQ.S	LAB_0188
	BSR.W	PatEdCrsrOff
	BSR.W	PattedUpdateReset
	BSR.W	GetActualPattEd
	CLR.W	34(A0)
	CLR.W	62(A0)
	BSR.W	PattedUpdateDisp
	BSR.W	PatEdCrsrOn
LAB_0188:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PattEdMoveFirstRow:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetPEDRP+6
	DC.W	$4a89
	BEQ.S	LAB_018B
	BSR.W	PatEdCrsrOff
	BSR.W	PattedUpdateReset
	BSR.W	GetActualPattEd
	CLR.W	32(A0)
	CLR.W	60(A0)
	BSR.W	PattedUpdateDisp
	BSR.W	PatEdCrsrOn
LAB_018B:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PattEdMoveLastRow:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetPEDRP+6
	DC.W	$4a89
LAB_018D:
	BEQ.S	LAB_018F
	BSR.W	PatEdCrsrOff
	BSR.W	PattedUpdateReset
	BSR.W	GetActualPattEd
	MOVE.W	18(A0),D0
	MOVE.W	64(A0),D1
	MOVE.W	D1,60(A0)
	SUBQ.W	#1,60(A0)
	SUB.W	D1,D0
	BMI.S	LAB_018E
	MOVE.W	D0,32(A0)
LAB_018E:
	BSR.W	PattedUpdateDisp
	BSR.W	PatEdCrsrOn
LAB_018F:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PattEdMoveLastLine:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetPEDRP+6
	DC.W	$4a89
LAB_0191:
	BEQ.S	LAB_0193
	BSR.W	PatEdCrsrOff
	BSR.W	PattedUpdateReset
	BSR.W	GetActualPattEd
	MOVE.W	14(A0),D2
	CMP.W	66(A0),D2
	BLS.S	LAB_0194
	MOVE.W	66(A0),D0
	MOVE.W	D2,D1
	SUB.W	66(A0),D1
LAB_0192:
	SUBQ.W	#1,D0
	MOVE.W	D0,62(A0)
	MOVE.W	D1,34(A0)
	BSR.W	PattedUpdateDisp
	BSR.W	PatEdCrsrOn
LAB_0193:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0194:
	MOVEQ	#0,D1
	MOVE.W	D2,D0
	BRA.S	LAB_0192
	DC.W	$0000
PattEdMoveToLine:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetPEDRP+6
	DC.W	$4a89
	BEQ.S	PattEdMoveToLine_X
	BSR.W	PatEdCrsrOff
	BSR.W	HideBlockRange
	MOVE.W	D0,D1
	BSR.W	GetActualLineNum
	SUB.W	D0,D1
	BEQ.S	PattEdMoveToLine_X
	BMI.S	PattEdMoveToLine_Rvs
	SUBQ.W	#1,D1
	BMI.S	PattEdMoveToLine_X
PattEdMoveToLine_L1:
	BSR.S	PattEdMoveNextLine
	DBF	D1,PattEdMoveToLine_L1
PattEdMoveToLine_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PattEdMoveToLine_Rvs:
	NEG.W	D1
	SUBQ.W	#1,D1
	BMI.S	PattEdMoveToLine_X
PattEdMoveToLine_L2:
	BSR.W	PattEdMovePrevLine
	DBF	D1,PattEdMoveToLine_L2
	BRA.S	PattEdMoveToLine_X
PattEdMoveNextLines:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	JumpLen+2,D7
	SUBQ.W	#1,D7
SetNote_SCROLL:
	BSR.S	PattEdMoveNextLine
	DBF	D7,SetNote_SCROLL
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PattEdMoveNextLine:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetPEDRP+6
	DC.W	$4a89
	BEQ.S	LAB_019F
	BSR.W	GetActualLineNum
	ADDQ.W	#1,D0
	CMP.W	14(A0),D0
	BEQ.S	LAB_019F
	TST.W	RECORD_STATUS
	BEQ.S	LAB_019D
	MOVE.W	66(A0),D0
	ADD.W	34(A0),D0
	CMP.W	14(A0),D0
	BCC.S	LAB_019E
	MOVE.W	66(A0),D0
	LSR.W	#1,D0
	SUBQ.W	#1,D0
	CMP.W	62(A0),D0
	BCS.S	PattEdMoveNextLine_Scroll
	BRA.S	LAB_019E
LAB_019D:
	MOVE.W	66(A0),D0
	SUBQ.W	#1,D0
	CMP.W	62(A0),D0
	BEQ.S	PattEdMoveNextLine_Scroll
LAB_019E:
	BSR.W	PatEdCrsrOff
	ADDQ.W	#1,62(A0)
	BSR.W	PatEdCrsrOn
LAB_019F:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PattEdMoveNextLine_Scroll:
	BSR.W	GetActualLineNum
	ADDQ.W	#1,D0
	CMP.W	14(A0),D0
	BEQ.S	LAB_01A1
	ADDQ.W	#1,34(A0)
	ADDQ.W	#1,LAB_0319
	BSR.W	PatEdCrsrOff
	BSR.W	PatSimpleScrollUp
	BSR.W	PatEdDrawLastLine
LAB_01A1:
	BSR.W	PatEdCrsrOn
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PattEdMovePrevLine:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetPEDRP+6
	DC.W	$4a89
	BEQ.S	PattEdMovePrevLine_X
	TST.W	62(A0)
	BEQ.S	PattEdMovePrevLine_sc
	TST.W	RECORD_STATUS
	BEQ.S	PattEdMovePrevLine_NRM
	TST.W	34(A0)
	BEQ.S	PattEdMovePrevLine_NRM
	MOVE.W	66(A0),D0
	LSR.W	#1,D0
	CMP.W	62(A0),D0
	BCC.S	PattEdMovePrevLine_sc
PattEdMovePrevLine_NRM:
	BSR.W	PatEdCrsrOff
	SUBQ.W	#1,62(A0)
	BSR.W	PatEdCrsrOn
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PattEdMovePrevLine_sc:
	TST.W	34(A0)
	BEQ.S	PattEdMovePrevLine_X
	BSR.W	PatEdCrsrOff
	SUBQ.W	#1,34(A0)
	BSR.W	PatEdScrollDown
	BSR.W	PatEdDrawFirstLine
	BSR.W	PatEdCrsrOn
PattEdMovePrevLine_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
GetActualTrackNum:
	MOVE.W	32(A0),D0
	ADD.W	60(A0),D0
	RTS
	DC.W	$0000
GetActualLineNum:
	MOVE.W	34(A0),D0
	ADD.W	62(A0),D0
	RTS
	DC.W	$0000
PattEdMoveNextVoice:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetPEDRP+6
	DC.W	$4a89
	BEQ.S	LAB_01AB
	MOVE.W	60(A0),D0
	MOVE.W	32(A0),D1
	ADD.W	D0,D1
	ADDQ.W	#1,D1
	CMP.W	18(A0),D1
	BEQ.S	LAB_01AB
	ADDQ.W	#1,D0
	CMP.W	64(A0),D0
	BCC.S	LAB_01A9
	BSR.W	PatEdCrsrOff
	MOVE.W	D0,60(A0)
	BSR.W	PatEdCrsrOn
	BRA.S	LAB_01AB
LAB_01A9:
	BSR.W	PatEdCrsrOff
	MOVE.W	18(A0),D0
	SUBQ.W	#1,D0
	CMP.W	32(A0),D0
	BEQ.S	LAB_01AA
	ADDQ.W	#1,32(A0)
	BSR.W	PatEdDrawPattern
LAB_01AA:
	BSR.W	PatEdCrsrOn
LAB_01AB:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PattEdMovePrevVoice:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetPEDRP+6
	DC.W	$4a89
	BEQ.S	LAB_01AE
	TST.W	60(A0)
	BEQ.S	LAB_01AD
	BSR.W	PatEdCrsrOff
	SUBQ.W	#1,60(A0)
	BSR.W	PatEdCrsrOn
	BRA.S	LAB_01AE
LAB_01AD:
	TST.W	32(A0)
	BEQ.S	LAB_01AE
	SUBQ.W	#1,32(A0)
	BSR.W	PatEdCrsrOff
	BSR.W	PatEdDrawPattern
	BSR.W	PatEdCrsrOn
LAB_01AE:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
MuteActualTrack:
	MOVEM.L	D0/A0,-(A7)
	LEA	Test_PATTED+2,A0
	BSR.W	GetActualTrackNum
	BSR.S	MuteTrack
	MOVEM.L	(A7)+,D0/A0
	RTS
	DC.W	$0000
MuteTrack:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	LEA	PlayTrackInfo+1,A1
	CMPI.W	#$ffff,Shift_KEY+2
	BEQ.S	LAB_01B2
	NOT.B	0(A1,D0.W)
LAB_01B1:
	BSR.W	PatEdDrawTitle
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_01B2:
	LEA	ForceAllTracksOn,A2
	TST.B	0(A1,D0.W)
	BEQ.S	LAB_01B3
	LEA	ForceAllTracksOff,A2
LAB_01B3:
	JSR	(A2)
	BRA.S	LAB_01B1
	DC.W	$0000
ForcePlayOnePattern:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	Actual_FREQDEF,28(A0)
	MOVE.W	#$0001,2(A0)
	MOVE.W	14(A0),16(A0)
	LEA	Test_PATTED+2,A2
	MOVEA.L	24(A2),A1
	MOVE.W	14(A1),14(A0)
	MOVE.L	A1,8(A0)
	MOVE.W	#$03e8,6(A1)
	MOVEA.L	(A1),A4
	CLR.W	12(A4)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
InsertPosition:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	HideBlockRange
	LEA	Test_PATTED+2,A2
	MOVEA.L	20(A2),A1
	MOVE.W	#$0200,D0
	MULU	#$0020,D0
	LEA	0(A1,D0.W),A1
	LEA	-32(A1),A0
	MOVE.W	#$0200,D7
	SUB.W	114(A2),D7
	SUBQ.W	#2,D7
	BMI.S	InsertPosition_X
InsertPosition_L2:
	MOVEQ	#31,D6
InsertPosition_L1:
	MOVE.B	-(A0),-(A1)
	DBF	D6,InsertPosition_L1
	DBF	D7,InsertPosition_L2
	LEA	Test_PATTED+2,A0
	BSR.W	PatEdDrawPattern
	BSR.W	UpdatePosList
InsertPosition_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	RTS
DeletePosition:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	HideBlockRange
	LEA	Test_PATTED+2,A2
	MOVEA.L	24(A2),A1
	LEA	32(A1),A0
	MOVE.W	#$0200,D7
	SUB.W	114(A2),D7
	SUBQ.W	#2,D7
	BMI.S	DeletePosition_X
DeletePosition_L2:
	MOVEQ	#31,D6
DeletePosition_L1:
	MOVE.B	(A0)+,(A1)+
	DBF	D6,DeletePosition_L1
	DBF	D7,DeletePosition_L2
	LEA	Test_PATTED+2,A0
	BSR.W	PatEdDrawPattern
	BSR.W	UpdatePosList
DeletePosition_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
CutPosition:
	BSR.S	CopyPosition
	BSR.S	DeletePosition
	RTS
	DC.W	$0000
CopyPosition:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualPattEd
	MOVEA.L	24(A0),A0
	LEA	Position_BUF,A1
	MOVEQ	#31,D7
LAB_01BF:
	MOVE.B	(A0)+,D0
	MOVE.B	D0,(A1)+
	DBF	D7,LAB_01BF
	BSR.W	UpdatePosList
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PastePosition:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	HideBlockRange
	BSR.W	GetActualPattEd
	MOVEA.L	24(A0),A0
	LEA	Position_BUF,A1
	MOVEQ	#31,D7
	EXG	A0,A1
LAB_01C1:
	MOVE.B	(A0)+,D0
	MOVE.B	D0,(A1)+
	DBF	D7,LAB_01C1
	BSR.W	GetActualPattEd
	BSR.W	PatEdDrawPattern
	BSR.W	UpdatePosList
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ClearPosition:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	HideBlockRange
	BSR.W	GetActualPattEd
	MOVEA.L	24(A0),A0
	BSR.W	InitSongData
	BSR.W	UpdatePosList
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ClearActualPattern:
	BSR.W	HideBlockRange
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	GetActualPattEd
	MOVEA.L	4(A0),A1
	MOVE.L	VEX_NotePerPattern,D7
	SUBQ.W	#1,D7
ClearActualPattern_L:
	BSR.W	ClrDestNote
	ADDQ.L	#4,A1
	DBF	D7,ClearActualPattern_L
	BSR.W	PatEdDrawPattern
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
InsertTrackLine:
	BSR.W	HideBlockRange
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	CopyActualTrack
	BSR.W	RotUpTrack
	BSR.W	PasteTrackTillPos
	BSR.W	GetActualPattEd
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A1
	BSR.W	ClrDestNote
	LEA	Test_PATTED+2,A0
	BSR.W	PatEdDrawPattern
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DeleteTrackLine:
	BSR.W	HideBlockRange
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	CopyActualTrack
	BSR.W	RotDownTrack
	BSR.W	PasteTrackTillPos
	BSR.S	ClearLastNote
	BSR.W	GetActualPattEd
	BSR.W	PatEdDrawPattern
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NoteOffsetToAdr:
	MOVEM.L	D0-D1/A1,-(A7)
	BSR.W	GetActualPattEd
	MOVEA.L	A0,A1
	MOVEA.L	4(A1),A0
	MULU	30(A1),D0
	MULU	28(A1),D1
	ADD.L	D0,D1
	LEA	0(A0,D1.L),A0
	MOVEM.L	(A7)+,D0-D1/A1
	RTS
	DC.W	$0000
ClearLastNote:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualPattEd
	MOVE.W	32(A0),D0
	ADD.W	60(A0),D0
	MOVE.W	14(A0),D1
	SUBQ.W	#1,D1
	BSR.S	NoteOffsetToAdr
	MOVEA.L	A0,A1
	BSR.W	ClrDestNote
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
GetRemainLines:
	MOVEM.L	A0,-(A7)
	BSR.W	GetActualPattEd
	MOVE.W	14(A0),D0
	SUB.W	34(A0),D0
	SUB.W	62(A0),D0
	SUBQ.W	#1,D0
	MOVEA.L	(A7)+,A0
	RTS
	DC.W	$0000
ClearActualTrack:
	BSR.W	HideBlockRange
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	LEA	Test_PATTED+2,A0
	MOVEA.L	4(A0),A1
	MOVE.W	14(A0),D7
	SUBQ.W	#1,D7
	MOVE.W	32(A0),D6
	ADD.W	60(A0),D6
	MULU	30(A0),D6
	LEA	0(A1,D6.W),A1
	MOVE.W	28(A0),D6
ClearActualTrack_L:
	BSR.W	ClrDestNote
	LEA	0(A1,D6.W),A1
	DBF	D7,ClearActualTrack_L
	BSR.W	PatEdDrawPattern
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
CopyActualTrack:
	BSR.W	HideBlockRange
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A2
	MOVEA.L	4(A2),A0
	MOVE.W	14(A2),D7
	SUBQ.W	#1,D7
	MOVE.W	32(A2),D6
	ADD.W	60(A2),D6
	MULU	30(A2),D6
	LEA	0(A0,D6.W),A0
	MOVE.W	28(A2),D6
	MOVEA.L	TrackBuffer_PTR+2,A1
CopyActualTrack_L:
	BSR.W	CopyNote
	LEA	0(A0,D6.W),A0
	LEA	0(A1,D6.W),A1
	DBF	D7,CopyActualTrack_L
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
MirrorTrack:
	BSR.W	HideBlockRange
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	LEA	Test_PATTED+2,A2
	MOVE.W	32(A2),D6
	ADD.W	60(A2),D6
	MOVE.L	VEX_NoteSize,D7
	MULU	D7,D6
	MOVEA.L	4(A2),A0
	LEA	0(A0,D6.W),A0
	MOVE.L	VEX_PatternSize,D6
	LEA	0(A0,D6.L),A1
	MOVEQ	#0,D6
	MOVE.W	28(A2),D6
	MOVE.L	VEX_LinesPerPattern,D7
LAB_01CF:
	LSR.L	#1,D7
	SUBQ.L	#1,D7
LAB_01D0:
	SUBA.L	D6,A1
	BSR.W	SwapNote
	LEA	0(A0,D6.W),A0
	DBF	D7,LAB_01D0
	MOVEA.L	A2,A0
	BSR.W	PatEdDrawPattern
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
InstrPaint:
	DC.W	$0000
SwapInstrPaint:
	NOT.B	InstrPaint
	RTS
ProcessInstrPaint:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	CMPI.W	#$ffff,Shift_KEY+2
	BEQ.S	SpaceShift
	LEA	Test_PATTED+2,A0
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A2
	MOVE.B	1(A2),D0
LAB_01D4:
	MOVE.B	3(A2),D1
	MOVE.B	2(A2),D2
	MOVE.B	(A2),D3
	DC.W	$4a3a
	DC.W	$ffc6
	BEQ.S	LAB_01D5
	BSR.S	ProcessNoteSetActInstr
	BRA.S	LAB_01D6
LAB_01D5:
	BSR.S	ProcessNoteClr
LAB_01D6:
	MOVE.B	D0,1(A2)
	MOVE.B	D1,3(A2)
	MOVE.B	D2,2(A2)
	MOVE.B	D3,(A2)
	BSR.W	CopyLockedNotes
	BSR.W	PatEdDrawActLine
	BSR.W	PattEdMoveNextLines
ProcessInstrPaint_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ProcessNoteClr:
	MOVE.B	#$ff,D0
	CLR.B	D1
	CLR.B	D2
	CLR.B	D3
	RTS
ProcessNoteSetActInstr:
	CMPI.B	#$ff,D0
	BEQ.S	ProcessNoteSetActInstr_X
	EXG	D0,D1
LAB_01DA:
	JSR	GetActualInstrNum
	EXG	D0,D1
ProcessNoteSetActInstr_X:
	RTS
	DC.W	$0000
SpaceShift:
	BSR.W	ClearActualTrack
	BRA.S	ProcessInstrPaint_X
	DC.W	$0000
RotDownTrack:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	LEA	Test_PATTED+2,A2
	MOVEA.L	4(A2),A0
LAB_01DE:
	MOVE.W	14(A2),D7
	SUBQ.W	#2,D7
	BMI.S	RotDownTrack_X
	MOVE.W	32(A2),D6
	ADD.W	60(A2),D6
	MULU	30(A2),D6
	LEA	0(A0,D6.L),A0
	MOVE.W	28(A2),D6
	MOVEA.L	A0,A1
	LEA	0(A0,D6.W),A0
	LEA	RotTemp_Note(PC),A2
	MOVEM.L	A0-A2,-(A7)
	MOVEA.L	A1,A0
	MOVEA.L	A2,A1
	BSR.W	CopyNote
	MOVEM.L	(A7)+,A0-A2
RotDownTrack_L:
LAB_01DF:
	BSR.W	CopyNote
	LEA	0(A0,D6.W),A0
	LEA	0(A1,D6.W),A1
	DBF	D7,RotDownTrack_L
	MOVEA.L	A2,A0
	BSR.W	CopyNote
	LEA	Test_PATTED+2,A0
	BSR.W	PatEdDrawPattern
RotDownTrack_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
RotTemp_Note:
	ORI.B	#$00,D0
	DC.W	$0000
RotUpTrack:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	LEA	Test_PATTED+2,A2
	MOVEA.L	4(A2),A0
	MOVE.W	14(A2),D7
	SUBQ.W	#2,D7
	BMI.S	RotUpTrack_X
	MOVE.W	32(A2),D6
	ADD.W	60(A2),D6
	MULU	30(A2),D6
LAB_01E4:
	LEA	0(A0,D6.W),A0
	MOVEA.L	A0,A3
	MOVE.W	28(A2),D6
	MOVE.W	D6,D5
	MULU	D7,D5
	LEA	0(A0,D5.L),A0
	MOVEA.L	A0,A1
	LEA	0(A0,D6.W),A0
	LEA	0(A1,D6.W),A1
	NEG.W	D6
	LEA	RotTemp_Note(PC),A2
	MOVEM.L	A0-A2,-(A7)
	MOVEA.L	A1,A0
	MOVEA.L	A2,A1
	BSR.W	CopyNote
	MOVEM.L	(A7)+,A0-A2
RotUpTrack_L:
	LEA	0(A0,D6.W),A0
LAB_01E6:
	BSR.W	CopyNote
	LEA	0(A1,D6.W),A1
	DBF	D7,RotUpTrack_L
	MOVEA.L	A2,A0
	MOVEA.L	A3,A1
	BSR.W	CopyNote
	LEA	Test_PATTED+2,A0
	BSR.W	PatEdDrawPattern
RotUpTrack_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	RTS
	DC.W	$0000
GetActualPattEd:
	LEA	Test_PATTED+2,A0
	RTS
GetPTEDCrsrXY:
	MOVEM.L	A0,-(A7)
	BSR.S	GetActualPattEd
	MOVE.W	32(A0),D0
	ADD.W	60(A0),D0
	MOVE.W	34(A0),D1
	ADD.W	62(A0),D1
	MOVEA.L	(A7)+,A0
	RTS
	DC.W	$0000
CutActualNote:
	BSR.S	MarkNote
	BSR.W	CutActualBlock
	BSR.W	DrawEventStatusQ
	RTS
PasteActualNote:
	BRA.W	PasteActualBlock
MarkNote:
	BSR.W	HideBlockRange
	BSR.W	PatEdCrsrOff
	BSR.W	ForceBlockEndMark
	BSR.W	MarkBlock
	BSR.W	MarkBlock
	BSR.W	PatEdCrsrOn
	BSR.W	ShowBlockRange
	RTS
	DC.W	$0000
MarkPattern:
	BSR.W	PatEdCrsrOff
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	HideBlockRange
	BSR.S	GetActualPattEd
	LEA	ActualBlock_INFO(PC),A2
	MOVE.W	18(A0),D0
	CLR.W	2(A2)
	MOVE.W	D0,10(A2)
	SUBQ.W	#1,D0
	MOVE.W	D0,6(A2)
	MOVE.W	14(A0),D0
	CLR.W	4(A2)
	MOVE.W	D0,12(A2)
	SUBQ.W	#1,D0
	MOVE.W	D0,8(A2)
	CLR.W	(A2)
	BSR.W	CopyActualBlock
	BSR.W	PatEdCrsrOn
	BSR.W	ShowBlockRange
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
MarkTrack:
	BSR.W	HideBlockRange
	BSR.W	PatEdCrsrOff
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualPattEd
	LEA	ActualBlock_INFO(PC),A2
	MOVE.W	32(A0),D0
	ADD.W	60(A0),D0
	MOVE.W	D0,6(A2)
	MOVE.W	D0,2(A2)
	MOVE.W	#$0001,10(A2)
	MOVE.W	14(A0),D0
	CLR.W	4(A2)
	MOVE.W	D0,12(A2)
	SUBQ.W	#1,D0
	MOVE.W	D0,8(A2)
	CLR.W	(A2)
	BSR.W	CopyActualBlock
	BSR.W	PatEdCrsrOn
	BSR.W	ShowBlockRange
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
GetBlockRangeXYWH:
	MOVEM.L	A0,-(A7)
	LEA	ActualBlock_INFO(PC),A0
	MOVEQ	#0,D0
	MOVEQ	#0,D1
	MOVEQ	#0,D2
	MOVEQ	#0,D3
	TST.W	(A0)
	BNE.S	LAB_01F0
	MOVEM.W	10(A0),D2-D3
	MOVE.W	2(A0),D0
	MOVE.W	4(A0),D1
LAB_01F0:
	MOVEA.L	(A7)+,A0
	RTS
CheckXYInBlockRange:
	MOVEM.L	D1-D5,-(A7)
	MOVE.W	D0,D4
	MOVE.W	D1,D5
	BSR.S	GetBlockRangeXYWH
	TST.W	D2
	BEQ.S	LAB_01F2
	SUB.W	D0,D4
	BMI.S	LAB_01F2
	SUB.W	D2,D4
	BPL.S	LAB_01F2
	SUB.W	D1,D5
	BMI.S	LAB_01F2
	SUB.W	D3,D5
	BPL.S	LAB_01F2
	MOVEQ	#-1,D0
	BRA.S	LAB_01F3
LAB_01F2:
	MOVEQ	#0,D0
LAB_01F3:
	MOVEM.L	(A7)+,D1-D5
	RTS
MarkBlock:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	HideBlockRange
	BSR.W	PatEdCrsrOff
	BSR.W	GetPTEDCrsrXY
	LEA	ActualBlock_INFO(PC),A2
	MOVE.W	(A2),D7
	LEA	2(A2),A1
	TST.W	D7
	BEQ.S	LAB_01F5
	LEA	6(A2),A1
	MOVE.L	#MarkBlocktxt2+3,AssText_TXT
	BSR.W	PrintAssTextF
	BRA.S	LAB_01F6
LAB_01F5:
	MOVE.L	#MarkBlocktxt+2,AssText_TXT
	BSR.W	PrintAssTextF
LAB_01F6:
	MOVEM.W	D0-D1,(A1)
	NOT.W	D7
	MOVE.W	D7,(A2)
	TST.W	D7
	BNE.S	LAB_01F9
	MOVEM.W	2(A2),D0-D3
	CMP.W	D0,D2
	BHI.S	LAB_01F7
	MOVE.W	D2,2(A2)
	MOVE.W	D0,6(A2)
LAB_01F7:
	CMP.W	D1,D3
	BHI.S	LAB_01F8
	MOVE.W	D3,4(A2)
	MOVE.W	D1,8(A2)
LAB_01F8:
	MOVEM.W	2(A2),D0-D3
	SUB.W	D0,D2
	SUB.W	D1,D3
	ADDQ.W	#1,D2
	ADDQ.W	#1,D3
	MOVEM.W	D2-D3,10(A2)
	BSR.W	CopyActualBlock
LAB_01F9:
	BSR.W	PatEdCrsrOn
	BSR.W	ShowBlockRange
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ActualBlock_INFO:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
ActualBlock_PTR:
	ORI.B	#$00,D0
LAB_01FC:
	ORI.B	#$00,D0
	ORI.B	#$00,D1
UndoBuffer_PTR:
	ORI.B	#$00,D0
LAB_01FE:
	ORI.B	#$00,D0
	ORI.B	#$00,D1
GetActualNotePtr:
	BSR.W	GetActualPattEd
	BSR.W	CalcActNoteData
	MOVEA.L	8(A0),A0
	RTS
	DC.W	$0000
GetActualNoteType:
	MOVEM.L	A0,-(A7)
	BSR.S	GetActualNotePtr
	BSR.W	CheckNoteType
	MOVEA.L	(A7)+,A0
	RTS
	DC.W	$0000
ForceBlockEndMark:
	DC.W	$4a7a
	DC.W	$ffb6
	BNE.W	MarkBlock
	RTS
	DC.W	$0000
DuplicateBlock:
	BSR.W	PatEdCrsrOff
	BSR.W	HideBlockRange
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	ForceBlockEndMark
	BSR.S	CopyActualBlock
	JSR	PatternUp
	BSR.W	ClearActualPattern
	BSR.W	PasteActualBlock
	BSR.W	UpdatePosList
	BSR.W	PatEdCrsrOn
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
CopyActualBlock:
	BSR.W	HideBlockRange
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	ForceBlockEndMark
	LEA	CopyNote(PC),A0
	MOVE.L	A0,ReadCall
	BSR.W	ReadActualBlock
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PitchUpActualBlock:
	BSR.W	HideBlockRange
	BSR.W	PatEdCrsrOff
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.S	ForceBlockEndMark
	LEA	PitchUpNote(PC),A0
	MOVE.L	A0,ReadCall
	BSR.W	ReadActualBlock
	BSR.W	PatEdDrawPattern
	BSR.W	PatEdCrsrOn
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PitchDownActualBlock:
	BSR.W	HideBlockRange
	BSR.W	PatEdCrsrOff
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	ForceBlockEndMark
	LEA	PitchDownNote(PC),A0
	MOVE.L	A0,ReadCall
	BSR.W	ReadActualBlock
	BSR.W	PatEdDrawPattern
	BSR.W	PatEdCrsrOn
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
VolumeUpActualBlock:
	BSR.W	PatEdCrsrOff
	BSR.W	HideBlockRange
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	ForceBlockEndMark
	LEA	VolUpNote(PC),A0
	MOVE.L	A0,ReadCall
	BSR.W	ReadActualBlock
	BSR.W	PatEdDrawPattern
	BSR.W	PatEdCrsrOn
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
VolumeDownActualBlock:
	BSR.W	PatEdCrsrOff
LAB_0208:
	BSR.W	HideBlockRange
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	ForceBlockEndMark
	LEA	VolDownNote(PC),A0
	MOVE.L	A0,ReadCall
	BSR.W	ReadActualBlock
LAB_0209:
	BSR.W	PatEdDrawPattern
	BSR.W	PatEdCrsrOn
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
InstrUpActualBlock:
	BSR.W	HideBlockRange
	BSR.W	PatEdCrsrOff
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	ForceBlockEndMark
	LEA	InstrUpNote(PC),A0
	MOVE.L	A0,ReadCall
	BSR.W	ReadActualBlock
	BSR.W	PatEdDrawPattern
	BSR.W	PatEdCrsrOn
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
InstrDownActualBlock:
	BSR.W	PatEdCrsrOff
	BSR.W	HideBlockRange
LAB_020C:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	ForceBlockEndMark
	LEA	InstrDownNote(PC),A0
	MOVE.L	A0,ReadCall
	BSR.W	ReadActualBlock
	BSR.W	PatEdDrawPattern
	BSR.W	PatEdCrsrOn
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
CutActualBlock:
	BSR.W	HideBlockRange
	BSR.W	PatEdCrsrOff
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	ForceBlockEndMark
	LEA	CutNote(PC),A0
	MOVE.L	A0,ReadCall
	BSR.W	ReadActualBlock
	BSR.W	PatEdDrawPattern
	BSR.W	PatEdCrsrOn
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ClrActualBlock:
	BSR.W	HideBlockRange
	BSR.W	PatEdCrsrOff
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	ForceBlockEndMark
	LEA	ClrNote(PC),A0
	MOVE.L	A0,ReadCall
	BSR.S	ReadActualBlock
	BSR.W	PatEdDrawPattern
	BSR.W	PatEdCrsrOn
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ReadCall:
	ORI.B	#$00,D0
	DC.W	$0000
PrepareBlockReg:
	LEA	ActualBlock_INFO(PC),A2
LAB_0211:
	MOVEM.W	2(A2),D6-D7
	BSR.W	GetActualPattEd
	MOVE.W	30(A0),D0
	MOVE.W	28(A0),D1
	MOVEA.L	4(A0),A1
	MOVE.W	14(A0),D3
	CMP.W	12(A2),D3
	BNE.S	FullTrackb
	MOVEQ	#0,D7
	MOVE.W	18(A0),D3
	CMP.W	10(A2),D3
	BNE.S	FullTrackb
	MOVEQ	#0,D6
FullTrackb:
	MULU	D0,D6
	MULU	D1,D7
	ADD.L	D6,D7
	LEA	0(A1,D7.L),A0
	MOVEA.L	ActualBlock_PTR(PC),A1
	MOVEM.W	10(A2),D6-D7
	RTS
ReadActualBlock:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	PrepareBlockReg
	MOVEA.L	A0,A4
	SUBQ.W	#1,D7
	BMI.S	CopyActualBlock_X
	DC.W	$4aba
	DC.W	$ffa4
	BEQ.S	CopyActualBlock_X
CopyActualBlock_L2:
	MOVE.W	D6,D5
	SUBQ.W	#1,D5
	BMI.S	CopyActualBlock_X
CopyActualBlock_L:
	MOVEA.L	ReadCall(PC),A5
	JSR	(A5)
	MOVEA.L	Block_MoveCALL(PC),A5
	JSR	(A5)
	DBF	D5,CopyActualBlock_L
	LEA	0(A4,D1.W),A4
	MOVEA.L	A4,A0
CopyActualBlock_X:
	DBF	D7,CopyActualBlock_L2
	MOVE.L	A1,LastBlockLPtr
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LastBlockLPtr:
	ORI.B	#$00,D0
Block_MoveCALL:
	DC.L	BlockMove_Nrm
	DC.W	$0000
BlockMove_Nrm:
	LEA	0(A0,D0.W),A0
	LEA	0(A1,D0.W),A1
	RTS
	DC.W	$0000
BlockMove_Exp:
	LEA	0(A0,D0.W),A0
	DC.W	$4a7a
	BCLR	D2,(A6)+
	BNE.S	BlockMove_Exp1
	LEA	0(A1,D0.W),A1
BlockMove_Exp1:
	RTS
PasteActualBlock:
	BSR.W	PatEdCrsrOff
	BSR.W	HideBlockRange
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	LEA	CopyNote(PC),A0
	MOVE.L	A0,WriteCall
	BSR.W	WriteActualBlock
	BSR.W	PatEdCrsrOn
	BSR.W	DrawEventStatusQ
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ShrinkActualBlock:
	BSR.W	HideBlockRange
	BSR.W	PatEdCrsrOff
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	ForceBlockEndMark
	BSR.W	BackupPattern
LAB_021E:
	BSR.W	CopyActualBlock
	BSR.W	ShrinkBlock
	BSR.W	PatEdCrsrOn
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ExpandActualBlock:
	BSR.W	HideBlockRange
	BSR.W	PatEdCrsrOff
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	ForceBlockEndMark
	BSR.W	BackupPattern
LAB_0220:
	BSR.W	CopyActualBlock
	BSR.W	ExpandBlock
	BSR.W	PatEdCrsrOn
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
MirrorActualBlock:
	BSR.W	HideBlockRange
	BSR.W	PatEdCrsrOff
LAB_0222:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	ForceBlockEndMark
	BSR.W	BackupPattern
	BSR.W	CopyActualBlock
	BSR.W	MirrorBlock
	BSR.W	PatEdCrsrOn
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
AddActualBlock:
	BSR.W	HideBlockRange
	BSR.W	PatEdCrsrOff
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
LAB_0224:
	LEA	AddNote(PC),A0
	MOVE.L	A0,WriteCall
	BSR.W	WriteActualBlock
	BSR.W	PatEdCrsrOn
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SwapActualBlock:
	BSR.W	HideBlockRange
	BSR.W	PatEdCrsrOff
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	LEA	SwapNote(PC),A0
LAB_0226:
	MOVE.L	A0,WriteCall
	BSR.W	WriteActualBlock
	BSR.W	PatEdCrsrOn
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
WriteCall:
	ORI.B	#$00,D0
PrepareBlockWriteReg:
	MOVEM.L	D5,-(A7)
	LEA	ActualBlock_INFO(PC),A2
	MOVEM.W	2(A2),D6-D7
	BSR.W	GetActualPattEd
	MOVE.W	30(A0),D0
	MOVE.W	28(A0),D1
LAB_0229:
	MOVEA.L	4(A0),A1
	MOVE.W	32(A0),D6
	ADD.W	60(A0),D6
	MOVE.W	34(A0),D7
	ADD.W	62(A0),D7
	MOVEQ	#0,D5
	MOVE.W	14(A0),D3
	CMP.W	12(A2),D3
	BNE.S	FullTrack
	MOVEQ	#0,D7
	MOVEQ	#-1,D5
	MOVE.W	18(A0),D3
	CMP.W	10(A2),D3
	BNE.S	FullTrack
	MOVEQ	#0,D6
	MOVEQ	#-1,D5
FullTrack:
	MULU	D0,D6
	MULU	D1,D7
LAB_022B:
	ADD.L	D6,D7
	LEA	0(A1,D7.L),A0
	MOVEA.L	ActualBlock_PTR(PC),A1
	MOVEM.W	10(A2),D6-D7
	MOVEM.L	D0,-(A7)
	TST.W	D5
	BNE.S	PrepareBWR_In
	MOVEQ	#0,D0
	MOVE.W	D7,D0
	BSR.W	GetRemainLines
	ADDQ.W	#1,D0
	CMP.W	D0,D7
	BLS.S	PrepareBWR_In
	MOVE.W	D0,D7
PrepareBWR_In:
	MOVEM.L	(A7)+,D0
	MOVEM.L	(A7)+,D5
	RTS
	DC.W	$0000
WriteActualBlock:
LAB_022D:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	PrepareBlockWriteReg
	EXG	A0,A1
	MOVEA.L	A1,A4
	SUBQ.W	#1,D7
	BMI.S	WriteActualBlock_X
	MOVEA.L	WriteCall(PC),A5
WriteActualBlock_L2:
	MOVE.W	D6,D5
	SUBQ.W	#1,D5
	BMI.S	WriteActualBlock_X
WriteActualBlock_L:
	JSR	(A5)
	LEA	0(A0,D0.W),A0
	LEA	0(A1,D0.W),A1
	DBF	D5,WriteActualBlock_L
	LEA	0(A4,D1.W),A4
	MOVEA.L	A4,A1
	DBF	D7,WriteActualBlock_L2
LAB_0231:
	BSR.W	PatEdDrawPattern
WriteActualBlock_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
RotateDBlock:
	BSR.W	HideBlockRange
	BSR.W	PatEdCrsrOff
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	CopyActualBlock
	BSR.W	PrepareBlockReg
	EXG	A0,A1
	MOVEA.L	A1,A4
	SUBQ.W	#2,D7
	BMI.S	RotateDActualBlock_X
	MOVEA.L	A4,A3
RotateDActualBlock_L2:
	MOVE.W	D6,D5
	SUBQ.W	#1,D5
	BMI.S	RotateDActualBlock_X
	LEA	0(A4,D1.W),A4
	MOVEA.L	A4,A1
RotateDActualBlock_L:
	BSR.W	CopyNote
	LEA	0(A0,D0.W),A0
	LEA	0(A1,D0.W),A1
	DBF	D5,RotateDActualBlock_L
	DBF	D7,RotateDActualBlock_L2
	MOVEA.L	A3,A1
	MOVE.W	D6,D5
	SUBQ.W	#1,D5
RotateDActualBlock_Lb:
	BSR.W	CopyNote
	LEA	0(A0,D0.W),A0
	LEA	0(A1,D0.W),A1
	DBF	D5,RotateDActualBlock_Lb
	BSR.W	PatEdDrawPattern
RotateDActualBlock_X:
	BSR.W	PatEdCrsrOn
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
RotateUBlock:
	BSR.W	HideBlockRange
	BSR.W	PatEdCrsrOff
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	CopyActualBlock
	BSR.W	PrepareBlockReg
	EXG	A0,A1
	MOVEA.L	A1,A4
	SUBQ.W	#2,D7
	BMI.S	RotateUActualBlock_X
	MOVEA.L	A0,A3
	MOVE.W	D6,D5
	MULU	D0,D5
	LEA	0(A0,D5.W),A0
RotateUActualBlock_L2:
	MOVE.W	D6,D5
	SUBQ.W	#1,D5
	BMI.S	RotateUActualBlock_X
RotateUActualBlock_L:
	BSR.W	CopyNote
	LEA	0(A0,D0.W),A0
	LEA	0(A1,D0.W),A1
	DBF	D5,RotateUActualBlock_L
	LEA	0(A4,D1.W),A4
	MOVEA.L	A4,A1
	DBF	D7,RotateUActualBlock_L2
	MOVEA.L	A3,A0
	MOVE.W	D6,D5
	SUBQ.W	#1,D5
RotateUActualBlock_Lb:
	BSR.W	CopyNote
	LEA	0(A0,D0.W),A0
	LEA	0(A1,D0.W),A1
	DBF	D5,RotateUActualBlock_Lb
	BSR.W	PatEdDrawPattern
RotateUActualBlock_X:
	BSR.W	PatEdCrsrOn
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ShrinkBlock:
	BSR.W	HideBlockRange
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	PrepareBlockReg
	EXG	A0,A1
	MOVEA.L	A1,A4
	LSR.W	#1,D7
	SUBQ.W	#1,D7
	BMI.S	ShrinkActualBlock_X
ShrinkActualBlock_L2:
	MOVE.W	D6,D5
	SUBQ.W	#1,D5
	BMI.S	ShrinkActualBlock_X
ShrinkActualBlock_L:
	BSR.W	CopyNote
	LEA	0(A0,D0.W),A0
	LEA	0(A1,D0.W),A1
	DBF	D5,ShrinkActualBlock_L
	MOVE.W	D6,D5
	SUBQ.W	#1,D5
ShrinkActualBlock_Lb:
LAB_0240:
	LEA	0(A0,D0.W),A0
	DBF	D5,ShrinkActualBlock_Lb
	LEA	0(A4,D1.W),A4
	MOVEA.L	A4,A1
	DBF	D7,ShrinkActualBlock_L2
	BSR.W	PatEdDrawPattern
ShrinkActualBlock_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DemoBlockMutation:
	BSR.W	HideBlockRange
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	PrepareBlockReg
	MOVEA.L	A0,A4
	SUBQ.W	#1,D7
LAB_0244:
	BMI.S	LAB_0247
LAB_0245:
	MOVE.W	D6,D5
	SUBQ.W	#1,D5
	BMI.S	LAB_0247
LAB_0246:
	BSR.S	LAB_0248
	LEA	0(A0,D0.W),A0
	DBF	D5,LAB_0246
	LEA	0(A4,D1.W),A4
	MOVEA.L	A4,A0
	DBF	D7,LAB_0245
	BSR.W	PatEdDrawPattern
LAB_0247:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0248:
	TST.B	(A0)
	BNE.S	LAB_024A
LAB_0249:
	CMPI.B	#$64,2(A0)
	BHI.S	LAB_024A
	CMPI.B	#$01,2(A0)
	BCS.S	LAB_024A
	MOVE.B	#$32,2(A0)
LAB_024A:
	RTS
SetFadeToSteps:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	LAB_11B0,A0
	LEA	Declicktxt+3,A1
	MOVEQ	#4,D1
LAB_024C:
	MOVE.L	#$00000320,D2
	JSR	ReqMinMaxLong
	TST.W	D0
	MOVE.W	FADETOSTEPS+2,D0
	SUBQ.W	#1,D0
	MOVE.W	D0,FADETOSTEPSm
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
JMPTEST:
	BSR.W	HideBlockRange
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEM.L	A0,-(A7)
LAB_024E:
	LEA	VFade_INFOTXT,A0
	BSR.W	NGSetStatusText
	MOVEA.L	(A7)+,A0
	LEA	VFadeBuf,A0
	LEA	VFadeMin_TXT,A1
	MOVEQ	#1,D1
	MOVEQ	#100,D2
	JSR	ReqMinMaxLong
	TST.W	D0
	BEQ.S	LAB_0252
	LEA	LAB_16EA,A0
LAB_024F:
	LEA	VFadeMax_TXT,A1
	MOVEQ	#1,D1
	MOVEQ	#100,D2
	JSR	ReqMinMaxLong
	TST.W	D0
	BEQ.S	LAB_0252
	BSR.W	PrepareBlockReg
	MOVEA.L	A0,A4
	MOVE.W	D7,D4
	SUBQ.W	#1,D7
	BMI.S	LAB_0252
	MOVE.L	VFadeBuf,D2
	MOVE.L	LAB_16EA,D3
LAB_0250:
	MOVE.W	D6,D5
	SUBQ.W	#1,D5
	BMI.S	LAB_0252
LAB_0251:
	BSR.S	LAB_0253
	LEA	0(A0,D0.W),A0
	DBF	D5,LAB_0251
	LEA	0(A4,D1.W),A4
	MOVEA.L	A4,A0
	DBF	D7,LAB_0250
	BSR.W	PatEdDrawPattern
LAB_0252:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0253:
	MOVEM.L	D0-D7,-(A7)
	TST.B	(A0)
	BNE.S	LAB_0255
	CMPI.B	#$64,2(A0)
	BHI.S	LAB_0255
	CMPI.B	#$01,2(A0)
	BCS.S	LAB_0255
	MOVEQ	#100,D0
	SUBQ.W	#1,D4
	MOVE.W	D4,D1
	SUB.W	D7,D1
	MOVE.W	D3,D5
	SUB.W	D2,D5
	EXT.L	D5
	EXT.L	D1
	DC.W	$4c05
	DC.W	$0800
	DC.W	$4c01
	DC.W	$0800
	DC.W	$4c44
	DC.W	$0800
	MULU	#$0064,D2
	ADD.L	D2,D0
	MOVEQ	#0,D1
	MOVE.B	2(A0),D1
	DC.W	$4c01
	DC.W	$0800
	DC.W	$4c7c
	BTST	#0,D0
	MOVE.L	(A0),-(A3)
	TST.B	D0
	BNE.S	LAB_0254
	MOVEQ	#1,D0
LAB_0254:
	MOVE.B	D0,2(A0)
LAB_0255:
	MOVEM.L	(A7)+,D0-D7
	RTS
ExpandBlock:
	BSR.W	HideBlockRange
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	PrepareBlockReg
	EXG	A0,A1
	MOVEA.L	A1,A4
	LSR.W	#1,D7
	SUBQ.W	#1,D7
	BMI.S	ExpandActualBlock_X
ExpandActualBlock_L2:
	MOVE.W	D6,D5
	SUBQ.W	#1,D5
	BMI.S	ExpandActualBlock_X
ExpandActualBlock_L:
	BSR.W	CopyNote
	LEA	0(A0,D0.W),A0
	LEA	0(A1,D0.W),A1
	DBF	D5,ExpandActualBlock_L
	MOVE.W	D6,D5
	SUBQ.W	#1,D5
	LEA	0(A4,D1.W),A4
	MOVEA.L	A4,A1
ExpandActualBlock_Lb:
	BSR.W	ClrDestNote
	LEA	0(A1,D0.W),A1
	DBF	D5,ExpandActualBlock_Lb
LAB_025A:
	LEA	0(A4,D1.W),A4
	MOVEA.L	A4,A1
	DBF	D7,ExpandActualBlock_L2
	BSR.W	PatEdDrawPattern
ExpandActualBlock_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
MirrorBlock:
	BSR.W	HideBlockRange
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	CopyActualBlock
	BSR.W	PrepareBlockReg
	EXG	A0,A1
	SUBQ.W	#1,D7
	BMI.S	MirrorActualBlock_X
	MOVE.W	D0,D2
	MULU	D6,D2
	NEG.W	D2
	MOVEA.L	LastBlockLPtr(PC),A5
	LEA	0(A5,D2.W),A5
	MOVEA.L	A5,A0
	MOVEA.L	A1,A4
MirrorActualBlock_L2:
	MOVE.W	D6,D5
	SUBQ.W	#1,D5
	BMI.S	MirrorActualBlock_X
MirrorActualBlock_L:
	BSR.S	CopyNote
	LEA	0(A0,D0.W),A0
	LEA	0(A1,D0.W),A1
	DBF	D5,MirrorActualBlock_L
	LEA	0(A5,D2.W),A5
	MOVEA.L	A5,A0
	LEA	0(A4,D1.W),A4
	MOVEA.L	A4,A1
	DBF	D7,MirrorActualBlock_L2
	BSR.W	PatEdDrawPattern
MirrorActualBlock_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
LAB_0260:
	RTS
	DC.W	$0000
AddNote:
	MOVEM.L	D0/A0-A1,-(A7)
	EXG	A0,A1
	BSR.W	CheckNoteType
	EXG	A0,A1
	TST.W	D0
	BNE.S	AddNote_X
	MOVEM.L	(A7)+,D0/A0-A1
	BRA.S	CopyNote
AddNote_X:
	MOVEM.L	(A7)+,D0/A0-A1
	RTS
CAddNote:
	MOVEM.L	D0/A0-A1,-(A7)
	BSR.W	CheckNoteType
	TST.W	D0
	BNE.S	CAddNote_X
	MOVEM.L	(A7)+,D0/A0-A1
	BRA.S	CopyNote
CAddNote_X:
	MOVEM.L	(A7)+,D0/A0-A1
	RTS
CopyNote:
	MOVE.L	(A0),(A1)
	RTS
PasteNote:
	MOVE.L	(A1),(A0)
	RTS
ClrNote:
	MOVE.B	#$ff,1(A0)
	CLR.B	3(A0)
	CLR.B	2(A0)
	CLR.B	(A0)
	RTS
	DC.W	$0000
ClrDestNote:
	MOVE.B	#$ff,1(A1)
	CLR.B	3(A1)
	CLR.B	2(A1)
	CLR.B	(A1)
	RTS
	DC.W	$0000
CutNote:
	BSR.S	CopyNote
	BSR.S	ClrNote
	RTS
	DC.W	$0000
SwapNote:
	MOVEM.L	D0,-(A7)
	MOVE.L	(A0),D0
	MOVE.L	(A1),(A0)
	MOVE.L	D0,(A1)
	MOVEM.L	(A7)+,D0
	RTS
ExpandBlock_TEMP:
	ORI.B	#$00,D0
ProcExpandBlock:
	DC.W	$4a7a
	DC.W	$fffa
	BEQ.S	ProcExpandBlock_Paste
	BSR.S	ClrNote
	BRA.S	ProcExpandBlock_X
ProcExpandBlock_Paste:
	BSR.S	PasteNote
ProcExpandBlock_X:
	NOT.W	ExpandBlock_TEMP
	RTS
VolUpNote:
	MOVEM.L	D0-D7,-(A7)
	BSR.W	GetActualNoteType
	MOVE.L	D0,D7
	BSR.W	CheckNoteType
	CMPI.W	#$0002,D0
	BEQ.S	VolUpNote_Ok
	CMP.L	D0,D7
	BNE.S	VolUpNote_X
VolUpNote_Ok:
	MOVE.B	2(A0),D0
	MOVE.B	(A0),D1
	BSR.S	ProcessVolUp
	MOVE.B	D0,2(A0)
VolUpNote_X:
	MOVEM.L	(A7)+,D0-D7
	RTS
	DC.W	$0000
VolDownNote:
	MOVEM.L	D0-D7,-(A7)
	BSR.W	GetActualNoteType
	MOVE.L	D0,D7
	BSR.W	CheckNoteType
	CMPI.W	#$0002,D0
	BEQ.S	VolDNote_Ok
	CMP.L	D0,D7
	BNE.S	VolDownNote_X
VolDNote_Ok:
	MOVE.B	2(A0),D0
	MOVE.B	(A0),D1
	BSR.S	ProcessVolDown
	MOVE.B	D0,2(A0)
VolDownNote_X:
	MOVEM.L	(A7)+,D0-D7
	RTS
	DC.W	$0000
ProcessVolUp:
	MOVEM.L	D1-D2,-(A7)
	MOVE.B	D0,D2
	CMPI.B	#$ff,D1
	BEQ.S	ProcessVolUp_M1
	TST.B	D1
	BEQ.S	ProcessVolUp_M1
	MOVE.B	D0,D1
	BSR.W	SetDecShiftKeyRaster
	ADD.B	D0,D1
	MOVE.B	D1,D2
	BRA.S	ProcessVolUp_X
ProcessVolUp_M1:
	TST.B	D2
	BEQ.S	ProcessVolUp_X
	CMPI.B	#$64,D2
	BCC.S	ProcessVolUp_X
	MOVE.B	D0,D1
	BSR.W	SetDecShiftKeyRaster
	ADD.B	D0,D1
	CMPI.B	#$64,D1
	BLS.S	ProcessVolUp_OK
	MOVEQ	#100,D1
ProcessVolUp_OK:
	MOVE.B	D1,D2
ProcessVolUp_X:
	MOVE.B	D2,D0
	MOVEM.L	(A7)+,D1-D2
	RTS
ProcessVolDown:
	MOVEM.L	D1-D2,-(A7)
	MOVE.B	D0,D2
	CMPI.B	#$ff,D1
	BEQ.S	ProcessVolDown_M1
	TST.B	D1
	BEQ.S	ProcessVolDown_M1
	MOVE.B	D0,D1
	BSR.W	SetDecShiftKeyRaster
	SUB.B	D0,D1
LAB_027A:
	MOVE.B	D1,D2
	BRA.S	ProcessVolDown_X
ProcessVolDown_M1:
	TST.B	D2
	BEQ.S	ProcessVolDown_X
	CMPI.B	#$01,D2
	BEQ.S	ProcessVolDown_X
	CMPI.B	#$64,D2
	BHI.S	ProcessVolDown_X
ProcessVolDown_ValueRange:
	MOVE.B	D0,D1
	BSR.W	SetDecShiftKeyRaster
	SUB.B	D0,D1
	CMPI.B	#$01,D1
	BGE.S	ProcessVolDown_OK
	MOVEQ	#1,D1
ProcessVolDown_OK:
	MOVE.B	D1,D2
ProcessVolDown_X:
	MOVE.B	D2,D0
	MOVEM.L	(A7)+,D1-D2
	RTS
	DC.W	$0000
PitchUpNote:
	MOVEM.L	D0,-(A7)
	BSR.W	CheckNoteType
	CMPI.W	#$0003,D0
	BEQ.S	PitchUpNote_Complex
	MOVE.B	1(A0),D0
	BSR.S	ProcessNoteUp
	MOVE.B	D0,1(A0)
	MOVEM.L	(A7)+,D0
	RTS
	DC.W	$0000
PitchUpNote_Complex:
	BSR.W	SetDecShiftKeyRaster
	ADD.B	D0,1(A0)
	MOVEM.L	(A7)+,D0
	RTS
	DC.W	$0000
PitchDownNote:
	MOVEM.L	D0,-(A7)
	BSR.W	CheckNoteType
	CMPI.W	#$0003,D0
	BEQ.S	PitchDwnNote_Complex
	MOVE.B	1(A0),D0
	BSR.S	ProcessNoteDown
	MOVE.B	D0,1(A0)
	MOVEM.L	(A7)+,D0
	RTS
	DC.W	$0000
PitchDwnNote_Complex:
	BSR.W	SetDecShiftKeyRaster
	SUB.B	D0,1(A0)
	MOVEM.L	(A7)+,D0
	RTS
	DC.W	$0000
ProcessNoteUp:
	MOVEM.L	D1-D2,-(A7)
	MOVE.B	D0,D2
	CMPI.B	#$ff,D2
	BEQ.S	ProcessNoteUp_X
	MOVE.B	D0,D1
	BSR.W	SetOctaveKeyRaster
	ADD.B	D1,D0
	CMPI.B	#$54,D0
	BHI.S	ProcessNoteUp_X
	MOVE.B	D0,D2
ProcessNoteUp_X:
	MOVE.B	D2,D0
	MOVEM.L	(A7)+,D1-D2
	RTS
ProcessNoteDown:
	MOVEM.L	D1-D2,-(A7)
	MOVE.B	D0,D2
	CMPI.B	#$ff,D2
	BEQ.S	ProcessNoteDown_X
	MOVE.B	D0,D1
	BSR.W	SetOctaveKeyRaster
	SUB.B	D0,D1
	BMI.S	ProcessNoteDown_X
	MOVE.B	D1,D2
ProcessNoteDown_X:
	MOVE.B	D2,D0
	MOVEM.L	(A7)+,D1-D2
	RTS
InstrUpNote:
	MOVEM.L	D0,-(A7)
	BSR.S	CheckNoteType
	TST.W	D0
	BEQ.S	InstrUpNote_X
	CMPI.W	#$0002,D0
	BEQ.S	InstrUpNote_X
	MOVE.B	3(A0),D0
	BSR.S	ProcessInstrUp
	MOVE.B	D0,3(A0)
InstrUpNote_X:
	MOVEM.L	(A7)+,D0
	RTS
InstrDownNote:
	MOVEM.L	D0,-(A7)
	BSR.S	CheckNoteType
	TST.W	D0
	BEQ.S	InstrDownNote_X
	CMPI.W	#$0002,D0
	BEQ.S	InstrDownNote_X
	MOVE.B	3(A0),D0
	BSR.S	ProcessInstrDown
	MOVE.B	D0,3(A0)
InstrDownNote_X:
	MOVEM.L	(A7)+,D0
	RTS
CheckNoteType:
	MOVEQ	#0,D0
	CMPI.B	#$ff,(A0)
	BEQ.S	CheckNoteType_NOFX
	TST.B	(A0)
	BEQ.S	CheckNoteType_NOFX
	MOVEQ	#3,D0
	SWAP	D0
	MOVE.B	(A0),D0
	SWAP	D0
	RTS
CheckNoteType_NOFX:
	CMPI.B	#$ff,1(A0)
	BEQ.S	CheckNoteType_NOKEYON
	MOVEQ	#1,D0
	RTS
CheckNoteType_NOKEYON:
	TST.B	2(A0)
	BNE.S	CheckNoteType_SIMPLEFX
	MOVEQ	#0,D0
	RTS
CheckNoteType_SIMPLEFX:
	MOVEQ	#2,D0
	SWAP	D0
	MOVE.B	2(A0),D0
	SWAP	D0
	RTS
ProcessInstrUp:
	MOVEM.L	D1-D2,-(A7)
	MOVEQ	#0,D1
	MOVE.B	D0,D1
	BSR.W	SetDecShiftKeyRaster
	ADD.W	D0,D1
	CMPI.W	#$00ff,D1
	BLS.S	LAB_0290
	MOVE.B	#$ff,D1
LAB_0290:
	MOVE.B	D1,D0
	MOVEM.L	(A7)+,D1-D2
	RTS
ProcessInstrDown:
	MOVEM.L	D1-D2,-(A7)
	MOVE.B	D0,D2
	BEQ.S	LAB_0293
	MOVEQ	#0,D1
	MOVE.B	D0,D1
	BSR.W	SetDecShiftKeyRaster
	SUB.W	D0,D1
	BPL.S	LAB_0292
	MOVEQ	#0,D1
LAB_0292:
	CMPI.W	#$00ff,D1
	BHI.S	LAB_0293
	MOVE.B	D1,D2
LAB_0293:
	MOVE.B	D2,D0
	MOVEM.L	(A7)+,D1-D2
	RTS
	DC.W	$0000
PasteTrackTillPos:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualPattEd
	MOVEA.L	A0,A2
	MOVEA.L	4(A2),A0
	MOVE.W	34(A2),D7
	ADD.W	62(A2),D7
	SUBQ.W	#1,D7
	BMI.S	LAB_0296
	MOVE.W	32(A2),D6
	ADD.W	60(A2),D6
	MULU	30(A2),D6
	LEA	0(A0,D6.W),A0
	MOVE.W	28(A2),D6
	MOVEA.L	TrackBuffer_PTR+2,A1
	EXG	A0,A1
LAB_0295:
	BSR.W	CopyNote
	LEA	0(A0,D6.W),A0
	LEA	0(A1,D6.W),A1
	DBF	D7,LAB_0295
LAB_0296:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
CutActualPattern:
	BSR.W	BackupPattern
	BSR.W	CopyPattern
	BSR.W	ClearActualPattern
	BSR.W	DrawEventStatusQ
	RTS
	DC.W	$0000
PasteActualTrack:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	LEA	Test_PATTED+2,A2
	MOVEA.L	4(A2),A0
	MOVE.W	14(A2),D7
	SUBQ.W	#1,D7
	MOVE.W	32(A2),D6
	ADD.W	60(A2),D6
	MULU	30(A2),D6
	LEA	0(A0,D6.W),A0
	MOVE.W	28(A2),D6
	MOVEA.L	TrackBuffer_PTR+2,A1
	EXG	A0,A1
LAB_0299:
	BSR.W	CopyNote
	LEA	0(A0,D6.W),A0
	LEA	0(A1,D6.W),A1
	DBF	D7,LAB_0299
	LEA	Test_PATTED+2,A0
	BSR.W	PatEdDrawPattern
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SwapActualTrack:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	LEA	Test_PATTED+2,A2
	MOVEA.L	4(A2),A0
	MOVE.W	14(A2),D7
	SUBQ.W	#1,D7
	MOVE.W	32(A2),D6
	ADD.W	60(A2),D6
	MULU	30(A2),D6
	LEA	0(A0,D6.W),A0
	MOVE.W	28(A2),D6
	MOVEA.L	TrackBuffer_PTR+2,A1
	EXG	A0,A1
LAB_029B:
	BSR.W	SwapNote
	LEA	0(A0,D6.W),A0
	LEA	0(A1,D6.W),A1
	DBF	D7,LAB_029B
	LEA	Test_PATTED+2,A0
	BSR.W	PatEdDrawPattern
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
AddActualTrack:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	LEA	Test_PATTED+2,A2
	MOVEA.L	4(A2),A0
	MOVE.W	14(A2),D7
	SUBQ.W	#1,D7
	MOVE.W	32(A2),D6
	ADD.W	60(A2),D6
	MULU	30(A2),D6
	LEA	0(A0,D6.W),A0
	MOVE.W	28(A2),D6
	MOVEA.L	TrackBuffer_PTR+2,A1
	EXG	A0,A1
LAB_029D:
	MOVE.B	1(A0),D0
	CMPI.B	#$ff,D0
	BEQ.S	LAB_029E
	CMPI.B	#$ff,1(A1)
	BNE.S	LAB_029E
	BSR.W	CopyNote
LAB_029E:
	LEA	0(A0,D6.W),A0
	LEA	0(A1,D6.W),A1
	DBF	D7,LAB_029D
	LEA	Test_PATTED+2,A0
	BSR.W	PatEdDrawPattern
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ShrinkPattern:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	BackupPatternOff
	BSR.W	CopyPattern
	BSR.W	ClearActualPattern
	BSR.W	BackupPatternOn
	LEA	Test_PATTED+2,A0
	MOVEA.L	24(A0),A2
	MOVEA.L	(A2),A3
	MOVE.W	14(A0),D7
	MOVE.W	18(A0),D6
	MOVE.W	28(A0),D5
	MOVE.W	D5,D4
	LSL.W	#1,D5
	MOVEA.L	4(A0),A0
	MOVEA.L	TrackBuffer_PTR+2,A1
	LSR.W	#1,D7
	SUBQ.W	#1,D7
	SUBQ.W	#1,D6
	MOVE.W	D6,D3
	EXG	A0,A1
	MOVEA.L	A0,A2
	MOVEA.L	A1,A3
LAB_02A0:
	BSR.W	CopyNote
	ADDQ.L	#4,A0
	ADDQ.L	#4,A1
	DBF	D6,LAB_02A0
	LEA	0(A2,D5.W),A2
	MOVEA.L	A2,A0
	LEA	0(A3,D4.W),A3
	MOVEA.L	A3,A1
	MOVE.W	D3,D6
	DBF	D7,LAB_02A0
	LEA	Test_PATTED+2,A0
	BSR.W	PatEdDrawPattern
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ExpandPattern:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	BackupPatternOff
	BSR.W	CopyPattern
	BSR.W	ClearActualPattern
	BSR.W	BackupPatternOn
	LEA	Test_PATTED+2,A0
	MOVEA.L	24(A0),A2
	MOVEA.L	(A2),A3
	MOVE.W	14(A0),D7
	MOVE.W	18(A0),D6
	MOVE.W	28(A0),D5
	MOVE.W	D5,D4
	LSL.W	#1,D4
	MOVEA.L	4(A0),A0
	MOVEA.L	TrackBuffer_PTR+2,A1
	LSR.W	#1,D7
	SUBQ.W	#1,D7
	SUBQ.W	#1,D6
	MOVE.W	D6,D3
	EXG	A0,A1
	MOVEA.L	A0,A2
	MOVEA.L	A1,A3
LAB_02A2:
	BSR.W	CopyNote
	ADDQ.L	#4,A0
	ADDQ.L	#4,A1
	DBF	D6,LAB_02A2
	LEA	0(A2,D5.W),A2
	MOVEA.L	A2,A0
	LEA	0(A3,D4.W),A3
	MOVEA.L	A3,A1
	MOVE.W	D3,D6
	DBF	D7,LAB_02A2
	LEA	Test_PATTED+2,A0
	BSR.W	PatEdDrawPattern
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PartDupPattern:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	CopyPattern
	LEA	Test_PATTED+2,A0
	MOVEA.L	24(A0),A2
	MOVEA.L	(A2),A3
	MOVE.W	12(A2),D7
	MOVE.W	18(A0),D6
	MOVE.W	28(A0),D5
	MOVE.W	10(A2),D2
	MOVE.W	D7,D4
	MULU	D5,D4
	MULU	D5,D2
	ADD.W	D2,D4
	MOVEA.L	4(A0),A1
	MOVEA.L	TrackBuffer_PTR+2,A0
	SUBQ.W	#1,D7
	SUBQ.W	#1,D6
	MOVE.W	D6,D3
	LEA	0(A0,D2.W),A0
	LEA	0(A1,D4.W),A1
	MOVEA.L	A0,A2
	MOVEA.L	A1,A3
LAB_02A4:
	BSR.W	CopyNote
	ADDQ.L	#4,A0
	ADDQ.L	#4,A1
	DBF	D6,LAB_02A4
	LEA	0(A2,D5.W),A2
	MOVEA.L	A2,A0
	LEA	0(A3,D5.W),A3
	MOVEA.L	A3,A1
	MOVE.W	D3,D6
	DBF	D7,LAB_02A4
	LEA	Test_PATTED+2,A0
	BSR.W	PatEdDrawPattern
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
CopyPattern:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	MOVEA.L	24(A0),A2
	MOVEA.L	(A2),A3
	MOVE.W	14(A0),D7
	MULU	18(A0),D7
	MOVEA.L	4(A0),A0
	MOVEA.L	TrackBuffer_PTR+2,A1
	SUBQ.W	#1,D7
	MOVEQ	#4,D6
LAB_02A6:
	BSR.W	CopyNote
	LEA	0(A0,D6.W),A0
	LEA	0(A1,D6.W),A1
	DBF	D7,LAB_02A6
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
GetActualPattern:
	BSR.W	GetActualPattEd
	MOVEA.L	4(A0),A0
	RTS
	DC.W	$0000
GetActualPatNum:
	MOVEM.L	A0,-(A7)
	BSR.W	GetActualPattEd
	MOVEA.L	24(A0),A0
	MOVE.W	8(A0),D0
	MOVEA.L	(A7)+,A0
	RTS
GetActualPatNotes:
	MOVEM.L	A0,-(A7)
	BSR.W	GetActualPattEd
	MOVE.W	14(A0),D0
	MULU	18(A0),D0
	MOVEA.L	(A7)+,A0
	RTS
CopyLockedNotes:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	GetActualPatNum
	CMP.W	LockState(PC),D0
	BNE.S	LAB_02AC
	BSR.S	GetActualPattern
	MOVEA.L	LockBuffer_PTR+2(PC),A1
	BSR.S	GetActualPatNotes
	SUBQ.W	#1,D0
	MOVEQ	#4,D6
	EXG	A0,A1
	BSR.S	GetActualPattern
	MOVEA.L	LockBuffer_PTR+2(PC),A1
	BSR.S	GetActualPatNotes
	SUBQ.W	#1,D0
	MOVEQ	#4,D6
	EXG	A0,A1
LAB_02AB:
	BSR.S	ULCopyNote
	LEA	0(A0,D6.W),A0
	LEA	0(A1,D6.W),A1
	DBF	D0,LAB_02AB
LAB_02AC:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ULCopyNote:
	MOVEM.L	D0,-(A7)
	BSR.W	CheckNoteType
	TST.L	D0
	BNE.S	ULCopyNote_M2
	MOVEM.L	(A7)+,D0
	RTS
ULCopyNote_M2:
	BSR.W	CopyNote
	MOVEM.L	(A7)+,D0
	RTS
LockPattern:
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$0048
	BNE.S	UnlockPattern
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualPatNum
	MOVE.W	D0,LockState
	BSR.W	GetActualPattern
	MOVEA.L	LockBuffer_PTR+2(PC),A1
	BSR.W	GetActualPatNotes
	SUBQ.W	#1,D0
	MOVEQ	#4,D6
LAB_02B0:
	BSR.W	CopyNote
	LEA	0(A0,D6.W),A0
	LEA	0(A1,D6.W),A1
	DBF	D0,LAB_02B0
	MOVE.L	#PatLocked+3,AssText_TXT
	BSR.W	PrintAssTextF
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
LockState:
	DC.W	$ffff
FillLINETITLE_TXT:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
NotePre_TXT:
	MOVE.L	D0,D0
Fill5_TXT:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
pattedtest_TXT:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	DC.W	$0000
ClrLockState:
	MOVE.W	#$ffff,LockState
	RTS
	DC.W	$0000
UnlockPattern:
	MOVE.W	#$ffff,LockState
	MOVE.L	#Patunlocked+1,AssText_TXT
	BSR.W	PrintAssTextF
	RTS
VerifyValueRangeW:
	CMP.W	D0,D1
	BGE.S	VerifyVRW_MinOk
	MOVE.W	D0,D1
	BRA.S	VerifyVRW_X
VerifyVRW_MinOk:
	SWAP	D0
	CMP.W	D0,D1
	BLE.S	VerifyVRW_MaxOk
	MOVE.W	D0,D1
VerifyVRW_MaxOk:
	SWAP	D0
VerifyVRW_X:
	RTS
KeybTuneU:
	MOVEM.L	D0-D1,-(A7)
	BSR.W	SetOctaveKeyRaster
	MOVE.W	KeyboardTune(PC),D1
	ADD.W	D0,D1
	MOVE.L	LAB_02BF(PC),D0
	BSR.S	VerifyValueRangeW
	MOVE.W	D1,KeyboardTune
	BSR.W	PattEdDrawStatus
	MOVEM.L	(A7)+,D0-D1
	RTS
KeybTuneD:
	MOVEM.L	D0-D1,-(A7)
	BSR.W	SetOctaveKeyRaster
	MOVE.W	KeyboardTune(PC),D1
	SUB.W	D0,D1
	MOVE.L	LAB_02BF(PC),D0
	BSR.S	VerifyValueRangeW
	MOVE.W	D1,KeyboardTune
	BSR.W	PattEdDrawStatus
	MOVEM.L	(A7)+,D0-D1
	RTS
KeyboardTune:
	DC.W	$000c
LAB_02BF:
	ORI.B	#$00,EXT_0000.W
BackupPattern:
	DC.W	$0c3a
	DC.W	$00ff
	ORI.W	#$6702,D0
	RTS
BackupPattern_Do:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	MOVEA.L	24(A0),A2
	MOVEA.L	(A2),A3
	MOVE.W	14(A0),D7
	MULU	18(A0),D7
	MOVEA.L	4(A0),A0
	MOVEA.L	UndoBuffer_PTR(PC),A1
	SUBQ.W	#1,D7
	MOVEQ	#4,D6
BackupPattern_L:
	BSR.W	CopyNote
	LEA	0(A0,D6.W),A0
	LEA	0(A1,D6.W),A1
	DBF	D7,BackupPattern_L
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
BackupPattern_FLAG:
	DC.W	$ff00
	DC.W	$0000
BackupPatternOn:
	MOVE.B	#$ff,BackupPattern_FLAG
	RTS
	DC.W	$0000
BackupPatternOff:
	CLR.B	BackupPattern_FLAG
	RTS
UndoPattern:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	MOVEA.L	24(A0),A2
	MOVEA.L	(A2),A3
	MOVE.W	14(A0),D7
	MULU	18(A0),D7
	MOVEA.L	4(A0),A0
	MOVEA.L	UndoBuffer_PTR(PC),A1
	EXG	A0,A1
	SUBQ.W	#1,D7
	MOVEQ	#4,D6
UndoPattern_L:
	BSR.W	SwapNote
	LEA	0(A0,D6.W),A0
	LEA	0(A1,D6.W),A1
	DBF	D7,UndoPattern_L
	BSR.W	PatEdDrawPattern
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PastePattern:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	LEA	Test_PATTED+2,A0
	MOVEA.L	24(A0),A2
	MOVEA.L	(A2),A3
	MOVE.W	14(A0),D7
	MULU	18(A0),D7
	MOVEA.L	4(A0),A0
	MOVEA.L	TrackBuffer_PTR+2,A1
	SUBQ.W	#1,D7
	EXG	A0,A1
InsertActualPattern_L:
	BSR.W	CopyNote
	ADDQ.L	#4,A0
	ADDQ.L	#4,A1
	DBF	D7,InsertActualPattern_L
	LEA	Test_PATTED+2,A0
	BSR.W	PatEdDrawPattern
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
GetPEDBody:
	MOVEM.L	D7/A0,-(A7)
	MOVE.L	#$50544544,D0
	MOVE.L	#$50454432,D1
	BSR.W	NGGetInnerAreaData
	MOVE.W	FONT_H(PC),D7
	LSL.W	#1,D7
	CMP.W	D7,D3
	BCS.S	LAB_02CC
	MOVE.W	FONT_W(PC),D7
	MULU	#$0010,D7
	CMP.W	D7,D2
	BCS.S	LAB_02CC
	DC.W	$4a88
	BEQ.S	LAB_02CC
	DC.W	$4a8d
	BEQ.S	LAB_02CC
LAB_02CB:
	MOVEM.L	(A7)+,D7/A0
	RTS
LAB_02CC:
	SUBA.L	A1,A1
	BRA.S	LAB_02CB
InitPattEd:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualPattEd
	BSR.W	PatEdCrsrOff
	MOVE.L	A1,(A0)
	MOVE.W	18(A1),18(A0)
	MOVEA.L	4(A1),A2
	MOVE.L	A2,20(A0)
	MOVE.L	A2,24(A0)
	MOVE.W	18(A0),D0
	MULU	#$0004,D0
	MOVE.W	D0,28(A0)
	MOVE.W	D0,34(A1)
	MOVE.W	#$0004,30(A0)
	BSR.S	GetPEDBody
	DC.W	$4a89
	BEQ.S	LAB_02CE
	MOVE.W	D0,40(A0)
	MOVE.W	D1,42(A0)
	MOVE.W	D2,50(A0)
	MOVE.W	D3,52(A0)
	MOVE.L	A1,46(A0)
	MOVE.W	FONT_BASE+2(PC),D0
	NEG.W	D0
	MOVE.W	D0,88(A0)
	CLR.W	114(A0)
	BSR.S	InitPatEdDisp
	BSR.W	PEDInitActualPattern
	MOVEA.L	46(A0),A1
	BSR.W	PatEdDrawPattern
LAB_02CE:
	BSR.W	PatEdCrsrOn
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
Check2DRange:
	MOVEM.L	A1,-(A7)
	MOVEA.L	46(A2),A1
	ANDI.L	#$0000ffff,D0
	ANDI.L	#$0000ffff,D1
	SUB.W	(A0),D0
	BMI.S	Check2DRange_XIll
	CMP.W	4(A0),D0
	BLS.S	Check2DRange_XOk
Check2DRange_XIll:
	MOVEQ	#-1,D0
Check2DRange_XOk:
	SUB.W	2(A0),D1
	BMI.S	Check2DRange_YIll
	CMP.W	6(A0),D1
	BLS.S	Check2DRange_YOk
Check2DRange_YIll:
	MOVEQ	#-1,D1
Check2DRange_YOk:
	MOVEA.L	(A7)+,A1
	RTS
	DC.W	$0000
InitPatEdDisp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetPEDBody
	DC.W	$4a89
	BEQ.W	LAB_02D8
	MOVEM.W	D0-D3,120(A0)
	CLR.W	60(A0)
	CLR.W	62(A0)
LAB_02D5:
	MOVEQ	#5,D0
	MOVEQ	#1,D1
	BSR.W	CharToPixel
	MOVE.W	D0,D3
	MOVE.W	D1,D4
	MOVE.W	D3,D5
	MOVE.L	NOTELEN(PC),D0
	MOVEQ	#1,D1
	BSR.W	CharToPixel
	MOVE.W	D0,128(A0)
	MOVE.W	D1,130(A0)
	MOVE.L	VEX_LinesPerPattern,D2
	MOVE.W	D2,14(A0)
	MOVEQ	#0,D2
	MOVE.W	50(A0),D2
	SUB.W	D3,D2
	ADD.W	FONT_W(PC),D2
	DIVU	D0,D2
	ANDI.L	#$0000ffff,D2
	CMP.W	18(A0),D2
	BLS.S	LAB_02D6
	MOVE.W	18(A0),D2
LAB_02D6:
	MOVE.W	D2,64(A0)
	MOVEQ	#0,D2
	MOVE.W	52(A0),D2
	SUB.W	D4,D2
	DIVU	D1,D2
	CMP.W	14(A0),D2
	BLS.S	LAB_02D7
	MOVE.W	14(A0),D2
LAB_02D7:
	MOVE.W	D2,66(A0)
	MOVE.W	64(A0),D0
	MULU	128(A0),D0
	SUBQ.W	#1,D0
	MOVE.W	66(A0),D1
	MULU	130(A0),D1
	SUBQ.W	#1,D1
	MOVEM.W	D0-D1,124(A0)
LAB_02D8:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PEDInitActualPattern:
	MOVEM.L	A1-A3,-(A7)
	CLR.W	32(A0)
	CLR.W	34(A0)
	CLR.W	60(A0)
	CLR.W	62(A0)
	MOVEA.L	20(A0),A1
	MOVEA.L	(A1),A2
	MOVEA.L	4(A2),A3
LAB_02DA:
	MOVE.L	A3,4(A0)
	MOVE.L	A3,8(A0)
	MOVEM.L	(A7)+,A1-A3
	RTS
PatEdCrsrOn:
	MOVEM.L	A0,-(A7)
	BSR.W	GetActualPattEd
	CMPI.B	#$ff,118(A0)
	BEQ.S	LAB_02DC
	BSR.S	PatEdDrawCrsr
	MOVE.B	#$ff,118(A0)
LAB_02DC:
	MOVEA.L	(A7)+,A0
	RTS
PatEdCrsrOff:
	MOVEM.L	A0,-(A7)
	BSR.W	GetActualPattEd
	TST.B	118(A0)
	BEQ.S	LAB_02DF
	BSR.S	PatEdDrawCrsr
	CLR.B	118(A0)
LAB_02DF:
	MOVEA.L	(A7)+,A0
	RTS
PatEdDrawCrsr:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetPEDBody
	DC.W	$4a89
	BEQ.W	LAB_02E1
	BSR.W	GetActualPattEd
	MOVEA.L	A0,A2
	MOVE.L	NOTELEN(PC),D0
	MOVEQ	#1,D1
	BSR.W	CharToPixel
	MOVE.W	D0,D2
	SUB.W	FONT_W(PC),D2
	MOVE.W	D1,D3
	MOVE.W	D0,D4
	MULU	60(A2),D4
	MOVE.W	FONT_H(PC),D5
	MULU	62(A2),D5
	MOVEQ	#4,D0
	MOVEQ	#1,D1
	BSR.W	CharToPixel
	MOVEA.L	46(A2),A1
	ADD.W	40(A2),D0
	ADD.W	42(A2),D1
	SUBQ.W	#1,D3
	ADD.W	D4,D0
	ADD.W	D5,D1
	SUBQ.W	#1,D2
	SUBQ.W	#1,D3
	JSR	Set2PMask
	BSR.W	NGRRectInvert
	MOVEM.L	D0-D3,-(A7)
	MOVE.W	FONT_W(PC),D2
	MULU	#$0003,D2
	SUBQ.W	#1,D2
	MOVE.W	40(A2),D0
	MOVE.W	FONT_H(PC),D3
	SUBQ.W	#1,D3
	BSR.W	NGRRectInvert
	MOVEM.L	(A7)+,D0-D3
	MOVEM.L	D1-D3,-(A7)
	MOVE.W	FONT_W(PC),D2
	MULU	#$0003,D2
	ADD.W	FONT_W(PC),D0
	SUBQ.W	#1,D2
	MOVE.W	FONT_H(PC),D3
	SUBQ.W	#1,D3
	MOVE.W	42(A2),D1
	BSR.W	NGRRectInvert
	MOVEM.L	(A7)+,D1-D3
	MOVE.W	FONT_W(PC),D0
	MULU	#$0004,D0
	ADD.W	120(A2),D0
	MOVE.W	124(A2),D2
	ADD.W	FONT_BASE+2(PC),D1
	ADDQ.W	#1,D1
	MOVEQ	#1,D3
	BSR.W	NGRRectInvert
	JSR	SetOldPMask
	BSR.W	NGRNrm1DrMd
LAB_02E1:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PatEdGetDispBounds:
	MOVEM.L	A0,-(A7)
	BSR.W	GetActualPattEd
	MOVE.W	32(A0),D0
	MOVE.W	34(A0),D1
	MOVE.W	64(A0),D2
	MOVE.W	66(A0),D3
	ADD.W	D0,D2
	ADD.W	D1,D3
	MOVEA.L	(A7)+,A0
	RTS
PatEdLimitToDisp:
	MOVEM.L	D2-D5,-(A7)
	MOVE.W	D0,D4
	MOVE.W	D1,D5
	BSR.S	PatEdGetDispBounds
	CMP.W	D0,D4
	BCC.S	LAB_02E4
	MOVE.W	D0,D4
LAB_02E4:
	CMP.W	D2,D4
	BLS.S	LAB_02E5
	MOVE.W	D2,D4
LAB_02E5:
	CMP.W	D1,D5
	BCC.S	LAB_02E6
	MOVE.W	D1,D5
LAB_02E6:
	CMP.W	D3,D5
	BLS.S	LAB_02E7
	MOVE.W	D3,D5
LAB_02E7:
	MOVE.W	D4,D0
	MOVE.W	D5,D1
	MOVEM.L	(A7)+,D2-D5
	RTS
PatEdCrsrToPix:
	MOVEM.L	D2-D5/A0,-(A7)
	MOVE.W	D0,D4
	MOVE.W	D1,D5
	BSR.W	GetActualPattEd
	MOVE.L	NOTELEN(PC),D0
	MOVEQ	#1,D1
	BSR.W	CharToPixel
	MOVE.W	D0,D2
	MULU	D4,D2
	MOVE.W	FONT_H(PC),D3
	MULU	D5,D3
	MOVEQ	#4,D0
	MOVEQ	#1,D1
	BSR.W	CharToPixel
	ADD.W	40(A0),D0
	ADD.W	42(A0),D1
	ADD.W	D2,D0
	ADD.W	D3,D1
	MOVEM.L	(A7)+,D2-D5/A0
	RTS
	DC.W	$0000
BlockRangeOff:
	BSR.S	HideBlockRange
	CLR.W	LAB_02F3
	RTS
	DC.W	$0000
BlockRangeOn:
	MOVE.W	#$ffff,LAB_02F3
	BSR.S	ShowBlockRange
	RTS
HideBlockRange:
	CMPI.B	#$ff,MACROPROCESS+2
	BEQ.S	LAB_02EC
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$00c2
	BEQ.S	PatEdDrawBlockRange
LAB_02EC:
	RTS
ShowBlockRange:
	CMPI.B	#$ff,MACROPROCESS+2
	BEQ.S	LAB_02EE+4
	DC.W	$4a7a
GetPEDRP:
LAB_02EE:
	ORI.L	#$67104e75,-25(A0,D4.L)
	DC.W	$f000
	BSR.W	GetPEDBody
	MOVEM.L	(A7)+,D0-D3
	RTS
PatEdDrawBlockRange:
	CMPI.B	#$ff,MACROPROCESS+2
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	GetPEDRP+6
	DC.W	$4a89
	BEQ.W	LAB_02F1
	DC.W	$4a7a
	ASR.B	#6,D6
	BNE.S	LAB_02F1
	DC.W	$0c7a
	DC.W	$ffff
	ORI.L	#$667445fa,D0
	DC.W	$ebf8
	TST.W	10(A2)
	BEQ.S	LAB_02F1
	TST.W	12(A2)
	BEQ.S	LAB_02F1
	ADDQ.L	#2,A2
	BSR.W	GetActualPattEd
	MOVEM.W	(A2)+,D2-D3
	MOVEM.W	(A2)+,D0-D1
	ADDQ.W	#1,D0
	ADDQ.W	#1,D1
	BSR.W	PatEdLimitToDisp
	SUB.W	32(A0),D0
	SUB.W	34(A0),D1
	BSR.W	PatEdCrsrToPix
	EXG	D0,D2
	EXG	D1,D3
	BSR.W	PatEdLimitToDisp
	SUB.W	32(A0),D0
	SUB.W	34(A0),D1
	BSR.W	PatEdCrsrToPix
	SUB.W	D0,D2
	SUB.W	D1,D3
	SUBQ.W	#1,D2
	SUB.W	FONT_W(PC),D2
	BMI.S	LAB_02F1
	SUBQ.W	#1,D3
	BMI.S	LAB_02F1
	BSR.W	GetPEDRP+6
	JSR	Set2PMask
	BSR.W	NGRRectInvert
	JSR	SetOldPMask
	NOT.W	BLOCKDRAW
	BSR.W	NGRNrm1DrMd
LAB_02F1:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
BLOCKDRAW:
	DC.W	$0000
LAB_02F3:
	DC.W	$ffff
PatEdDrawLineN:
	BSR.W	HideBlockRange
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#0,D7
	MOVE.W	D0,D7
	BMI.S	PatEdDrawLineN_X
	BSR.W	GetActualPattEd
	MOVEA.L	A0,A2
	BSR.W	GetPEDRP+6
	BSR.W	PatEdMainDrMd
	BRA.W	PatEdDrawActLine_IN
PatEdDrawLineN_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
DrawNoteSiFxVol:
	ANDI.L	#$000000ff,D0
	LEA	PEDSiFx_CONVTAB,A2
	EXG	A0,A2
	JSR	ProcTabValuetoLong
	EXG	A0,A2
	SWAP	D0
	MOVE.W	D0,-2(A0)
	ROL.L	#8,D0
	MOVE.B	D0,(A0)
	MOVE.W	#$2d2d,-4(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawNote_SETPITCH:
	MOVE.L	#$50495443,4(A0)
	MOVE.B	#$48,8(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawNote_PitchUp:
	MOVE.L	#$50205570,4(A0)
	MOVE.B	#$20,8(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawNote_PitchUp2:
	MOVE.L	#$50325570,4(A0)
	MOVE.B	#$20,8(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawNote_PitchUp3:
	MOVE.L	#$50345570,4(A0)
	MOVE.B	#$20,8(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawNote_PitchDown:
	MOVE.L	#$50204477,4(A0)
	MOVE.B	#$6e,8(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawNote_PitchDown2:
	MOVE.L	#$50324477,4(A0)
	MOVE.B	#$6e,8(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawNote_PitchDown3:
	MOVE.L	#$50344477,4(A0)
	MOVE.B	#$6e,8(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawNotePEDVol:
	CMPI.B	#$64,D0
	BCC.S	LAB_02FF
	DIVU	#$000a,D0
	ADDI.B	#$30,D0
	MOVE.B	D0,-1(A0)
	SWAP	D0
	ADDI.B	#$30,D0
	MOVE.B	D0,(A0)
	RTS
LAB_02FF:
	MOVE.B	#$2b,-1(A0)
	MOVE.B	#$30,(A0)
	RTS
ConvertNote_CPLX:
	MOVEQ	#0,D0
	MOVE.B	(A2),D0
	LEA	Note_TXT+1,A3
	MOVE.L	#$20202020,(A3)
	LEA	FXDraw_CONVERTAB,A0
	JSR	ProcTabValuetoLong
	CMPI.L	#$ffffffff,D0
	BEQ.S	DrawNote_ERR
	MOVE.L	D0,(A3)
	LEA	4(A3),A0
	MOVE.L	#$20202020,(A0)
	MOVEQ	#0,D0
	MOVE.B	3(A2),D0
	JSR	ConvDecBytePtr
	ADDQ.L	#4,A0
	MOVEQ	#0,D0
	MOVE.B	2(A2),D0
	BSR.S	DrawNotePEDVol
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawNote_ERR:
	JSR	WarnFlash
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ConvertNote:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A0,A2
	BSR.W	CheckNoteType
	CMPI.W	#$0003,D0
	BEQ.S	ConvertNote_CPLX
	LEA	Note_TXT+1,A0
	MOVE.L	#$20202020,(A0)
	MOVEQ	#0,D0
	MOVE.B	1(A2),D0
	CMPI.B	#$ff,D0
	BEQ.S	DrawNote_NONOTE
	DIVU	LAB_119F,D0
	MOVE.B	D0,D1
	ANDI.B	#$07,D1
	ADDI.B	#$30,D1
	SWAP	D0
	LSL.W	#1,D0
	LEA	NoteNameB_TAB+1,A3
	MOVE.W	0(A3,D0.W),D3
	MOVE.W	D3,(A0)
	MOVE.B	D1,2(A0)
	CMPI.B	#$f8,2(A2)
	BEQ.W	DrawNote_SETPITCH
	CMPI.B	#$f7,2(A2)
	BEQ.W	DrawNote_PitchUp
	CMPI.B	#$f5,2(A2)
	BEQ.W	DrawNote_PitchUp2
	CMPI.B	#$f3,2(A2)
	BEQ.W	DrawNote_PitchUp3
	CMPI.B	#$f6,2(A2)
	BEQ.W	DrawNote_PitchDown
	CMPI.B	#$f4,2(A2)
	BEQ.W	DrawNote_PitchDown2
	CMPI.B	#$f2,2(A2)
	BEQ.W	DrawNote_PitchDown3
DrawNote_NONOTE:
	ADDQ.L	#4,A0
	MOVE.L	#$20202020,(A0)
	MOVEQ	#0,D0
	MOVE.B	3(A2),D0
	JSR	ConvDecBytePtr
	BRA.S	DrawNote_NOINSTR
DrawNote_NOFX:
	CMPI.B	#$f7,2(A2)
	BEQ.W	DrawNote_PitchUp
	CMPI.B	#$f6,2(A2)
	BEQ.W	DrawNote_PitchDown
	CMPI.B	#$f5,2(A2)
	BEQ.W	DrawNote_PitchUp2
	CMPI.B	#$f4,2(A2)
	BEQ.W	DrawNote_PitchDown2
	CMPI.B	#$f3,2(A2)
	BEQ.W	DrawNote_PitchUp3
	CMPI.B	#$f2,2(A2)
	BEQ.W	DrawNote_PitchDown3
	ADDQ.L	#4,A0
	MOVE.L	#$20202020,(A0)
	MOVEQ	#0,D0
	MOVE.B	3(A2),D0
	CMPI.B	#$ff,D0
	BEQ.S	DrawNote_NOINSTR
	JSR	ConvDecBytePtr
DrawNote_NOINSTR:
	ADDQ.L	#4,A0
	MOVE.B	#$20,(A0)
	MOVEQ	#0,D0
	MOVE.B	2(A2),D0
	BEQ.S	LAB_0306
	CMPI.B	#$64,D0
	BHI.W	DrawNoteSiFxVol
	BSR.W	DrawNotePEDVol
LAB_0306:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PatEdMainDrMd:
	BSR.W	NGRNrm1DrMd
	BRA.W	NGRDarkAPen
	DC.W	$0000
PatEdDrawFirstLine:
	BSR.W	HideBlockRange
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualPattEd
	MOVEA.L	A0,A2
	BSR.W	GetPEDRP+6
	BSR.S	PatEdMainDrMd
	MOVEQ	#0,D7
	BRA.S	PatEdDrawActLine_IN
PatEdDrawLastLine:
	BSR.W	HideBlockRange
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualPattEd
	MOVEA.L	A0,A2
	BSR.W	GetPEDRP+6
	DC.W	$4a89
	BEQ.W	PatEdDrawLineN_X
	BSR.S	PatEdMainDrMd
	MOVE.W	66(A2),D7
	SUBQ.W	#1,D7
	BRA.S	PatEdDrawActLine_IN
	DC.W	$0000
PatEdDrawActLine:
	BSR.W	HideBlockRange
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualPattEd
	MOVEA.L	A0,A2
	MOVE.W	62(A2),D7
PatEdDrawActLine_IN:
	BSR.W	GetPEDRP+6
	DC.W	$4a89
	BEQ.W	LAB_0310
	BSR.W	PatEdCrsrOff
	MOVEA.L	4(A2),A3
	MOVE.W	32(A2),D0
	MULU	30(A2),D0
	MOVE.W	34(A2),D1
	ADD.W	D7,D1
	MULU	28(A2),D1
	ADD.L	D0,D1
	LEA	0(A3,D1.L),A3
	MOVEA.L	PattedTxtBuf_PTR(PC),A1
	CLR.B	(A1)
	MOVE.W	34(A2),D0
	ADD.W	D7,D0
	MOVE.B	#$20,NotePre_TXT
	MOVEA.L	TabulatorMem_PTR+2,A0
	TST.B	0(A0,D0.W)
	BEQ.S	LAB_030C
	MOVE.B	#$54,NotePre_TXT
LAB_030C:
	JSR	ConvertToDecByte
	LEA	DecByteSave,A0
	JSR	AddString
	MOVE.W	64(A2),D5
	SUBQ.W	#1,D5
	MOVEA.L	A3,A4
LAB_030D:
	LEA	NotePre_TXT(PC),A0
	JSR	AddString
	MOVE.B	#$20,(A0)
	MOVEA.L	A4,A0
	BSR.W	ConvertNote
	LEA	Note_TXT+1,A0
	DC.W	$0cba
	ORI.B	#$0a,D0
	ADDA.L	A6,A4
	BEQ.S	LAB_030F
	CMPI.L	#$20202020,(A0)
	BNE.S	LAB_030E
	MOVE.L	5(A0),(A0)
LAB_030E:
	CLR.B	4(A0)
LAB_030F:
	JSR	AddString
	MOVE.L	VEX_NoteSize,D0
	LEA	0(A4,D0.W),A4
	DBF	D5,LAB_030D
	MOVE.L	VEX_LineSize+2,D0
	LEA	0(A3,D0.W),A3
	MOVE.W	42(A2),D1
	ADD.W	FONT_H(PC),D1
	MOVE.W	D7,D0
	MULU	FONT_H(PC),D0
	ADD.W	D0,D1
	BSR.W	GetPEDRP+6
	BSR.W	PatEdMainDrMd
	BSR.W	PEDDrawTxtLine
	MOVE.B	#$ff,118(A2)
	BSR.W	PatEdDrawCrsr
LAB_0310:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PattedTxtBuf_PTR:
	ORI.B	#$00,D0
	DC.W	$0000
	SUBI.B	#$01,D0
LockBuffer_PTR:
	ORI.B	#$00,D0
LAB_0313:
	ORI.B	#$00,D0
	ORI.B	#$01,D0
	DC.W	$0000
SetPosNumb:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualPattEd
	MOVE.W	D0,114(A0)
	BSR.W	PosToPatNum
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PattedUpdateDisp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	DrawPattedTitle
	LEA	PattedUpdate_OLD(PC),A2
	BSR.W	GetActualPattEd
	BSR.W	CalcActNoteData
	MOVE.L	4(A0),D2
	MOVE.W	34(A0),D3
	MOVE.W	32(A0),D4
	CMP.L	(A2),D2
	BNE.S	LAB_0316
	CMP.W	4(A2),D3
	BNE.S	LAB_0316
	CMP.W	6(A2),D4
	BEQ.S	LAB_0317
LAB_0316:
	MOVE.L	D2,(A2)
	MOVE.W	D3,4(A2)
	MOVE.W	D4,6(A2)
	BSR.W	PatEdDrawPattern
	BSR.W	ShowBlockRange
LAB_0317:
	BSR.W	PattEdDrawStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PattedUpdate_OLD:
	DC.W	$ffff
	DC.W	$ffff
LAB_0319:
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$0000
PattedUpdateReset:
	MOVEM.L	D0/A0,-(A7)
	LEA	PattedUpdate_OLD(PC),A0
	MOVEQ	#-1,D0
	MOVE.L	D0,(A0)+
	MOVE.L	D0,(A0)+
	MOVEM.L	(A7)+,D0/A0
	RTS
PatEdDrawTitle:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualPattEd
	MOVEA.L	A0,A2
	BSR.W	GetPEDRP+6
	DC.W	$4a89
	BEQ.S	LAB_031C
	BSR.W	PatEdCrsrOff
	BSR.W	PatEdMainDrMd
	BSR.W	PEDBuildTitle
	MOVE.W	42(A2),D1
	MOVE.W	D1,D6
	BSR.W	PEDDrawTxtLine
	BSR.W	PatEdCrsrOn
LAB_031C:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PatEdDrawTitleQ:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualPattEd
	MOVEA.L	A0,A2
	BSR.W	GetPEDRP+6
	DC.W	$4a89
	BEQ.S	LAB_031E
	BSR.W	PatEdMainDrMd
	BSR.W	PEDBuildTitle
	MOVE.W	42(A2),D1
	MOVE.W	D1,D6
	BSR.W	PEDDrawTxtLine
LAB_031E:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PatEdDrawPattern:
	CMPI.B	#$ff,VIRTUEL_MSG
	BNE.S	LAB_0320
	RTS
LAB_0320:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	PatEdCrsrOff
	BSR.W	HideBlockRange
	BSR.W	CopyLockedNotes
	BSR.W	GetActualPattEd
	MOVEA.L	A0,A2
	BSR.W	GetPEDRP+6
	DC.W	$4a89
	BEQ.W	LAB_0327
	BSR.W	PatEdMainDrMd
	JSR	Set2PMask
	BSR.W	PEDBuildTitle
	MOVE.W	42(A2),D1
	MOVE.W	D1,D6
	BSR.W	PEDDrawTxtLine
	ADD.W	FONT_H(PC),D6
	MOVE.B	#$ff,118(A2)
	MOVE.W	34(A2),D2
	MOVE.W	66(A2),D7
	SUBQ.W	#1,D7
	BMI.W	LAB_0326
	MOVEA.L	4(A2),A3
	MOVE.W	32(A2),D0
	MULU	30(A0),D0
	LEA	0(A3,D0.L),A3
	MOVE.W	34(A0),D0
	MULU	28(A0),D0
	LEA	0(A3,D0.L),A3
LAB_0321:
	MOVEA.L	PattedTxtBuf_PTR(PC),A1
	CLR.B	(A1)
	MOVE.B	#$20,NotePre_TXT
	MOVEA.L	TabulatorMem_PTR+2,A0
	TST.B	0(A0,D2.W)
	BEQ.S	LAB_0322
	MOVE.B	#$54,NotePre_TXT
LAB_0322:
	MOVE.W	D2,D0
	JSR	ConvertToDecByte
	LEA	DecByteSave,A0
	JSR	AddString
	MOVE.W	64(A2),D5
	SUBQ.W	#1,D5
	MOVEA.L	A3,A4
LAB_0323:
	LEA	NotePre_TXT(PC),A0
	JSR	AddString
	MOVE.B	#$20,(A0)
	MOVEA.L	A4,A0
	BSR.W	ConvertNote
	LEA	Note_TXT+1,A0
	DC.W	$0cba
	ORI.B	#$0a,D0
	ADD.L	D3,-(A2)
	BEQ.S	LAB_0325
	CMPI.L	#$20202020,(A0)
	BNE.S	LAB_0324
	MOVE.L	5(A0),(A0)
LAB_0324:
	CLR.B	4(A0)
LAB_0325:
	JSR	AddString
	MOVE.L	VEX_NoteSize,D0
	LEA	0(A4,D0.W),A4
	DBF	D5,LAB_0323
	MOVE.L	VEX_LineSize+2,D0
	LEA	0(A3,D0.L),A3
	MOVE.W	D6,D1
	BSR.S	PEDDrawTxtLine
	ADD.W	FONT_H(PC),D6
	ADDQ.W	#1,D2
	DBF	D7,LAB_0321
LAB_0326:
	BSR.W	GetPEDRP+6
	BSR.W	PatEdDrawCrsr
	BSR.W	ShowBlockRange
	JSR	SetOldPMask
LAB_0327:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
CorrectXYScr2Win:
	MOVEM.L	D2-D3/A0,-(A7)
	EXG	D0,D2
	MOVE.W	D1,D3
	BSR.W	GetPEDWindow
	DC.W	$4a88
	BEQ.S	LAB_0329
	ADD.W	4(A0),D2
	ADD.W	6(A0),D3
	ADD.W	WINDOW_TOP(PC),D3
	SUBQ.W	#1,D3
	ADDQ.W	#4,D2
	MOVE.W	D2,D0
	MOVE.W	D3,D1
LAB_0329:
	MOVEM.L	(A7)+,D2-D3/A0
	RTS
	DC.W	$0000
PEDDrawTxtLine:
	MOVEM.L	D0-D1/A0-A1/A5,-(A7)
	MOVE.W	40(A2),D0
	SUB.W	88(A2),D1
	BSR.W	GetPEDRP+6
	MOVEA.L	PattedTxtBuf_PTR(PC),A0
	BSR.W	DrawTextXY
	MOVEM.L	(A7)+,D0-D1/A0-A1/A5
	RTS
	DC.W	$0000
PEDBuildTitle:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	32(A2),D0
	ADDQ.W	#1,D0
	MOVEA.L	PattedTxtBuf_PTR(PC),A1
	CLR.B	(A1)
	LEA	FillLINETITLE_TXT(PC),A0
	JSR	AddString
	LEA	PlayTrackInfo+1,A3
	MOVE.W	64(A2),D7
	SUBQ.W	#1,D7
	BMI.S	LAB_032F
LAB_032C:
	JSR	ConvertToDecByte
	LEA	DecByteSave,A0
	JSR	AddString
	LEA	Fill5_TXT(PC),A0
	DC.W	$0cba
	ORI.B	#$0a,D0
	ADD.L	EXT_001b.W,D3
	MOVE.W	#$2020,(A0)
	TST.B	-1(A3,D0.W)
	BNE.S	LAB_032D
	MOVE.B	#$4d,(A0)
LAB_032D:
	CLR.B	2(A0)
	BRA.S	LAB_032E
	MOVE.B	#$20,(A0)
	MOVE.L	#$20202020,1(A0)
	TST.B	-1(A3,D0.W)
	BNE.S	LAB_032E
	MOVE.B	#$2a,(A0)
	MOVE.L	#$4d202020,1(A0)
LAB_032E:
	JSR	AddString
	MOVE.B	#$20,2(A0)
	ADDQ.W	#1,D0
	DBF	D7,LAB_032C
	MOVEA.L	PattedTxtBuf_PTR(PC),A0
	MOVEQ	#2,D0
	BSR.S	ClipString
LAB_032F:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ClipString:
	MOVEM.L	A0,-(A7)
LAB_0331:
	TST.B	(A0)+
	BNE.S	LAB_0331
	SUBA.W	D0,A0
	CLR.B	(A0)
	MOVEA.L	(A7)+,A0
	RTS
	DC.W	$0000
ScaleInsideWin:
	MOVE.L	D4,-(A7)
	DC.W	$4a88
	BEQ.S	LAB_0333
	MOVE.W	8(A0),D4
	MULU	D4,D0
	MULU	D4,D2
	MOVE.W	10(A0),D4
	MULU	D4,D1
	MULU	D4,D3
	MOVEQ	#100,D4
	DIVU	D4,D0
	DIVU	D4,D1
	DIVU	D4,D2
	DIVU	D4,D3
LAB_0333:
	MOVE.L	D4,(A7)+
	RTS
HiScaleInsideWin:
	MOVEM.L	D4-D7/A1,-(A7)
	DC.W	$4a88
	BEQ.S	LAB_0335
	MOVEA.L	124(A0),A1
	MOVE.W	20(A1),D4
	SUB.W	16(A1),D4
	MULU	D4,D0
	MULU	D4,D2
	MOVE.W	22(A1),D4
	SUB.W	18(A1),D4
	SUB.W	FONT_H(PC),D4
	MULU	D4,D1
	MULU	D4,D3
	MOVE.W	20(A1),D4
	SUB.W	4(A0),D4
	ADD.W	D4,D0
	MOVE.W	22(A1),D4
	SUB.W	6(A0),D4
	ADD.W	D4,D1
	MOVE.L	#$000003e8,D4
	DIVU	D4,D0
	DIVU	D4,D1
	DIVU	D4,D2
	DIVU	D4,D3
	ADD.W	FONT_H(PC),D1
LAB_0335:
	MOVEM.L	(A7)+,D4-D7/A1
	RTS
HiScaleInsideRect:
	MOVEM.L	D4,-(A7)
	DC.W	$4a88
	BEQ.S	LAB_0337
	MOVE.W	4(A0),D4
	MULU	D4,D0
	MULU	D4,D2
	MOVE.W	6(A0),D4
	MULU	D4,D1
	MULU	D4,D3
	MOVE.L	#$000003e8,D4
	DIVU	D4,D0
	DIVU	D4,D1
	DIVU	D4,D2
	DIVU	D4,D3
	MOVE.L	#$0000ffff,D4
	AND.L	D4,D0
	AND.L	D4,D1
	AND.L	D4,D2
	AND.L	D4,D3
LAB_0337:
	MOVEM.L	(A7)+,D4
	RTS
	DC.W	$0000
HiScalePixel:
	MOVEM.L	D4,-(A7)
	DC.W	$4a88
	BEQ.S	LAB_0339
	MOVE.W	4(A0),D4
	MULU	D4,D0
	MOVE.W	6(A0),D4
	MULU	D4,D1
	MOVE.L	#$000003e8,D4
	DIVU	D4,D0
	DIVU	D4,D1
	MOVE.L	#$0000ffff,D4
	AND.L	D4,D0
	AND.L	D4,D1
	ADD.W	(A0),D0
	ADD.W	2(A0),D1
LAB_0339:
	MOVEM.L	(A7)+,D4
	RTS
TestInitPatterns:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	NoteMem_PTR+2,A0
	MOVEA.L	First_PATHEAD+2,A1
	MOVE.L	VEX_PattNumb,D7
	SUBQ.L	#1,D7
	MOVEQ	#16,D6
	MOVE.L	VEX_PatternSize,D5
LAB_033B:
	CLR.W	2(A1)
	MOVE.L	A0,4(A1)
	LEA	0(A0,D5.L),A0
	CLR.W	12(A1)
	LEA	0(A1,D6.W),A1
	DBF	D7,LAB_033B
	BSR.S	InitNoteMem
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
InitNoteMem:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	NoteMem_PTR+2,A1
	DC.W	$4a88
	BEQ.S	LAB_033F
	MOVE.L	VEX_PattNumb,D6
	SUBQ.L	#1,D6
	MOVEQ	#4,D5
	MOVEQ	#0,D0
LAB_033D:
	MOVE.L	VEX_NotePerPattern,D7
	SUBQ.L	#1,D7
LAB_033E:
	MOVE.B	#$ff,1(A1)
	MOVE.B	D0,3(A1)
	MOVE.B	D0,2(A1)
	MOVE.B	D0,(A1)
	LEA	0(A1,D5.W),A1
	DBF	D7,LAB_033E
	DBF	D6,LAB_033D
LAB_033F:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
WaitGfxSync:
	MOVEM.L	D0-D1/A0-A1/A6,-(A7)
	MOVEA.L	_GraphicsBase,A6
	JSR	-270(A6)
	MOVEM.L	(A7)+,D0-D1/A0-A1/A6
	RTS
AdjustActualPattEd:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetPEDBody
	DC.W	$4a89
	BEQ.S	LAB_0342
	BSR.W	PatEdCrsrOff
	BSR.W	GetActualPattEd
	BSR.W	GetPEDBody
	MOVE.W	D0,40(A0)
	MOVE.W	D1,42(A0)
	MOVE.W	D2,50(A0)
	MOVE.W	D3,52(A0)
	MOVE.L	A1,46(A0)
	BSR.W	InitPatEdDisp
	BSR.W	PatEdDrawPattern
	BSR.W	PattEdDrawStatus
	JSR	DrawPattedTitle
	BSR.W	PatEdCrsrOn
LAB_0342:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawMVolume:
	MOVEM.L	D0-D2,-(A7)
	MOVE.L	#$53593331,D0
	MOVEQ	#0,D2
	MOVE.B	SYSVOL,D2
	BSR.W	NGODrawDecWord3Char
	MOVEM.L	(A7)+,D0-D2
	RTS
DrawMBalance:
	MOVEM.L	D0-D2,-(A7)
	MOVE.L	#$53593335,D0
	MOVEQ	#0,D2
	MOVE.B	LAB_13FC+2,D2
	BSR.W	NGODrawDecWord3Char
	MOVEM.L	(A7)+,D0-D2
	RTS
DrawSystemSetup:
	MOVEM.L	D0-D3/A0,-(A7)
	MOVEQ	#0,D2
	MOVE.L	VexQuality,D3
	DC.W	$4c3c
	MOVE.W	D2,D2
	DC.W	$0000
	MOVEQ	#-61,D0
	DC.W	$4c7c
	MOVE.W	D2,D2
	ORI.B	#$64,D0
	LEA	DecLongSave(PC),A0
	MOVE.L	D3,D0
	BSR.W	ConvertToDecLong
	LEA	LAB_083A(PC),A0
	MOVE.L	#$53593339,D0
	LEA	LAB_083A(PC),A0
	BSR.W	NGODrawText
	MOVE.L	#$53593344,D0
	MOVE.L	VexSpeed,D2
	MULU	#$0006,D2
	LSR.L	#2,D2
	BSR.W	NGODrawDecWord3Char
	MOVE.L	#$53593331,D0
	MOVEQ	#0,D2
	MOVE.B	SYSVOL,D2
	BSR.W	NGODrawDecWord3Char
	MOVE.L	#$53593335,D0
	MOVEQ	#0,D2
	MOVE.B	LAB_13FC+2,D2
	BSR.W	NGODrawDecWord3Char
	BSR.W	ShowDSPPlugGui
	MOVEM.L	(A7)+,D0-D3/A0
	RTS
DrawEventStatusQ:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CMPI.B	#$ff,MACROPROCESS+2
	BEQ.S	LAB_0347
	CMPI.W	#$ffff,MOD_RELOAD
	BEQ.S	LAB_0347
	DC.W	$0c7a
	DC.W	$ffff
	MOVEA.L	D6,A7
	BEQ.S	LAB_0347
	MOVE.L	#$45564544,D0
	MOVE.L	#$45454431,D1
	BSR.W	NGFindArea
	DC.W	$4a88
	BEQ.S	LAB_0347
	BSR.W	GetPEDRP+6
	DC.W	$4a89
	BEQ.S	LAB_0347
	BSR.W	GetActualPattEd
	MOVEA.L	A0,A4
	BSR.W	CalcDispEdOffsets
	BSR.W	CalcActNoteData
	MOVEA.L	8(A4),A0
	CMPI.L	#$00ff0000,(A0)
	BEQ.S	LAB_0347
	MOVE.L	(A0),D0
	CMP.L	LastEvent(PC),D0
	BEQ.S	LAB_0347
	MOVE.L	D0,LastEvent
	BSR.W	DrawNoteEvent
	JSR	UpdateActWave
LAB_0347:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawEventStatus:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CMPI.B	#$ff,MACROPROCESS+2
	BEQ.S	LAB_0349
	CMPI.W	#$ffff,MOD_RELOAD
	BEQ.S	LAB_0349
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$2dd2
	BEQ.S	LAB_0349
	MOVE.L	#$45564544,D0
	MOVE.L	#$45454431,D1
	BSR.W	NGFindArea
	DC.W	$4a88
	BEQ.S	LAB_0349
	BSR.W	GetPEDRP+6
	DC.W	$4a89
	BEQ.S	LAB_0349
	BSR.W	GetActualPattEd
	MOVEA.L	A0,A4
	BSR.W	CalcDispEdOffsets
	BSR.W	CalcActNoteData
	MOVEA.L	8(A4),A0
	MOVE.L	(A0),D0
	CMP.L	LastEvent(PC),D0
	BEQ.S	LAB_0349
	MOVE.L	D0,LastEvent
	BSR.W	DrawNoteEvent
LAB_0349:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LastEvent:
	ORI.B	#$00,D0
	DC.W	$0000
PattEdDrawStatus:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CMPI.B	#$ff,MACROPROCESS+2
	BEQ.S	LAB_034C
	CMPI.W	#$ffff,MOD_RELOAD
	BEQ.S	LAB_034C
	BSR.W	GetPEDRP+6
	DC.W	$4a89
	BEQ.S	LAB_034C
	BSR.W	GetActualPattEd
	MOVEA.L	A0,A4
	BSR.W	CalcDispEdOffsets
	BSR.W	CalcActNoteData
	MOVEA.L	8(A4),A0
	MOVEQ	#0,D2
	MOVEA.L	24(A4),A3
	MOVE.W	8(A3),D2
	MOVE.L	#$50453031,D0
	BSR.W	NGODrawDecWord4Char
	MOVE.L	#$50453133,D0
	MOVE.W	KeyboardTune(PC),D2
	BSR.W	NGODrawDecWord3Char
LAB_034C:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
SequenzUp:
	MOVEM.L	A0,-(A7)
	LEA	MoveNextSeq(PC),A0
	BSR.W	DecShiftRepeat
	BSR.W	WaitGfxSync
	BSR.W	DrawSequence
	MOVEA.L	(A7)+,A0
	RTS
SequenzDwn:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	MovePrevSeq(PC),A0
	BSR.W	DecShiftRepeat
	BSR.W	WaitGfxSync
	BSR.W	DrawSequence
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
MoveLastSeq:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_SONG,A1
	MOVE.W	#$003e,D0
	MOVE.W	D0,46(A1)
	MULU	#$0010,D0
	MOVEA.L	38(A1),A2
	LEA	0(A2,D0.W),A2
	MOVE.L	A2,42(A1)
	BSR.W	DrawSongStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DupActSeq:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_SONG,A0
	MOVE.W	46(A0),D0
	MOVE.L	42(A0),D1
	CMPI.W	#$003e,D0
	BCC.S	LAB_0352
	ADDI.L	#$00000010,SeqPuffer_PTR
	BSR.S	MoveLastSeq
	MOVEQ	#61,D7
	SUB.W	D0,D7
	BMI.S	LAB_0352
	MOVE.B	#$ff,MACROPROCESS+2
LAB_0351:
	BSR.W	MovePrevSeq
	BSR.W	CopyActSeq
	BSR.W	MoveNextSeq
	BSR.W	PasteActSeq
	BSR.W	MovePrevSeq
	DBF	D7,LAB_0351
	MOVE.W	D0,46(A0)
	MOVE.L	D1,42(A0)
	BSR.W	CopyActSeq
	BSR.W	MoveNextSeq
	BSR.W	PasteActSeq
	CLR.B	MACROPROCESS+2
	SUBI.L	#$00000010,SeqPuffer_PTR
	BSR.W	DrawSequence
LAB_0352:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DelActSeq:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	ADDI.L	#$00000010,SeqPuffer_PTR
	LEA	Test_SONG,A0
	MOVE.W	46(A0),D0
	MOVE.L	42(A0),D1
	MOVEQ	#61,D7
	SUB.W	D0,D7
	BMI.S	LAB_0355
	MOVE.B	#$ff,MACROPROCESS+2
LAB_0354:
	BSR.W	MoveNextSeq
	BSR.S	CopyActSeq
	BSR.W	MovePrevSeq
	BSR.S	PasteActSeq
	BSR.W	MoveNextSeq
	DBF	D7,LAB_0354
	MOVE.W	D0,46(A0)
	MOVE.L	D1,42(A0)
	CLR.B	MACROPROCESS+2
	SUBI.L	#$00000010,SeqPuffer_PTR
	BSR.W	DrawSequence
LAB_0355:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
CopyActSeq:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_SONG,A2
	MOVEA.L	42(A2),A0
	MOVEA.L	SeqPuffer_PTR(PC),A1
	BSR.S	CopySequence
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PasteActSeq:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_SONG,A2
	MOVEA.L	42(A2),A1
	MOVEA.L	SeqPuffer_PTR(PC),A0
	BSR.S	CopySequence
	BSR.W	DrawSongStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
CutActSeq:
	BSR.S	CopyActSeq
	BSR.W	DelActSeq
	BSR.W	DrawSongStatus
	RTS
ClearActSeq:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_SONG,A1
	MOVEA.L	42(A1),A0
	CLR.W	(A0)
	MOVE.W	#$0001,2(A0)
	MOVE.W	#$0001,4(A0)
	CLR.W	6(A0)
	CLR.W	8(A0)
	BSR.W	DrawSongStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SeqPuffer_PTR:
	ORI.B	#$00,D0
	ORI.B	#$30,D0
	ORI.B	#$00,D1
	DC.W	$0000
CopySequence:
	MOVEM.L	D0,-(A7)
	MOVEQ	#16,D0
	BSR.W	CopyMemory
	MOVEM.L	(A7)+,D0
	RTS
SelectSequenceType:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$53453241,D0
	BSR.W	NGFindGadID
	DC.W	$4a88
	BEQ.S	LAB_035E
	MOVE.L	64(A0),D7
	LEA	Test_SONG,A1
	MOVEA.L	42(A1),A2
	MOVEQ	#0,D0
	TST.W	D7
	BEQ.S	LAB_035D
	MOVEQ	#1,D0
	SUBQ.W	#1,D7
	BEQ.S	LAB_035D
	MOVEQ	#-1,D0
LAB_035D:
	MOVE.W	D0,6(A2)
	MOVE.L	ActualNGWWIN_ID(PC),D0
	LEA	NGWin_Info(PC),A6
	MOVEA.L	(A6),A5
	BSR.W	PreClipWIN
	BSR.W	NGWDrawWindowID
	BSR.W	NGDrawGadsWindowID
	BSR.W	DrawPositionCacheReset
	BSR.W	DrawSongAll
	BSR.W	PostClipWIN
LAB_035E:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
SequenzSkip:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_SONG,A1
	MOVEA.L	42(A1),A0
	MOVE.W	#$0001,6(A0)
	BSR.W	DrawSequenceType
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
SequenzPlay:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_SONG,A1
	MOVEA.L	42(A1),A0
	CLR.W	6(A0)
	BSR.W	DrawSequenceType
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SequenzLast:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_SONG,A1
	MOVEA.L	42(A1),A0
	MOVE.W	#$ffff,6(A0)
	BSR.W	DrawSequenceType
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	RTS
ActSeqStartUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_SONG,A1
	MOVEA.L	42(A1),A0
	MOVE.W	(A0),D2
	BSR.W	SetDecShiftKeyRaster
	ADD.W	D0,D2
	MOVE.W	D2,D3
	ADD.W	2(A0),D2
	CMPI.W	#$0200,D2
	BHI.S	LAB_0363
	MOVE.W	D3,(A0)
	MOVE.W	D3,D2
	MOVE.L	#$53563035,D0
	BSR.W	WaitGfxSync
	BSR.W	NGODrawDecWord3Char
LAB_0363:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ActSeqStartDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_SONG,A1
	MOVEA.L	42(A1),A0
	BSR.W	SetDecShiftKeyRaster
	SUB.W	D0,(A0)
	BPL.S	LAB_0365
	CLR.W	(A0)
LAB_0365:
	MOVE.W	(A0),D2
LAB_0366:
	MOVE.L	#$53563035,D0
	BSR.W	WaitGfxSync
	BSR.W	NGODrawDecWord3Char
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ActSeqLenUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
LAB_0368:
	LEA	Test_SONG,A1
	MOVEA.L	42(A1),A0
	BSR.W	SetDecShiftKeyRaster
	MOVE.W	2(A0),D2
	ADD.W	D0,D2
	MOVE.W	D2,D3
	ADD.W	(A0),D3
	CMPI.W	#$0200,D3
	BHI.S	LAB_0369
	MOVE.W	D2,2(A0)
	MOVE.L	#$53563037,D0
	BSR.W	WaitGfxSync
	BSR.W	NGODrawDecWord3Char
LAB_0369:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ActSeqLenDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_SONG,A1
	MOVEA.L	42(A1),A0
LAB_036B:
	BSR.W	SetDecShiftKeyRaster
	SUB.W	D0,2(A0)
	CMPI.W	#$0001,2(A0)
	BGT.S	LAB_036C
	MOVE.W	#$0001,2(A0)
LAB_036C:
	MOVE.W	2(A0),D2
	MOVE.L	#$53563037,D0
	BSR.W	WaitGfxSync
	BSR.W	NGODrawDecWord3Char
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ActSeqLoopDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_SONG,A1
	MOVEA.L	42(A1),A0
	BSR.W	SetDecShiftKeyRaster
	SUB.W	D0,4(A0)
	CMPI.W	#$0001,4(A0)
	BGT.S	LAB_036E
	MOVE.W	#$0001,4(A0)
LAB_036E:
	MOVE.W	4(A0),D2
	MOVE.L	#$53563038,D0
	BSR.W	WaitGfxSync
	BSR.W	NGODrawDecWord3Char
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ActSeqLoopUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_SONG,A1
	MOVEA.L	42(A1),A0
LAB_0370:
	BSR.W	SetDecShiftKeyRaster
	ADD.W	D0,4(A0)
	MOVE.W	4(A0),D2
	MOVE.L	#$53563038,D0
	BSR.W	WaitGfxSync
	BSR.W	NGODrawDecWord3Char
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ActSeqTuneUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_SONG,A1
	MOVEA.L	42(A1),A0
	BSR.W	SetOctaveKeyRaster
	ADD.W	D0,8(A0)
	MOVE.W	8(A0),D2
	MOVE.L	#$53563036,D0
	BSR.W	WaitGfxSync
	BSR.W	NGODrawSignByte3Char
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ActSeqTuneDwn:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_SONG,A1
	MOVEA.L	42(A1),A0
LAB_0373:
	BSR.W	SetOctaveKeyRaster
	SUB.W	D0,8(A0)
	MOVE.W	8(A0),D2
	MOVE.L	#$53563036,D0
	BSR.W	WaitGfxSync
	BSR.W	NGODrawSignByte3Char
	MOVEM.L	(A7)+,D0-D7/A0-A6
LAB_0374:
	RTS
	DC.W	$0000
MovePrevSeq:
	MOVEM.L	A0,-(A7)
	LEA	Test_SONG,A0
	TST.W	46(A0)
	BEQ.S	LAB_0376
	SUBQ.W	#1,46(A0)
	SUBI.L	#$00000010,42(A0)
LAB_0376:
	MOVEA.L	(A7)+,A0
	RTS
MoveNextSeq:
	MOVEM.L	D0/A0,-(A7)
	LEA	Test_SONG,A0
	MOVE.W	46(A0),D0
	ADDQ.W	#1,D0
	CMPI.W	#$003f,D0
	BCC.S	LAB_0379
	MOVE.W	D0,46(A0)
	ADDI.L	#$00000010,42(A0)
LAB_0379:
	MOVEM.L	(A7)+,D0/A0
	RTS
MoveFirstPlayedSeq:
	MOVEM.L	A0-A1,-(A7)
	BSR.S	MoveFirstSeq
	LEA	Test_SONG,A0
	MOVEA.L	42(A0),A1
	LEA	-16(A1),A1
	MOVE.W	#$ffff,46(A0)
MovePSeq_L:
	LEA	16(A1),A1
	ADDQ.W	#1,46(A0)
	TST.W	6(A1)
	BNE.S	MovePSeq_L
	TST.W	4(A1)
LAB_037C:
	BEQ.S	MovePSeq_L
	MOVE.L	A1,42(A0)
	MOVE.W	4(A1),48(A0)
	MOVEM.L	(A7)+,A0-A1
	RTS
	DC.W	$0000
ResetSequenz:
	MOVEM.L	A1,-(A7)
	MOVEA.L	42(A0),A1
	MOVE.W	4(A1),48(A0)
	MOVEA.L	(A7)+,A1
	RTS
	DC.W	$0000
MoveFirstSeq:
	MOVEM.L	A0-A1,-(A7)
	LEA	Test_SONG,A0
	MOVE.L	38(A0),42(A0)
	CLR.W	46(A0)
	MOVEM.L	(A7)+,A0-A1
	RTS
	DC.W	$0000
InitSequences:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_SONG,A0
	MOVEA.L	SequenceMem_PTR+2,A1
	MOVE.L	A1,38(A0)
	MOVE.L	A1,42(A0)
	CLR.W	46(A0)
	MOVEA.L	A1,A0
	CLR.W	(A0)
	MOVE.W	#$0001,2(A0)
	MOVE.W	#$0001,4(A0)
	CLR.W	6(A0)
	CLR.W	8(A0)
	MOVE.W	#$ffff,22(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
InitSongDatas:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	TestSongData_PTR,A0
	MOVE.L	#$000001ff,D7
	MOVEQ	#32,D6
InitSongDatas_L:
	BSR.S	InitSongData
	LEA	0(A0,D6.W),A0
	DBF	D7,InitSongDatas_L
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
InitSongData:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	#$0001,4(A0)
	CLR.W	6(A0)
LAB_0383:
	CLR.W	8(A0)
	CLR.W	10(A0)
	MOVE.L	VEX_LinesPerPattern,D1
	MOVE.W	D1,12(A0)
	MOVE.W	#$0005,14(A0)
	JSR	SetPatHeadPTR
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawSongStatus:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CMPI.B	#$ff,MACROPROCESS+2
	BEQ.S	LAB_0386
	CMPI.W	#$ffff,MOD_RELOAD
	BEQ.S	LAB_0386
	BSR.S	DrawPosition
LAB_0385:
	BSR.W	DrawSequence
	BSR.S	DrawSongStruct
LAB_0386:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawSongStruct:
	MOVEM.L	D0-D2,-(A7)
	MOVE.L	VEX_LinesPerPattern,D2
	MOVE.L	#$53563031,D0
	BSR.W	NGODrawDecWord4Char
	MOVE.L	VEX_PattNumb,D2
	MOVE.L	#$53563032,D0
	BSR.W	NGODrawDecWord4Char
LAB_0388:
	MOVEM.L	(A7)+,D0-D2
	RTS
	DC.W	$0000
DrawPositionCacheReset:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#-1,D0
	LEA	PosCache,A0
	MOVEQ	#14,D1
LAB_038A:
	MOVE.W	D0,(A0)+
	DBF	D1,LAB_038A
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
DrawPosition:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CMPI.B	#$ff,MACROPROCESS+2
	BEQ.W	LAB_0397
	CMPI.W	#$ffff,MOD_RELOAD
LAB_038C:
	BEQ.W	LAB_0397
	BSR.W	GetActualPattEd
	DC.W	$4a88
	BEQ.W	LAB_0397
	MOVEA.L	A0,A4
	BSR.W	CalcDispEdOffsets
	BSR.W	CalcActNoteData
	MOVEA.L	8(A4),A0
	MOVE.W	114(A4),D2
	MOVE.L	#$53563039,D0
	CMP.W	PosCache,D2
	BEQ.S	LAB_038D
	MOVE.W	D2,PosCache
	BSR.W	NGODrawDecWord3Char
LAB_038D:
	MOVEA.L	24(A4),A3
LAB_038E:
	MOVE.W	8(A3),D2
	MOVE.L	#$53563130,D0
	CMP.W	LAB_1123,D2
	BEQ.S	LAB_038F
	MOVE.W	D2,LAB_1123
	BSR.W	NGODrawDecWord3Char
LAB_038F:
	MOVE.W	10(A3),D2
	MOVE.L	#$53563131,D0
	CMP.W	LAB_1124,D2
	BEQ.S	LAB_0390
	MOVE.W	D2,LAB_1124
	BSR.W	NGODrawDecWord3Char
LAB_0390:
	MOVE.W	16(A3),D2
LAB_0391:
	MOVE.L	#$53563132,D0
	CMP.W	LAB_1125,D2
	BEQ.S	LAB_0392
	MOVE.W	D2,LAB_1125
	BSR.W	NGODrawSignByte3Char
LAB_0392:
	MOVE.W	12(A3),D2
	MOVE.L	#$53563133,D0
	CMP.W	LAB_1126,D2
	BEQ.S	LAB_0394
	MOVE.W	D2,LAB_1126
LAB_0393:
	BSR.W	NGODrawDecWord3Char
LAB_0394:
	MOVE.W	4(A3),D2
	MOVE.L	#$53563134,D0
	CMP.W	LAB_1127,D2
	BEQ.S	LAB_0395
	MOVE.W	D2,LAB_1127
	BSR.W	NGODrawDecWord3Char
LAB_0395:
	MOVE.W	14(A3),D2
	MOVE.L	#$53563135,D0
	CMP.W	LAB_1128,D2
LAB_0396:
	BEQ.S	LAB_0397
	MOVE.W	D2,LAB_1128
	BSR.W	NGODrawDecWord3Char
LAB_0397:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawSequence:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CMPI.B	#$ff,MACROPROCESS+2
	BEQ.S	LAB_0399
	CMPI.W	#$ffff,MOD_RELOAD
	BEQ.S	LAB_0399
	LEA	Test_SONG,A3
	MOVEA.L	42(A3),A3
	MOVE.W	LAB_1185+2,D2
	MOVE.L	#$53563033,D0
	ADDQ.W	#1,D2
	BSR.W	NGODrawDecWord3Char
	MOVE.W	(A3),D2
	MOVE.L	#$53563035,D0
	BSR.W	NGODrawDecWord3Char
	MOVE.W	8(A3),D2
	MOVE.L	#$53563036,D0
	BSR.W	NGODrawSignByte3Char
	MOVE.W	2(A3),D2
	MOVE.L	#$53563037,D0
	BSR.W	NGODrawDecWord3Char
	MOVE.W	4(A3),D2
	MOVE.L	#$53563038,D0
	BSR.W	NGODrawDecWord3Char
	BSR.W	DrawSequenceType
LAB_0399:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawInstrumentReset:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#-1,D0
	LEA	InstrumentCache,A0
	MOVEQ	#19,D1
LAB_039B:
	MOVE.W	D0,(A0)+
	DBF	D1,LAB_039B
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawInstrument:
	BSR.S	DrawInstrName
	JSR	DrawActualWave
	RTS
	DC.W	$0000
DrawInstrName:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	GetActualInstrument
	MOVEA.L	A0,A5
	JSR	GetActualInstrName
	MOVEA.L	A0,A4
	MOVEA.L	InstrName_PTR+2,A1
	CLR.B	(A1)
	BTST	#2,142(A4)
	BEQ.S	LAB_039E
	LEA	InstrNoFASTPLAY_TXT,A0
	JSR	AddString
LAB_039E:
	BTST	#1,142(A4)
	BEQ.S	LAB_03A0
	BTST	#0,142(A4)
	BEQ.S	LAB_039F
	LEA	InstrNoDSPPOS_TXT+1,A0
	JSR	AddString
	BRA.S	LAB_03A1
LAB_039F:
	LEA	InstrNoDSP_TXT,A0
	JSR	AddString
	BRA.S	LAB_03A1
LAB_03A0:
	BTST	#0,142(A4)
	BEQ.S	LAB_03A1
	LEA	InstrNoTune_TXT,A0
	JSR	AddString
LAB_03A1:
	CMPI.W	#$fffc,(A5)
	BNE.S	LAB_03A2
	LEA	InstrKilled_TXT,A0
	MOVEA.L	InstrName_PTR+2,A1
	JSR	AddString
	BRA.W	DrawInstrNameShow
LAB_03A2:
	CMPI.W	#$fff8,(A5)
	BNE.S	DrawInstrParam_NotSilent
	LEA	InstrSilent_TXT+1,A0
	JSR	AddString
DrawInstrParam_NotSilent:
	LEA	InstrNo_TXT+1,A0
	TST.B	128(A4)
	BEQ.S	DrawInstrName_Type
	LEA	InstrLooped_TXT,A0
	CMPI.B	#$04,128(A4)
	BEQ.S	DrawInstrName_Type
	LEA	InstrSustained_TXT,A0
DrawInstrName_Type:
	JSR	AddString
	CMPI.B	#$03,132(A4)
	BNE.S	DrawI_NoVirt
	JSR	BuildLineTxt
	LEA	LineSampleDef_Txt,A0
	JSR	AddString
	BRA.S	DrawI_NoR
DrawI_NoVirt:
	CMPI.B	#$01,132(A4)
	BNE.S	DrawI_NoL
	LEA	InstrLeft_TXT+1,A0
	JSR	AddString
	BRA.S	DrawI_NoR
DrawI_NoL:
	CMPI.B	#$02,132(A4)
	BNE.S	DrawI_NoR
	LEA	InstrRight_TXT,A0
	JSR	AddString
DrawI_NoR:
	MOVEA.L	A4,A0
	JSR	AddString
DrawInstrNameShow:
	MOVEA.L	InstrName_PTR+2,A1
	MOVE.L	#$57494e53,D0
	BSR.W	NGWindowCheck
	DC.W	$4a88
	BEQ.S	LAB_03A9
	MOVEA.L	(A0),A0
	MOVEA.W	#$ffff,A2
	MOVEA.L	_IntuitionBase,A6
	JSR	-276(A6)
	BSR.S	DrawInstrParam
LAB_03A9:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
DrawInstrParam:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	GetActualInstrument
	MOVEA.L	A0,A5
	JSR	GetActualInstrName
	MOVEA.L	A0,A4
	MOVE.L	#$57563144,D0
	MOVEQ	#0,D2
	MOVE.B	141(A4),D2
	CMP.W	LAB_112A,D2
	BEQ.S	LAB_03AB
	MOVE.W	D2,LAB_112A
	BSR.W	NGODrawSignByte3Char
LAB_03AB:
	MOVE.B	143(A4),D2
	MOVE.L	#$57563141,D0
	CMP.W	LAB_112B,D2
	BEQ.S	LAB_03AC
	MOVE.W	D2,LAB_112B
	BSR.W	NGODrawDecWord3Char
LAB_03AC:
	MOVE.L	#$57563231,D0
	MOVE.B	138(A4),D2
	CMP.W	LAB_112C,D2
	BEQ.S	LAB_03AD
	MOVE.W	D2,LAB_112C
	BSR.W	NGODrawSignByte3Char
LAB_03AD:
	MOVE.L	#$57563234,D0
	MOVE.B	139(A4),D2
	CMP.W	LAB_112D,D2
	BEQ.S	LAB_03AE
	MOVE.W	D2,LAB_112D
	BSR.W	NGODrawSignByte3Char
LAB_03AE:
	MOVE.L	#$57563246,D0
	MOVE.B	131(A4),D2
	CMP.W	LAB_112E,D2
	BEQ.S	LAB_03AF
	MOVE.W	D2,LAB_112E
	BSR.W	NGODrawDecWord3Char
LAB_03AF:
	MOVE.L	#$57563037,D0
	MOVE.B	134(A4),D2
	CMP.W	LAB_112F,D2
	BEQ.S	LAB_03B0
	MOVE.W	D2,LAB_112F
	BSR.W	NGODrawDecWord3Char
LAB_03B0:
	JSR	GetActualInstrNum
	MOVE.W	D0,D2
	MOVE.L	#$57563031,D0
	CMP.W	InstrumentCache,D2
	BEQ.S	LAB_03B1
	MOVE.W	D2,InstrumentCache
	BSR.W	NGODrawDecWord3Char
LAB_03B1:
	MOVEQ	#0,D1
	BTST	#1,142(A4)
	BEQ.S	LAB_03B2
	MOVEQ	#-1,D1
LAB_03B2:
	MOVE.L	#$57563044,D0
	CMP.W	LAB_1130,D1
	BEQ.S	LAB_03B3
	MOVE.W	D1,LAB_1130
	BSR.W	NGSetGadBool
LAB_03B3:
	MOVEQ	#0,D1
	BTST	#0,142(A4)
	BEQ.S	LAB_03B4
	MOVEQ	#-1,D1
LAB_03B4:
	MOVE.L	#$57563045,D0
	CMP.W	LAB_1131,D1
	BEQ.S	LAB_03B6
LAB_03B5:
	MOVE.W	D1,LAB_1131
	BSR.W	NGSetGadBool
LAB_03B6:
	MOVEQ	#0,D1
	BTST	#2,142(A4)
	BEQ.S	LAB_03B7
	MOVEQ	#-1,D1
LAB_03B7:
	MOVE.L	#$57563043,D0
	CMP.W	LAB_1132,D1
	BEQ.S	LAB_03B8
	MOVE.W	D1,LAB_1132
	BSR.W	NGSetGadBool
LAB_03B8:
	MOVEQ	#0,D1
	CMPI.W	#$fff8,(A5)
	BNE.S	LAB_03B9
	MOVEQ	#-1,D1
LAB_03B9:
	MOVE.L	#$57563046,D0
	BSR.W	NGSetGadBool
	BSR.W	DrawLoopType
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
EchoLenDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	DSP_ECHO_LEN,D1
	BSR.W	SetDecShiftKeyRaster
	SUB.L	D0,D1
	CMPI.L	#$00000001,D1
	BGE.S	LAB_03BB
	MOVEQ	#1,D1
LAB_03BB:
	MOVE.L	D1,DSP_ECHO_LEN
	JSR	InitCalcBufferInfo
	MOVE.L	#$53593532,D0
	MOVE.L	DSP_ECHO_LEN,D2
	BSR.W	NGODrawDecWord3Char
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
EchoLenUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	DSP_ECHO_LEN,D1
	BSR.W	SetDecShiftKeyRaster
	ADD.L	D0,D1
	CMP.L	MAXDSP_ECHO_LEN,D1
	BLS.S	LAB_03BD
	JSR	WarnFlash
	MOVE.L	MAXDSP_ECHO_LEN,D1
LAB_03BD:
	MOVE.L	D1,DSP_ECHO_LEN
	JSR	InitCalcBufferInfo
	MOVE.L	#$53593532,D0
	MOVE.L	DSP_ECHO_LEN,D2
	BSR.W	NGODrawDecWord3Char
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
EchoLvlD:
	MOVEM.L	D2,-(A7)
	MOVE.L	DSP_ECHO_LVL,D2
	SUBQ.L	#1,D2
	BPL.S	LAB_03BF
	MOVEQ	#0,D2
LAB_03BF:
	MOVE.L	D2,DSP_ECHO_LVL
	BSR.W	DrawDspEchoLvl
	MOVEM.L	(A7)+,D2
	RTS
EchoLvlU:
	MOVEM.L	D2,-(A7)
	MOVE.L	DSP_ECHO_LVL,D2
	ADDQ.L	#1,D2
	CMPI.L	#$0000007f,D2
	BLS.S	LAB_03C1
	MOVEQ	#127,D2
LAB_03C1:
	MOVE.L	D2,DSP_ECHO_LVL
	BSR.W	DrawDspEchoLvl
	MOVEM.L	(A7)+,D2
	RTS
	DC.W	$0000
DelayD:
	MOVEM.L	D0-D2,-(A7)
	SUBQ.W	#1,DELAYINFO
	BPL.S	LAB_03C3
	CLR.W	DELAYINFO
LAB_03C3:
	JSR	ValidateDelay
	MOVE.L	#$53593632,D0
	MOVEQ	#0,D2
	MOVE.W	DELAYINFO,D2
	BSR.W	NGODrawDecWord3Char
	MOVEM.L	(A7)+,D0-D2
	RTS
DelayU:
	MOVEM.L	D0-D2,-(A7)
	ADDQ.W	#1,DELAYINFO
LAB_03C5:
	JSR	ValidateDelay
	MOVE.L	#$53593632,D0
	MOVEQ	#0,D2
	MOVE.W	DELAYINFO,D2
	BSR.W	NGODrawDecWord3Char
	MOVEM.L	(A7)+,D0-D2
	RTS
DelayD2:
	SUBQ.W	#1,LAB_118E
	BPL.S	LAB_03C7
	CLR.W	LAB_118E
LAB_03C7:
	JSR	ValidateDelay
	BSR.W	DrawDspDelayLvl
	RTS
	DC.W	$0000
DelayU2:
	ADDQ.W	#1,LAB_118E
	JSR	ValidateDelay
	BSR.W	DrawDspDelayLvl
	RTS
	DC.W	$0000
HallD:
	MOVEM.L	D0-D2,-(A7)
	SUBQ.W	#1,HallInfo
	BPL.S	LAB_03CA
	CLR.W	HallInfo
LAB_03CA:
	JSR	ValidateHall
	JSR	InitPostDspBufferInfo
	MOVE.L	#$53593732,D0
	MOVEQ	#0,D2
	MOVE.W	HallInfo,D2
	BSR.W	NGODrawDecWord3Char
	MOVEM.L	(A7)+,D0-D2
	RTS
	DC.W	$0000
HallU:
	MOVEM.L	D0-D2,-(A7)
	ADDQ.W	#1,HallInfo
	JSR	ValidateHall
	JSR	InitPostDspBufferInfo
	MOVE.L	#$53593732,D0
	MOVEQ	#0,D2
	MOVE.W	HallInfo,D2
	BSR.W	NGODrawDecWord3Char
	MOVEM.L	(A7)+,D0-D2
	RTS
	DC.W	$0000
HallD2:
	SUBQ.W	#1,LAB_1190+2
	BPL.S	LAB_03CD
	CLR.W	LAB_1190+2
LAB_03CD:
	JSR	ValidateHall
	BSR.W	DrawDspHallLvl
	RTS
	DC.W	$0000
HallU2:
	ADDQ.W	#1,LAB_1190+2
	JSR	ValidateHall
	BSR.W	DrawDspHallLvl
	RTS
NGWin_TAGS:
	OR.B	D0,D0
LAB_03D0:
	ORI.W	#$0000,0(A0,D0.W)
NGWINT_X:
	OR.B	D0,D0
LAB_03D2:
	ORI.W	#$0000,-(A4)
	DC.W	$000a
NGWINT_Y:
	OR.B	D0,D0
LAB_03D4:
	ORI.W	#$0000,-(A5)
	DC.W	$0014
NGWINT_W:
	OR.B	D0,D0
LAB_03D6:
	ORI.W	#$0000,-(A6)
	BCHG	D0,D0
NGWINT_H:
	OR.B	D0,D0
LAB_03D8:
	ORI.W	#$0000,-(A7)
NGWIN_TITLEADR:
	ORI.L	#$8000006e,-(A0)
LAB_03DA:
	DC.L	NGWTitle_TXT
NGWIN_MINW:
	OR.B	D0,D0
	ORI.W	#$0000,48(A2,D0.W)
NGDWIN_MINH:
	OR.B	D0,D0
	ORI.W	#$0000,20(A3,D0.W)
NGWIN_MAXW:
	OR.B	D0,D0
	DC.W	$0074
	DC.W	$ffff
	DC.W	$ffff
NGWIN_MAXH:
	OR.B	D0,D0
	DC.W	$0075
	DC.W	$ffff
	DC.W	$ffff
	OR.B	D0,D0
	ORI.W	#$0004,1802(A2)
	OR.B	D0,D0
	ORI.L	#$ffffffff,(A1)
	OR.B	D0,D0
	ORI.L	#$ffffffff,(A3)
	OR.B	D0,D0
	ORI.L	#$ffffffff,D1
	OR.B	D0,D0
	ORI.L	#$ffffffff,D3
	OR.B	D0,D0
	ORI.L	#$ffffffff,D2
	OR.B	D0,D0
	ORI.L	#$ffffffff,D4
	OR.B	D0,D0
	ORI.L	#$ffffffff,(A0)
AutoWin_SCRTITLE:
	OR.B	D0,D0
LAB_03E0:
	ORI.W	#$0000,0(A7)
	ORI.B	#$00,D0
	DC.W	$0000
NGGadDoAction:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	NGGadActionList,A6
LAB_03E2:
	MOVE.L	(A6),D7
	BEQ.S	LAB_03E3
	ADDI.L	#$41513037,D7
	ADDQ.L	#8,A6
	CMP.L	D0,D7
	BNE.S	LAB_03E2
	BSR.S	LAB_03E4
	MOVEA.L	-4(A6),A6
	LEA	-733(A6),A6
	JSR	(A6)
LAB_03E3:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_03E4:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	-8(A6),D0
	ADDI.L	#$41513037,D0
	MOVEQ	#0,D1
	MOVEQ	#1,D2
	CMPI.L	#$50453149,D0
	BEQ.S	LAB_03E6
	CMPI.L	#$5045314a,D0
	BEQ.S	LAB_03E6
	CMPI.L	#$5045314b,D0
LAB_03E5:
	BEQ.S	LAB_03E6
	CMPI.L	#$5045314c,D0
	BEQ.S	LAB_03E6
	CMPI.L	#$5045314d,D0
	BEQ.S	LAB_03E6
	JSR	RecordMsg
LAB_03E6:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
NGRecordXXMsg:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	XXMsg(PC),D0
	TST.L	D0
	BEQ.S	LAB_03E9
	MOVEQ	#0,D1
	MOVEQ	#1,D2
	CMPI.L	#$50453149,D0
	BEQ.S	LAB_03E9
LAB_03E8:
	CMPI.L	#$5045314a,D0
	BEQ.S	LAB_03E9
	CMPI.L	#$5045314b,D0
	BEQ.S	LAB_03E9
	CMPI.L	#$5045314c,D0
	BEQ.S	LAB_03E9
	CMPI.L	#$5045314d,D0
	BEQ.S	LAB_03E9
	JSR	RecordMsg
LAB_03E9:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
XXMsg:
	ORI.B	#$00,D0
NGDrawAllGads:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.W	NGGadNumbTotal+2
	DC.W	$4aba
	ORI.L	#$675047f9,(A4)
	DC.L	NGGadgetDef+1
	MOVEA.L	NGGadInfo_PTR(PC),A2
LAB_03EC:
	CLR.L	LAB_040E+2
	TST.B	(A3)
	BEQ.S	LAB_03EF
	MOVE.L	(A3)+,D0
	BEQ.S	LAB_03F1
	MOVE.L	D0,NGGadActWin+2
	MOVE.L	(A3)+,D1
	BEQ.S	LAB_03F1
	MOVE.L	D1,NGGadActArea+2
	BSR.W	NGFindArea2
LAB_03EE:
	MOVE.L	A0,LAB_0410+2
	DC.W	$4aba
	BCLR	D0,D6
	BEQ.S	LAB_03F2
	MOVE.L	56(A0),LAB_040E+2
	MOVEA.L	A2,A6
	BSR.S	NGGadPass1
	EXG	A2,A6
	BSR.W	NGGadPass2
	EXG	A2,A6
	ADDQ.L	#1,A3
	BRA.S	LAB_03EC
LAB_03EF:
	MOVEM.L	(A7)+,D0-D7/A0-A6
LAB_03F0:
	RTS
LAB_03F1:
	MOVE.L	#LAB_03F3,AssText_TXT
	BSR.W	PrintAssTextF
	BRA.S	LAB_03EF
LAB_03F2:
	TST.B	(A3)+
	BNE.S	LAB_03F2
	TST.B	(A3)+
	BNE.S	LAB_03F2
	BRA.S	LAB_03EC
LAB_03F3:
	DC.W	$4572
	MOVEQ	#111,D1
	MOVEQ	#32,D1
	BVS.S	LAB_03FC
	MOVEA.L	(A7),A0
	BVS.S	LAB_03FD
	DC.W	$646f
	DC.W	$7720
	NEG.W	-(A5)
	DC.W	$6600
NGGadHGrp_PTR:
LAB_03F4:
	ORI.B	#$00,D0
	DC.W	$0000
	BTST	D1,-(A0)
	ORI.B	#$00,D1
NGGadInfo_PTR:
	ORI.B	#$00,D0
	DC.W	$0001
	ADDI.L	#$00010000,D0
NGGadPass1:
	MOVEM.L	D0-D7/A0-A1/A4-A6,-(A7)
	CLR.W	NGGadNumb
	MOVEA.L	LAB_040E+2(PC),A5
LAB_03F8:
	MOVEA.L	LAB_0410+2(PC),A4
	MOVEM.W	24(A4),D0-D3
	LEA	NGWin_Info(PC),A6
	SUB.W	48(A6),D2
	MOVEM.W	D0-D3,NGGadActNGArea_XYWH
LAB_03F9:
	MOVE.W	D3,NGGadActAreaHRemain+2
	MOVEA.L	NGGadHGrp_PTR(PC),A6
	MOVE.W	#$0001,(A6)
	CLR.W	6(A6)
	MOVE.W	LAB_0407(PC),4(A6)
LAB_03FA:
	CLR.W	NGGadHGrpNumb+2
LAB_03FB:
	MOVE.L	A3,(A2)
	TST.B	(A3)
LAB_03FC:
	BEQ.W	LAB_0404
LAB_03FD:
	MOVE.L	(A3)+,D6
	MOVE.L	D6,4(A2)
	CLR.B	16(A2)
	ADDQ.L	#1,A3
	MOVE.L	(A3)+,D6
	MOVE.L	D6,8(A2)
	MOVE.L	(A3)+,D6
	MOVE.L	D6,12(A2)
	ADDQ.L	#1,A3
	MOVE.L	A3,20(A2)
	MOVE.L	A5,36(A2)
	MOVE.L	A4,40(A2)
LAB_03FE:
	MOVE.L	NGGadActWin+2(PC),28(A2)
	MOVE.L	NGGadActArea+2(PC),32(A2)
	DC.W	$4a8d
	BEQ.S	LAB_0405
	DC.W	$4a8c
	BEQ.S	LAB_0405
	CMPI.B	#$ff,(A4)
	BNE.S	LAB_0405
	MOVEA.L	20(A2),A0
	MOVEQ	#1,D4
	BSR.W	NGObjectGad
	MOVEM.W	D2-D3,52(A2)
	SUB.W	D2,4(A6)
	CMPI.B	#$26,8(A2)
LAB_03FF:
	BNE.S	LAB_0401
	CMPI.B	#$26,9(A2)
	BNE.S	LAB_0400
	ADDQ.W	#1,6(A6)
LAB_0400:
	ADDQ.W	#1,(A6)
	BRA.S	LAB_0403
LAB_0401:
	SUB.W	D3,NGGadActAreaHRemain+2
LAB_0402:
	ADDQ.W	#1,NGGadHGrpNumb+2
	ADDQ.L	#8,A6
	MOVE.W	#$0001,(A6)
	CLR.W	6(A6)
	MOVE.W	LAB_0407(PC),4(A6)
LAB_0403:
	TST.B	(A3)+
	BNE.S	LAB_0403
	LEA	84(A2),A2
	ADDQ.W	#1,NGGadNumb
	ADDQ.W	#1,NGGadNumbTotal+2
	BRA.W	LAB_03FB
LAB_0404:
	MOVEM.L	(A7)+,D0-D7/A0-A1/A4-A6
	RTS
LAB_0405:
	TST.B	(A3)+
	BNE.S	LAB_0405
	CLR.W	NGGadNumb
	BRA.S	LAB_0404
NGGadActNGArea_XYWH:
	ORI.B	#$00,D0
LAB_0407:
	ORI.B	#$00,D0
NGGadActAreaStartX:
NGGadActAreaHRemain:
	ORI.B	#$00,D0
NGGadRemainInGrp:
NGGadHGrpNumb:
	ORI.B	#$00,D0
NGGadNumb:
NGGadActWin:
	ORI.B	#$00,D0
LAB_040E:
	ORI.B	#$00,D0
NGGadActArea:
	ORI.B	#$00,D0
LAB_0410:
	ORI.B	#$00,D0
NGGadNumbTotal:
	ORI.B	#$00,D0
NGGadSpreadX:
	ORI.B	#$00,D0
NGGadPass2:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	NGGadNumb(PC),D7
	SUBQ.W	#1,D7
	BMI.W	LAB_0420
	MOVEQ	#0,D0
	MOVE.W	NGGadHGrpNumb+2(PC),D0
	CLR.W	NGGadSpreadX
	MOVEA.L	NGGadHGrp_PTR(PC),A6
	MOVE.W	(A6),NGGadRemainInGrp
	TST.W	4(A6)
	BMI.S	LAB_0414
	MOVE.W	(A6),D1
	SUBQ.W	#1,D1
	BEQ.S	LAB_0414
	SUB.W	6(A6),D1
	BEQ.S	LAB_0414
	TST.W	D1
	BMI.S	LAB_0414
	MOVEQ	#0,D0
	MOVE.W	4(A6),D0
	DIVU	D1,D0
	MOVE.W	D0,NGGadSpreadX
LAB_0414:
	MOVE.W	NGGadHGrpNumb+2(PC),D6
	ADDQ.W	#1,D6
	MOVEQ	#0,D0
	MOVE.W	NGGadActAreaHRemain+2(PC),D0
	TST.W	D0
	BMI.S	LAB_0415
	DIVU	D6,D0
	MOVE.W	D0,NGGadActAreaHRemain+2
	BRA.S	LAB_0416
LAB_0415:
	CLR.W	NGGadActAreaHRemain+2
LAB_0416:
	MOVEA.L	36(A2),A5
	MOVEA.L	LAB_0410+2(PC),A4
	MOVEA.L	40(A2),A4
	MOVE.L	A4,LAB_0410+2
	MOVE.L	28(A2),NGGadActWin+2
	MOVE.L	32(A2),NGGadActArea+2
	DC.W	$4a8d
	BEQ.W	LAB_0420
	DC.W	$4a8c
	BEQ.W	LAB_0420
	CMPI.B	#$ff,(A4)
	BNE.W	LAB_0420
	MOVEM.W	24(A4),D0-D3
	MOVE.W	D0,NGGadActAreaStartX
	ADD.W	NGGadActAreaHRemain+2(PC),D1
	SUB.W	NGGadActAreaHRemain+2(PC),D3
LAB_0417:
	CMP.W	54(A2),D3
	BCS.W	LAB_041F
	MOVEM.W	D0-D1,48(A2)
	MOVEA.L	20(A2),A0
	MOVEA.L	52(A4),A1
	DC.W	$4a89
	BEQ.W	LAB_0420
	MOVE.B	#$ff,16(A2)
	MOVEQ	#0,D4
	CMPI.B	#$2b,14(A2)
	BNE.S	LAB_0418
	MOVEQ	#3,D4
LAB_0418:
	MOVEM.L	D7,-(A7)
	MOVE.L	A0,24(A2)
	MOVE.L	NGDrawAllGads_WINDOWID+2(PC),D7
	BEQ.S	LAB_0419
	CMP.L	NGGadActWin+2(PC),D7
	BNE.S	LAB_041A
LAB_0419:
	CMPI.B	#$56,11(A2)
	BEQ.S	LAB_041A
	BSR.W	NGObjectGad
LAB_041A:
	MOVEM.L	(A7)+,D7
	MOVEM.L	D0,-(A7)
	MOVEQ	#0,D0
	MOVE.W	NGGadRemainInGrp(PC),D0
	MOVEM.L	(A7)+,D0
	SUBQ.W	#1,NGGadRemainInGrp
	DC.W	$4a7a
	DC.W	$feca
	BEQ.S	LAB_041C
	ADD.W	52(A2),D0
	CMPI.B	#$26,9(A2)
	BEQ.S	LAB_041B
	ADD.W	NGGadSpreadX(PC),D0
LAB_041B:
	BRA.S	LAB_041E
LAB_041C:
	ADDQ.L	#8,A6
	MOVE.W	(A6),NGGadRemainInGrp
	MOVEM.L	D0-D1,-(A7)
	CLR.W	NGGadSpreadX
	TST.W	4(A6)
	BMI.S	LAB_041D
	MOVE.W	(A6),D1
	SUBQ.W	#1,D1
	BEQ.S	LAB_041D
	SUB.W	6(A6),D1
	BEQ.S	LAB_041D
	TST.W	D1
	BMI.S	LAB_041D
	MOVEQ	#0,D0
	MOVE.W	4(A6),D0
	DIVU	D1,D0
	MOVE.W	D0,NGGadSpreadX
LAB_041D:
	MOVEM.L	(A7)+,D0-D1
	MOVE.W	NGGadActAreaStartX(PC),D0
	ADD.W	54(A2),D1
	SUB.W	54(A2),D3
	ADD.W	NGGadActAreaHRemain+2(PC),D1
	SUB.W	NGGadActAreaHRemain+2(PC),D3
LAB_041E:
	LEA	84(A2),A2
	DBF	D7,LAB_0417
	BRA.S	LAB_0420
LAB_041F:
	MOVEQ	#0,D3
	MOVEQ	#0,D2
LAB_0420:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$4472
	DC.W	$6177
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
NGWinCount:
	ORI.B	#$00,D0
	DC.W	$0000
ReadGuiPrefs:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	LAB_1308,A1
	MOVE.L	#$4e57494e,(A1)+
	MOVE.L	#$00010000,(A1)+
	MOVE.L	NGWinCount(PC),D7
	SUBQ.L	#1,D7
	BMI.S	LAB_0427
	MOVEA.L	NGWinList_PTR+2(PC),A5
LAB_0423:
	MOVEA.L	(A5),A0
	DC.W	$4a88
	BEQ.S	LAB_0426
	MOVE.L	72(A5),(A1)
	CMPI.B	#$ff,36(A5)
	BEQ.S	LAB_0424
	MOVEM.W	4(A0),D0-D3
	MOVEM.W	D0-D3,4(A1)
	BRA.S	LAB_0425
LAB_0424:
	MOVEM.W	40(A5),D0-D3
LAB_0425:
	MOVE.B	36(A5),12(A1)
	MOVEM.W	D0-D3,4(A1)
	LEA	14(A1),A1
	LEA	448(A5),A5
LAB_0426:
	DBF	D7,LAB_0423
LAB_0427:
	CLR.L	(A1)+
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetGuiPrefs:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.L	NGWinPosDef
	LEA	LAB_1308,A1
	CMPI.L	#$4e57494e,(A1)
	BNE.S	LAB_0429
	CMPI.L	#$00010000,4(A1)
	BNE.S	LAB_0429
	ADDQ.L	#8,A1
	MOVE.L	A1,NGWinPosDef
LAB_0429:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NGWinPosDef:
	ORI.B	#$00,D0
NGOpenWinList:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#0,D0
	MOVEQ	#0,D1
	MOVE.W	#$0140,D2
	MOVE.W	#$00a0,D3
	CLR.L	NGWinCount
	LEA	NGWin_Info(PC),A6
	CLR.L	76(A6)
	CLR.L	80(A6)
	MOVEQ	#0,D7
	LEA	NGWinDef,A2
	DC.W	$4aba
	DC.W	$0448
	BEQ.S	LAB_042F
	MOVEA.L	NGWinList_PTR+2(PC),A5
LAB_042C:
	ADDQ.L	#1,NGWinCount
	MOVE.B	(A2)+,D4
	BEQ.S	LAB_042F
	CLR.L	(A5)
	CLR.L	76(A5)
	CLR.L	80(A5)
	CLR.L	32(A5)
	CLR.B	36(A5)
	MOVE.L	NGWinCount(PC),68(A5)
	CLR.B	64(A5)
	ADDQ.W	#1,D7
	MOVE.L	(A2)+,D5
	CMPI.B	#$2b,D4
	BNE.S	LAB_042D
	LEA	1(A2),A0
	MOVE.L	A0,32(A5)
	MOVEA.L	A5,A0
	LEA	NGWin_TAGS(PC),A1
	BSR.S	NGOpenWinSpecial
	ADDI.L	#$00000032,D0
	ADDI.L	#$0000001e,D1
LAB_042D:
	MOVE.L	D5,72(A5)
	LEA	448(A5),A5
LAB_042E:
	MOVE.B	(A2)+,D4
	BNE.S	LAB_042E
	BRA.S	LAB_042C
LAB_042F:
	MOVE.W	D7,LAB_0465
	BSR.W	NGDrawWinList
	BSR.S	NGActivateFirstWin
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NGActivateFirstWin:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	LAB_0465(PC),D7
	SUBQ.W	#1,D7
	BMI.S	LAB_0432
	MOVEA.L	NGWinList_PTR+2(PC),A5
LAB_0431:
	TST.L	(A5)
	BNE.S	LAB_0433
	DBF	D7,LAB_0431
	LEA	448(A5),A5
LAB_0432:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0433:
	MOVEA.L	(A5),A0
	MOVEA.L	_IntuitionBase,A6
	JSR	-450(A6)
	BRA.S	LAB_0432
NGOpenWinSpecial:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$4aba
	DC.W	$ff26
	BEQ.S	LAB_0437
	MOVEA.L	NGWinPosDef(PC),A6
LAB_0435:
	TST.L	(A6)
	BEQ.S	LAB_0437
	CMP.L	(A6),D5
	BEQ.S	LAB_0436
	LEA	14(A6),A6
	BRA.S	LAB_0435
LAB_0436:
	MOVEQ	#0,D0
	MOVEQ	#0,D1
	MOVEQ	#0,D2
	MOVEQ	#0,D3
	MOVEM.W	4(A6),D0-D3
	MOVEM.W	D0-D3,40(A5)
LAB_0437:
	BSR.W	NGOpenWinXYWH
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NGZoomedWin_W:
NGZoomedDist_W:
	ORI.W	#$0050,(A0)
NGZoomedWin_H:
	DC.W	$0000
NGZoomMiniWindow:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	MainScreen_PTR+2,A3
	TST.L	(A3)
	BEQ.W	LAB_043E
	MOVEQ	#0,D0
	MOVE.W	12(A3),D0
	DIVU	#$0008,D0
	MOVE.W	D0,NGZoomedWin_W
	MOVE.W	D0,NGZoomedDist_W+2
	SUBI.W	#$000c,D0
	BMI.S	LAB_043C
	ADDQ.W	#2,D0
	MOVE.W	D0,NGZoomedWin_W
LAB_043C:
	DC.W	$4a8d
	BEQ.S	LAB_043E
	TST.L	(A5)
	BEQ.S	LAB_043E
	MOVEA.L	(A5),A0
	CMPI.B	#$ff,36(A5)
	BEQ.S	LAB_043D
	MOVEM.W	4(A0),D0-D3
	MOVEM.W	D0-D3,40(A5)
	MOVE.B	#$ff,36(A5)
	BSR.W	NGGetStandardGadH
	MOVE.W	D0,D7
	MOVE.L	68(A5),D0
	SUBQ.W	#1,D0
	BMI.S	LAB_043E
	MULU	NGZoomedDist_W+2(PC),D0
	MOVEQ	#0,D1
	MOVE.W	NGZoomedWin_W(PC),D2
	MOVEQ	#0,D3
	MOVE.B	55(A0),D3
	ADD.W	D7,D3
	MOVE.W	14(A3),D1
	SUB.W	D3,D1
	MOVE.W	D3,NGZoomedWin_H
	BSR.W	NGSetWindowXYWH
	BRA.S	LAB_043E
LAB_043D:
	MOVEM.W	40(A5),D0-D3
	CLR.B	36(A5)
	BSR.W	NGSetWindowXYWH
LAB_043E:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
NGCloseWinList:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	LAB_0465(PC),D7
	SUBQ.W	#1,D7
	BMI.S	LAB_0441
	DC.W	$4aba
	DC.W	$02b6
	BEQ.S	LAB_0441
	MOVEA.L	NGWinList_PTR+2(PC),A0
LAB_0440:
	BSR.W	NGCloseWin
	LEA	448(A0),A0
	DBF	D7,LAB_0440
LAB_0441:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NGOpenWinXYWH:
	MOVE.L	D0,LAB_03D2+2
	MOVE.L	D1,LAB_03D4+2
	MOVE.L	D2,LAB_03D6+2
	MOVE.L	D3,LAB_03D8+2
NGOpenWin:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A0,A5
	MOVE.L	32(A5),LAB_03DA
	SUBA.L	A0,A0
	MOVEA.L	_IntuitionBase,A6
	JSR	-606(A6)
	MOVE.L	D0,(A5)
	CLR.W	84(A5)
	CLR.L	76(A5)
	CLR.L	88(A5)
	CLR.L	4(A5)
	CLR.L	8(A5)
	CLR.B	52(A5)
	CLR.L	56(A5)
	CLR.L	60(A5)
	MOVE.W	#$ffff,12(A5)
	MOVE.W	#$ffff,16(A5)
	MOVE.L	#$ffffffff,20(A5)
	TST.L	D0
	BEQ.S	LAB_0444
	MOVEA.L	(A5),A0
	BSR.W	SetAutoMenuStrip
	BSR.W	GetWindowSignal
	MOVE.L	D0,76(A5)
	MOVEA.L	(A5),A0
	JSR	GetWindowUP
	MOVE.L	A0,4(A5)
	MOVEA.L	(A5),A0
	JSR	GetWindowRP
	MOVE.L	A1,8(A5)
	LEA	NGWin_Info(PC),A4
	BSR.W	GetFontInfo
	MOVEM.W	D0-D3,40(A4)
	MOVE.W	42(A4),D0
	ADDQ.W	#4,D0
	MOVE.W	D0,58(A4)
	MOVE.W	#$0004,56(A4)
LAB_0444:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NGCloseWinId:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	NGFindWindow
	BSR.S	NGCloseWin
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
NGCloseWin:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$4a88
	BEQ.S	LAB_0449
	MOVEA.L	A0,A5
	CLR.L	8(A5)
	TST.L	(A5)
	BEQ.S	LAB_0449
	MOVEA.L	(A5),A4
	CLR.L	(A5)
LAB_0447:
	MOVEA.L	4(A5),A0
	DC.W	$4a88
	BEQ.S	LAB_0448
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-372(A6)
	TST.L	D0
	BEQ.S	LAB_0448
	MOVEA.L	D0,A1
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-378(A6)
	BRA.S	LAB_0447
LAB_0448:
	MOVEQ	#0,D0
	MOVEA.L	A4,A0
	MOVEA.L	_IntuitionBase,A6
	JSR	-150(A6)
	CLR.L	4(A5)
	MOVEA.L	A4,A0
	MOVEA.L	_IntuitionBase,A6
	JSR	-72(A6)
LAB_0449:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
NGOpenWindows:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	NGOpenWinList
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
NGCloseWindows:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	NGCloseWinList
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
NGFindWindow:
	MOVEM.L	D7/A5,-(A7)
	SUBA.L	A0,A0
	DC.W	$4aba
	BCHG	D0,(A0)
	BEQ.S	LAB_044E
	MOVE.W	LAB_0465(PC),D7
	SUBQ.W	#1,D7
	BMI.S	LAB_044E
	MOVEA.L	NGWinList_PTR+2(PC),A5
LAB_044D:
	CMP.L	72(A5),D0
	BEQ.S	LAB_044F
	LEA	448(A5),A5
	DBF	D7,LAB_044D
LAB_044E:
	MOVEM.L	(A7)+,D7/A5
	RTS
LAB_044F:
	MOVEA.L	A5,A0
	BRA.S	LAB_044E
NGWindowCheck:
	BSR.S	NGFindWindow
	DC.W	$4a88
	BEQ.S	LAB_0451
	TST.L	(A0)
	BEQ.S	LAB_0452
LAB_0451:
	RTS
LAB_0452:
	SUBA.L	A0,A0
	RTS
NGDrawWinList:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	NGAreaDef,A4
LAB_0454:
	TST.B	(A4)
	BEQ.S	LAB_0456
	MOVE.L	(A4),D0
	BSR.S	NGWindowCheck
	DC.W	$4a88
	BEQ.S	LAB_0455
	MOVE.L	A4,80(A0)
	BSR.S	NGWDrawWindow
LAB_0455:
	TST.B	(A4)+
	BNE.S	LAB_0455
	BRA.S	LAB_0454
LAB_0456:
	BSR.W	NGDrawAllGads
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NGWDrawWindowID:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	NGWindowCheck
	DC.W	$4a88
	BEQ.S	LAB_0458
	MOVEA.L	80(A0),A4
	DC.W	$4a8c
	BEQ.S	LAB_0458
	BSR.S	NGWDrawWindow
LAB_0458:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
NGWDrawWindow:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A0,A5
	BSR.W	NGWGetWindowXYWH
	MOVEQ	#0,D4
	BSR.W	NGRDrawBack
	SUBQ.W	#4,D2
	SUBQ.W	#4,D3
	ADDQ.W	#2,D0
	ADDQ.W	#2,D1
	MOVEA.L	A4,A0
	BSR.W	NGWBuildAreas
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DoWithAllNGWindows:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#0,D0
	DC.W	$4aba
	ORI.L	#$671a3e3a,-(A4)
	ORI.L	#$53476b12,(A4)+
	MOVEA.L	NGWinList_PTR+2(PC),A5
LAB_045B:
	MOVE.L	72(A5),D0
	JSR	(A4)
	LEA	448(A5),A5
	DBF	D7,LAB_045B
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NGWGetSignalMask:
	MOVEM.L	D1/D7/A5,-(A7)
	MOVEQ	#0,D0
	DC.W	$4aba
	ORI.W	#$671a,EXT_0016.W
	DC.W	$0070
	SUBQ.W	#1,D7
	BMI.S	LAB_045E
	MOVEA.L	NGWinList_PTR+2(PC),A5
LAB_045D:
	MOVE.L	76(A5),D1
	OR.L	D1,D0
	LEA	448(A5),A5
	DBF	D7,LAB_045D
LAB_045E:
	MOVEM.L	(A7)+,D1/D7/A5
	RTS
ProcessAllNGWinMsg:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	LAB_0460(PC),A4
	BSR.S	DoWithAllNGWindows
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0460:
	MOVE.L	A5,ActualNGWWIN
	BRA.S	ProcessNGWindowIdMsg
	NOP
	DC.W	$0000
ProcessNGWindowIdMsg:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	D0,ActualNGWWIN_ID
	BSR.W	NGWindowCheck
	DC.W	$4a88
	BEQ.S	LAB_0462
	MOVEA.L	(A0),A0
	LEA	NGWINA_JUMPLIST(PC),A1
	BSR.W	ProcessWindowMsg
LAB_0462:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
CloseMyNGWin:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	ActualNGWWIN_ID(PC),D0
	BEQ.S	LAB_0464
	BSR.W	NGCloseWinId
LAB_0464:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NGWinList_PTR:
LAB_0465:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	MOVE.L	D0,-(A1)
	ORI.B	#$00,D1
ActualNGWWIN:
	ORI.B	#$00,D0
ActualNGWWIN_ID:
	ORI.B	#$00,D0
NGWINA_JUMPLIST:
	DC.W	$0000
	DC.W	$0400
	DC.L	MRAWKEY_JL
	ORI.B	#$16,D0
	ORI.B	#$ff,D0
	DC.L	FastKeyboard
	ORI.B	#$00,D0
	ORI.B	#$08,D0
	DC.L	NIL_JL
	ORI.B	#$16,D0
	ORI.B	#$ff,D0
	DC.L	NGWButtons
	ORI.B	#$00,D0
	DC.W	$0000
	DC.W	$0200
	DC.L	NIL_JL
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.L	NGWinCloseMsg
	ORI.B	#$00,D0
	ORI.B	#$02,D0
	DC.L	NIL_JL
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.L	NGWinResizeMsg
	ORI.B	#$00,D0
	ORI.B	#$00,D4
	DC.L	NIL_JL
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.L	NGWWinActivateMsg
	ORI.B	#$00,D0
	DC.W	$0000
	BTST	D0,D0
	DC.L	MMENU_JL
	ORI.B	#$16,D0
	DC.W	$0000
	DC.W	$ffff
	DC.L	IMSGInfo
	ORI.B	#$00,D0
	DC.W	$ffff
	DC.W	$ffff
NGWinCloseMsg:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	ActualNGWWIN(PC),A5
	DC.W	$4a8d
	BEQ.S	LAB_046B
	LEA	NGWin_Info(PC),A4
	MOVE.L	A5,(A4)
	BSR.W	NGZoomMiniWindow
LAB_046B:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NGSetWindowXYWH:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$4a8d
	BEQ.S	LAB_046D
	TST.L	(A5)
	BEQ.S	LAB_046D
	MOVEA.L	(A5),A0
	MOVEA.L	_IntuitionBase,A6
	JSR	-486(A6)
LAB_046D:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
NGWWinActivateMsg:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.B	#$ff,64(A5)
	MOVEA.L	ActualNGWWIN(PC),A5
	DC.W	$4a8d
	BEQ.S	LAB_046F
	LEA	NGWin_Info(PC),A4
	MOVE.L	A5,(A4)
LAB_046F:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NGDrawAllGads_WINDOWID:
	ORI.B	#$00,D0
	DC.W	$0000
NGDrawGadsWindowID:
	MOVE.L	D0,NGDrawAllGads_WINDOWID+2
	BSR.W	NGDrawAllGads
	CLR.L	NGDrawAllGads_WINDOWID+2
	RTS
	DC.W	$0000
SelectDspEcho:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$53593539,D0
	BSR.W	NGFindGadID
	DC.W	$4a88
	BEQ.S	LAB_0474
	MOVE.L	64(A0),D7
	CMPI.L	#$00000004,D7
	BHI.S	LAB_0473
	LEA	DspAction_LIST(PC),A2
	DC.W	$2472
	MOVEQ	#0,D2
	JSR	(A2)
LAB_0473:
	BSR.S	SelectDspDraw
	BSR.W	ShowDspStatus
LAB_0474:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SelectDspDelay:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$53593639,D0
	BSR.W	NGFindGadID
	DC.W	$4a88
	BEQ.S	LAB_0477
	MOVE.L	64(A0),D7
	CMPI.L	#$00000002,D7
	BHI.S	LAB_0476
	LEA	DspActionDelay_LIST(PC),A2
	DC.W	$2472
	MOVEQ	#0,D2
	JSR	(A2)
LAB_0476:
	BSR.S	SelectDspDraw
LAB_0477:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SelectDspHall:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$53593739,D0
	BSR.W	NGFindGadID
	DC.W	$4a88
	BEQ.S	LAB_047A
	MOVE.L	64(A0),D7
	CMPI.L	#$00000002,D7
	BHI.S	LAB_0479
	LEA	DspActionDelay_LIST(PC),A2
	DC.W	$2472
	MOVEQ	#0,D2
	JSR	(A2)
LAB_0479:
	BSR.S	SelectDspDraw
LAB_047A:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SelectDspDraw:
	MOVE.L	ActualNGWWIN_ID(PC),D0
	BEQ.S	LAB_047C
	LEA	NGWin_Info(PC),A6
	MOVEA.L	(A6),A5
	MOVE.L	72(A5),D0
	DC.W	$4a8d
	BSR.W	PreClipWIN
	BSR.W	NGWDrawWindowID
	BSR.W	NGDrawGadsWindowID
	BSR.W	DrawSystemSetup
	BSR.W	ShowDspStatus
	BSR.W	PostClipWIN
LAB_047C:
	RTS
NGWinResizeMsg:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	ActualNGWWIN_ID(PC),D0
	BEQ.W	LAB_0484
	BSR.W	NGWDrawWindowID
	BSR.W	NGDrawGadsWindowID
	CMPI.L	#$57494e53,D0
	BNE.S	LAB_047E
	BSR.W	DrawInstrumentReset
	BSR.W	DrawInstrument
	BSR.W	DrawInstrParam
	BRA.S	LAB_0484
LAB_047E:
	CMPI.L	#$57494e41,D0
	BNE.S	LAB_047F
	BSR.W	RedrawSpec
	BRA.S	LAB_0484
LAB_047F:
	CMPI.L	#$57494e42,D0
	BNE.S	LAB_0480
	BSR.W	DrawPositionCacheReset
	BSR.W	DrawSongAll
	BRA.S	LAB_0484
LAB_0480:
	CMPI.L	#$57494e43,D0
	BNE.S	LAB_0481
	BSR.W	ShowBufferedAMsgs
	BSR.W	NGRedrawStatusText
	BRA.S	LAB_0484
LAB_0481:
	CMPI.L	#$50544544,D0
	BNE.S	LAB_0482
	BSR.W	AdjustActualPattEd
	BRA.S	LAB_0484
LAB_0482:
	CMPI.L	#$4354524c,D0
	BNE.S	LAB_0483
	BSR.W	DrawSystemSetup
	BSR.W	ShowDspStatus
	BRA.S	LAB_0484
LAB_0483:
	CMPI.L	#$45564544,D0
	BNE.S	LAB_0484
	CLR.L	LastEvent
	BSR.W	ClrDrawNECache
	BSR.W	DrawEventStatus
	BSR.W	RedrawMEventAll
LAB_0484:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
AnimateDelay:
	ORI.B	#$08,D0
InitActionDelay:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#8,D0
	MOVEQ	#8,D1
	DC.W	$4c79
	MOVE.B	D1,D0
	DC.L	VexBufferNumb
	DC.W	$4c01
	DC.W	$0000
	DC.W	$4c39
	DC.W	$0000
	DC.L	VexSpeed
	DC.W	$4c7c
	ORI.B	#$00,D0
	ORI.L	#$0c800000,2(A7)
	BCC.S	LAB_0487
	MOVEQ	#2,D0
LAB_0487:
	MOVE.L	D0,AnimateDelay
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
NGGetInnerAreaData:
	SUBA.L	A1,A1
	BSR.S	NGFindArea
	DC.W	$4a88
	BEQ.S	LAB_0489
	MOVEA.L	52(A0),A1
	MOVEM.W	24(A0),D0-D3
LAB_0489:
	RTS
NGFindAreaWindow:
	MOVEM.L	D7/A0/A5,-(A7)
	DC.W	$4aba
	DC.W	$fd2e
	BEQ.S	LAB_048C
	MOVE.W	LAB_0465(PC),D7
	SUBQ.W	#1,D7
	BMI.S	LAB_048C
	MOVEA.L	NGWinList_PTR+2(PC),A5
LAB_048B:
	MOVE.L	72(A5),D0
	BSR.S	NGFindArea
	DC.W	$4a88
	BNE.S	LAB_048D
	LEA	448(A5),A5
	DBF	D7,LAB_048B
LAB_048C:
	MOVEQ	#0,D0
LAB_048D:
	MOVEM.L	(A7)+,D7/A0/A5
	RTS
NGFindArea2:
	MOVEM.L	D0,-(A7)
	BSR.W	NGFindWindow
	MOVEA.L	A0,A5
	DC.W	$4a88
	BEQ.S	LAB_048F
	MOVE.L	D1,D0
	BSR.W	NGAreaIsActive
LAB_048F:
	MOVEM.L	(A7)+,D0
	RTS
	DC.W	$0000
NGFindArea:
	MOVEM.L	D0,-(A7)
	BSR.W	NGFindWindow
	MOVEA.L	A0,A5
	DC.W	$4a88
	BEQ.S	LAB_0491
	MOVE.L	D1,D0
	BSR.W	NGAreaIsActive
	CMPI.W	#$ffff,D0
	BEQ.S	LAB_0491
	SUBA.L	A0,A0
LAB_0491:
	MOVEM.L	(A7)+,D0
	RTS
	DC.W	$0000
NGWButtons:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	NGWDoAnimations
	CLR.B	Patted_MoveCrsr
	LEA	NGWin_Info(PC),A6
	MOVEA.L	(A6),A5
	DC.W	$4a8d
	BEQ.W	LAB_049F
	MOVE.L	D4,D0
	ANDI.L	#$00000080,D0
	MOVEQ	#0,D7
	MOVE.B	D7,52(A5)
	TST.B	D0
	BNE.S	LAB_0495
	MOVE.L	60(A5),56(A5)
	MOVEQ	#-1,D7
	MOVE.B	D7,52(A5)
	MOVEA.L	68(A6),A0
	DC.W	$4a88
	BEQ.S	LAB_0495
	CMPI.L	#$53574156,4(A0)
	BNE.S	LAB_0494
	BSR.W	CheckInstrument
	CMPI.B	#$ff,D0
	BEQ.S	LAB_0494
	BSR.W	CheckNewLoopInstr
	CMPI.B	#$ff,D0
	BNE.S	LAB_0493
	MOVE.W	28(A0),D1
	MULU	#$0003,D1
	DIVU	#$0004,D1
	ADD.W	24(A0),D1
	MOVE.W	60(A5),D0
	CMP.W	D1,D0
	BCC.S	LAB_0494
LAB_0493:
	MOVE.L	#DoLoopRange,96(A6)
LAB_0494:
	CMPI.L	#$50454432,4(A0)
	BNE.S	LAB_0495
	MOVEM.W	60(A5),D0-D1
	BSR.W	ConvertMouseXYtoPEDXY
	BSR.W	PEDSetMute
LAB_0495:
	TST.B	D7
	BEQ.S	LAB_049B
	CLR.L	88(A6)
	MOVEA.L	72(A6),A0
	DC.W	$4a88
	BEQ.W	LAB_049F
	MOVE.L	A0,88(A6)
	MOVEA.L	44(A0),A3
	MOVE.L	AnimateDelay(PC),84(A6)
	MOVEQ	#3,D4
LAB_0496:
	CMPI.W	#$3142,10(A0)
	BEQ.S	LAB_0497
	BRA.S	LAB_049E
LAB_0497:
	CMPI.B	#$2d,14(A0)
	BEQ.S	LAB_0498
	MOVEA.L	(A0),A1
	MOVEQ	#0,D4
	MOVE.B	#$2d,14(A0)
	MOVE.B	#$2d,11(A1)
	BRA.S	LAB_0499
LAB_0498:
	MOVEA.L	(A0),A1
	MOVEQ	#3,D4
	MOVE.B	#$2b,14(A0)
	MOVE.B	#$2b,11(A1)
LAB_0499:
	BSR.S	LAB_04A0
LAB_049A:
	MOVE.L	4(A0),D0
	BSR.W	NGGadDoAction
	BRA.S	LAB_049F
LAB_049B:
	CMPI.B	#$ff,Loopactive+2
	BNE.S	LAB_049C
	BSR.W	LoopSelect
LAB_049C:
	CLR.L	96(A6)
	MOVEA.L	88(A6),A0
	DC.W	$4a88
	BEQ.S	LAB_049F
	CMPI.W	#$3142,10(A0)
	BEQ.S	LAB_049F
	MOVEA.L	44(A0),A3
LAB_049D:
	MOVE.L	4(A0),D0
	MOVEQ	#0,D4
	MOVEA.L	72(A6),A2
	DC.W	$4a8a
	BEQ.S	LAB_049E
	CMP.L	4(A2),D0
	BNE.S	LAB_049E
	BSR.W	NGGadDoAction
LAB_049E:
	CLR.W	LAB_057B+2
	CMPI.B	#$56,11(A0)
	BEQ.S	LAB_049F
	CMPI.B	#$54,11(A0)
	BEQ.S	LAB_049F
	MOVEM.W	48(A0),D0-D3
	MOVEA.L	36(A0),A5
	MOVEA.L	8(A5),A1
	MOVEA.L	20(A0),A0
	JSR	(A3)
LAB_049F:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_04A0:
	MOVEM.L	D0/A0,-(A7)
	CMPI.B	#$56,11(A0)
	BEQ.S	LAB_04A1
	CMPI.B	#$54,11(A0)
	BEQ.S	LAB_04A1
	MOVEM.W	48(A0),D0-D3
	MOVEA.L	36(A0),A5
	MOVEA.L	8(A5),A1
	MOVEA.L	20(A0),A0
	JSR	(A3)
LAB_04A1:
	MOVEM.L	(A7)+,D0/A0
	RTS
NGWGetWindowXYWH:
	MOVEM.L	A5,-(A7)
	MOVEA.L	(A5),A5
	MOVEQ	#0,D0
	MOVEQ	#0,D1
	MOVEQ	#0,D2
	MOVEQ	#0,D3
	MOVE.W	112(A5),D2
	MOVE.W	114(A5),D3
	SUBQ.W	#1,D2
	SUBQ.W	#1,D3
	MOVEA.L	(A7)+,A5
	RTS
Patted_MoveCrsr:
	DC.W	$0000
NGWDoAnimations:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	NGWin_Info(PC),A5
	MOVEA.L	A5,A6
	TST.L	(A6)
	BEQ.W	LAB_04B4
	MOVEA.L	(A5),A5
	TST.L	(A5)
	BEQ.W	LAB_04B5
	TST.L	8(A5)
	BEQ.W	LAB_04B5
	MOVEA.L	(A5),A4
	BSR.W	GetMouseXYOfWindow
	MOVEM.W	D0-D1,60(A5)
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$0ce0
	BEQ.W	LAB_04B0
	TST.L	96(A6)
	BNE.W	LAB_04B6
	CLR.L	68(A6)
	CLR.L	72(A6)
	MOVEM.L	A0,-(A7)
	BSR.W	NGFindAreaAtXY
	DC.W	$4a88
	BNE.S	LAB_04A9
	CMPI.B	#$ff,52(A5)
	BNE.W	LAB_04AF
	DC.W	$0c3a
	DC.W	$00ff
	DC.W	$ff9e
	BNE.W	LAB_04AF
	MOVEM.L	D2/A0,-(A7)
	BSR.W	GetActualPattEd
	MOVE.W	120(A0),D2
	CMP.W	D2,D0
	BGT.S	LAB_04A5
	BSR.W	CrsrLeft
	BRA.S	LAB_04A6
LAB_04A5:
	ADD.W	124(A0),D2
	CMP.W	D2,D0
	BCS.S	LAB_04A6
	BSR.W	CrsrRight
LAB_04A6:
	MOVE.W	122(A0),D2
	CMP.W	D2,D1
	BGT.S	LAB_04A7
	BSR.W	CrsrUp
	BRA.S	LAB_04A8
LAB_04A7:
	ADD.W	126(A0),D2
	CMP.W	D2,D1
	BCS.S	LAB_04A8
	BSR.W	CrsrDown
LAB_04A8:
	MOVEM.L	(A7)+,D2/A0
	BRA.W	LAB_04AF
LAB_04A9:
	MOVE.L	A0,68(A6)
	CMPI.L	#$53574156,4(A0)
	BNE.S	LAB_04AA
	CMPI.B	#$ff,52(A5)
	BEQ.S	LAB_04AA
	MOVEM.L	A0,-(A7)
	LEA	Loopseltxt,A0
	BSR.W	NGSetStatusText
	MOVEA.L	(A7)+,A0
LAB_04AA:
	CMPI.L	#$50454432,4(A0)
	BNE.S	LAB_04AD
	MOVEM.W	60(A5),D0-D1
	BSR.W	ConvertMouseXYtoPEDXY
	CMPI.B	#$ff,52(A5)
	BEQ.S	LAB_04AC
	TST.W	D1
	BNE.S	LAB_04AB
	MOVEM.L	A0,-(A7)
	LEA	pedtxtc+1,A0
	BSR.W	NGSetStatusText
	MOVEA.L	(A7)+,A0
	BRA.S	LAB_04AF
LAB_04AB:
	MOVEM.L	A0,-(A7)
	LEA	pedtxt,A0
	BSR.W	NGSetStatusText
	MOVEA.L	(A7)+,A0
	BRA.S	LAB_04AF
LAB_04AC:
	DC.W	$0c3a
	DC.W	$00ff
	DC.W	$fee6
	BNE.S	LAB_04AF
	BSR.W	PEDSetCrsrOffset
	MOVEM.L	A0,-(A7)
	LEA	pedtxtb+1,A0
	BSR.W	NGSetStatusText
	MOVEA.L	(A7)+,A0
	BRA.S	LAB_04AF
LAB_04AD:
	MOVEM.L	A4,-(A7)
	MOVEA.L	68(A6),A4
	DC.W	$4a8c
	BEQ.S	LAB_04AE
	BSR.W	NGFindGadAtXY
	DC.W	$4a88
	BEQ.S	LAB_04AE
	MOVE.L	A0,72(A6)
LAB_04AE:
	MOVEA.L	(A7)+,A4
LAB_04AF:
	MOVEA.L	(A7)+,A0
	CMPI.B	#$ff,52(A5)
	BNE.S	LAB_04B3
LAB_04B0:
	MOVEM.L	A0,-(A7)
	MOVEA.L	88(A6),A0
	DC.W	$4a88
	BEQ.S	LAB_04B2
	CMPA.L	72(A6),A0
	BNE.S	LAB_04B2
	TST.L	44(A0)
	BEQ.S	LAB_04B2
	CMPI.B	#$52,15(A0)
	BNE.S	LAB_04B2
	CMPI.B	#$53,11(A0)
	BEQ.S	LAB_04B1
	SUBQ.L	#1,84(A6)
	BPL.S	LAB_04B2
LAB_04B1:
	MOVEM.L	D0-D4/A0-A5,-(A7)
	MOVE.L	4(A0),D0
	BSR.W	NGGadDoAction
	MOVEA.L	44(A0),A3
	MOVEM.W	48(A0),D0-D3
	MOVEA.L	36(A0),A5
	MOVEA.L	8(A5),A1
	MOVEA.L	20(A0),A0
	MOVEQ	#6,D4
	JSR	(A3)
	MOVEM.L	(A7)+,D0-D4/A0-A5
LAB_04B2:
	MOVEA.L	(A7)+,A0
	BRA.S	LAB_04B4
LAB_04B3:
	MOVEM.L	MouseSeloldxy(PC),D0-D1
	CLR.L	MouseSeloldxy
	MOVEM.L	D0-D1,LAB_0712
LAB_04B4:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_04B5:
	LEA	NGWin_Info(PC),A5
	CLR.L	(A5)
	BRA.S	LAB_04B4
LAB_04B6:
	MOVEA.L	96(A6),A6
	JSR	(A6)
	BRA.S	LAB_04B4
GetMouseXYOfWindow:
	MOVE.W	108(A4),D0
	MOVE.W	110(A4),D1
	RTS
	DC.W	$0000
PEDSetMute:
	MOVEM.L	D0-D1/A0,-(A7)
	TST.W	D0
	BEQ.S	LAB_04BA
	TST.W	D1
	BNE.S	LAB_04BA
	SUBQ.W	#1,D0
	SUBQ.W	#1,D1
	BSR.W	GetActualPattEd
	ADD.W	32(A0),D0
	BSR.W	MuteTrack
	CLR.B	Patted_MoveCrsr
LAB_04B9:
	MOVEM.L	(A7)+,D0-D1/A0
	RTS
LAB_04BA:
	MOVE.B	#$ff,Patted_MoveCrsr
	BRA.S	LAB_04B9
	DC.W	$0000
PEDSetCrsrOffset:
	MOVEM.L	D0-D1/A0,-(A7)
	TST.W	D0
	BEQ.S	LAB_04BD
	TST.W	D1
	BEQ.S	LAB_04BE
	SUBQ.W	#1,D0
	SUBQ.W	#1,D1
	BSR.W	GetActualPattEd
	BSR.W	PatEdCrsrOff
	MOVEM.W	D0-D1,60(A0)
	BSR.W	PatEdCrsrOn
	BSR.W	DrawEventStatus
LAB_04BC:
	MOVEM.L	(A7)+,D0-D1/A0
	RTS
LAB_04BD:
	BSR.W	CrsrLeft
	BRA.S	LAB_04BC
LAB_04BE:
	BSR.W	CrsrUp
	BRA.S	LAB_04BC
ConvertMouseXYtoPEDXY:
	MOVEM.L	D2-D3/A0-A1/A5,-(A7)
	BSR.W	GetPEDRP+6
	DC.W	$4a89
	BEQ.S	LAB_04C1
	BSR.W	GetActualPattEd
	ANDI.L	#$0000ffff,D0
	ANDI.L	#$0000ffff,D1
	SUB.W	120(A0),D0
	MOVEQ	#3,D2
	MULU	FONT_W(PC),D2
	SUB.W	D2,D0
	ADD.W	128(A0),D0
	DIVU	128(A0),D0
	CMP.W	64(A0),D0
	BLS.S	LAB_04C0
	MOVE.W	64(A0),D0
LAB_04C0:
	SUB.W	122(A0),D1
	DIVU	130(A0),D1
	CMP.W	66(A0),D1
	BLS.S	LAB_04C1
	MOVE.W	66(A0),D1
LAB_04C1:
	ANDI.L	#$0000ffff,D0
	ANDI.L	#$0000ffff,D1
	MOVEM.L	(A7)+,D2-D3/A0-A1/A5
	RTS
NGRedrawStatusText:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	NGWin_Info(PC),A6
	MOVEA.L	80(A6),A0
	MOVE.L	A0,76(A6)
	DC.W	$4a88
	BEQ.S	LAB_04C3
	MOVE.L	#$494e4632,D0
	BSR.W	NGODrawText
LAB_04C3:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NGSetStatusText:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	NGWin_Info(PC),A6
	MOVE.L	A0,80(A6)
	CMPA.L	76(A6),A0
	BEQ.S	LAB_04C5
	MOVE.L	A0,76(A6)
	DC.W	$4a88
	BEQ.S	LAB_04C5
	MOVE.L	#$57494e43,D0
	MOVE.L	#$43303032,D1
	BSR.W	NGRClearAreaID
	MOVE.L	#$494e4632,D0
	BSR.W	NGODrawText
LAB_04C5:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NGActualAreaBodyXYWH:
LAB_04C6:
	ORI.B	#$00,D0
LAB_04C8:
	ORI.B	#$00,D0
NGWin_Info:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$01,D2
	ORI.B	#$00,D3
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$08,D6
	ORI.B	#$08,D6
	ORI.B	#$02,D6
	ORI.B	#$02,D2
	ORI.B	#$0c,D4
	ORI.B	#$02,D2
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
NGSetGadBoolOff:
	MOVEM.L	D1,-(A7)
	MOVEQ	#0,D1
	BSR.S	NGSetGadBool
	MOVEM.L	(A7)+,D1
	RTS
NGSetGadBoolOn:
	MOVEM.L	D1,-(A7)
	MOVEQ	#-1,D1
	BSR.S	NGSetGadBool
	MOVEM.L	(A7)+,D1
	RTS
NGSetGadBool:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	NGFindGadID
	DC.W	$4a88
	BEQ.S	LAB_04CF
	MOVEA.L	(A0),A1
	MOVEA.L	20(A0),A2
	MOVE.B	#$2b,14(A0)
	MOVE.B	#$2b,11(A1)
	CMPI.B	#$ff,D1
	BEQ.S	LAB_04CE
	MOVE.B	#$2d,14(A0)
	MOVE.B	#$2d,11(A1)
LAB_04CE:
	MOVEA.L	A2,A0
	BSR.W	NGODrawText
LAB_04CF:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NGODrawSignByte3Char:
	MOVEM.L	D0-D3/A0,-(A7)
	EXG	D0,D2
	ANDI.L	#$000000ff,D0
	BSR.W	ConvertToSignDecByte
	MOVE.L	SignDecByte_TXT(PC),D3
	CLR.B	D3
	MOVE.L	D3,LAB_04D1
	MOVE.L	D2,D0
	LEA	LAB_04D1(PC),A0
	BSR.W	NGODrawText
	MOVEM.L	(A7)+,D0-D3/A0
	RTS
LAB_04D1:
	MOVE.L	11520(A5),-(A6)
NGODrawDecWord3Char:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	EXG	D0,D2
	LEA	DecWordSave(PC),A0
	ANDI.L	#$0000ffff,D0
	JSR	ConvertToDecWord
	MOVE.L	LAB_0835+2(PC),D3
	CLR.B	D3
	MOVE.L	D3,LAB_04D3
	MOVE.L	D2,D0
	LEA	LAB_04D3(PC),A0
	BSR.W	NGODrawText
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_04D3:
	MOVE.L	11520(A5),-(A6)
	DC.W	$0000
NGODrawDecWord4Char:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	EXG	D0,D2
	LEA	DecWordSave(PC),A0
	ANDI.L	#$0000ffff,D0
	JSR	ConvertToDecWord
	DC.W	$263a
	DC.W	$4955
	MOVE.L	D3,LAB_04D5
	MOVE.L	D2,D0
	LEA	LAB_04D5(PC),A0
	BSR.W	NGODrawText
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_04D5:
	MOVE.L	11565(A5),-(A6)
	ORI.B	#$00,D0
NGODrawDecWord5Char:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	DecLongSave(PC),A0
	EXG	D0,D2
	BSR.W	ConvertToDecLong
	LEA	LAB_083A+1(PC),A0
	EXG	D0,D2
	BSR.W	NGODrawText
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
NGODrawFloatValue:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	D2,D4
	TST.W	D2
	BPL.S	LAB_04D8
	NEG.W	D2
LAB_04D8:
	EXG	D0,D2
	LEA	LAB_04DB(PC),A0
	JSR	ConvertToDecWord
	MOVE.W	3(A0),D3
	MOVE.B	#$2e,3(A0)
	MOVE.W	D3,4(A0)
	TST.W	D4
	BPL.S	LAB_04D9
	MOVE.B	#$2d,(A0)
LAB_04D9:
	CMPI.B	#$20,4(A0)
	BNE.S	LAB_04DA
	MOVE.B	#$30,4(A0)
LAB_04DA:
	LEA	LAB_04DB(PC),A0
	CLR.B	6(A0)
	MOVE.L	D2,D0
	BSR.W	NGODrawText
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_04DB:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
NGODrawFloatValue2:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	D2,D4
	TST.W	D2
	BPL.S	LAB_04DD
	NEG.W	D2
LAB_04DD:
	EXG	D0,D2
	LEA	LAB_04E2(PC),A0
	JSR	ConvertToDecWord
	MOVE.L	1(A0),D3
	MOVE.B	#$2e,1(A0)
	MOVE.L	D3,2(A0)
	TST.W	D4
	BPL.S	LAB_04DE
	MOVE.B	#$2d,(A0)
LAB_04DE:
	CMPI.B	#$20,4(A0)
	BNE.S	LAB_04DF
	MOVE.B	#$30,4(A0)
LAB_04DF:
	CMPI.B	#$20,3(A0)
	BNE.S	LAB_04E0
	MOVE.B	#$30,3(A0)
LAB_04E0:
	CMPI.B	#$20,2(A0)
	BNE.S	LAB_04E1
	MOVE.B	#$30,2(A0)
LAB_04E1:
	LEA	LAB_04E2(PC),A0
	CLR.B	6(A0)
	MOVE.L	D2,D0
	BSR.S	NGODrawText
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_04E2:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.W	$0000
NGODrawText:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$4a88
	BEQ.S	LAB_04E5
	MOVE.W	NGGadNumbTotal+2(PC),D7
	SUBQ.W	#1,D7
	BMI.S	LAB_04E5
	DC.W	$4aba
	ROXR.B	D6,D6
	BEQ.S	LAB_04E5
	MOVEA.L	NGGadInfo_PTR(PC),A2
	LEA	-84(A2),A2
LAB_04E4:
	LEA	84(A2),A2
	CMP.L	4(A2),D0
	BEQ.S	LAB_04E6
	DBF	D7,LAB_04E4
LAB_04E5:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_04E6:
	TST.L	36(A2)
	BEQ.S	LAB_04E5
	TST.L	40(A2)
	BEQ.S	LAB_04E5
	CMPI.B	#$ff,16(A2)
	BNE.S	LAB_04E5
	MOVEA.L	40(A2),A4
	MOVEA.L	36(A2),A5
	CMPI.B	#$ff,(A4)
	BNE.S	LAB_04E5
	MOVEA.L	52(A4),A1
	DC.W	$4a89
	BEQ.S	LAB_04E5
	MOVEA.L	44(A2),A6
	MOVEM.W	48(A2),D0-D3
	DC.W	$4a8e
	BEQ.S	LAB_04E5
	MOVEQ	#0,D4
	CMPI.B	#$2d,14(A2)
	BEQ.S	LAB_04E7
	MOVEQ	#3,D4
LAB_04E7:
	JSR	(A6)
	BRA.S	LAB_04E5
	DC.W	$0000
NGFindGadAtXY:
	MOVEM.L	D0-D7,-(A7)
	SUBQ.W	#3,D0
	DC.W	$4a8d
	BEQ.S	LAB_04EB
	DC.W	$4a8c
	BEQ.S	LAB_04EB
	DC.W	$4aba
	ROL.L	D5,D4
	BEQ.S	LAB_04EB
	MOVEA.L	NGGadInfo_PTR(PC),A0
	LEA	-84(A0),A0
	MOVE.W	NGGadNumbTotal+2(PC),D7
	SUBQ.W	#1,D7
	BMI.S	LAB_04EB
	MOVE.L	4(A4),D6
LAB_04E9:
	LEA	84(A0),A0
	CMP.L	32(A0),D6
	BNE.S	LAB_04EA
	MOVEM.W	48(A0),D2-D5
	CMP.W	D2,D0
	BCS.S	LAB_04EA
	CMP.W	D3,D1
	BCS.S	LAB_04EA
	ADD.W	D2,D4
	CMP.W	D4,D0
	BHI.S	LAB_04EA
	ADD.W	D3,D5
	CMP.W	D5,D1
	BHI.S	LAB_04EA
	BRA.S	LAB_04EC
LAB_04EA:
	DBF	D7,LAB_04E9
LAB_04EB:
	SUBA.L	A0,A0
LAB_04EC:
	MOVEM.L	(A7)+,D0-D7
	RTS
	DC.W	$0000
NGFindGadID:
	MOVEM.L	D7,-(A7)
	DC.W	$4aba
	LSL.W	D5,D2
	BEQ.S	LAB_04EF
	MOVEA.L	NGGadInfo_PTR(PC),A0
	LEA	-84(A0),A0
	MOVE.W	NGGadNumbTotal+2(PC),D7
	SUBQ.W	#1,D7
	BMI.S	LAB_04EF
LAB_04EE:
	LEA	84(A0),A0
	CMP.L	4(A0),D0
	BEQ.S	LAB_04F0
	DBF	D7,LAB_04EE
LAB_04EF:
	SUBA.L	A0,A0
LAB_04F0:
	MOVEM.L	(A7)+,D7
	RTS
NGFindAreaAtXY:
	MOVEM.L	D2-D7,-(A7)
	DC.W	$4a8d
	BEQ.S	LAB_04F4
	LEA	88(A5),A0
	LEA	-60(A0),A0
	MOVE.W	84(A5),D7
	SUBQ.W	#1,D7
	BMI.S	LAB_04F4
LAB_04F2:
	LEA	60(A0),A0
	MOVEM.W	24(A0),D2-D5
	CMP.W	D2,D0
	BCS.S	LAB_04F3
	CMP.W	D3,D1
	BCS.S	LAB_04F3
	ADD.W	D2,D4
	CMP.W	D4,D0
	BHI.S	LAB_04F3
	ADD.W	D3,D5
	CMP.W	D5,D1
	BHI.S	LAB_04F3
	BRA.S	LAB_04F5
LAB_04F3:
	DBF	D7,LAB_04F2
LAB_04F4:
	SUBA.L	A0,A0
LAB_04F5:
	MOVEM.L	(A7)+,D2-D7
	RTS
NGGetArea:
	MOVEM.L	D7,-(A7)
	DC.W	$4a8d
	BEQ.S	LAB_04F8
	LEA	88(A5),A0
	LEA	-60(A0),A0
	MOVE.W	84(A5),D7
	SUBQ.W	#1,D7
	BMI.S	LAB_04F8
LAB_04F7:
	LEA	60(A0),A0
	CMP.L	4(A0),D0
	BEQ.S	LAB_04F9
	DBF	D7,LAB_04F7
LAB_04F8:
	SUBA.L	A0,A0
LAB_04F9:
	MOVEM.L	(A7)+,D7
	RTS
	DC.W	$0000
NGAreaIsActive:
	BSR.S	NGGetArea
	MOVEQ	#0,D0
	DC.W	$4a88
	BEQ.S	LAB_04FB
	CMPI.B	#$ff,(A0)
	BNE.S	LAB_04FB
	MOVEQ	#-1,D0
LAB_04FB:
	RTS
	DC.W	$0000
NGWBuildAreas:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	8(A5),A1
	LEA	NGWin_Info(PC),A4
	MOVEQ	#0,D7
	MOVE.W	D7,84(A5)
	LEA	88(A5),A3
	MOVEA.L	A0,A2
	MOVE.L	(A2)+,D4
	MOVE.B	(A2)+,D4
	BEQ.S	LAB_0500
	CMPI.B	#$28,D4
	BNE.S	LAB_0501
LAB_04FD:
	ADDQ.L	#1,D7
	MOVE.L	A2,32(A3)
	BSR.W	NGWSkipKomma
	TST.B	D4
	BEQ.S	LAB_0501
	MOVE.L	8(A5),52(A3)
	MOVE.L	A5,56(A3)
	MOVE.L	A2,36(A3)
	SUBQ.L	#1,36(A3)
	MOVE.L	(A2),D4
	MOVE.L	D4,4(A3)
	ADDQ.L	#5,A2
	MOVE.L	(A2)+,D4
	MOVE.L	D4,40(A3)
	BSR.S	NGWAnalyzeNum
	MOVE.W	D4,40(A3)
	MOVE.L	(A2)+,D4
	MOVE.L	D4,44(A3)
	BSR.S	NGWAnalyzeNum
	MOVE.W	D4,44(A3)
	MOVEM.L	D4,-(A7)
	MOVE.L	(A2)+,D4
	MOVE.L	D4,48(A3)
	BSR.S	NGWAnalyzeNum
	MOVE.W	D4,48(A3)
	MOVEM.L	(A7)+,D4
	LEA	60(A3),A3
LAB_04FE:
	MOVE.B	(A2)+,D4
	BEQ.S	LAB_04FF
	CMPI.B	#$28,D4
	BNE.S	LAB_04FE
	BRA.S	LAB_04FD
LAB_04FF:
	MOVE.W	D7,84(A5)
	TST.W	D7
	BEQ.S	LAB_0501
	LEA	88(A5),A3
	BSR.W	NGDrawAreas
LAB_0500:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0501:
	MOVE.L	#Areaerrtxt,AssText_TXT
	BSR.W	PrintAssTextF
	CLR.W	84(A5)
	BRA.S	LAB_0500
	DC.W	$0000
NGWAnalyzeNum:
	MOVEM.L	D0-D3/D5-D7,-(A7)
	MOVEQ	#8,D7
	MOVEQ	#2,D6
	MOVE.L	D4,D0
	MOVEQ	#0,D4
LAB_0503:
	MULU	#$000a,D4
	ROL.L	D7,D0
	MOVEQ	#0,D1
	MOVE.B	D0,D1
	SUBI.B	#$30,D1
	ADD.W	D1,D4
	DBF	D6,LAB_0503
	MOVEM.L	(A7)+,D0-D3/D5-D7
	RTS
	DC.W	$0000
NGRDrawAreaID:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	NGFindArea
	DC.W	$4a88
	BEQ.S	LAB_0505
	MOVEA.L	56(A0),A5
	MOVEM.W	16(A0),D0-D3
	MOVEQ	#1,D4
	BSR.W	NGRDrawBack
	MOVEA.L	32(A0),A0
	BSR.S	NGRemoveComma
	BSR.W	NGRDrawArea0
	BSR.S	NGUndoRemoveComma
LAB_0505:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
NGRClearAreaID:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	NGFindArea
	DC.W	$4a88
	BEQ.S	LAB_0507
	MOVEA.L	56(A0),A5
	MOVEM.W	24(A0),D0-D3
	MOVEQ	#1,D4
	BSR.W	NGRDrawBack
LAB_0507:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
NGRemoveComma:
	MOVEM.L	D0/A0,-(A7)
LAB_0509:
	MOVE.B	(A0)+,D0
	BEQ.S	LAB_050A
	CMPI.B	#$2c,D0
	BNE.S	LAB_0509
LAB_050A:
	SUBQ.L	#1,A0
	CLR.B	(A0)
	MOVE.B	D0,LAB_050D
	MOVE.L	A0,tempcomma
	MOVEM.L	(A7)+,D0/A0
	RTS
NGUndoRemoveComma:
	MOVEM.L	A0,-(A7)
	MOVEA.L	tempcomma(PC),A0
	MOVE.B	LAB_050D(PC),(A0)
	MOVEA.L	(A7)+,A0
	RTS
tempcomma:
	ORI.B	#$00,D0
LAB_050D:
	ORI.B	#$00,D0
NGDrawAreas:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	TST.W	D7
	BEQ.W	LAB_0516
	MOVE.W	D7,D6
	SUBQ.W	#1,D7
	MOVE.W	58(A4),D5
	ADD.W	62(A4),D5
	MULU	D5,D6
	ANDI.L	#$0000ffff,D6
	SUB.W	62(A4),D6
	SUB.W	D6,D3
	BSR.W	NGDrawAreasSubFix
	TST.W	D3
	BPL.S	LAB_050F
	MOVEQ	#0,D3
LAB_050F:
	MOVEQ	#0,D5
	MOVE.W	D3,D5
LAB_0510:
	CLR.B	(A3)
	MOVEQ	#0,D3
	TST.W	D5
	BEQ.S	LAB_0515
	MOVE.W	44(A3),D3
	CMPI.B	#$67,47(A3)
	BEQ.S	LAB_0512
	CMPI.B	#$25,47(A3)
	BNE.S	LAB_0513
	MULU	D5,D3
	DIVU	#$0064,D3
	TST.W	48(A3)
	BEQ.S	LAB_0513
	MOVEM.L	D0,-(A7)
	MOVE.W	48(A3),D0
	CMPI.B	#$67,51(A3)
	BNE.S	LAB_0511
	BSR.W	NGMuluStandardGadH
LAB_0511:
	MOVE.W	D0,D6
	MOVEM.L	(A7)+,D0
	CMP.W	D6,D3
	BLS.S	LAB_0513
	SUB.W	D6,D3
	ADD.W	D3,D5
	ADD.W	D3,D5
	MOVE.W	D6,D3
	BRA.S	LAB_0513
LAB_0512:
	MOVEM.L	D0,-(A7)
	MOVE.W	D3,D0
	BSR.W	NGMuluStandardGadH
	MOVE.W	D0,D3
	MOVEM.L	(A7)+,D0
LAB_0513:
	SUBQ.W	#2,D3
	BPL.S	LAB_0514
	MOVEQ	#0,D3
	BRA.S	LAB_0515
LAB_0514:
	MOVE.B	#$ff,(A3)
	ADDQ.W	#2,D3
LAB_0515:
	ADD.W	58(A4),D3
	MOVEA.L	32(A3),A0
	MOVEM.L	D4-D7,-(A7)
	MOVEA.L	36(A3),A2
	MOVE.B	(A2),D7
	CLR.B	(A2)
	MOVEM.W	D0-D3,16(A3)
	BSR.W	NGRDrawArea0
	MOVE.B	D7,(A2)
	MOVEM.W	NGActualAreaBodyXYWH(PC),D4-D7
	MOVEM.W	D4-D7,24(A3)
	MOVEM.L	(A7)+,D4-D7
	ADD.W	D3,D1
	ADD.W	62(A4),D1
	LEA	60(A3),A3
	CLR.L	(A3)
	DBF	D7,LAB_0510
LAB_0516:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	MOVE.L	11565(A5),-(A6)
	DC.W	$0000
NGDrawAreasSubFix:
	MOVEM.L	D7/A3,-(A7)
	LEA	-60(A3),A3
LAB_0518:
	LEA	60(A3),A3
	CMPI.B	#$67,47(A3)
	BEQ.S	LAB_051A
	CMPI.B	#$61,47(A3)
	BNE.S	LAB_0519
	ADDQ.W	#2,44(A3)
	SUB.W	44(A3),D3
	TST.W	D3
	BPL.S	LAB_0519
	CLR.W	44(A3)
LAB_0519:
	DBF	D7,LAB_0518
	MOVEM.L	(A7)+,D7/A3
	RTS
LAB_051A:
	MOVEM.L	D0,-(A7)
	MOVE.W	44(A3),D0
	BSR.W	NGMuluStandardGadH
	SUB.W	D0,D3
	TST.W	D3
	BPL.S	LAB_051B
	CLR.W	44(A3)
LAB_051B:
	MOVEM.L	(A7)+,D0
	BRA.S	LAB_0519
	DC.W	$0000
NGWSkipKomma:
	MOVE.B	(A2)+,D4
	BEQ.S	LAB_051D
	CMPI.B	#$2c,D4
	BNE.S	NGWSkipKomma
LAB_051D:
	RTS
NGRDrawArea0:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	8(A5),A1
	LEA	NGWin_Info(PC),A4
	MOVE.W	58(A4),D6
	BSR.W	NGRNrm1DrMd
	BSR.W	NGRLightAPen
	ADD.W	D6,D1
	MOVEQ	#0,D4
	MOVE.W	D2,D5
	SUB.W	D6,D3
	BMI.S	LAB_051F
	MOVEM.W	D0-D3,NGActualAreaBodyXYWH
	ADDQ.W	#1,NGActualAreaBodyXYWH
	ADDQ.W	#1,LAB_04C6+2
	SUBQ.W	#2,LAB_04C8
	SUBQ.W	#2,LAB_04C8+2
	BSR.W	NGRDrawBorder
	BRA.S	LAB_0520
LAB_051F:
	CLR.L	LAB_04C8
LAB_0520:
	SUB.W	D6,D1
	SUBQ.W	#1,D6
	MOVE.W	D6,D3
	MOVE.W	D0,D2
	BSR.W	NGRGetTextLen
	EXG	D0,D2
	MOVEQ	#0,D4
	ADDQ.W	#4,D2
	BSR.W	NGRDrawBorder
	BSR.W	NGRDarkAPen
	BSR.W	NGRNrm0DrMd
	MOVEM.L	D0-D1,-(A7)
	ADD.W	D2,D0
	MOVE.W	D5,D2
	ADDQ.W	#1,D2
	BSR.W	NGRDrawPatternA
	MOVEM.L	(A7)+,D0-D1
	ADD.W	44(A4),D1
	ADDQ.W	#2,D0
	ADDQ.W	#2,D1
	BSR.W	NGRDrawTextXY
	ADDQ.W	#1,D0
	BSR.W	NGRDrawTextXY
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
NGMuluStandardGadH:
	MOVEM.L	D1-D5/A0,-(A7)
	MOVE.W	D0,D5
	LEA	LAB_0522(PC),A0
	MOVEQ	#1,D4
	BSR.W	NGObjectGadBut0
	ADDQ.W	#2,D3
	MULU	D3,D5
	MOVE.W	D5,D0
	ADDQ.W	#4,D0
	MOVEM.L	(A7)+,D1-D5/A0
	RTS
LAB_0522:
	DC.W	$0000
NGGetStandardGadH:
	MOVEQ	#1,D0
	BSR.S	NGMuluStandardGadH
	RTS
	DC.W	$0000
NGObjectGad:
	CMPI.B	#$54,11(A2)
	BEQ.S	LAB_0525
	CMPI.B	#$42,11(A2)
	BEQ.S	LAB_0526
	CMPI.B	#$56,11(A2)
	BEQ.S	LAB_0527
	CMPI.B	#$50,11(A2)
	BEQ.S	LAB_0528
	CMPI.B	#$53,11(A2)
	BEQ.S	LAB_0529
LAB_0525:
	MOVE.L	#NGObjectGadText0,44(A2)
	BRA.W	NGObjectGadText0
LAB_0526:
	MOVE.L	#NGObjectGadBut0,44(A2)
	BRA.W	NGObjectGadBut0
LAB_0527:
	MOVE.L	#NGObjectGadVal0,44(A2)
	BRA.W	NGObjectGadVal0
LAB_0528:
	MOVE.L	#NGObjectGadPop0,44(A2)
	BRA.W	NGObjectGadPop0
LAB_0529:
	MOVE.L	#NGObjectGadSlider0,44(A2)
	BRA.S	NGObjectGadSlider0
	DC.W	$0000
NGObjectGadSlider0:
	TST.W	D4
	BEQ.S	LAB_052C
	CMPI.W	#$0001,D4
	BEQ.S	LAB_052B
	CMPI.W	#$0003,D4
	BEQ.S	LAB_052D
	CMPI.W	#$0006,D4
	BEQ.S	LAB_052E
	RTS
LAB_052B:
	MOVEM.L	D4-D5/A0,-(A7)
	LEA	NGWin_Info(PC),A0
	MOVE.W	42(A0),D3
	MOVEM.W	52(A0),D4-D5
	LSL.W	#1,D5
	ADD.W	D5,D3
	MOVE.W	40(A0),D2
	MULU	#$0007,D2
	SUBQ.W	#4,D2
	MOVE.L	D2,Slider0W+2
	ADDQ.W	#4,D2
	ADDQ.W	#1,D3
	MOVEM.L	(A7)+,D4-D5/A0
	RTS
LAB_052C:
	BSR.W	NGRDrawSlider0
	CLR.W	LAB_0538
	RTS
LAB_052D:
	BSR.W	NGRDrawSlider0MouseOn
	BSR.S	NGSetMouseRegion
	RTS
LAB_052E:
	BSR.S	NGClipMouseRegion
	BSR.W	NGRDrawSlider0MouseOn
	RTS
NGSetMouseRegion:
	MOVE.W	#$ffff,LAB_0538
	RTS
NGClipMouseRegion:
	MOVEM.L	D0-D1/A0,-(A7)
	DC.W	$0c7a
	DC.W	$ffff
	ORI.W	#$6612,(A2)
	MOVEM.W	60(A5),D0-D1
	LEA	ClipMouseRegion(PC),A0
	BSR.S	NGClipRegionXY
	MOVEM.W	D0-D1,60(A5)
	MOVEM.L	(A7)+,D0-D1/A0
	RTS
NGClipRegionXY:
	MOVEM.L	D2-D5,-(A7)
	MOVEM.W	(A0),D2-D5
	CMP.W	D2,D0
	BGE.S	LAB_0532
	MOVE.W	D2,D0
	BRA.S	LAB_0533
LAB_0532:
	ADD.W	D4,D2
	CMP.W	D2,D0
	BLE.S	LAB_0533
	MOVE.W	D2,D0
LAB_0533:
	CMP.W	D3,D1
	BGE.S	LAB_0534
	MOVE.W	D3,D1
	BRA.S	LAB_0535
LAB_0534:
	ADD.W	D5,D3
	CMP.W	D3,D1
	BLE.S	LAB_0535
	MOVE.W	D3,D1
LAB_0535:
	MOVEM.L	(A7)+,D2-D5
	RTS
ClipMouseRegion:
	ORI.B	#$00,D0
LAB_0537:
	ORI.B	#$00,D0
Slider0W:
LAB_0538:
	ORI.B	#$00,D0
LAB_053A:
	DC.W	$000a
GetSliderSize:
	MOVE.L	Slider0W+2(PC),D2
	LEA	NGWin_Info(PC),A6
	MOVE.W	42(A6),D3
	MOVEM.W	52(A6),D4-D5
	LSL.W	#1,D4
	ADD.W	D4,D0
	SUB.W	D4,D2
	LSL.W	#1,D5
	ADD.W	D5,D3
	ADDQ.W	#1,D3
	RTS
NGRDrawSlider0MouseOn:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	GetSliderSize
	MOVEM.W	D0-D3,ClipMouseRegion
	SUBI.W	#$000a,ClipMouseRegion
	ADDI.W	#$0014,LAB_0537
	MOVE.W	60(A5),D7
	CMP.W	oldslider(PC),D7
	BEQ.S	LAB_053D
	MOVE.W	D7,oldslider
	BSR.S	NGRDrawSlider0Bak
	BSR.S	NGRDrawSliderButton
LAB_053D:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
oldslider:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.W	$0000
NGRDrawSlider0:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	GetSliderSize
	BSR.S	NGRDrawSlider0Bak
	MOVE.L	(A0),D4
	BSR.W	NGWAnalyzeNum
	MOVE.L	D4,D7
	MULU	LAB_053A(PC),D7
	DIVU	#$0064,D7
	ADD.W	D0,D7
	BSR.W	NGRDrawSliderButtonDo
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NGRDrawSlider0Bak:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#2,D4
	ADD.W	40(A6),D2
	BSR.W	NGRDrawBack
	MOVEQ	#2,D4
	BSR.W	NGRDrawBorder
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
retrigtest:
	ORI.B	#$00,D0
doretrigtest:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	retrigtest(PC),D0
	BSR.W	PrintHexLong
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NGRDrawSliderButton:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	NGWin_Info(PC),A6
	MOVEA.L	(A6),A5
	MOVE.W	60(A5),D7
	BSR.S	NGRDrawSliderButtonDo
	SUB.W	D0,D7
	MULU	#$0064,D7
	DIVU	LAB_053A(PC),D7
	MOVEQ	#0,D0
	MOVE.W	D7,D0
	ADDQ.W	#1,D0
	MOVEQ	#0,D7
	MOVE.W	D0,D7
	JSR	ConvertToDecByte
	MOVE.L	DecByteSave,D0
	MOVE.B	EXT_0003.W,D0
	MOVE.L	D0,(A0)
	TST.W	D7
	BPL.S	LAB_0544
	MOVEQ	#0,D7
LAB_0544:
	CMPI.L	#$00000064,D7
	BCS.S	LAB_0545
	MOVEQ	#100,D7
LAB_0545:
	MOVE.L	D7,92(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NGRDrawSliderButtonDo:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	ADDQ.W	#1,D1
	SUBQ.W	#2,D3
	MOVE.W	D0,D6
	ADDQ.W	#5,D6
	CMP.W	D6,D7
	BHI.S	LAB_0547
	MOVE.W	D6,D7
LAB_0547:
	MOVEQ	#0,D6
	MOVE.W	D0,D6
	ADD.L	Slider0W+2(PC),D6
	SUBQ.W	#3,D6
	CMP.W	D6,D7
	BLS.S	LAB_0548
	MOVE.W	D6,D7
LAB_0548:
	BSR.S	LAB_0549
	MOVE.W	D7,D0
	MOVE.W	D0,D7
	MOVEQ	#4,D2
	SUB.W	D2,D0
	LSL.W	#1,D2
	BSR.W	NGRSliderButBack
	MOVEQ	#0,D4
	BSR.W	NGRDrawBorder
	BSR.W	NGRDarkAPen
	MOVE.W	D7,D0
	MOVE.W	D3,D2
	ADDQ.W	#1,D1
	SUBQ.W	#4,D2
	BSR.W	NGRDrawVLine
	ADDQ.W	#2,D0
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0549:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	ADDQ.W	#4,D0
	ADDQ.W	#2,D1
	SUBQ.W	#4,D3
	MOVE.W	D7,D2
	SUB.W	D0,D2
	BSR.W	NGRSpecialAPen
	BSR.W	NGRNrm0DrMd
	BSR.W	NGRDrawPatternC
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
MVolSet:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	NGWin_Info(PC),A6
	MOVE.L	92(A6),D0
	CMP.B	SYSVOL,D0
	BEQ.S	LAB_054B
	MOVE.B	D0,SYSVOL
	BSR.W	DrawMVolume
LAB_054B:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
MBalSet:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	NGWin_Info(PC),A6
	MOVE.L	92(A6),D0
	CMP.B	LAB_13FC+2,D0
	BEQ.S	LAB_054D
	MOVE.B	D0,LAB_13FC+2
	BSR.W	DrawMBalance
LAB_054D:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
MEventMax:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#0,D0
	MOVE.W	LAB_0579+2(PC),D0
	LEA	EditBuf(PC),A0
	MOVE.L	D0,(A0)
	LEA	EventMax_TXT,A1
	MOVEQ	#0,D1
	MOVE.L	#$000000ff,D2
	BSR.W	ReqMinMaxLong
	TST.W	D0
	BEQ.S	LAB_054F
	MOVE.L	(A0),D0
	MOVE.W	D0,LAB_0579+2
	BSR.W	RecalcMEvent
	BSR.W	DrawMEvent
LAB_054F:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetModifyFilter:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualNotePtr
	DC.W	$4a88
	BEQ.S	LAB_0552
	MOVEQ	#0,D0
	MOVE.B	(A0),D0
	MOVE.B	D0,LAB_057D+2
	LEA	FXDraw_CONVERTAB,A0
	JSR	ProcTabValuetoLong
	CMPI.L	#$ffffffff,D0
	BEQ.S	LAB_0551
	DC.W	$23c0
	DC.L	LAB_16F2+1
	MOVE.L	#ModFtxt+1,AssText_TXT
	BSR.W	PrintAssTextF
	BRA.S	LAB_0552
LAB_0551:
	MOVE.L	#ModFtxt2+1,AssText_TXT
	BSR.W	PrintAssTextF
LAB_0552:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
MEventMin:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#0,D0
	MOVE.W	LAB_0579(PC),D0
	LEA	EditBuf(PC),A0
	MOVE.L	D0,(A0)
	LEA	EventMin_TXT+3,A1
	MOVEQ	#0,D1
	MOVE.L	#$000000ff,D2
	BSR.W	ReqMinMaxLong
	TST.W	D0
	BEQ.S	LAB_0554
	MOVE.L	(A0),D0
	MOVE.W	D0,LAB_0579
	BSR.S	RecalcMEvent
	BSR.W	DrawMEvent
LAB_0554:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
MEventQuantize:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#0,D0
	MOVE.W	LAB_057D(PC),D0
	LEA	EditBuf(PC),A0
	MOVE.L	D0,(A0)
	LEA	EventQuant_TXT,A1
	MOVEQ	#1,D1
	MOVE.L	#$000000ff,D2
	BSR.W	ReqMinMaxLong
	TST.W	D0
	BEQ.S	LAB_0556
	MOVE.L	(A0),D0
	MOVE.W	D0,LAB_057D
	BSR.S	RecalcMEvent
	BSR.W	DrawMEvent
LAB_0556:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
MEventSet:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	#$ffff,LAB_057B+2
	LEA	NGWin_Info(PC),A6
	MOVE.L	92(A6),D0
	MOVE.W	D0,ModifyEventInfo
	BSR.S	RecalcMEvent
	BSR.S	DrawMEventVal
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
RedrawMEventAll:
	BSR.S	RecalcMEvent
	BSR.S	DrawMEvent
	BSR.W	EventMDrawBools
	RTS
	DC.W	$0000
RecalcMEvent:
	MOVEM.L	D0-D2,-(A7)
	MOVE.W	LAB_0579(PC),D1
	CMP.W	LAB_0579+2(PC),D1
	BLS.S	LAB_055A
	MOVE.L	LAB_0579(PC),D1
	SWAP	D1
	MOVE.L	D1,LAB_0579
LAB_055A:
	MOVE.W	ModifyEventInfo(PC),D0
	MOVE.W	LAB_0579+2(PC),D1
	SUB.W	LAB_0579(PC),D1
	MULU	D1,D0
	DIVU	#$0064,D0
	MOVEQ	#0,D2
	MOVE.W	LAB_057D(PC),D2
	ANDI.L	#$000000ff,D0
	DIVU	D2,D0
	MULU	D2,D0
	ADD.W	LAB_0579(PC),D0
	MOVE.W	D0,LAB_057B
	MOVEM.L	(A7)+,D0-D2
	RTS
DrawMEventVal:
	MOVEM.L	D0-D2,-(A7)
	MOVEQ	#0,D2
	MOVE.W	LAB_057B(PC),D2
	CMP.W	MECache(PC),D2
	BEQ.S	LAB_055C
	MOVE.L	#$45453836,D0
	MOVE.W	D2,MECache
	BSR.W	NGODrawDecWord3Char
LAB_055C:
	MOVEM.L	(A7)+,D0-D2
	RTS
	DC.W	$0000
DrawMEvent:
	MOVEM.L	D0-D2,-(A7)
	MOVE.W	LAB_057B(PC),D2
	MOVE.W	D2,MECache
	MOVE.L	#$45453836,D0
	BSR.W	NGODrawDecWord3Char
	MOVE.W	LAB_0579(PC),D2
	MOVE.L	#$45453831,D0
	BSR.W	NGODrawDecWord3Char
	MOVE.W	LAB_0579+2(PC),D2
	MOVE.L	#$45453833,D0
	BSR.W	NGODrawDecWord3Char
	MOVEM.L	(A7)+,D0-D2
	RTS
MECache:
	ORI.B	#$00,D0
SongPlayerPos_Y:
	ORI.B	#$00,D0
	DC.W	$0000
DoModifyEvent:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	D1,D0
	DC.W	$0c7a
	DC.W	$ffff
	BCHG	D0,-(A4)
	BNE.S	LAB_0567
	MOVE.W	SongPlayerPos_Y+2(PC),D1
	BSR.W	CheckXYInBlockRange
	CMPI.W	#$ffff,D0
	BNE.S	LAB_0567
	MOVE.W	LAB_057B(PC),D0
	DC.W	$4a3a
	BCHG	D0,D4
	BEQ.S	LAB_0567
	MOVE.B	(A2),D6
	TST.B	D6
	BNE.S	LAB_0561
	CMPI.B	#$64,2(A2)
	BHI.S	LAB_0567
LAB_0561:
	CMP.B	LAB_057D+2(PC),D6
	BNE.S	LAB_0567
	BSR.W	PattedUpdateReset
	DC.W	$0c3a
	DC.W	$0001
	BTST	D0,-(A4)
	BEQ.S	LAB_0564
	DC.W	$0c3a
	DC.W	$0002
	BTST	D0,(A4)+
	BEQ.S	LAB_0562
	DC.W	$0c3a
	DC.W	$0004
	BTST	D0,(A4)
	BEQ.S	LAB_0563
LAB_0562:
	MOVE.B	D0,3(A2)
	BRA.S	LAB_0567
LAB_0563:
	MOVE.B	D0,1(A2)
	BRA.S	LAB_0567
LAB_0564:
	TST.B	D6
	BNE.S	LAB_0566
	CMPI.B	#$64,D0
	BLS.S	LAB_0565
	MOVEQ	#100,D0
	BRA.S	LAB_0566
LAB_0565:
	CMPI.B	#$01,D0
	BCC.S	LAB_0566
	MOVEQ	#1,D0
LAB_0566:
	MOVE.B	D0,2(A2)
LAB_0567:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
EventModifyJSR:
	ORI.B	#$00,D0
	DC.W	$0000
EventMSwapV:
	ANDI.B	#$01,LAB_0577+2
	BCHG	#0,LAB_0577+2
	DC.W	$4a3a
	DC.W	$00cc
	BEQ.S	LAB_056C
	BSR.W	SetModifyFilter
LAB_056A:
	MOVE.L	#DoModifyEvent,EventModifyJSR
LAB_056B:
	BSR.S	EventMDrawBools
	RTS
LAB_056C:
	CLR.L	EventModifyJSR
	BRA.S	LAB_056B
EventMSwapI:
	ANDI.B	#$02,LAB_0577+2
	BCHG	#1,LAB_0577+2
LAB_056E:
	DC.W	$4a3a
	ORI.L	#$67126100,(A4)+
	DC.W	$fd7c
	MOVE.L	#DoModifyEvent,EventModifyJSR
LAB_056F:
	BSR.S	EventMDrawBools
	RTS
	CLR.L	EventModifyJSR
	BRA.S	LAB_056F
EventMSwapP:
LAB_0570:
	ANDI.B	#$04,LAB_0577+2
	BCHG	#2,LAB_0577+2
	DC.W	$4a3a
	ORI.W	#$6712,24832(A4)
	DC.W	$fd4c
	MOVE.L	#DoModifyEvent,EventModifyJSR
LAB_0572:
	BSR.S	EventMDrawBools
	RTS
	CLR.L	EventModifyJSR
	BRA.S	LAB_0572
EventMDrawBools:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#0,D1
	BTST	#0,LAB_0577+2(PC)
	BEQ.S	LAB_0574
	MOVEQ	#-1,D1
LAB_0574:
	MOVE.L	#$45453839,D0
	BSR.W	NGSetGadBool
	MOVEQ	#0,D1
	BTST	#1,LAB_0577+2(PC)
	BEQ.S	LAB_0575
	MOVEQ	#-1,D1
LAB_0575:
	MOVE.L	#$45453838,D0
	BSR.W	NGSetGadBool
	MOVEQ	#0,D1
	BTST	#2,LAB_0577+2(PC)
	BEQ.S	LAB_0576
	MOVEQ	#-1,D1
LAB_0576:
	MOVE.L	#$45453837,D0
	BSR.W	NGSetGadBool
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ModifyEventInfo:
LAB_0577:
	ORI.B	#$00,D0
LAB_0579:
	ORI.B	#$64,D0
LAB_057B:
	ORI.B	#$00,D0
LAB_057D:
	ORI.B	#$00,D1
MPitMax:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$23fc
LAB_0580:
	MOVE.W	37(A5,D3.W),D0
	DC.L	MTuneDef+1
	MOVE.W	#$0032,MTune
	JSR	SetAudioPeriod
	MOVE.L	#$53593364,D0
	LEA	MTuneDef+1,A0
	BSR.W	NGODrawText
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
MPitSet:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	NGWin_Info(PC),A6
	MOVE.L	92(A6),D0
	CMP.W	MTune,D0
LAB_0582:
	BEQ.S	LAB_0583
	MOVE.W	D0,MTune
	JSR	SetAudioPeriod
LAB_0583:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
MVolMax:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$23fc
	MOVE.W	37(A0,D3.W),-(A0)
	DC.L	MVolDef+1
	MOVE.L	#$53593362,D0
	LEA	MVolDef+1,A0
	BSR.W	NGODrawText
	MOVE.B	#$64,SYSVOL
LAB_0585:
	BSR.W	DrawMVolume
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
MBalMax:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$23fc
	MOVE.W	37(A5,D3.W),D0
	DC.L	MBalDef+1
	MOVE.L	#$53593363,D0
	LEA	MBalDef+1,A0
	BSR.W	NGODrawText
	MOVE.B	#$32,LAB_13FC+2
	BSR.W	DrawMBalance
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NGObjectGadPop0:
	TST.W	D4
	BEQ.S	LAB_0589
	CMPI.W	#$0001,D4
	BEQ.S	LAB_0588
	CMPI.W	#$0003,D4
	BEQ.S	LAB_058A
	RTS
LAB_0588:
	MOVEM.L	D0/D4-D5/A0,-(A7)
	BSR.W	NGRGetTextLenC
	MOVE.W	D0,D2
	LEA	NGWin_Info(PC),A0
	MOVE.W	42(A0),D3
	MOVEM.W	52(A0),D4-D5
	LSL.W	#2,D4
	ADD.W	D4,D2
	LSL.W	#1,D5
	ADD.W	D5,D3
	SUBQ.W	#1,D2
	MOVEM.L	(A7)+,D0/D4-D5/A0
	RTS
LAB_0589:
	BSR.W	NGRDrawPop0
	RTS
LAB_058A:
	BSR.S	NGRDrawPopMouseOn
	RTS
	RTS
NGRDrawPopMouseOn:
	MOVEM.L	D0-D5/A6,-(A7)
	MOVE.W	D0,D2
	BSR.W	NGRGetTextLenC
	EXG	D0,D2
	LEA	NGWin_Info(PC),A6
	MOVE.W	#$ffff,114(A6)
	MOVEM.W	52(A6),D4-D5
	LSL.W	#1,D4
	LSL.W	#1,D5
	ADD.W	D4,D0
	ADD.W	D4,D2
	ADDQ.W	#2,D2
	MOVE.W	42(A6),D3
	ADD.W	D5,D3
	MOVE.W	54(A6),D5
	MOVEM.W	D0-D1,LAB_0591
	CLR.W	108(A6)
	BSR.W	NGRNrm0DrMd
LAB_058C:
	ADDQ.L	#1,A0
	BSR.S	LAB_058E
	ADDQ.W	#1,108(A6)
	EXG	D0,D7
	BSR.W	NGRGetLenC
	TST.W	D0
	BEQ.S	LAB_058D
	EXG	D0,D7
	LEA	1(A0,D7.W),A0
	TST.B	-1(A0)
	BEQ.S	LAB_058D
	BRA.S	LAB_058C
LAB_058D:
	SUB.W	LAB_0591+2(PC),D1
	MOVE.W	D1,D3
	MOVE.W	LAB_0591+2(PC),D1
	MOVEM.W	D0-D3,100(A6)
	MOVE.L	#NGRAnimatePop0,96(A6)
	BSR.W	NGRDarkAPen
	SUBQ.W	#1,D0
	SUBQ.W	#1,D1
	ADDQ.W	#3,D2
	ADDQ.W	#3,D3
	BSR.W	NGRDrawUniBorderFast
	MOVEM.L	(A7)+,D0-D5/A6
	RTS
LAB_058E:
	MOVEM.L	D0-D4,-(A7)
	ADDQ.W	#2,D3
	CMPI.B	#$2b,-1(A0)
	BEQ.S	LAB_0590
	MOVEQ	#1,D4
	BSR.W	NGRDrawBack
	MOVEQ	#2,D4
	BSR.W	NGRDrawBorder
	ADDQ.W	#3,D0
	ADDQ.W	#4,D1
	BSR.W	NGRDarkAPen
	BSR.W	NGRDrawTextXYGadFC
LAB_058F:
	MOVEM.L	(A7)+,D0-D4
	ADD.W	D3,D1
	ADDQ.W	#2,D1
	RTS
LAB_0590:
	MOVEQ	#3,D4
	BSR.W	NGRDrawBack
	MOVEQ	#2,D4
	BSR.W	NGRDrawBorder
	ADDQ.W	#3,D0
	ADDQ.W	#4,D1
	BSR.W	NGRDarkAPen
	BSR.W	NGRDrawTextXYGadFC
	ADDQ.W	#1,D0
	BSR.W	NGRDrawTextXYGadFC
	BRA.S	LAB_058F
LAB_0591:
	ORI.B	#$00,D0
NGRDrawPop0:
	MOVEM.L	D0-D5/A6,-(A7)
LAB_0594:
	ADDQ.L	#1,A0
	CMPI.B	#$2b,-1(A0)
	BEQ.S	LAB_0596
	EXG	D0,D7
LAB_0595:
	BSR.W	NGRGetLenC
	EXG	D0,D7
	LEA	1(A0,D7.W),A0
	BRA.S	LAB_0594
LAB_0596:
	MOVE.W	D0,D2
	BSR.W	NGRGetTextLenC
	EXG	D0,D2
	LEA	NGWin_Info(PC),A6
	CLR.L	96(A6)
	MOVEM.W	52(A6),D4-D5
	LSL.W	#1,D4
	LSL.W	#1,D5
	ADD.W	D4,D0
	ADD.W	D4,D2
	MOVE.W	42(A6),D3
	ADD.W	D5,D3
LAB_0597:
	MOVE.W	54(A6),D5
	MOVEQ	#1,D4
	ADD.W	40(A6),D2
	BSR.W	NGRDrawBack
	MOVEQ	#3,D4
	BSR.W	NGRDrawBorder
	MOVEM.L	D0-D3,-(A7)
	ADD.W	D2,D0
	SUB.W	40(A6),D0
	MOVE.W	40(A6),D2
	SUBQ.W	#5,D0
	ADDQ.W	#5,D2
	BSR.W	NGRDrawPopIcon
	MOVEM.L	(A7)+,D0-D3
	SUBQ.W	#2,D0
LAB_0598:
	ADDQ.W	#3,D1
	BSR.W	NGRDarkAPen
	BSR.W	NGRDrawTextXYGadFC
	ADDQ.W	#1,D0
	BSR.W	NGRDrawTextXYGadFC
	MOVEM.L	(A7)+,D0-D5/A6
	RTS
	DC.W	$0000
NGRAnimatePop0:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	NGWin_Info(PC),A6
	MOVEM.W	100(A6),D0-D3
	MOVEA.L	(A6),A5
	MOVEA.L	8(A5),A1
	DC.W	$4a8d
	BEQ.W	LAB_059F
	DC.W	$4a89
	BEQ.W	LAB_059F
	MOVEQ	#0,D5
	MOVE.W	D3,D5
	DIVU	108(A6),D5
	MOVE.W	62(A5),D6
	SUB.W	D1,D6
	BPL.S	LAB_059A
	MOVEQ	#0,D6
LAB_059A:
	TST.W	D6
	DIVU	D5,D6
	CMP.W	108(A6),D6
	BCS.S	LAB_059B
	MOVE.W	108(A6),D6
	SUBQ.W	#1,D6
LAB_059B:
	MOVEM.L	D0,-(A7)
	MOVEQ	#0,D0
	MOVE.W	D6,D0
	MOVEA.L	88(A6),A0
	DC.W	$4a88
	BEQ.S	LAB_059C
	MOVE.L	D0,64(A0)
	CMP.W	114(A6),D0
	BEQ.S	LAB_059C
	MOVEQ	#3,D4
	BSR.W	NGSetPopGadSelection
	MOVE.W	D0,114(A6)
LAB_059C:
	MOVEM.L	(A7)+,D0
	SUBQ.W	#2,LAB_05A0
	BPL.S	LAB_059F
LAB_059D:
	MOVE.W	#$0002,LAB_05A0
	SUBQ.W	#2,D0
	SUBQ.W	#2,D1
	ADDQ.W	#5,D2
	ADDQ.W	#5,D3
	BSR.W	NGRNrm0DrMd
	BSR.W	NGRLightAPen
	MOVEM.W	D0-D3,UmlaufRegion
	BSR.W	NGRDrawUniBorderFast
	MOVE.W	LAB_05A1(PC),D6
	ROR.W	#1,D6
	MOVE.W	D6,LAB_05A1
	MOVE.W	D6,34(A1)
LAB_059E:
	BSR.W	NGRDarkAPen
	BSR.W	NGRDrawUniBorder
	MOVE.W	#$ffff,34(A1)
LAB_059F:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_05A0:
	DC.W	$0000
LAB_05A1:
	DC.W	$f0f0
NGSetPopGadID:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	NGFindGadID
	DC.W	$4a88
	BEQ.S	LAB_05A4
	MOVEQ	#0,D4
LAB_05A3:
	MOVE.L	D2,D0
	BSR.S	NGSetPopGadSelection
LAB_05A4:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawSequenceType:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_SONG,A3
	MOVEA.L	42(A3),A3
	MOVEQ	#0,D2
	MOVE.W	6(A3),D3
	BEQ.S	LAB_05A6
	MOVEQ	#1,D2
	CMPI.W	#$ffff,D3
	BNE.S	LAB_05A6
	MOVEQ	#2,D2
LAB_05A6:
	MOVE.L	#$53453241,D0
LAB_05A7:
	BSR.S	NGSetPopGadID
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NGSetPopGadSelection:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$4a88
	BEQ.S	LAB_05AC
	MOVEA.L	A0,A2
	MOVEA.L	24(A2),A0
	DC.W	$4a88
	BEQ.S	LAB_05AC
	MOVE.W	D0,D6
	MOVEQ	#0,D7
LAB_05A9:
	MOVE.B	#$2d,(A0)
	CMP.W	D7,D6
	BNE.S	LAB_05AA
	MOVE.B	#$2b,(A0)
LAB_05AA:
	ADDQ.W	#1,D7
	ADDQ.L	#1,A0
	BSR.W	NGRGetLenC
	TST.W	D0
	BEQ.S	LAB_05AC
	LEA	1(A0,D0.W),A0
	TST.B	-1(A0)
	BEQ.S	LAB_05AB
	BRA.S	LAB_05A9
LAB_05AB:
	MOVEM.W	48(A2),D0-D3
	MOVEA.L	36(A2),A5
	MOVEA.L	8(A5),A1
	MOVEA.L	24(A2),A0
	BSR.W	NGObjectGadPop0
LAB_05AC:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
NGObjectGadBut0:
	TST.W	D4
	BEQ.S	LAB_05AF
	CMPI.W	#$0001,D4
	BEQ.S	LAB_05AE
	CMPI.W	#$0003,D4
	BEQ.S	LAB_05B0
	CMPI.W	#$0006,D4
	BEQ.S	LAB_05B1
	RTS
LAB_05AE:
	MOVEM.L	D0/D4-D5/A0,-(A7)
	BSR.W	NGRGetTextLen
	MOVE.W	D0,D2
	LEA	NGWin_Info(PC),A0
	MOVE.W	42(A0),D3
	MOVEM.W	52(A0),D4-D5
	LSL.W	#2,D4
	ADD.W	D4,D2
	LSL.W	#1,D5
	ADD.W	D5,D3
	SUBQ.W	#1,D2
	MOVEM.L	(A7)+,D0/D4-D5/A0
	RTS
LAB_05AF:
	BSR.W	NGRDrawGadget0+2
	RTS
LAB_05B0:
	BSR.W	NGRDrawGadget0On
	RTS
LAB_05B1:
	BSR.S	NGRDrawGadget0Animate
	RTS
NGRDrawGadget0Animate:
	MOVEM.L	D0-D5/A6,-(A7)
	MOVE.W	D0,D2
	BSR.W	NGRGetTextLen
	EXG	D0,D2
	LEA	NGWin_Info(PC),A6
	MOVEM.W	52(A6),D4-D5
	LSL.W	#1,D4
	LSL.W	#1,D5
	ADD.W	D4,D0
	ADD.W	D4,D2
	ADDQ.W	#2,D2
	MOVE.W	42(A6),D3
	ADD.W	D5,D3
	MOVE.W	54(A6),D5
	CMPI.W	#$ffff,Shift_KEY+2
	BEQ.S	LAB_05B3
	SUBQ.W	#1,LAB_05B6
	BPL.S	LAB_05B5
	MOVE.W	#$0001,LAB_05B6
	MOVE.W	LAB_05B7(PC),D6
	ROR.W	#1,D6
	BRA.S	LAB_05B4
LAB_05B3:
	MOVE.W	LAB_05B7(PC),D6
	ROR.W	#1,D6
LAB_05B4:
	BSR.W	NGRNrm0DrMd
	BSR.W	NGRDrawBorder
	MOVE.W	D6,LAB_05B7
	MOVE.W	D6,34(A1)
	BSR.W	NGRDarkAPen
	BSR.W	NGRDrawUniBorder
	MOVE.W	#$ffff,34(A1)
LAB_05B5:
	MOVEM.L	(A7)+,D0-D5/A6
	RTS
LAB_05B6:
	DC.W	$0000
NGRDrawGadget0:
LAB_05B7:
	AND.B	EXT_0019.W,D7
	DC.W	$fc02
	MOVE.W	D0,D2
	BSR.W	NGRGetTextLen
	EXG	D0,D2
	LEA	NGWin_Info(PC),A6
	MOVEM.W	52(A6),D4-D5
	LSL.W	#1,D4
	LSL.W	#1,D5
	ADD.W	D4,D0
	ADD.W	D4,D2
	ADDQ.W	#2,D2
	MOVE.W	42(A6),D3
	ADD.W	D5,D3
	MOVE.W	54(A6),D5
	MOVEQ	#2,D4
	BSR.W	NGRDrawBack
	MOVEQ	#3,D4
	BSR.W	NGRDrawBorder
	ADDQ.W	#3,D0
	ADDQ.W	#3,D1
	BSR.W	NGRDarkAPen
	BSR.W	NGRDrawTextXYGadF
	ADDQ.W	#1,D0
	BSR.W	NGRDrawTextXYGadF
	MOVEM.L	(A7)+,D0-D5/A6
	RTS
NGRDrawGadget0On:
	MOVEM.L	D0-D5/A6,-(A7)
	MOVE.W	D0,D2
	BSR.W	NGRGetTextLen
	EXG	D0,D2
	LEA	NGWin_Info(PC),A6
	MOVEM.W	52(A6),D4-D5
	LSL.W	#1,D4
	LSL.W	#1,D5
	ADD.W	D4,D0
	ADD.W	D4,D2
	ADDQ.W	#2,D2
	MOVE.W	42(A6),D3
	ADD.W	D5,D3
	MOVE.W	54(A6),D5
	MOVEQ	#4,D4
	BSR.W	NGRDrawBack
	MOVEQ	#4,D4
	BSR.W	NGRDrawBorder
	ADDQ.W	#5,D0
	ADDQ.W	#3,D1
	BSR.W	NGRDarkAPen
	SUBQ.W	#1,D0
	BSR.W	NGRDrawTextXYGadF
	SUBQ.W	#1,D0
	BSR.W	NGRDrawTextXYGadF
	MOVEM.L	(A7)+,D0-D5/A6
	RTS
NGObjectGadText0:
	TST.W	D4
	BEQ.S	LAB_05BC
	CMPI.W	#$0001,D4
	BEQ.S	LAB_05BB
	CMPI.W	#$0003,D4
	BEQ.S	LAB_05BD
	RTS
LAB_05BB:
	MOVEM.L	D0/A0,-(A7)
	BSR.W	NGRGetTextLen
	MOVE.W	D0,D2
	LEA	NGWin_Info(PC),A0
	ADD.W	52(A0),D2
	ADD.W	52(A0),D2
	MOVE.W	42(A0),D3
	ADDQ.W	#4,D3
	MOVEM.L	(A7)+,D0/A0
	RTS
LAB_05BC:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEM.L	D0,-(A7)
	BSR.W	NGRGetTextLen
	MOVE.W	D0,D2
	MOVEM.L	(A7)+,D0
	LEA	NGWin_Info(PC),A6
	ADD.W	52(A6),D0
	ADD.W	52(A6),D0
	ADDQ.W	#2,D1
	ADDQ.W	#2,D0
	SUBQ.W	#2,D2
	MOVE.W	42(A6),D3
	MOVEQ	#5,D4
	BSR.W	NGRDrawBack
	BSR.W	NGRDarkAPen
	BSR.W	NGRDrawTextXYGadF
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_05BD:
	RTS
NGObjectGadVal0:
	TST.W	D4
	BEQ.S	LAB_05C0
	CMPI.W	#$0001,D4
	BEQ.S	LAB_05BF
	CMPI.W	#$0003,D4
	BEQ.S	LAB_05C1
	RTS
LAB_05BF:
	MOVEM.L	D0/D4-D5/A0,-(A7)
	BSR.W	NGRGetTextLen
	MOVE.W	D0,D2
	LEA	NGWin_Info(PC),A0
	MOVE.W	42(A0),D3
	MOVEM.W	52(A0),D4-D5
	LSL.W	#2,D4
	ADD.W	D4,D2
	LSL.W	#1,D5
	ADD.W	D5,D3
	MOVEM.L	(A7)+,D0/D4-D5/A0
	RTS
LAB_05C0:
	BSR.S	NGRDrawGadVal0
	RTS
LAB_05C1:
	BSR.W	NGRDrawGadget0On
	RTS
NGRDrawGadVal0:
	MOVEM.L	D0-D5/A6,-(A7)
	MOVE.W	D0,D2
	BSR.W	NGRGetTextLen
	EXG	D0,D2
	LEA	NGWin_Info(PC),A6
	MOVEM.W	52(A6),D4-D5
	LSL.W	#1,D4
	LSL.W	#1,D5
	ADD.W	D4,D0
	ADD.W	D4,D2
	ADDQ.W	#3,D2
	ADDQ.W	#1,D5
	MOVE.W	42(A6),D3
	ADD.W	D5,D3
	MOVE.W	54(A6),D5
	MOVEQ	#3,D4
	BSR.W	NGRDrawBack
	MOVEQ	#6,D4
	BSR.W	NGRDrawBorder
	ADDQ.W	#3,D0
	ADDQ.W	#3,D1
	BSR.W	NGRNrm0DrMd
	BSR.W	NGRBackAPen
	BSR.S	NGRDrawTextXYGadF
	ADDQ.W	#2,D0
	BSR.W	NGRDarkAPen
	BSR.S	NGRDrawTextXYGadF
	SUBQ.W	#1,D0
	BSR.S	NGRDrawTextXYGadF
	MOVEM.L	(A7)+,D0-D5/A6
	RTS
	DC.W	$0000
NGRDrawTextXYGadFC:
	MOVEM.L	D1/A4,-(A7)
	LEA	NGWin_Info(PC),A4
	ADD.W	44(A4),D1
	BSR.S	NGRDrawTextCXY
	MOVEM.L	(A7)+,D1/A4
	RTS
NGRDrawTextCXY:
	MOVEM.L	D0-D1/A0-A1/A6,-(A7)
	MOVEM.L	D0-D1/A0-A1,-(A7)
	MOVEA.L	_GraphicsBase,A6
	JSR	-240(A6)
	MOVEM.L	(A7)+,D0-D1/A0-A1
	BSR.W	NGRGetLenC
	TST.W	D0
	BEQ.S	LAB_05C5
	MOVEA.L	_GraphicsBase,A6
	JSR	-60(A6)
LAB_05C5:
	MOVEM.L	(A7)+,D0-D1/A0-A1/A6
	RTS
	DC.W	$0000
NGRDrawTextXYGadF:
	MOVEM.L	D1/A4,-(A7)
	LEA	NGWin_Info(PC),A4
	ADD.W	44(A4),D1
	BSR.S	NGRDrawTextXY
	MOVEM.L	(A7)+,D1/A4
	RTS
NGRDrawTextXY:
	MOVEM.L	D0-D1/A0-A1/A6,-(A7)
	MOVEM.L	D0-D1/A0-A1,-(A7)
	MOVEA.L	_GraphicsBase,A6
	JSR	-240(A6)
	MOVEM.L	(A7)+,D0-D1/A0-A1
	BSR.S	NGRGetLen
	TST.W	D0
	BEQ.S	LAB_05C8
	MOVEA.L	_GraphicsBase,A6
	JSR	-60(A6)
LAB_05C8:
	MOVEM.L	(A7)+,D0-D1/A0-A1/A6
	RTS
NGRDrawText:
	MOVEM.L	D0-D1/A0-A1/A6,-(A7)
	BSR.S	NGRGetLen
	TST.W	D0
	BEQ.S	LAB_05CA
	MOVEA.L	_GraphicsBase,A6
	JSR	-60(A6)
LAB_05CA:
	MOVEM.L	(A7)+,D0-D1/A0-A1/A6
	RTS
	DC.W	$0000
NGRGetLen:
	MOVEM.L	D1/A0,-(A7)
	MOVE.L	A0,D1
LAB_05CC:
	TST.B	(A0)+
	BNE.S	LAB_05CC
	MOVE.L	A0,D0
	SUB.W	D1,D0
	SUBQ.W	#1,D0
	MOVEM.L	(A7)+,D1/A0
	RTS
	DC.W	$0000
NGRGetLenC:
	MOVEM.L	D1/A0,-(A7)
	MOVE.L	A0,D1
LAB_05CE:
	CMPI.B	#$2c,(A0)
	BEQ.S	LAB_05CF
	TST.B	(A0)
	BEQ.S	LAB_05CF
	ADDQ.L	#1,A0
	BRA.S	LAB_05CE
LAB_05CF:
	MOVE.L	A0,D0
	SUB.W	D1,D0
	MOVEM.L	(A7)+,D1/A0
	RTS
	DC.W	$0000
NGRGetTextLen:
	MOVEM.L	D1/A0,-(A7)
	MOVE.L	A0,D1
LAB_05D1:
	TST.B	(A0)+
	BNE.S	LAB_05D1
	MOVE.L	A0,D0
	SUB.W	D1,D0
	SUBQ.W	#1,D0
	LEA	NGWin_Info(PC),A0
	MOVE.W	40(A0),D1
	MULU	D1,D0
	MOVEM.L	(A7)+,D1/A0
	RTS
NGRGetTextLenC:
	MOVEM.L	D1/A0,-(A7)
	BSR.S	NGRGetLenC
	LEA	NGWin_Info(PC),A0
	MOVE.W	40(A0),D1
	MULU	D1,D0
	MOVEM.L	(A7)+,D1/A0
	RTS
	DC.W	$0000
NGRDrawBack:
	TST.L	(A5)
	BNE.S	LAB_05D4
	RTS
LAB_05D4:
	MOVEM.L	A1/A3,-(A7)
	CMPI.W	#$0005,D4
	BHI.S	LAB_05D5
	TST.W	D2
	BEQ.S	LAB_05D5
	TST.W	D3
	BEQ.S	LAB_05D5
	MOVEA.L	8(A5),A1
	LEA	NGRBackClass(PC),A3
	DC.W	$2673
	NEG.B	D0
	JSR	(A3)
LAB_05D5:
	MOVEM.L	(A7)+,A1/A3
	RTS
NGRBackClass:
	DC.L	NGRDrawWindowBack
	DC.L	NGRDrawAreaBack
	DC.L	NGRGadBack
	DC.L	NGRGadValueBack
	DC.L	NGRGadBackB
	DC.L	NGRGadTextBack
NGRDrawWindowBack:
	BSR.W	NGRNrm0DrMd
	BSR.W	NGRBackAPen
	BSR.W	NGRDrawBar
	RTS
NGRDrawAreaBack:
	BRA.S	NGRDrawWindowBack
NGRGadBack:
	BRA.S	NGRDrawWindowBack
NGRGadTextBack:
	BSR.W	NGRNrm0DrMd
	BSR.W	NGRBackAPen
	BSR.W	NGRDrawBar
	RTS
NGRGadValueBack:
	BSR.W	NGRNrm0DrMd
	BSR.W	NGRBackAPen
	BSR.W	NGRDrawBar
	BSR.W	NGRSpecialAPen
	BSR.S	NGRDrawPatternB
	RTS
NGRSliderButBack:
	BSR.W	NGRNrm0DrMd
	BSR.W	NGRSpecialAPen
	BSR.W	NGRDrawBar
	BSR.W	NGRDarkAPen
	BSR.S	NGRDrawPatternC
	RTS
NGRGadBackB:
	BSR.W	NGRNrm0DrMd
	BSR.W	NGRBackAPen
	BSR.W	NGRDrawBar
	BSR.W	NGRLightAPen
	BSR.S	NGRDrawPatternC
	RTS
NGRDrawPatternB:
	DC.W	$4a3a
	BTST	D2,(A6)+
	BEQ.S	LAB_05DF
	RTS
LAB_05DF:
	MOVEM.L	D0-D3/A0-A1/A6,-(A7)
	TST.W	D2
	BEQ.S	LAB_05E1
	TST.W	D3
	BEQ.S	LAB_05E1
	MOVE.W	#$2492,D7
LAB_05E0:
	MOVE.W	D7,34(A1)
	ROR.W	#1,D7
	BSR.W	NGRDrawHLine
	ADDQ.W	#1,D1
	SUBQ.W	#1,D3
	BPL.S	LAB_05E0
	MOVE.W	#$ffff,34(A1)
LAB_05E1:
	MOVEM.L	(A7)+,D0-D3/A0-A1/A6
	RTS
NGRDrawPatternC:
	DC.W	$4a3a
	DC.W	$04ea
	BEQ.S	LAB_05E3
	RTS
LAB_05E3:
	MOVEM.L	D0-D3/A0-A1/A6,-(A7)
	TST.W	D2
	BEQ.S	LAB_05E5
	TST.W	D3
	BEQ.S	LAB_05E5
	MOVE.W	#$aaaa,D7
LAB_05E4:
	MOVE.W	D7,34(A1)
	ROR.W	#1,D7
	BSR.W	NGRDrawHLine
	ADDQ.W	#1,D1
	SUBQ.W	#1,D3
	BPL.S	LAB_05E4
	MOVE.W	#$ffff,34(A1)
LAB_05E5:
	MOVEM.L	(A7)+,D0-D3/A0-A1/A6
	RTS
NGRDrawPatternA:
	DC.W	$4a3a
	SUBI.L	#$67024e75,-25(A6,D4.L)
	DC.W	$f0c2
	TST.W	D2
	BEQ.S	LAB_05E8
	TST.W	D3
	BEQ.S	LAB_05E8
	MOVE.L	#$92492492,D7
	DC.W	$0c3a
	DC.W	$0002
	ADDI.W	#$6714,(A2)
	MOVE.L	#$aaaaaaaa,D7
	DC.W	$0c3a
	DC.W	$0001
	ADDI.W	#$6706,D4
	MOVE.L	#$2dbb6a4a,D7
LAB_05E7:
	MOVE.W	D7,34(A1)
	ROL.L	#1,D7
	BSR.S	NGRDrawHLine
	ADDQ.W	#1,D1
	SUBQ.W	#1,D3
	BPL.S	LAB_05E7
	MOVE.W	#$ffff,34(A1)
LAB_05E8:
	MOVEM.L	(A7)+,D0-D3/A0-A1/A6
	RTS
NGRDrawVLine:
	MOVEM.L	D0-D3/A0-A1/A6,-(A7)
	ADD.W	D1,D2
	MOVE.W	D0,D3
	MOVEA.L	_GraphicsBase,A6
	JSR	-240(A6)
	MOVE.W	D3,D0
	MOVE.W	D2,D1
	MOVEA.L	_GraphicsBase,A6
	JSR	-246(A6)
	MOVEM.L	(A7)+,D0-D3/A0-A1/A6
	RTS
NGRDrawHLine:
	MOVEM.L	D0-D3/A0-A1/A6,-(A7)
	ADD.W	D0,D2
	MOVE.W	D1,D3
	MOVEA.L	_GraphicsBase,A6
	JSR	-240(A6)
	MOVE.W	D2,D0
	MOVE.W	D3,D1
	MOVEA.L	_GraphicsBase,A6
	JSR	-246(A6)
	MOVEM.L	(A7)+,D0-D3/A0-A1/A6
	RTS
NGRDrawBar:
	MOVEM.L	D0-D3/A0-A1/A6,-(A7)
	TST.W	D2
	BEQ.S	LAB_05EC
	TST.W	D3
	BEQ.S	LAB_05EC
	ADD.W	D0,D2
	ADD.W	D1,D3
	MOVEA.L	_GraphicsBase,A6
	JSR	-306(A6)
LAB_05EC:
	MOVEM.L	(A7)+,D0-D3/A0-A1/A6
	RTS
NGRBorderClass:
	DC.L	NGRDrawUpBorder
	DC.L	NGRDrawDwnBorder
	DC.L	NGRDblBorder
	DC.L	NGRDrawUpBlackBorder
	DC.L	NGRDrawUpLightBorder
	DC.L	NGRDrawDwnBlackBorder
	DC.L	NGRDbl2Border
NGRDrawBorder:
	TST.L	(A5)
	BNE.S	LAB_05EF
	RTS
LAB_05EF:
	MOVEM.L	A1/A3,-(A7)
	CMPI.W	#$0006,D4
	BHI.S	LAB_05F0
	TST.W	D2
	BEQ.S	LAB_05F0
	TST.W	D3
	BEQ.S	LAB_05F0
	MOVEA.L	8(A5),A1
	LEA	NGRBorderClass(PC),A3
	DC.W	$2673
	NEG.B	D0
	JSR	(A3)
LAB_05F0:
	MOVEM.L	(A7)+,A1/A3
	RTS
NGRDblBorder:
	MOVEM.L	D0-D5/A4,-(A7)
	BSR.W	NGRDrawDwnBorder
	LEA	NGWin_Info(PC),A4
	MOVEM.W	52(A4),D4-D5
	ADD.W	D4,D0
	ADD.W	D5,D1
	SUB.W	D4,D2
	SUB.W	D4,D2
	SUB.W	D5,D3
	SUB.W	D5,D3
	BSR.S	NGRDrawUpBorder
	MOVEM.L	(A7)+,D0-D5/A4
	RTS
NGRDbl2Border:
	MOVEM.L	D0-D3,-(A7)
	BSR.W	NGRDrawDwnBorder
	ADDQ.W	#1,D0
	ADDQ.W	#1,D1
	SUBQ.W	#2,D2
	SUBQ.W	#2,D3
	BSR.S	NGRDrawUpBorder
	MOVEM.L	(A7)+,D0-D3
	RTS
NGRDrawDwnBlackBorder:
	MOVEM.L	D0-D3,-(A7)
	BSR.W	NGRDarkAPen
	BSR.W	NGRDrawUniBorderFast
	ADDQ.W	#1,D0
	ADDQ.W	#1,D1
	SUBQ.W	#2,D2
	SUBQ.W	#2,D3
	BSR.W	NGRDrawDwnBorder
	MOVEM.L	(A7)+,D0-D3
	RTS
NGRDrawUpBlackBorder:
	MOVEM.L	D0-D3,-(A7)
	BSR.W	NGRDarkAPen
	BSR.W	NGRDrawUniBorderFast
	ADDQ.W	#1,D0
	ADDQ.W	#1,D1
	SUBQ.W	#2,D2
	SUBQ.W	#2,D3
	BSR.S	NGRDrawUpBorder
	MOVEM.L	(A7)+,D0-D3
	RTS
NGRDrawUpLightBorder:
	MOVEM.L	D0-D3,-(A7)
	BSR.W	NGRLightAPen
	BSR.W	NGRDrawUniBorderFast
	ADDQ.W	#1,D0
	ADDQ.W	#1,D1
	SUBQ.W	#2,D2
	SUBQ.W	#2,D3
	BSR.S	NGRDrawUpBorder
	MOVEM.L	(A7)+,D0-D3
	RTS
NGRDrawUpBorder:
	MOVEM.L	D0-D7/A0-A2/A6,-(A7)
	MOVEA.L	A1,A2
	MOVE.W	D0,D4
	MOVE.W	D1,D5
	MOVE.W	D2,D6
	MOVE.W	D3,D7
	ADD.W	D0,D6
	ADD.W	D1,D7
	BSR.W	NGRLightAPen
	MOVE.W	D4,D2
	MOVE.W	D7,D3
	MOVEA.L	_GraphicsBase,A6
	JSR	-306(A6)
	MOVE.W	D4,D0
	MOVE.W	D5,D1
	MOVE.W	D6,D2
	MOVE.W	D5,D3
	MOVEA.L	A2,A1
	MOVEA.L	_GraphicsBase,A6
	JSR	-306(A6)
	MOVE.W	D4,D0
	MOVE.W	D7,D1
	MOVE.W	D7,D3
	MOVEA.L	A2,A1
	BSR.W	NGRDarkAPen
	MOVEA.L	_GraphicsBase,A6
	JSR	-306(A6)
	MOVE.W	D6,D0
	MOVE.W	D5,D1
	MOVE.W	D6,D2
	MOVE.W	D7,D3
	MOVEA.L	A2,A1
	MOVEA.L	_GraphicsBase,A6
	JSR	-306(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A2/A6
	RTS
NGRDrawDwnBorder:
	MOVEM.L	D0-D7/A0-A2/A6,-(A7)
	MOVEA.L	A1,A2
	MOVE.W	D0,D4
	MOVE.W	D1,D5
	MOVE.W	D2,D6
	MOVE.W	D3,D7
	ADD.W	D0,D6
	ADD.W	D1,D7
	BSR.W	NGRDarkAPen
	MOVE.W	D4,D2
	MOVE.W	D7,D3
	MOVEA.L	_GraphicsBase,A6
	JSR	-306(A6)
	MOVE.W	D4,D0
	MOVE.W	D5,D1
	MOVE.W	D6,D2
	MOVE.W	D5,D3
	MOVEA.L	A2,A1
	MOVEA.L	_GraphicsBase,A6
	JSR	-306(A6)
	MOVE.W	D4,D0
	MOVE.W	D7,D1
	MOVE.W	D7,D3
	MOVEA.L	A2,A1
	BSR.W	NGRLightAPen
	MOVEA.L	_GraphicsBase,A6
	JSR	-306(A6)
	MOVE.W	D6,D0
	MOVE.W	D5,D1
	MOVE.W	D6,D2
	MOVE.W	D7,D3
	MOVEA.L	A2,A1
	MOVEA.L	_GraphicsBase,A6
	JSR	-306(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A2/A6
	RTS
NGRDrawUniBorderFast:
	MOVEM.L	D0-D7/A0-A2/A6,-(A7)
	MOVEA.L	A1,A2
	MOVE.W	D0,D4
	MOVE.W	D1,D5
	MOVE.W	D2,D6
	MOVE.W	D3,D7
	ADD.W	D0,D6
	ADD.W	D1,D7
	MOVE.W	D1,D3
	MOVE.W	D6,D2
	MOVEA.L	_GraphicsBase,A6
	JSR	-306(A6)
	MOVEA.L	A2,A1
	MOVE.W	D4,D0
	MOVE.W	D7,D1
	MOVE.W	D6,D2
	MOVE.W	D7,D3
	MOVEA.L	_GraphicsBase,A6
	JSR	-306(A6)
	MOVE.W	D6,D0
	MOVE.W	D5,D1
	MOVEA.L	A2,A1
	MOVEA.L	_GraphicsBase,A6
	JSR	-306(A6)
	MOVEA.L	A2,A1
	MOVE.W	D4,D0
	MOVE.W	D5,D1
	MOVE.W	D4,D2
	MOVEA.L	_GraphicsBase,A6
	JSR	-306(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A2/A6
	RTS
NGRDrawUniBorder:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	ADD.W	D3,D1
	BSR.W	GFX_Move
	SUB.W	D3,D1
	BSR.W	GFX_Draw
	ADD.W	D2,D0
	BSR.W	GFX_Draw
	ADD.W	D3,D1
	BSR.W	GFX_Draw
	SUB.W	D2,D0
	BSR.W	GFX_Draw
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NGRRectInvert:
	TST.W	D2
	BEQ.S	LAB_05FB
	TST.W	D3
	BEQ.S	LAB_05FB
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	NGRInvDrMd
	MOVEM.L	D0,-(A7)
	MOVEQ	#3,D0
	BSR.W	NGRenderSetAPen
	MOVEM.L	(A7)+,D0
	ADD.W	D0,D2
	ADD.W	D1,D3
	MOVEA.L	_GraphicsBase,A6
	MOVEA.L	_GraphicsBase,A6
	JSR	-306(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
LAB_05FB:
	RTS
NGRDrawPopIcon:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	NGRDrawBorder
	BSR.S	NGRLightAPen
	ADDQ.W	#2,D1
	SUBQ.W	#4,D3
	BMI.S	LAB_05FD
	SUBQ.W	#4,D2
	BMI.S	LAB_05FD
	ADDQ.W	#2,D0
	BSR.S	NGRLightAPen
	BSR.S	NGRDrawVecDownIcon
	ADDQ.W	#1,D0
	BSR.S	NGRDarkAPen
	BSR.S	NGRDrawVecDownIcon
LAB_05FD:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NGRDrawVecDownIcon:
	MOVEM.L	D0-D3,-(A7)
	BSR.W	GFX_Move
	LSR.W	#1,D2
	ADD.W	D2,D0
	ADD.W	D3,D1
	BSR.W	GFX_Draw
	SUB.W	D3,D1
	ADD.W	D2,D0
	BSR.W	GFX_Draw
	MOVEM.L	(A7)+,D0-D3
	RTS
	DC.W	$0000
NGRGetLightAPen:
	MOVEM.L	A4,-(A7)
	LEA	NGWin_Info(PC),A4
	MOVE.W	8(A4),D0
	MOVEA.L	(A7)+,A4
	RTS
NGRGetDarkAPen:
	MOVEM.L	A4,-(A7)
	LEA	NGWin_Info(PC),A4
	MOVE.W	10(A4),D0
	MOVEA.L	(A7)+,A4
	RTS
NGRLightAPen:
	MOVEM.L	D0/A4,-(A7)
	LEA	NGWin_Info(PC),A4
	MOVE.W	8(A4),D0
	BSR.S	NGRenderSetAPen
	MOVEM.L	(A7)+,D0/A4
	RTS
NGRDarkAPen:
	MOVEM.L	D0/A4,-(A7)
	LEA	NGWin_Info(PC),A4
	MOVE.W	10(A4),D0
	BSR.S	NGRenderSetAPen
	MOVEM.L	(A7)+,D0/A4
	RTS
NGRSpecialAPen:
	MOVEM.L	D0/A4,-(A7)
	LEA	NGWin_Info(PC),A4
	MOVE.W	12(A4),D0
	BSR.S	NGRenderSetAPen
	MOVEM.L	(A7)+,D0/A4
	RTS
NGRBackAPen:
	MOVEM.L	D0/A4,-(A7)
	LEA	NGWin_Info(PC),A4
	MOVE.W	14(A4),D0
	BSR.S	NGRenderSetAPen
	MOVEM.L	(A7)+,D0/A4
	RTS
NGRenderSetAPen:
	CMP.W	12(A5),D0
	BNE.S	LAB_0606
	RTS
LAB_0606:
	MOVEM.L	A1,-(A7)
	MOVE.W	D0,12(A5)
	BSR.W	GFX_APen
	MOVEA.L	(A7)+,A1
	RTS
NGRenderSetBPen:
	CMP.W	16(A5),D0
	BNE.S	LAB_0608
	RTS
LAB_0608:
	MOVEM.L	A1,-(A7)
	MOVE.W	D0,16(A5)
	BSR.W	GFX_BPen
	MOVEA.L	(A7)+,A1
	RTS
NGRenderSetDrMd:
	CMP.L	20(A5),D0
	BNE.S	LAB_060A
	RTS
LAB_060A:
	MOVEM.L	A1,-(A7)
	MOVE.L	D0,20(A5)
	BSR.W	GFX_DrMd
	MOVEA.L	(A7)+,A1
	RTS
NGRNrm0DrMd:
	MOVEM.L	D0,-(A7)
	MOVEQ	#0,D0
	BSR.S	NGRenderSetDrMd
	MOVEM.L	(A7)+,D0
	RTS
	DC.W	$0000
NGRNrm1DrMd:
	MOVEM.L	D0,-(A7)
	MOVEQ	#1,D0
	BSR.S	NGRenderSetDrMd
	MOVEM.L	(A7)+,D0
	RTS
	DC.W	$0000
NGRInvDrMd:
	MOVEM.L	D0,-(A7)
	MOVEQ	#3,D0
	BSR.S	NGRenderSetDrMd
	MOVEM.L	(A7)+,D0
	RTS
DrawSongAll:
	BSR.W	UpdatePosList
	BSR.W	DrawSequence
	BRA.W	DrawSongStruct
	DC.W	$0000
GetWinDim:
	MOVEM.L	A0,-(A7)
	MOVEA.L	124(A0),A0
	MOVEQ	#0,D2
	MOVE.W	20(A0),D2
	MOVEQ	#0,D3
	MOVE.W	16(A0),D3
	MOVEQ	#0,D0
	MOVE.W	22(A0),D0
	MOVEQ	#0,D1
	MOVE.W	18(A0),D1
	SUB.W	D3,D2
	SUB.W	D1,D0
	EXG	D3,D0
	MOVEA.L	(A7)+,A0
	RTS
SUPERQUICK:
	DC.W	$0000
WriteXYWH:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	WriteAssDecLong
	MOVE.L	D1,D0
	BSR.W	WriteAssDecLong
	MOVE.L	D2,D0
	BSR.W	WriteAssDecLong
	MOVE.L	D3,D0
	BSR.W	WriteAssDecLong
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
HandleAllMsgs:
	BRA.W	ProcessAllNGWinMsg
DoNil:
	RTS
MBUT_JL:
	DC.W	$ffff
	DC.W	$ffff
Actual_NED:
FASTGFX:
	ORI.B	#$00,D2
	DC.W	$0000
KbdInsertTrackLine:
	MOVE.L	#$5858494c,XXMsg
	BSR.W	NGRecordXXMsg
	BRA.W	InsertTrackLine
KbdDeleteTrackLine:
	MOVE.L	#$58584953,XXMsg
	BSR.W	NGRecordXXMsg
	BRA.W	DeleteTrackLine
KbdLoadNewSample:
	MOVE.L	#$58584e53,XXMsg
	BSR.W	NGRecordXXMsg
	JMP	LoadNewSample
KbdDownInstr:
	MOVE.L	#$58584944,XXMsg
	BSR.W	NGRecordXXMsg
	JMP	DownInstr
KbdUpInstr:
	MOVE.L	#$58584955,XXMsg
	BSR.W	NGRecordXXMsg
	JMP	UpInstr
KbdSpace:
	MOVE.L	#$58585350,XXMsg
	BSR.W	NGRecordXXMsg
	DC.W	$60ff
	DC.W	$0000
	DC.W	$a1e4
KbdReturn:
	MOVE.L	#$58585254,XXMsg
	BSR.W	NGRecordXXMsg
	BRA.W	MarkBlock
KbdPosNumDown:
	MOVE.L	#$58585044,XXMsg
	BSR.W	NGRecordXXMsg
	DC.W	$60ff
	DC.W	$0000
	DC.W	$a066
KbdPosNumUp:
	MOVE.L	#$58585055,XXMsg
	BSR.W	NGRecordXXMsg
	DC.W	$60ff
	DC.W	$0000
	DC.W	$a06e
KbdPatNumDown:
	MOVE.L	#$58587044,XXMsg
	BSR.W	NGRecordXXMsg
	DC.W	$60ff
	DC.W	$0000
	DC.W	$a076
KbdPatNumUp:
	MOVE.L	#$58587055,XXMsg
	BSR.W	NGRecordXXMsg
	DC.W	$60ff
	DC.W	$0000
	DC.W	$a082
KbdNoteInstrUp:
	MOVE.L	#$586e4955,XXMsg
	BSR.W	NGRecordXXMsg
	BRA.W	NoteInstrUp
KbdNoteInstrDown:
	MOVE.L	#$586e4944,XXMsg
	BSR.W	NGRecordXXMsg
	BRA.W	NoteInstrDown
KbdPitchUp:
	MOVE.L	#$586e5055,XXMsg
	BSR.W	NGRecordXXMsg
	BRA.W	PitchUp
KbdPitchDown:
	MOVE.L	#$586e5044,XXMsg
	BSR.W	NGRecordXXMsg
	BRA.W	PitchDown
KbdVolumeUp:
	MOVE.L	#$586e5655,XXMsg
	BSR.W	NGRecordXXMsg
	BRA.W	VolumeUp
KbdVolumeDown:
	MOVE.L	#$586e5644,XXMsg
	BSR.W	NGRecordXXMsg
	BRA.W	VolumeDown
	DC.W	$0000
RedrawGUI:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	NGDrawWinList
	JSR	RedrawSpectrum
	BSR.W	DrawPositionCacheReset
	BSR.W	DrawSongAll
	BSR.W	ShowBufferedAMsgs
	BSR.W	NGRedrawStatusText
	BSR.W	AdjustActualPattEd
	BSR.W	DrawSystemSetup
	BSR.W	ShowDspStatus
	BSR.W	DrawEventStatus
	BSR.W	DrawInstrumentReset
	BSR.W	DrawInstrument
	BSR.W	RedrawMEventAll
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ChangeWaveStyle:
	SUBQ.B	#1,WaveStyle+1
	BPL.S	LAB_062A
	MOVE.B	#$03,WaveStyle+1
LAB_062A:
	JSR	DrawActualWave
	RTS
ToogleGUILook:
	ADDQ.B	#1,GUILook
	DC.W	$0c3a
	ORI.B	#$0e,D2
	BLS.S	LAB_062C
	CLR.W	GUILook
LAB_062C:
	BSR.S	RedrawGUI
	RTS
GUILook:
WaveStyle:
	ORI.B	#$00,D0
SetMidiChannel:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#15,D2
	MOVEQ	#0,D1
	LEA	MidiInputChannel(PC),A0
	LEA	Midireqtxt,A1
	BSR.W	ReqMinMaxLong
	MOVE.L	MidiInputChannel(PC),D0
	ANDI.B	#$0f,D0
	MOVE.B	D0,D1
	ADDI.B	#$90,D1
	MOVE.B	D1,MidiKeyOnMsg+1
	MOVE.B	D0,D1
	ADDI.B	#$c0,D1
	MOVE.B	D1,MidiPrgChange+2
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetEditPunch:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#100,D2
	MOVEQ	#0,D1
	LEA	KeyboardEditPunch(PC),A0
	LEA	Midireqtxt2,A1
	BSR.W	ReqMinMaxLong
	MOVE.L	KeyboardEditPunch(PC),D0
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
MidiInputChannel:
	ORI.B	#$00,D0
KeyboardEditPunch:
	ORI.B	#$64,D0
LINEARVOLUME:
MidiKeyOnMsg:
MidiPrgChange:
ToogleLinVol:
	ORI.L	#$c0004639,(A0)
	DC.L	LINEARVOLUME
	RTS
ToogleFASTGFX:
	BSR.W	PatEdCrsrOff
	BSR.W	HideBlockRange
	NOT.B	FASTGFX+2
	BSR.W	ShowBlockRange
	BSR.W	PatEdCrsrOn
	RTS
CHGtestplace:
	NOT.W	testplace
	RTS
ShowBuf:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	BUFFERPTR(PC),D0
	BSR.W	PrintHexLong
	MOVE.L	LAB_063B(PC),D0
	BSR.W	PrintHexLong
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
BUFFERPTR:
	ORI.B	#$00,D0
LAB_063B:
	ORI.B	#$00,D0
	DC.W	$0000
NUMValPrev:
	SUBQ.W	#1,Actual_NED
	BPL.S	NUMValPrev_X
	MOVE.W	#$0002,Actual_NED
NUMValPrev_X:
	BSR.W	PattEdDrawStatus
	RTS
	DC.W	$0000
NUMValNext:
	MOVEM.L	D0,-(A7)
	MOVE.W	Actual_NED(PC),D0
	ADDQ.W	#1,D0
	MOVE.W	D0,Actual_NED
	CMPI.W	#$0002,D0
	BLS.S	NUMValNext_X
	CLR.W	Actual_NED
NUMValNext_X:
	BSR.W	PattEdDrawStatus
	MOVEM.L	(A7)+,D0
	RTS
	DC.W	$0000
NUMValDwn:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	NUMVal_JL(PC),A0
	MOVE.W	Actual_NED(PC),D0
	DC.W	$2070
	DC.W	$0604
	JSR	(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NUMValUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	NUMVal_JL(PC),A0
	MOVE.W	Actual_NED(PC),D0
	DC.W	$2070
	DC.W	$0600
	JSR	(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NUMVal_JL:
	DC.L	PitchUp
	DC.L	PitchDown
	DC.L	NoteInstrUp
	DC.L	NoteInstrDown
	DC.L	VolumeUp
	DC.L	VolumeDown
LASTASSTEXT:
	ORI.B	#$00,D0
LAB_0644:
	ORI.B	#$00,D0
AssText_TXT:
	ORI.B	#$00,D0
MKMakeName:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	GetActualInstrName
	LEA	MK_Name,A1
	EXG	A0,A1
	CLR.B	(A1)
	JSR	AddString
	MOVE.B	LAB_13DC+1,D7
	CMPI.B	#$5a,D7
	BNE.S	LAB_0647
	MOVEQ	#48,D7
LAB_0647:
	ADDQ.B	#1,D7
	MOVE.B	D7,LAB_13DC+1
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
DecShiftRepeat:
	MOVEM.L	D0-D1,-(A7)
	BSR.W	SetDecShiftKeyRaster
	SUBQ.W	#2,D0
	BMI.S	LAB_064A
	MOVE.B	MACROPROCESS+2,D1
	MOVE.B	#$ff,MACROPROCESS+2
LAB_0649:
	JSR	(A0)
	DBF	D0,LAB_0649
	CLR.B	MACROPROCESS+2
LAB_064A:
	JSR	(A0)
	MOVEM.L	(A7)+,D0-D1
	RTS
	DC.W	$0000
ShowProjectName:
	MOVEM.L	A0-A1,-(A7)
	LEA	tempstring,A1
	CLR.B	(A1)
	LEA	LoadProj_PRE+1,A0
	JSR	AddString
	MOVEA.L	FinalFileNameRT_PTR,A0
	JSR	AddString
	MOVE.L	#tempstring,AssText_TXT
	BSR.S	PrintAssTextF
	MOVEM.L	(A7)+,A0-A1
	RTS
ShowTime:
	MOVEM.L	A0-A1,-(A7)
	LEA	tempstring,A1
	CLR.B	(A1)
	LEA	TimeDur+1,A0
	JSR	AddString
	LEA	TimeString_TXT,A0
	JSR	AddString
	MOVE.L	#tempstring,AssText_TXT
	BSR.S	PrintAssTextF
	MOVEM.L	(A7)+,A0-A1
	RTS
ShowBufferedAMsgs:
	MOVEM.L	D0/A0,-(A7)
	MOVEA.L	LAB_0644(PC),A0
	MOVE.L	LASTASSTEXT(PC),D0
	BSR.S	PrintAssText
	MOVEA.L	D0,A0
	BSR.S	PrintAssText
	MOVEM.L	(A7)+,D0/A0
	RTS
PrintAssTextF:
	MOVEM.L	A0,-(A7)
	MOVEA.L	AssText_TXT(PC),A0
	BSR.S	PrintAssText
	MOVEA.L	(A7)+,A0
	RTS
	DC.W	$0000
PrintAssText:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$4a88
	BEQ.S	PrintAssText_X
	MOVE.L	LASTASSTEXT(PC),LAB_0644
	MOVE.L	A0,LASTASSTEXT
	BSR.S	GetAssistData
	DC.W	$4a89
	BEQ.S	PrintAssText_ERR
	ANDI.L	#$0000ffff,D2
	MOVEQ	#0,D7
	MOVE.W	FONT_W(PC),D7
	DIVU	D7,D2
	ANDI.L	#$0000ffff,D2
	MOVEA.L	A0,A2
	MOVEQ	#0,D0
PrintAssText_L:
	MOVE.B	(A2)+,D1
	BEQ.S	PrintAssText_WrLast
	ADDQ.W	#1,D0
	CMP.W	D2,D0
	BEQ.S	PrintAssText_Write
	BRA.S	PrintAssText_L
PrintAssText_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PrintAssText_ERR:
	JSR	WarnFlash
	BRA.S	PrintAssText_X
PrintAssText_WrLast:
	TST.W	D0
	BEQ.S	PrintAssText_X
	BSR.S	AssistText
	BRA.S	PrintAssText_X
PrintAssText_Write:
	MOVEM.L	D7,-(A7)
	MOVE.B	(A2),D7
	CLR.B	(A2)
	BSR.S	AssistText
	MOVE.B	D7,(A2)
	MOVEA.L	A2,A0
LAB_0655:
	MOVEM.L	(A7)+,D7
	MOVEQ	#0,D0
	BRA.S	PrintAssText_L
AssistText:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$4a3a
	DC.W	$0020
	BNE.S	LAB_0657
	BSR.S	ScrollAss
LAB_0657:
	BSR.S	GetAssistData
	DC.W	$4a89
	BEQ.S	LAB_0658
	ADD.W	D3,D1
	SUB.W	FONT_H(PC),D1
	ADD.W	FONT_BASE+2(PC),D1
	BSR.W	DrawTextXY
LAB_0658:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
AssistScroll:
	DC.W	$0000
GetAssistData:
	MOVEM.L	A0/A5,-(A7)
	MOVE.L	#$43303031,D1
	BSR.W	NGFindAreaWindow
	BSR.W	NGGetInnerAreaData
	DC.W	$4a8d
	BNE.S	LAB_065B
	SUBA.L	A1,A1
LAB_065B:
	MOVEM.L	(A7)+,A0/A5
	RTS
	DC.W	$0000
ScrollAss:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	GetAssistData
	DC.W	$4a89
	BEQ.S	LAB_065D
	MOVE.W	FONT_H(PC),D7
	BSR.W	ScrollUpAreaFix
LAB_065D:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SCOPE_BM:
	ORI.B	#$00,D0
SCOPEBM_H:
	DC.W	$0000
	DC.W	$0800
AllocateScopeBM:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	SCANTRANSBIG_PTR(PC),SCOPETRANS
	BSR.W	InitScopeTrans
	MOVE.L	#$00000080,D0
	MOVE.L	SCOPEBM_H(PC),D1
	MOVEQ	#1,D2
	MOVEQ	#0,D3
	SUBA.L	A0,A0
	MOVEA.L	_GraphicsBase,A6
	JSR	-918(A6)
	MOVE.L	D0,SCOPE_BM
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
FreeScopeBM:
	DC.W	$4aba
	DC.W	$ffbe
	BNE.S	LAB_0662
	RTS
LAB_0662:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	SCOPE_BM(PC),A0
	MOVEA.L	_GraphicsBase,A6
	JSR	-924(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
BuildScopeImage:
	DC.W	$4aba
	DC.W	$ff9e
	BNE.S	LAB_0664
	RTS
LAB_0664:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$53434f50,D0
	MOVE.L	#$53435041,D1
	BSR.W	NGFindArea
	DC.W	$4a88
	BEQ.S	BuildScopeImage_X
	MOVEA.L	52(A0),A1
	MOVEM.W	24(A0),D0-D3
	DC.W	$4a89
	BEQ.S	BuildScopeImage_X
	DC.W	$0c7a
	DC.W	$0001
	EORI.L	#$67102e3c,-(A2)
	DC.W	$0000
	BCC.W	LAB_0115
	EORI.L	#$e04f6100,(A6)
	DC.W	$0c08
BuildScopeImage_Single:
	MOVE.W	D3,D7
	BEQ.S	BuildScopeImage_X
	MOVEA.L	SCOPE_BM(PC),A2
	MOVEA.L	8(A2),A2
	MOVEQ	#0,D6
	MOVE.W	SCOPE_LEN(PC),D6
	LSL.L	#8,D6
	DIVU	D7,D6
	ANDI.L	#$0000ffff,D6
	LSL.L	#8,D6
	MOVEQ	#0,D5
	MOVE.L	LAB_0672(PC),D4
	MOVEA.L	SCOPETRANS(PC),A3
	MOVEQ	#0,D0
	MOVEA.L	SCOPEBUILD(PC),A4
	MOVEA.L	SCOPE_16BITPOS+2(PC),A1
	LEA	2(A1),A0
BuildScopeImage_L:
	JSR	(A4)
	SWAP	D5
	ADD.L	D6,D5
	SWAP	D5
	LEA	0(A2,D4.W),A2
	DC.W	$41f0
	ADDQ.B	#2,D0
	DC.W	$43f1
	ADDQ.B	#2,D0
	CLR.W	D5
	DBF	D7,BuildScopeImage_L
	BSR.W	CopyScope
BuildScopeImage_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetScopeTest:
	MOVEM.L	D0-D1,-(A7)
	MOVEM.L	SCOPEBUILD(PC),D0-D1
	EXG	D0,D1
	MOVEM.L	D0-D1,SCOPEBUILD
	MOVEM.L	(A7)+,D0-D1
	RTS
SCOPE_16BITPOS:
	ORI.B	#$00,D0
	DC.W	$0000
SCOPEBUILD:
	DC.L	BuildStereoScope
	DC.L	BuildDiffScope
BuildDiffScope:
	MOVEM.L	D7,-(A7)
	MOVEQ	#0,D7
	MOVE.L	D7,(A2)+
	MOVE.B	(A1),D0
	SUB.B	(A0),D0
	BSR.S	BuildScopeUnit
	MOVE.L	D7,(A2)+
	MOVEM.L	(A7)+,D7
	RTS
	DC.W	$0000
BuildStereoScope:
	MOVE.B	(A1),D0
	BSR.S	BuildScopeUnit
	MOVE.B	(A0),D0
	BSR.S	BuildScopeUnit
	RTS
	DC.W	$0000
BuildScopeUnit:
	BRA.S	BuildBigScopeUnit
	TST.B	D0
	BPL.S	LAB_066E
	NEG.B	D0
LAB_066E:
	LSR.W	#2,D0
	DC.W	$2233
	DC.W	$0400
	MOVE.L	D1,(A2)+
	RTS
	DC.W	$0000
BuildBigScopeUnit:
	TST.B	D0
	BPL.S	LAB_0670
	NEG.B	D0
LAB_0670:
	LSR.W	#1,D0
	DC.W	$2233
	DC.W	$0600
	MOVE.L	D1,(A2)+
	DC.W	$2233
	DC.W	$0604
	MOVE.L	D1,(A2)+
	RTS
SCOPETRANS:
	ORI.B	#$00,D0
	ORI.B	#$40,D0
LAB_0672:
	ORI.B	#$00,D0
SCANTRANS_TAB:
	ORI.B	#$00,D0
	ORI.B	#$00,D1
	ORI.B	#$00,D3
	DC.W	$0003
	OR.B	D0,D0
	DC.W	$0007
	OR.B	D0,D0
	DC.W	$0007
	AND.B	D0,D0
	DC.W	$000f
	AND.B	D0,D0
	DC.W	$000f
	ASR.B	#8,D0
	DC.W	$001f
	ASR.B	#8,D0
	DC.W	$001f
	DC.W	$f000
	DC.W	$003f
	DC.W	$f000
	DC.W	$003f
	DC.W	$f800
	DC.W	$007f
	DC.W	$f800
	DC.W	$007f
	DC.W	$fc00
	DC.W	$00ff
	DC.W	$fc00
	DC.W	$00ff
	DC.W	$fe00
	DC.W	$01ff
	DC.W	$fe00
	DC.W	$01ff
	DC.W	$ff00
	DC.W	$03ff
	DC.W	$ff00
	DC.W	$03ff
	DC.W	$ff80
	DC.W	$07ff
	DC.W	$ff80
	DC.W	$07ff
	DC.W	$ffc0
	DC.W	$0fff
	DC.W	$ffc0
	DC.W	$0fff
	DC.W	$ffe0
	DC.W	$1fff
	DC.W	$ffe0
	DC.W	$1fff
	DC.W	$fff0
	DC.W	$3fff
	DC.W	$fff0
	DC.W	$3fff
	DC.W	$fff8
	DC.W	$7fff
	DC.W	$fff8
	DC.W	$7fff
	DC.W	$fffc
	DC.W	$ffff
	DC.W	$fffc
	DC.W	$ffff
	DC.W	$fffe
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
SCANTRANSBIG_PTR:
	ORI.B	#$00,D0
	DC.W	$0000
	BTST	#1,D0
	ORI.B	#$00,D0
InitScopeTrans:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	SCANTRANSBIG_PTR(PC),A0
	MOVEQ	#0,D0
	MOVE.L	#$80000000,D1
	MOVEQ	#31,D7
LAB_0676:
	MOVE.L	D0,(A0)+
	MOVE.L	D1,(A0)+
	LSL.L	#1,D0
	BSET	#0,D0
	MOVE.L	D0,(A0)+
	MOVE.L	D1,(A0)+
	LSR.L	#1,D1
	BSET	#31,D1
	DBF	D7,LAB_0676
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SCOPE_LEN:
	ORI.B	#$00,D0
SCOPE_POSOLD:
	DC.W	$ffff
	DC.W	$ffff
CopyScope:
	DC.W	$4aba
	DC.W	$fda2
	BNE.S	LAB_067A
	RTS
LAB_067A:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$53434f50,D0
	MOVE.L	#$53435041,D1
	BSR.W	NGFindArea
	DC.W	$4a88
	BEQ.S	LAB_067E
	MOVEA.L	52(A0),A1
	MOVEM.W	24(A0),D0-D3
	DC.W	$4a89
	BEQ.S	LAB_067E
	CMPI.W	#$0080,D2
	BLS.S	LAB_067B
	MOVE.W	D2,D6
	SUB.W	#$0080,D6
	LSR.W	#1,D6
	ADD.W	D6,D0
	MOVE.W	#$0080,D2
LAB_067B:
	DC.W	$0c7a
	DC.W	$0001
	DC.W	$0892
	BEQ.S	LAB_067C
	MOVE.L	#$00006400,D7
	DIVU	LAB_06D7+2(PC),D7
	LSR.W	#8,D7
	BSR.W	ScrollUpArea
	BSR.W	CalcAreaPercLower
LAB_067C:
	MOVE.W	D2,D4
	MOVE.W	D3,D5
	MOVE.W	D1,D3
	MOVE.W	D0,D2
	MOVEQ	#0,D0
	MOVEQ	#0,D1
	CMPI.W	#$0080,D4
	BCS.S	LAB_067D
	MOVE.W	#$0080,D4
LAB_067D:
	MOVEA.L	SCOPE_BM(PC),A0
	MOVE.L	#$000000c0,D6
	MOVEA.L	_GraphicsBase,A6
	JSR	-606(A6)
LAB_067E:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
CDtoProgramDir:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	_DosBase,A6
	JSR	-600(A6)
	MOVE.L	D0,D1
	MOVEA.L	_DosBase,A6
	JSR	-126(A6)
	MOVE.L	D0,OldProgDir
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
CDtoOldDir:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	OldProgDir(PC),D1
	MOVEA.L	_DosBase,A6
	JSR	-126(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
OldProgDir:
	ORI.B	#$00,D0
NewMenu_PTR:
	ORI.B	#$00,D0
ShowMainTitle:
	DC.W	$4a3a
	ANDI.W	#$6702,20085(A2)
DoShowMainTitle:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	BuildMainTitle
	MOVEA.L	MainScreen_PTR+2,A0
	MOVEQ	#-1,D0
	MOVEA.L	_IntuitionBase,A6
	JSR	-282(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
CheckBufferMem:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	CopyBuffer_PTR,A0
	MOVE.L	#$00010016,MEM_DEBUG_INFO
	MOVE.L	#$10000000,LAB_109F
	JSR	CheckMem
	LEA	DryDspBuffer_PTR,A0
	MOVE.L	#$00010016,MEM_DEBUG_INFO
	MOVE.L	#$10000000,LAB_109F
	JSR	CheckMem
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
CheckResidentMem:
	MOVEM.L	A0,-(A7)
	MOVE.L	#$00010017,MEM_DEBUG_INFO
	CLR.L	LAB_109F
	LEA	Resident_AUTOMEM,A0
	BSR.S	CheckMemList
	MOVE.L	#$00010018,MEM_DEBUG_INFO
	CLR.L	LAB_109F
	LEA	Main_AUTOMEM,A0
LAB_0687:
	BSR.S	CheckMemList
	MOVEA.L	(A7)+,A0
	RTS
CheckMemList:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A0,A1
LAB_0689:
	MOVEA.L	(A1)+,A0
	CMPA.W	#$ffff,A0
	BEQ.S	LAB_068A
	TST.L	(A0)
	BEQ.S	LAB_0689
	JSR	CheckMem
	ADDQ.L	#1,LAB_109F
	BRA.S	LAB_0689
LAB_068A:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
AddFontW:
	MOVEM.L	D2,-(A7)
	MULU	FONT_W(PC),D2
	ADD.W	D2,D0
	MOVEM.L	(A7)+,D2
	RTS
XCharToPixel:
	CMPI.L	#$ffffffff,D0
	BEQ.S	XCharToPixel_KeepX
	MULU	FONT_W(PC),D0
XCharToPixel_KeepX:
	CMPI.L	#$ffffffff,D1
	BEQ.S	XCharToPixel_KeepY
	MULU	FONT_H(PC),D1
XCharToPixel_KeepY:
	RTS
	DC.W	$0000
CharToPixel:
	MULU	FONT_W(PC),D0
	MULU	FONT_H(PC),D1
	RTS
	DC.W	$0000
InitFontDim:
	MOVE.W	58(A1),FONT_H
	MOVE.W	60(A1),FONT_W
	MOVE.W	62(A1),FONT_BASE+2
	MOVE.W	64(A1),FONT_SPACING
	RTS
GetFontInfo:
	MOVE.W	58(A1),D1
	MOVE.W	60(A1),D0
	MOVE.W	62(A1),D2
	MOVE.W	64(A1),D3
	RTS
FONT_SPACING:
FONT_BASE:
	ORI.B	#$00,D0
FONT_H:
	DC.W	$0008
FONT_W:
MENUFONT_W:
	ORI.B	#$08,D6
MENUFONT_H:
	ORI.B	#$0e,D0
LAB_0698:
	DC.W	$000e
WINDOW_TOP:
	DC.W	$000e
ScrModeRequest_PTR:
	ORI.B	#$00,D0
	DC.W	$8008
	ORI.W	#$0006,-(A4)
	SUB.B	-(A4),D0
	DC.W	$8008
	DC.W	$0074
	DC.W	$0000
	BCHG	D0,D0
	DC.W	$8008
	ORI.W	#$0000,-56(A6,D0.W)
	DC.W	$8008
	DC.W	$0078
	ORI.B	#$01,D0
	DC.W	$8008
	ORI.W	#$0000,-(A5)
	ANDI.L	#$80080066,D0
	DC.W	$0000
	BCLR	D0,(A0)
	DC.W	$8008
	ORI.W	#$0000,-(A7)
	DC.W	$0002
	DC.W	$8008
	ORI.W	#$ffff,-1(A5)
	DC.W	$8008
	ORI.W	#$ffff,-1(A6)
	DC.W	$8008
	ORI.W	#$ffff,-1(A7)
	ORI.B	#$00,D0
	DC.W	$0000
ForceEvenBufNumb:
	MOVEM.L	D0,-(A7)
	MOVE.L	VexBufferNumb,D0
	CMPI.L	#$00000028,D0
	BLS.S	LAB_069C
	MOVEQ	#40,D0
LAB_069C:
	BCLR	#0,D0
	MOVE.L	D0,VexBufferNumb
	MOVEM.L	(A7)+,D0
	BSR.W	InitActionDelay
	RTS
SelectBufferNumb:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#40,D2
	MOVEQ	#2,D1
	LEA	VexBufferNumb,A0
	LEA	SelectBuffer_TXT+1,A1
	BSR.W	ReqMinMaxLong
	TST.W	D0
	BEQ.S	LAB_069E
	BSR.S	ForceEvenBufNumb
	BSR.W	RebuildSoundSystem
	BSR.W	DrawSystemSetup
LAB_069E:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SelectAdjustVol:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$000000c8,D2
	MOVEQ	#1,D1
	LEA	AdjustVol,A0
	LEA	AdjustVol_TXT,A1
	BSR.W	ReqMinMaxLong
	TST.W	D0
	BEQ.S	LAB_06A0
	BSR.W	DoAdjustVolume
LAB_06A0:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
SetMaxDspBuffer:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$000000ff,D2
	MOVEQ	#16,D1
	LEA	MAXDSP_ECHO_LEN,A0
	LEA	DspBuffer_TXT+1,A1
	BSR.W	ReqMinMaxLong
	TST.W	D0
	BEQ.S	LAB_06A3
	MOVE.L	(A0),D1
	CMP.L	DSP_ECHO_LEN,D1
	BCC.S	LAB_06A2
	MOVE.L	D1,DSP_ECHO_LEN
LAB_06A2:
	BSR.W	RebuildSoundSystem
	JSR	InitCalcBufferInfo
LAB_06A3:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DSPACTION_LIVE:
	ORI.B	#$00,D0
DeactivateDsp:
	CLR.B	DelayFX+1
	CLR.B	POSTDSP_FLAG+2
	CLR.L	POSTDSP
	MOVE.B	#$ff,PREDSP_UPDATE
	CLR.L	DSPFX
	CLR.W	VEXDSP_FLAG+2
	DC.W	$4a3a
	DC.W	$ffd4
	BNE.S	RemoteDsp
	BSR.W	ShowMainTitle
RemoteDsp:
	RTS
	DC.W	$0000
DspFilter:
	NOT.B	DSPFilterEcho
	BSR.W	ShowMainTitle
	RTS
DspAction_LIST:
	DC.L	DspEchoOff
	DC.L	DspEcho
	DC.L	DspCrossEcho
	DC.L	DspCrossEcho2
	DC.L	DspCenterEcho
	DC.W	$ffff
	DC.W	$ffff
DspActionDelay_LIST:
	DC.L	DspDelayOff
	DC.L	DspDelay
	DC.L	DspCrossDelay
	DC.W	$ffff
	DC.W	$ffff
DspActionHall_LIST:
	DC.L	DspDelayOff
	DC.L	DspHall
	DC.L	DspCrossHall
	DC.W	$ffff
	DC.W	$ffff
DspEchoOff:
	CLR.W	VEXDSP_FLAG+2
	CLR.L	DSPFX
	DC.W	$4a3a
	DC.W	$ff76
	BNE.S	LAB_06AC
	BSR.W	ShowMainTitle
LAB_06AC:
	RTS
DspDelayOff:
	CLR.B	DelayFX+1
	CLR.B	POSTDSP_FLAG+2
	CLR.L	POSTDSP
	DC.W	$4a3a
	DC.W	$ff58
	BNE.S	LAB_06AE
	BSR.W	ShowMainTitle
LAB_06AE:
	RTS
	DC.W	$0000
DspEcho:
	MOVE.B	#$ff,PREDSP_UPDATE
	MOVE.L	#$00000001,DSPFX
	MOVE.L	#CopyDSP_Echo,PREDSP
	MOVE.W	#$0001,VEXDSP_FLAG+2
	DC.W	$4a3a
	DC.W	$ff26
	BNE.W	RemoteDsp
	BSR.W	ShowMainTitle
	RTS
	DC.W	$0000
DspCrossEcho:
	MOVE.B	#$ff,PREDSP_UPDATE
	MOVE.L	#$00000002,DSPFX
	MOVE.L	#CopyDSP_CrossEcho,PREDSP
	MOVE.W	#$0001,VEXDSP_FLAG+2
	DC.W	$4a3a
	DC.W	$fef2
	BNE.W	RemoteDsp
	BSR.W	ShowMainTitle
	RTS
	DC.W	$0000
DspCrossEcho2:
	MOVE.B	#$ff,PREDSP_UPDATE
	MOVE.L	#$00000003,DSPFX
	MOVE.L	#CopyDSP_CrossEcho2,PREDSP
	MOVE.W	#$0001,VEXDSP_FLAG+2
	DC.W	$4a3a
	DC.W	$febe
	BNE.W	RemoteDsp
	BSR.W	ShowMainTitle
	RTS
	DC.W	$0000
DspCenterEcho:
	MOVE.B	#$ff,PREDSP_UPDATE
	MOVE.L	#$00000004,DSPFX
	MOVE.L	#CopyDSP_CenterEcho,PREDSP
	MOVE.W	#$0001,VEXDSP_FLAG+2
	DC.W	$4a3a
	DC.W	$fe8a
	BNE.W	RemoteDsp
	BSR.W	ShowMainTitle
	RTS
DspChorus:
	BCHG	#1,POSTDSP_FLAG+2
	BRA.S	SetPostDsp
DspDelay:
	BSET	#0,POSTDSP_FLAG+2
	MOVE.B	#$01,DelayFX+1
	BRA.S	SetPostDsp
DspCrossDelay:
	BSET	#0,POSTDSP_FLAG+2
	MOVE.B	#$02,DelayFX+1
	BRA.S	SetPostDsp
DspHall:
	BSET	#0,POSTDSP_FLAG+2
	MOVE.B	#$03,DelayFX+1
	BRA.S	SetPostDsp
DspCrossHall:
	BSET	#0,POSTDSP_FLAG+2
	MOVE.B	#$04,DelayFX+1
	BRA.S	SetPostDsp
SelectPostFilter:
	BCHG	#2,POSTDSP_FLAG+2
SetPostDsp:
	MOVEM.L	D0/A0,-(A7)
	MOVEQ	#0,D0
	MOVE.B	DelayFX+1,D0
	CMPI.B	#$04,D0
	BLS.S	SetPostDsp_ok
	MOVEQ	#1,D0
	MOVE.B	D0,DelayFX+1
SetPostDsp_ok:
	SUBQ.W	#1,D0
	BMI.S	SetPostNoDly
	LEA	DelayFXList,A0
	DC.W	$41f0
	DC.W	$0400
	DC.W	$23d0
	DC.L	LAB_118A+3
SetPostNoDly:
	MOVEQ	#0,D0
	TST.B	POSTDSP_FLAG+2
	BEQ.S	PostDspOff
	MOVE.L	#PrepPostDsp,D0
PostDspOff:
	MOVE.L	D0,POSTDSP
	MOVEM.L	(A7)+,D0/A0
	BSR.W	ShowMainTitle
	RTS
	DC.W	$0000
SystemSpeedDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	VexSpeed,D1
	BSR.W	SetDecShiftKeyRaster
	ANDI.L	#$000000ff,D0
	SUB.L	D0,D1
	BMI.S	SystemSpeedDown_X
	CMPI.L	#$00000032,D1
	BCS.S	SystemSpeedDown_X
	MOVE.L	D1,VexSpeed
	BSR.W	RebuildSoundSystem2
	JSR	ResetRelMasterTime
	BSR.W	DrawSystemSetup
SystemSpeedDown_X:
	BSR.W	InitActionDelay
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
SystemSpeedUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	VexSpeed,D1
	BSR.W	SetDecShiftKeyRaster
	ANDI.L	#$000000ff,D0
	ADD.L	D0,D1
	CMPI.L	#$00000320,D1
	BHI.S	SystemSpeedUp_X
	MOVE.L	D1,VexSpeed
	BSR.W	RebuildSoundSystem2
	JSR	ResetRelMasterTime
	BSR.W	DrawSystemSetup
SystemSpeedUp_X:
	BSR.W	InitActionDelay
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
QualityUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	VexQuality,A0
	MOVE.L	(A0),D2
	MOVE.L	D2,D1
	BSR.W	SetDecShiftKeyRaster
	ADD.W	D0,D1
	ANDI.L	#$0000ffff,D1
	MOVE.L	D1,(A0)
	JSR	GetSystemFreq
	CMPI.L	#$0007a120,D0
	BHI.S	LAB_06C3
	BSR.W	RebuildSoundSystem2
	JSR	ResetRelMasterTime
	BSR.W	DrawSystemSetup
LAB_06C2:
	BSR.W	InitActionDelay
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_06C3:
	MOVE.L	D2,(A0)
	BRA.S	LAB_06C2
	DC.W	$0000
QualityDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	VexQuality,A0
	MOVE.L	(A0),D2
	MOVE.L	D2,D1
	BSR.W	SetDecShiftKeyRaster
	SUB.W	D0,D1
	BMI.S	LAB_06C5
	ANDI.L	#$0000ffff,D1
	MOVE.L	D1,(A0)
	JSR	GetSystemFreq
	CMPI.L	#$00000fa0,D0
	BCS.S	LAB_06C6
	BSR.W	RebuildSoundSystem2
	JSR	ResetRelMasterTime
	BSR.W	DrawSystemSetup
LAB_06C5:
	BSR.W	InitActionDelay
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_06C6:
	MOVE.L	D2,(A0)
	BRA.S	LAB_06C5
SetSixteenVoices:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	StopActualSong
	LEA	MainScreenVoc_TXT+3,A0
	MOVE.B	#$20,(A0)+
	MOVE.B	#$31,(A0)+
	MOVE.B	#$36,(A0)+
	LEA	VEX_Setup,A0
	MOVE.W	#$0002,(A0)+
	MOVE.W	#$0004,(A0)+
	MOVE.W	#$0010,(A0)+
	BSR.W	DoRestart
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetThirtytwoVoices:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	StopActualSong
	LEA	MainScreenVoc_TXT+3,A0
	MOVE.B	#$20,(A0)+
	MOVE.B	#$33,(A0)+
	MOVE.B	#$32,(A0)+
	LEA	VEX_Setup,A0
	MOVE.W	#$0003,(A0)+
	MOVE.W	#$0004,(A0)+
	MOVE.W	#$0020,(A0)+
	BSR.W	DoRestart
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetSixtyFourVoices:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	StopActualSong
	LEA	MainScreenVoc_TXT+3,A0
	MOVE.B	#$20,(A0)+
	MOVE.B	#$36,(A0)+
	MOVE.B	#$34,(A0)+
	LEA	VEX_Setup,A0
	MOVE.W	#$0004,(A0)+
	MOVE.W	#$0004,(A0)+
	MOVE.W	#$0040,(A0)+
	BSR.W	DoRestart
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
Set128Voices:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	StopActualSong
	LEA	MainScreenVoc_TXT+3,A0
	MOVE.B	#$31,(A0)+
	MOVE.B	#$32,(A0)+
	MOVE.B	#$38,(A0)+
	LEA	VEX_Setup,A0
	MOVE.W	#$0005,(A0)+
	MOVE.W	#$0004,(A0)+
	MOVE.W	#$0080,(A0)+
	BSR.W	DoRestart
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
Set256Voices:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	StopActualSong
	LEA	MainScreenVoc_TXT+3,A0
	MOVE.B	#$32,(A0)+
	MOVE.B	#$35,(A0)+
	MOVE.B	#$36,(A0)+
	LEA	VEX_Setup,A0
	MOVE.W	#$0006,(A0)+
	MOVE.W	#$0004,(A0)+
	MOVE.W	#$0100,(A0)+
	BSR.W	DoRestart
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	RTS
SetEightVoices:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	StopActualSong
	LEA	MainScreenVoc_TXT+3,A0
	MOVE.B	#$20,(A0)+
	MOVE.B	#$20,(A0)+
	MOVE.B	#$38,(A0)+
	LEA	VEX_Setup,A0
	MOVE.W	#$0001,(A0)+
	MOVE.W	#$0004,(A0)+
	MOVE.W	#$0008,(A0)+
	BSR.W	DoRestart
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
UpdatePosListQ:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BRA.S	UpdatePosListIN
	DC.W	$0000
UpdatePosList:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	DrawPosition
UpdatePosListIN:
	LEA	Test_PATTED+2,A2
	MOVEA.L	24(A2),A3
	MOVE.L	#$57494e42,D0
	MOVE.L	#$42303034,D1
	BSR.W	NGGetInnerAreaData
	DC.W	$4a88
	BEQ.S	LAB_06D2
	DC.W	$4a89
	BEQ.S	LAB_06D2
	LEA	NGWin_Info(PC),A4
	ADD.W	44(A4),D1
	MOVE.W	42(A4),D5
	ADD.W	48(A4),D0
	ADD.W	50(A4),D1
	SUB.W	48(A4),D2
	SUB.W	50(A4),D3
	MOVEQ	#0,D7
	MOVE.W	D3,D7
	DIVU	D5,D7
	SUBQ.W	#2,D7
	BMI.S	LAB_06D2
	BSR.W	NGRNrm1DrMd
	BSR.W	NGRDarkAPen
	LEA	PosListtitle+1,A0
	BSR.W	DrawTextXY
	ADD.W	D5,D1
	ADDQ.W	#1,D1
	BSR.W	NGRLightAPen
	LEA	Test_PATTED+2,A0
	MOVEA.L	24(A0),A3
LAB_06D0:
	MOVEQ	#0,D6
	MOVE.W	114(A0),D6
LAB_06D1:
	BSR.S	LAB_06D3
	LEA	32(A3),A3
	MOVEA.L	PosLine_TXT(PC),A0
	BSR.W	DrawTextXY
	ADD.W	D5,D1
	BSR.W	NGRDarkAPen
	ADDQ.W	#1,D6
	DBF	D7,LAB_06D1
LAB_06D2:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
LAB_06D3:
	MOVEM.L	D0-D1/D6/A0-A1/A3,-(A7)
	MOVEA.L	PosLine_TXT(PC),A0
	MOVE.L	D6,D0
	BSR.W	AddString3Word
	MOVE.W	8(A3),D0
	BSR.W	AddString3Word
LAB_06D4:
	MOVE.W	10(A3),D0
	BSR.W	AddString3Word
	MOVE.W	12(A3),D0
	BSR.W	AddString3Word
	MOVE.B	#$20,(A0)+
	MOVE.W	4(A3),D0
	BSR.W	AddString3Word
	MOVE.W	14(A3),D0
	BSR.W	AddString3Word
	MOVEQ	#0,D0
	MOVE.B	17(A3),D0
	BSR.W	ConvertToSignDecByte
	LEA	SignDecByte_TXT(PC),A1
	MOVE.B	(A1)+,(A0)+
	MOVE.B	(A1)+,(A0)+
	MOVE.B	(A1)+,(A0)+
	CLR.B	(A0)
	MOVEM.L	(A7)+,D0-D1/D6/A0-A1/A3
LAB_06D5:
	RTS
PosLine_TXT:
	ORI.B	#$00,D0
	ORI.B	#$80,D0
	ORI.B	#$00,D1
FRAMENUMB:
LAB_06D7:
	ORI.B	#$01,D0
	DC.W	$0000
ScrollUpAreaFix:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	D7,D6
	BRA.S	UpAreaFix_IN
ScrollUpArea:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	D3,D6
	MULU	D7,D6
	DIVU	#$0064,D6
UpAreaFix_IN:
	MOVE.W	D0,D4
	ADD.W	D2,D4
	MOVE.W	D0,D2
	MOVE.W	D1,D5
	ADD.W	D3,D5
	MOVE.W	D1,D3
	MOVE.W	D6,D1
	MOVEQ	#0,D0
	BSR.S	GFX_ScrollRaster
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
GFX_ScrollRaster:
	MOVEM.L	D0-D1/A0-A1,-(A7)
LAB_06DD:
	MOVEA.L	_GraphicsBase,A6
	JSR	-396(A6)
GFX_ScrollRaster_X:
	MOVEM.L	(A7)+,D0-D1/A0-A1
	RTS
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A1,A0
	TST.W	D1
	BPL.S	LAB_06DF
	MOVE.W	D1,D7
	MOVE.W	D2,D0
	MOVE.W	D3,D1
	SUB.W	D7,D3
	SUB.W	D0,D4
	SUB.W	D1,D5
	ADD.W	D7,D5
	MOVE.L	#$000000c0,D6
	MOVEA.L	_GraphicsBase,A6
	JSR	-552(A6)
	BRA.S	LAB_06E1
LAB_06DF:
	MOVE.W	D1,D7
	MOVE.W	D2,D0
	MOVE.W	D3,D1
	ADD.W	D7,D1
	SUB.W	D0,D4
	SUB.W	D1,D5
	MOVE.L	#$000000c0,D6
LAB_06E0:
	MOVEA.L	_GraphicsBase,A6
	JSR	-552(A6)
LAB_06E1:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
GetPEDWindow:
	MOVEM.L	D0,-(A7)
	MOVE.L	#$50544544,D0
	BSR.W	NGWindowCheck
	MOVEM.L	(A7)+,D0
	DC.W	$0000
	MOVEM.L	D2-D7/A2,-(A7)
	BSR.S	GetPEDWindow
	DC.W	$4a88
	BEQ.S	LAB_06E6
	SUB.W	FONT_H(PC),D5
	SUB.W	D2,D4
	SUB.W	D3,D5
	TST.W	D1
LAB_06E3:
	BMI.S	LAB_06E7
	ADD.W	4(A0),D2
	ADD.W	6(A0),D3
	ADD.W	WINDOW_TOP(PC),D3
	ADD.W	FONT_H(PC),D3
	ADDQ.W	#4,D2
	ADD.W	D2,D0
	ADD.W	D3,D1
	SUB.W	FONT_H(PC),D1
	SUB.W	FONT_H(PC),D3
LAB_06E4:
	MOVE.W	#$00c0,D6
	MOVEQ	#1,D7
	MOVEA.L	4(A1),A0
	MOVEA.L	A0,A1
	MOVEA.L	Blitmem_PTR(PC),A2
	MOVEA.L	_GraphicsBase,A6
LAB_06E5:
	JSR	-30(A6)
LAB_06E6:
	MOVEM.L	(A7)+,D2-D7/A2
	BRA.W	GFX_ScrollRaster_X
LAB_06E7:
	ADD.W	4(A0),D2
	ADD.W	6(A0),D3
	ADD.W	WINDOW_TOP(PC),D3
	ADD.W	FONT_H(PC),D3
	ADDQ.W	#4,D2
	ADD.W	D2,D0
	ADD.W	D3,D1
	BRA.S	LAB_06E4
Blitmem_PTR:
	ORI.B	#$00,D0
	DC.W	$0000
	MOVE.B	D0,D0
	ORI.B	#$03,D1
FASTGFXSCROLL:
	DC.W	$ff00
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CMP.W	D0,D2
	BCS.S	LAB_06EE
LAB_06EA:
	MOVEA.L	8(A1),A2
	MOVEA.L	8(A1),A3
	MOVE.W	(A1),D7
	ANDI.L	#$0000ffff,D7
	LSR.W	#3,D4
	ANDI.L	#$0000ffff,D0
	ANDI.L	#$0000ffff,D2
	LSR.W	#3,D0
	LSR.W	#3,D2
	MULU	D7,D1
	MULU	D7,D3
	ADDA.L	D1,A2
	ADDA.L	D3,A3
	ADDA.L	D0,A2
	ADDA.L	D2,A3
	SUBQ.W	#1,D4
	MOVEA.L	A2,A4
	MOVEA.L	A3,A5
LAB_06EB:
	MOVE.W	D4,D6
	MOVEA.L	A4,A2
LAB_06EC:
	MOVEA.L	A5,A3
LAB_06ED:
	MOVE.B	(A2)+,(A3)+
	DBF	D6,LAB_06ED
	ADDA.L	D7,A4
	ADDA.L	D7,A5
	DBF	D7,LAB_06EB
LAB_06EE:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
CalcAreaPercLower:
	MOVEM.L	D4,-(A7)
	MOVE.W	D3,D4
	MULU	D7,D4
	DIVU	#$0064,D4
	ADD.W	D3,D1
	SUB.W	D4,D1
	MOVE.W	D4,D3
	MOVEM.L	(A7)+,D4
	RTS
DoRestart:
	JSR	StopActualSong
LAB_06F1:
	JSR	StopAllChannels
	CLR.W	PLAYER_STATUS+2
	MOVE.W	#$ffff,Restart_FLAG
	JSR	MAINEXIT
	JSR	SetResync
	BSR.W	ShowMainTitle
	RTS
RebuildSoundSystem:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.W	IRQStuff_STATUS
	JSR	MultiTaskingOff
	BSR.W	SetZeroVolume
	JSR	AudioDMAOff
	JSR	StopActualSong
	JSR	StopVoices
	JSR	RemoveAudioIRQ
	JSR	FreeVoiceExpander
	BSR.W	PreCalcMemUsage
	JSR	GetVoiceExpander
	TST.W	D0
	BEQ.S	RebuildSoundSystem_ERR
	JSR	JumpSetBuffer
	JSR	BuildFreqList
	LEA	Standard_KEYTRANS,A0
	JSR	InitKeyTrans
	CLR.B	LowCPUWarn+1
	JSR	SetAudioRegisters
	JSR	SetAudioIRQ
	MOVE.W	#$00ff,ADKCON
	JSR	AudioDMAOn
	JSR	ClrStreamCount
	JSR	SwapSyncBuffer
	MOVE.W	#$ffff,IRQStuff_STATUS
	JSR	MultiTaskingOn
	BSR.W	BuildSSTDynamic
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
RebuildSoundSystem_ERR:
	JSR	MultiTaskingOn
	CLR.W	PLAYER_STATUS+2
	MOVE.W	#$ffff,Restart_FLAG
	JSR	MAINEXIT
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PreCalcMemUsage:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	CopyVexSetup
	BSR.W	InitVexVars
	MOVE.W	CHANNEL_NUMB+2,D0
	MULU	#$0004,D0
	MOVE.L	D0,VEX_LineSize+2
	MOVE.W	CHANNEL_NUMB+2,D0
	MOVE.L	VEX_LinesPerPattern,D1
	MOVE.L	D1,LAB_09FC+2
	MULU	#$0004,D1
	MOVE.L	D1,VEX_TrackSize
	MULU	D1,D0
	MOVE.L	D0,VEX_PatternSize
	MOVE.L	D0,CALC_PatternLen
	MOVE.L	D0,LAB_1283+2
	MOVE.L	D0,LAB_01FC
	MOVE.L	D0,LAB_01FE
	MOVE.L	D0,LAB_0313+2
	MOVE.L	VEX_LinesPerPattern,D0
	MOVE.W	CHANNEL_NUMB+2,D1
	MULU	D1,D0
	MOVE.L	D0,VEX_NotePerPattern
	MOVE.L	CALC_PatternLen,D0
	MOVE.L	VEX_PattNumb,D1
	DC.W	$4c01
	DC.W	$0000
	MOVE.L	D0,LAB_1121+2
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
RebuildSoundSystem2:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	MultiTaskingOff
	CLR.W	IRQStuff_STATUS
	JSR	AudioDMAOff
	JSR	RemoveAudioIRQ
	JSR	FreeVoiceExpander
	BSR.S	PreCalcMemUsage2
	JSR	GetVoiceExpander
	TST.W	D0
	BEQ.W	RebuildSoundSystem_ERR
	JSR	JumpSetBuffer
	JSR	BuildFreqList
	LEA	Standard_KEYTRANS,A0
	JSR	InitKeyTrans
	CLR.B	LowCPUWarn+1
	JSR	SetAudioRegisters
	JSR	SetAudioIRQ
	MOVE.W	#$00ff,ADKCON
	JSR	AudioDMAOn
	JSR	ClrStreamCount
	JSR	SwapSyncBuffer
	MOVE.W	#$ffff,IRQStuff_STATUS
	JSR	MultiTaskingOn
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PreCalcMemUsage2:
	BSR.W	InitVexVars2
	RTS
OverSample3_PTR:
	ORI.B	#$00,D0
	DC.W	$0001
	DC.W	$7700
	ORI.B	#$00,D1
OverSample3:
	ORI.B	#$01,D0
	DC.W	$0000
SelectHQ:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$4aba
	AND.B	26460(A6),D4
	MOVE.L	#$53593443,D0
	BSR.W	NGFindGadID
	DC.W	$4a88
	BEQ.S	LAB_06FB
	MOVE.L	64(A0),D7
	MOVEQ	#1,D6
	TST.W	D7
	BEQ.S	LAB_06FA
	MOVEQ	#2,D6
	CMPI.W	#$0001,D7
	BEQ.S	LAB_06FA
	MOVEQ	#4,D6
	CMPI.W	#$0002,D7
	BEQ.S	LAB_06FA
	MOVEQ	#8,D6
LAB_06FA:
	LEA	NGWin_Info(PC),A6
	MOVEA.L	(A6),A5
	MOVE.L	ActualNGWWIN_ID(PC),D0
	BEQ.S	LAB_06FB
	BSR.W	PreClipWIN
	BSR.W	NGWDrawWindowID
	BSR.W	NGDrawGadsWindowID
	BSR.W	DrawSystemSetup
	JSR	ShowDspStatus
	BSR.W	PostClipWIN
	MOVE.L	D6,OverSample3
	BSR.W	RebuildSoundSystem2
	BSR.S	DrawOS3Status
LAB_06FB:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawOS3Status:
	DC.W	$23fc
	MOVEA.L	A7,A0
	BNE.S	LAB_06FF+4
	DC.L	OS3_TXTb+1
	DC.W	$0cba
	ORI.B	#$01,D0
	DC.W	$ff7e
	BEQ.S	LAB_06FD
	DC.W	$23fc
	MOVE.L	32(A2,D7.L),D0
	DC.L	OS3_TXTb+1
	DC.W	$0cba
	ORI.B	#$02,D0
	DC.W	$ff6a
	BEQ.S	LAB_06FD
	DC.W	$23fc
	MOVE.L	32(A4,D7.L),D0
	DC.L	OS3_TXTb+1
	DC.W	$0cba
	ORI.B	#$04,D0
	DC.W	$ff56
	BEQ.S	LAB_06FD
	DC.W	$23fc
	MOVE.L	EXT_001c.W,D0
	DC.L	OS3_TXTb+1
LAB_06FD:
	MOVE.L	#OS3_TXT+3,AssText_TXT
	BSR.W	PrintAssTextF
	RTS
	DC.W	$0000
InitVexVars2:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	VexQuality,D7
	MOVE.L	VexSpeed,D6
LAB_06FF:
	MOVE.L	#$00003070,D0
	DIVU	D7,D0
	ANDI.L	#$0000ffff,D0
	MOVE.L	D0,VexPeriod
	MOVE.L	#$002c0c2c,D3
	DC.W	$4c40
	MOVE.W	D3,D0
	DC.W	$4c3c
	MOVE.W	D0,D0
	ORI.B	#$7c,D0
	MOVE.L	D6,D1
	DC.W	$4c3c
	MOVE.B	D0,D0
	ORI.B	#$32,D0
	DC.W	$4c41
	MOVE.W	D3,D0
	ANDI.L	#$0000fffe,D3
	DC.W	$4c3a
	MOVE.W	D0,D0
	DC.W	$fee8
	MOVE.L	D3,VexBufferSize
	BSR.W	RecalcFreqBase
	MOVE.L	VexBufferSize,D0
	LSL.L	#2,D0
	MOVE.L	D0,CALCBUF_INFO
	MOVE.L	D0,PostDspBUF_INFO
	MOVE.L	D0,D1
	DC.W	$4c39
	MOVE.B	D0,D0
	DC.L	VexBufferNumb
	MOVE.L	D1,LAB_119C
	MOVE.L	D0,LAB_1289
	MOVE.L	D0,LAB_1198
	MOVE.L	MAXDSP_ECHO_LEN,D1
	MULU	D1,D0
	MOVE.L	D0,LAB_1194
	MOVE.L	D0,LAB_1196
	LEA	Test_VOICEEXPANDER,A0
	MOVE.L	VexBufferNumb,D0
	MOVEM.L	D0,-(A7)
	LSR.L	#1,D0
	MOVE.L	D0,VexSyncBufNumb
	MOVEM.L	(A7)+,D0
	MOVE.W	D0,18(A0)
	MOVE.L	VexBufferSize,D0
	MOVE.W	D0,20(A0)
	MOVE.L	VexPeriod,D0
	MOVE.W	D0,24(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
InitVexVars:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	VEX_PattNumb,D0
	MOVE.W	D0,Test_SONG
	MULU	#$0010,D0
	MOVE.L	D0,LAB_111F+2
	MOVE.L	VexQuality,D7
	MOVE.L	VexSpeed,D6
	MOVE.L	#$00003070,D0
	DIVU	D7,D0
	ANDI.L	#$0000ffff,D0
	MOVE.L	D0,VexPeriod
	MOVE.L	#$002c0c2c,D3
	DC.W	$4c40
	MOVE.W	D3,D0
	DC.W	$4c3c
	MOVE.W	D0,D0
	ORI.B	#$7c,D0
	MOVE.L	D6,D1
	DC.W	$4c3c
	MOVE.B	D0,D0
	ORI.B	#$32,D0
	DC.W	$4c41
	MOVE.W	D3,D0
	MOVEM.L	D0/D3-D4,-(A7)
	CLR.W	LargeBufCount+2
InitVexVars_BuffChk:
	MOVE.L	VexBufferNumb,D4
	MOVE.L	D3,D0
	DC.W	$4c04
	DC.W	$0000
	CMPI.L	#$0000ffff,D0
	BCS.S	InitVexVars_BuffOk
	MOVE.L	VexBufferNumb,D0
	SUBQ.L	#1,D0
	MOVE.L	D0,VexBufferNumb
	ADDQ.W	#1,LargeBufCount+2
	BRA.S	InitVexVars_BuffChk
InitVexVars_BuffOk:
	TST.W	LargeBufCount+2
	BEQ.S	InitVexBufOk
	BSR.W	ForceEvenBufNumb
InitVexBufOk:
	MOVEM.L	(A7)+,D0/D3-D4
	ANDI.L	#$0000fffe,D3
	DC.W	$4c3a
	MOVE.W	D0,D0
	DC.W	$fdb6
	MOVE.L	D3,VexBufferSize
	BSR.W	RecalcFreqBase
	MOVE.L	VexBufferSize,D0
	LSL.L	#2,D0
	MOVE.L	D0,CALCBUF_INFO
	MOVE.L	D0,PostDspBUF_INFO
	MOVE.L	D0,LAB_119C
	MOVE.L	D0,LAB_1289
	MOVE.L	D0,LAB_1198
	MOVE.L	MAXDSP_ECHO_LEN,D1
	MULU	D1,D0
	MOVE.L	D0,LAB_1194
	MOVE.L	D0,LAB_1196
	MOVE.L	VexBufferNumb,D1
	LEA	Test_VOICEEXPANDER,A0
	MOVEQ	#0,D0
	MOVE.W	CHANNEL_NUMB+2,D0
	MOVE.W	D0,Song_CHNUMB
	MOVE.W	D0,(A0)
	MOVEQ	#0,D0
	MOVE.W	VexAudioNumb,D0
	MOVE.W	D0,10(A0)
	MOVE.L	VexBufferNumb,D0
	MOVEM.L	D0,-(A7)
	LSR.L	#1,D0
	MOVE.L	D0,VexSyncBufNumb
	MOVEM.L	(A7)+,D0
	MOVE.W	D0,18(A0)
	MOVE.L	VexBufferSize,D0
	MOVE.W	D0,20(A0)
	MOVE.L	VexPeriod,D0
LAB_0704:
	MOVE.W	D0,24(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
CopyVexSetup:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	VEX_Setup,A0
	LEA	VEX_StartSetup+2,A1
	MOVE.W	(A0)+,(A1)+
	MOVE.W	(A0)+,(A1)+
	MOVE.W	(A0)+,(A1)+
	MOVEQ	#0,D0
	MOVE.W	CHANNEL_NUMB+2,D0
	DIVU	VexAudioNumb,D0
	MOVE.W	D0,VexVoicesPerAudio
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DoLoopRange:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	CheckInstrument
	CMPI.B	#$ff,D0
	BEQ.S	LAB_070A
	LEA	NGWin_Info(PC),A6
	TST.L	(A6)
	BEQ.S	LAB_070A
	MOVEA.L	68(A6),A4
	MOVEA.L	(A6),A5
	CMPI.B	#$ff,52(A5)
	BNE.S	LAB_070A
	CMPI.B	#$ff,(A4)
	BNE.S	LAB_070A
	MOVEM.L	A0,-(A7)
	LEA	Loopseltxtb+1,A0
	BSR.W	NGSetStatusText
	MOVEA.L	(A7)+,A0
	MOVEA.L	52(A4),A1
	MOVEM.W	24(A4),D0-D3
	MOVE.W	56(A5),D0
	MOVE.W	60(A5),D2
	MOVE.W	24(A4),D7
	CMP.W	D7,D2
	BGE.S	LAB_0707
	MOVE.W	D7,D2
LAB_0707:
	MOVE.W	28(A4),D6
	MOVEM.L	D0,-(A7)
	BSR.W	CheckNewLoopInstr
	CMPI.B	#$ff,D0
	BNE.S	LAB_0708
	MOVE.W	D6,D0
	LSR.W	#2,D0
	SUB.W	D0,D6
LAB_0708:
	MOVEM.L	(A7)+,D0
	ADD.W	D6,D7
	CMP.W	D7,D2
	BLE.S	LAB_0709
	MOVE.W	D7,D2
LAB_0709:
	MOVE.B	#$ff,Loopactive+2
	BSR.W	NGRInvDrMd
	BSR.W	WaitGfxSync
	BSR.S	DRectFill
LAB_070A:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DRectFill:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$4aba
	ORI.L	#$671eb07a,(A2)+
	ORI.L	#$6608b47a,(A4)
	ORI.L	#$6602601a,(A2)
	MOVEM.L	D0-D3,-(A7)
	MOVEM.W	MouseSeloldxy(PC),D0-D3
	BSR.S	LAB_070C
	MOVEM.L	(A7)+,D0-D3
	MOVEM.W	D0-D3,MouseSeloldxy
	BSR.S	LAB_070C
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_070C:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	ADD.W	D1,D3
	CMP.W	D0,D2
	BHI.S	LAB_070D
	EXG	D0,D2
LAB_070D:
	CMP.W	D1,D3
	BHI.S	LAB_070E
	EXG	D1,D3
LAB_070E:
	MOVEA.L	_GraphicsBase,A6
	JSR	-306(A6)
	MOVEQ	#0,D0
	MOVE.W	MouseSeloldxy(PC),D0
	MOVE.W	LAB_0711(PC),D0
	MOVEQ	#0,D0
	MOVEQ	#0,D2
	MOVE.W	28(A4),D2
	MOVE.W	MouseSeloldxy(PC),D0
	MOVE.W	LAB_0711(PC),D1
	CMP.W	D0,D1
	BHI.S	LAB_070F
	EXG	D0,D1
LAB_070F:
	SUB.W	24(A4),D0
	DC.W	$4c3c
	ORI.B	#$01,D0
	DC.W	$0000
	DC.W	$4c42
	DC.W	$0000
	MOVE.L	D0,D4
	MOVEQ	#0,D0
	MOVE.W	D1,D0
	SUB.W	24(A4),D0
	DC.W	$4c3c
	ORI.B	#$01,D0
	DC.W	$0000
	DC.W	$4c42
	DC.W	$0000
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
MouseSeloldxy:
	ORI.B	#$00,D0
LAB_0711:
	ORI.B	#$00,D0
LAB_0712:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
LoopSelect:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	CheckInstrument
	CMPI.B	#$ff,D0
	BEQ.W	LAB_0719
	LEA	NGWin_Info(PC),A6
	TST.L	(A6)
	BEQ.W	LAB_0719
	MOVEA.L	68(A6),A4
	MOVEA.L	(A6),A5
	BEQ.W	LAB_0719
	DC.W	$4a8c
	BEQ.W	LAB_0719
	DC.W	$4a8d
	BEQ.W	LAB_0719
	CMPI.B	#$ff,(A4)
	BNE.W	LAB_0719
	MOVEA.L	52(A4),A1
	MOVEM.W	24(A4),D0-D3
	MOVE.W	56(A5),D0
	MOVEQ	#0,D0
	MOVEQ	#0,D2
	MOVE.W	28(A4),D2
	TST.W	D2
	BEQ.W	LAB_0719
	MOVE.W	MouseSeloldxy(PC),D0
	MOVE.W	LAB_0711(PC),D1
	CMP.W	D0,D1
	BHI.S	LAB_0714
	EXG	D0,D1
LAB_0714:
	BSR.W	CorrIfNewLoop
	EXG	D0,D1
	BSR.W	CorrIfNewLoop
	EXG	D0,D1
	SUB.W	24(A4),D0
	DC.W	$4c3c
	ORI.B	#$02,D0
	DC.W	$0000
	DC.W	$4c42
	DC.W	$0000
	MOVE.L	D0,D4
	MOVEQ	#0,D0
	MOVE.W	D1,D0
	SUB.W	24(A4),D0
	DC.W	$4c3c
	ORI.B	#$02,D0
	DC.W	$0000
	DC.W	$4c42
	DC.W	$0000
	MOVE.L	D0,D1
	SUB.L	D4,D1
	BMI.S	LAB_0719
	BSR.W	GetActualInstrument
	MOVEA.L	A0,A1
	BSR.W	GetActualInstrName
	TST.W	D1
	BNE.S	LAB_0716
	TST.B	128(A0)
	BEQ.S	LAB_0715
	BCLR	#4,140(A0)
	CLR.B	128(A0)
	BRA.S	LAB_0718
LAB_0715:
	MOVEQ	#0,D0
	MOVE.L	#$00640000,D1
	BRA.S	LAB_0717
LAB_0716:
	MOVE.L	D4,D0
	DC.W	$4c3c
	ORI.B	#$00,D0
	DC.W	$0032
	DC.W	$4c3c
	MOVE.B	D0,D0
	ORI.B	#$32,D0
LAB_0717:
	MOVE.B	#$04,128(A0)
	BSR.W	SetNewLoop
	BSR.W	NewRecalcLoop
LAB_0718:
	BSR.S	ForceUpdateActInstrType
	BSR.W	DrawActualWave
	BSR.W	DrawInstrName
	BSR.W	DrawLoopType
LAB_0719:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
CorrIfNewLoop:
	MOVEM.L	D1,-(A7)
	MOVE.L	D0,D1
	BSR.S	CheckNewLoopInstr
	CMPI.B	#$ff,D0
	BNE.S	LAB_071B
	DC.W	$4c3c
	MOVE.B	D0,D0
	ORI.B	#$04,D0
	DIVU	#$0003,D1
LAB_071B:
	MOVE.L	D1,D0
	MOVEM.L	(A7)+,D1
	RTS
CheckNewLoopInstr:
	MOVEM.L	A0,-(A7)
	MOVEQ	#0,D0
	BSR.W	GetActualInstrName
	TST.B	(A0)
	BEQ.S	LAB_071D
	TST.B	128(A0)
	BEQ.S	LAB_071D
	BTST	#4,140(A0)
	BEQ.S	LAB_071D
	MOVEQ	#-1,D0
LAB_071D:
	MOVEA.L	(A7)+,A0
	RTS
	DC.W	$0000
UpdateChangedInstrType:
	MOVEM.L	A0-A1,-(A7)
	BSR.W	GetActualInstrument
	MOVEA.L	A0,A1
	BSR.W	GetActualInstrName
	TST.B	(A0)
	BEQ.S	LAB_071F
	BSR.S	UpdateInstrType
LAB_071F:
	MOVEM.L	(A7)+,A0-A1
	RTS
	DC.W	$0000
ForceUpdateActInstrType:
	MOVEM.L	A0-A1,-(A7)
	BSR.W	GetActualInstrument
	MOVEA.L	A0,A1
	BSR.W	GetActualInstrName
	BSR.S	UpdateInstrType
	MOVEM.L	(A7)+,A0-A1
	RTS
	DC.W	$0000
UpdateInstrType:
	MOVEM.L	D0/A0-A2,-(A7)
	MOVE.B	132(A0),D0
	EXT.W	D0
	MOVE.W	D0,38(A1)
	MOVE.B	138(A0),D0
	EXT.W	D0
	MOVE.W	D0,42(A1)
	MOVE.B	139(A0),D0
	EXT.W	D0
	MOVE.W	D0,44(A1)
	MOVEQ	#0,D0
	MOVE.B	142(A0),D0
	MOVE.B	D0,46(A1)
	MOVE.B	128(A0),D0
	EXT.W	D0
	CMPI.W	#$0008,D0
	BHI.S	LAB_0722
	LEA	UpdateChangedInstrType_JL(PC),A2
	LEA	0(A2,D0.W),A2
	MOVEA.L	(A2),A2
	JSR	(A2)
LAB_0722:
	MOVEM.L	(A7)+,D0/A0-A2
	RTS
UpdateChangedInstrType_JL:
	DC.L	UpdateChangedINONE
	DC.L	UpdateChangedILOOP
	DC.L	UpdateChangedISUST
	DC.W	$0000
UpdateChangedINONE:
	CLR.B	128(A0)
	CLR.W	(A1)
	RTS
SyncLoop:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	TST.B	132(A0)
	BEQ.S	SyncLoop_X
	TST.B	128(A0)
	BEQ.S	SyncLoop_X
	BTST	#4,140(A0)
	BEQ.S	SyncLoop_X
	CMPI.B	#$01,132(A0)
	BNE.S	SyncLoop_R
	BSR.S	GetNewLoop
	BSR.W	MoveNextInstrument
	BSR.W	GetActualInstrName
	BSR.S	SetNewLoop
	BSR.W	ForceUpdateActInstrType
	BSR.W	MovePrevInstrument
	BRA.S	SyncLoop_X
SyncLoop_R:
	BSR.S	GetNewLoop
	BSR.W	MovePrevInstrument
	BSR.W	GetActualInstrName
	BSR.S	SetNewLoop
	BSR.W	ForceUpdateActInstrType
	BSR.W	MoveNextInstrument
SyncLoop_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
GetNewLoop:
	MOVEQ	#0,D0
	MOVEQ	#0,D1
	MOVE.B	129(A0),D0
	SWAP	D0
	MOVE.W	150(A0),D0
	MOVE.B	130(A0),D1
	SWAP	D1
	MOVE.W	152(A0),D1
	RTS
	DC.W	$0000
SetNewLoop:
	MOVEM.L	D0-D1,-(A7)
	MOVE.W	D0,150(A0)
	SWAP	D0
	BSET	#4,140(A0)
	MOVE.B	D0,129(A0)
	MOVE.W	D1,152(A0)
	SWAP	D1
	MOVE.B	D1,130(A0)
	MOVEM.L	(A7)+,D0-D1
	RTS
CalcHiLooptoVal:
	DC.W	$4c00
	MOVE.W	D2,D2
	DC.W	$4c7c
	MOVE.W	D2,D2
	ORI.W	#$0000,-(A4)
	BCLR	#0,D3
	RTS
	DC.W	$0000
UpdateChangedILOOP:
	BTST	#4,140(A0)
	BEQ.S	UpdateChangedILOOP_old
	BSR.S	NewRecalcLoop
	MOVE.W	#$0004,(A1)
	RTS
NewRecalcLoop:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	GetNewLoop
	BSR.S	GetRecalcedLoop
	MOVE.L	8(A1),D2
	ADD.L	D2,D0
	ADD.L	D2,D1
	MOVE.L	D0,20(A1)
	MOVE.L	D1,24(A1)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
GetRecalcedLoop:
	MOVEM.L	D2-D7/A0-A6,-(A7)
	MOVE.L	16(A1),D3
	SUB.L	8(A1),D3
	MOVE.L	D3,D4
	BSR.S	CalcHiLooptoVal
	BCLR	#0,D3
	MOVE.L	D3,D6
	MOVE.L	D4,D3
	ADD.L	D1,D0
	BSR.S	CalcHiLooptoVal
	ADD.L	8(A1),D3
	CMP.L	16(A1),D3
	BLS.S	LAB_072E
	MOVE.L	16(A1),D3
LAB_072E:
	BCLR	#0,D3
	SUB.L	8(A1),D3
	MOVE.L	D3,D1
	MOVE.L	D6,D0
	MOVEM.L	(A7)+,D2-D7/A0-A6
	RTS
UpdateChangedILOOP_old:
	TST.B	130(A0)
	BEQ.W	UpdateChangedINONE
	MOVE.W	#$0004,(A1)
	BSR.S	UpdateRecalcLoop
	RTS
UpdateRecalcLoop:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#0,D0
	MOVE.B	129(A0),D0
	LSL.W	#7,D0
	DIVU	#$0064,D0
	ANDI.L	#$0000ffff,D0
	MOVE.L	12(A1),D1
	LSR.L	#7,D1
	DC.W	$4c00
	MOVE.B	D0,D0
	ADDQ.L	#1,D1
	BCLR	#0,D1
	MOVE.L	8(A1),D2
	ADD.L	D1,D2
	MOVE.L	D2,20(A1)
	MOVEA.L	D2,A2
	MOVE.B	(A2),D3
	MOVE.W	(A2),D3
	MOVEQ	#0,D0
	MOVE.B	130(A0),D0
	LSL.W	#7,D0
	DIVU	#$0064,D0
	ANDI.L	#$0000ffff,D0
	MOVE.L	12(A1),D1
	LSR.L	#7,D1
	DC.W	$4c00
	MOVE.B	D0,D0
	ADDQ.L	#1,D1
	BCLR	#0,D1
	MOVEM.L	D0,-(A7)
	MOVE.L	#$00007fff,D0
	MOVE.W	LAB_1213,D6
	LSR.W	#1,D6
	DIVU	D6,D0
	MOVEM.L	(A7)+,D0
	ADD.L	D1,D2
	MOVEA.L	D2,A3
	MOVE.W	-(A3),D4
	BSR.S	LOOP_SCAN_TEST
	MOVE.W	D4,D5
LOOP_SCAN_L:
	MOVE.W	(A3),D4
	BSR.S	LOOP_SCAN_TEST
	CMP.W	D4,D5
	BNE.S	LOOP_FOUND
	SUBQ.L	#4,A3
	CMPA.L	A3,A2
	BCC.S	LOOP_FOUND
	ADDQ.L	#2,A3
	BRA.S	LOOP_SCAN_L
LOOP_FOUND:
	MOVE.L	A3,24(A1)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LOOP_SCAN_TEST:
	SUB.W	D3,D4
	BMI.S	LOOP_SCAN_P
	MOVEQ	#0,D4
	RTS
LOOP_SCAN_P:
	MOVEQ	#-1,D4
	RTS
	DC.W	$0000
UpdateChangedISUST:
	BTST	#4,140(A0)
	BEQ.S	UpdateChangedISUST_old
	BSR.W	NewRecalcLoop
	BRA.S	UpdateChangedISUST_cont
UpdateChangedISUST_old:
	TST.B	130(A0)
	BEQ.W	UpdateChangedINONE
	BSR.W	UpdateRecalcLoop
UpdateChangedISUST_cont:
	MOVE.W	#$0008,(A1)
	MOVE.L	24(A1),30(A1)
	MOVE.L	16(A1),34(A1)
	MOVEQ	#0,D0
	MOVE.B	131(A0),D0
	MOVE.W	D0,28(A1)
	RTS
	DC.W	$0000
MakeSimpleIofSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.W	(A1)
	MOVE.L	D0,4(A1)
	MOVE.W	D1,2(A1)
	MOVE.L	10(A0),12(A1)
	MOVE.L	6(A0),8(A1)
	MOVE.L	30(A0),16(A1)
	MOVEA.L	A2,A0
	CMPI.B	#$ff,128(A0)
	BNE.S	LAB_0739
	MOVE.B	#$04,128(A0)
LAB_0739:
	BSR.W	UpdateInstrType
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
KillActualInstr:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	CMPI.B	#$02,132(A0)
	BEQ.S	LAB_073C
	CMPI.B	#$01,132(A0)
	BNE.S	LAB_073B
	BSR.W	MoveNextInstrument
	BSR.W	DoKillActualInstr
	BSR.W	MovePrevInstrument
LAB_073B:
	BSR.W	DoKillActualInstr
LAB_073C:
	BSR.W	DrawInstrName
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DoAdjustVolume:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	AdjustVol,D1
	MOVE.L	#$000000ff,D7
	MOVEA.L	SampleNames_PTR+2,A0
LAB_073E:
	BSR.S	LAB_073F
	LEA	256(A0),A0
	DBF	D7,LAB_073E
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_073F:
	TST.B	(A0)
	BEQ.S	LAB_0743
	MOVEQ	#0,D0
	MOVE.B	134(A0),D0
	TST.B	D0
	BNE.S	LAB_0740
	MOVEQ	#100,D0
LAB_0740:
	MULU	D1,D0
	DIVU	#$0064,D0
	TST.W	D0
	BNE.S	LAB_0741
	MOVEQ	#1,D0
LAB_0741:
	CMPI.W	#$00c8,D0
	BCS.S	LAB_0742
	MOVE.W	#$00c7,D0
LAB_0742:
	MOVE.B	D0,134(A0)
LAB_0743:
	RTS
ClearInstrNameList:
	MOVEM.L	D0/A0,-(A7)
	MOVE.L	#$000000ff,D0
	MOVEA.L	SampleNames_PTR+2,A0
LAB_0745:
	BSR.S	ClearIName
	LEA	256(A0),A0
	DBF	D0,LAB_0745
LAB_0746:
	MOVEM.L	(A7)+,D0/A0
	RTS
ClearIName:
	MOVEM.L	D0-D1/A0,-(A7)
	MOVE.W	#$00ff,D1
	MOVEQ	#0,D0
LAB_0748:
	MOVE.B	D0,(A0)+
	DBF	D1,LAB_0748
	MOVEM.L	(A7)+,D0-D1/A0
	RTS
	DC.W	$0000
DoKillActualInstr:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	BSR.S	ClearIName
	CLR.B	(A0)
	CLR.B	128(A0)
	CLR.W	150(A0)
	CLR.W	152(A0)
	CLR.B	129(A0)
	CLR.B	130(A0)
	CLR.B	138(A0)
	CLR.B	139(A0)
	CLR.B	142(A0)
	CLR.B	143(A0)
	CLR.B	141(A0)
	CLR.B	140(A0)
	CLR.B	134(A0)
	CLR.B	144(A0)
	CLR.B	145(A0)
	CLR.B	160(A0)
	CLR.B	161(A0)
	CLR.B	170(A0)
	CLR.B	132(A0)
	BSR.W	GetActualInstrument
	CMPI.W	#$fffc,(A0)
	BEQ.S	LAB_074A
	MOVE.W	#$fffc,(A0)
	LEA	Test_INSTRMAN,A0
	MOVE.W	10(A0),D2
	MOVE.W	D2,D0
	MOVEA.L	SAMPLEMANLIST_PTR,A0
	MULU	#$0038,D0
	LEA	0(A0,D0.L),A0
	JSR	FreeSample
	BSR.W	InitSampleManEntry
	BSR.W	DrawActualWave
LAB_074A:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
InstrLoopNumbDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrument
	MOVEA.L	A0,A1
	BSR.W	GetActualInstrName
	CMPI.B	#$01,131(A0)
	BEQ.S	LAB_074C
	SUBQ.W	#1,28(A1)
	SUBQ.B	#1,131(A0)
	BSR.W	DrawInstrParam
	BSR.W	UpdateChangedInstrType
LAB_074C:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
InstrLoopNumbUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrument
	MOVEA.L	A0,A1
	BSR.W	GetActualInstrName
	CMPI.B	#$ff,131(A0)
	BEQ.S	LAB_074E
	ADDQ.W	#1,28(A1)
	ADDQ.B	#1,131(A0)
	BSR.W	DrawInstrParam
	BSR.W	UpdateChangedInstrType
LAB_074E:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ToogleIFastPlay:
	MOVEM.L	A0,-(A7)
	BSR.W	GetActualInstrName
	BCHG	#2,142(A0)
	BSR.W	UpdateChangedInstrType
	BSR.W	DrawInstrName
	MOVEA.L	(A7)+,A0
	RTS
	DC.W	$0000
ToogleIPosTune:
	MOVEM.L	A0,-(A7)
	BSR.W	GetActualInstrName
	BCHG	#0,142(A0)
	BSR.W	UpdateChangedInstrType
	BSR.W	DrawInstrName
	MOVEA.L	(A7)+,A0
	RTS
	DC.W	$0000
ToogleINoDsp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	BCHG	#1,142(A0)
	BSR.W	UpdateChangedInstrType
	BSR.W	DrawInstrName
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetSilentInstr:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	CheckInstrument
	CMPI.B	#$ff,D0
	BEQ.S	LAB_0753
	BSR.W	GetActualInstrument
	CMPI.W	#$fffc,(A0)
	BEQ.S	LAB_0753
	CMPI.W	#$fff8,(A0)
	BEQ.S	LAB_0754
	MOVE.W	#$fff8,(A0)
	BSR.W	DrawInstrName
LAB_0753:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0754:
	BSR.W	UpdateChangedInstrType
	BSR.W	DrawActualWave
	BSR.W	DrawInstrName
	BRA.S	LAB_0753
SelectLoopType:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	DrawInstrumentReset
	MOVE.L	#$57563038,D0
	BSR.W	NGFindGadID
	DC.W	$4a88
	BEQ.S	LAB_0757
	JSR	CheckInstrument
	CMPI.B	#$ff,D0
	BEQ.S	LAB_0756
	MOVE.L	64(A0),D7
	TST.L	D7
	BEQ.S	LAB_0758
	CMPI.L	#$00000001,D7
	BEQ.S	LAB_0759
	BRA.S	LAB_075A
LAB_0756:
	BSR.W	DrawLoopType
	LEA	NGWin_Info(PC),A6
	MOVEA.L	(A6),A5
	MOVE.L	72(A5),D0
	DC.W	$4a8d
	BEQ.S	LAB_0757
	BSR.W	PreClipWIN
	BSR.W	NGWDrawWindowID
	BSR.W	NGDrawGadsWindowID
	BSR.W	DrawInstrName
	BSR.W	PostClipWIN
	BSR.W	DrawActualWave
LAB_0757:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0758:
	BSR.S	SetSimpleInstr
	BRA.S	LAB_0756
LAB_0759:
	BSR.S	SetLoopedInstr
	BRA.S	LAB_0756
LAB_075A:
	BSR.S	SetSustainedInstr
	BRA.S	LAB_0756
SetSimpleInstr:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	CheckInstrument
	CMPI.B	#$ff,D0
	BEQ.S	LAB_075C
	BSR.W	GetActualInstrName
	CLR.B	128(A0)
	BSR.W	UpdateChangedInstrType
LAB_075C:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetLoopedInstr:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	CheckInstrument
	CMPI.B	#$ff,D0
	BEQ.S	LAB_075F
	BSR.W	GetActualInstrName
LAB_075E:
	MOVE.B	#$04,128(A0)
	BSR.W	UpdateChangedInstrType
LAB_075F:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetSustainedInstr:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	CheckInstrument
	CMPI.B	#$ff,D0
	BEQ.S	LAB_0762
	BSR.W	GetActualInstrName
	MOVE.B	#$08,128(A0)
	TST.B	131(A0)
	BNE.S	LAB_0761
	MOVE.B	#$01,131(A0)
LAB_0761:
	BSR.W	UpdateChangedInstrType
LAB_0762:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
DrawLoopType:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#0,D2
	JSR	CheckInstrument
	CMPI.B	#$ff,D0
	BEQ.S	LAB_0764
	BSR.W	GetActualInstrName
	MOVEQ	#0,D2
	TST.B	128(A0)
	BEQ.S	LAB_0764
	MOVEQ	#1,D2
	CMPI.B	#$04,128(A0)
	BEQ.S	LAB_0764
	MOVEQ	#2,D2
LAB_0764:
	MOVE.L	#$57563038,D0
	CMP.W	LAB_1133,D2
	BEQ.S	LAB_0765
	MOVE.W	D2,LAB_1133
	BSR.W	NGSetPopGadID
LAB_0765:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
AndRegionXYWH:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$4a88
	BEQ.S	LAB_0768
	MOVEM.W	UmlaufRegion(PC),D0-D3
	LEA	LAB_0769(PC),A1
	MOVE.W	D0,(A1)
	MOVE.W	D1,2(A1)
	ADD.W	D0,D2
	ADD.W	D1,D3
	MOVE.W	D2,4(A1)
	MOVE.W	D3,6(A1)
	MOVEA.L	_GraphicsBase,A6
	JSR	-510(A6)
LAB_0767:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0768:
	BRA.S	LAB_0767
LAB_0769:
	ORI.B	#$00,D0
	ORI.W	#$0064,-(A4)
UmlaufRegion:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
PreClipWIN:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	_GraphicsBase,A6
	JSR	-516(A6)
	MOVE.L	D0,ClipWINRegion
	TST.L	D0
	BEQ.S	LAB_076D
	MOVEA.L	ClipWINRegion(PC),A0
	MOVEQ	#30,D0
	MOVEQ	#30,D1
	MOVEQ	#100,D2
	MOVEQ	#100,D3
	BSR.S	AndRegionXYWH
	MOVEA.L	(A5),A4
	MOVE.L	124(A4),ClipWINLayer
	DC.W	$4aba
	ORI.W	#$6712,(A2)+
	MOVEA.L	ClipWINLayer(PC),A0
	MOVEA.L	ClipWINRegion(PC),A1
	MOVEA.L	_LayersBase,A6
	JSR	-174(A6)
LAB_076C:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_076D:
	BRA.S	LAB_076C
PostClipWIN:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	ClipWINLayer(PC),A0
	DC.W	$4a88
	BEQ.S	LAB_076F
	SUBA.L	A1,A1
	MOVEA.L	_LayersBase,A6
	JSR	-174(A6)
	CLR.L	ClipWINLayer
LAB_076F:
	MOVEA.L	ClipWINRegion(PC),A0
	DC.W	$4a88
	BEQ.S	LAB_0771
	MOVEA.L	_GraphicsBase,A6
LAB_0770:
	JSR	-534(A6)
	CLR.L	ClipWINRegion
LAB_0771:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ClipWINLayer:
	ORI.B	#$00,D0
ClipWINRegion:
	ORI.B	#$00,D0
	DC.W	$0000
EventEDLock:
	NOT.B	EventED_STATUS+1
	BEQ.S	LAB_0776
	MOVE.L	#Eventon,AssText_TXT
LAB_0775:
	BSR.W	PrintAssTextF
	BRA.S	LAB_0777
LAB_0776:
	MOVE.L	#Eventoff,AssText_TXT
	BSR.W	PrintAssTextF
LAB_0777:
	RTS
TransResoDwn:
	SUBI.W	#$000c,TransWResoDepth
	RTS
TransResoUp:
	ADDI.W	#$000c,TransWResoDepth
	RTS
EnterColorOrgan:
	MOVEM.L	D0-D7/A0-A6,-(A7)
LAB_077B:
	CMPI.B	#$ff,CLIST_ENABLED
	BEQ.S	LAB_077D
	JSR	MakeCopperList
	MOVEA.L	CopperList_PTR,A0
	JSR	ActivateCopList
LAB_077C:
	MOVE.B	#$ff,CLIST_ENABLED
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_077D:
	JSR	SetOldCList
	CLR.B	CLIST_ENABLED
LAB_077E:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
RedrawPED:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$50544544,D0
	MOVE.L	#$50454432,D1
	BSR.W	NGRDrawAreaID
	BSR.W	AdjustActualPattEd
LAB_0780:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ClearPED:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$50544544,D0
	MOVE.L	#$50454432,D1
	BSR.W	NGRDrawAreaID
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ToogleViewDetail:
	NOT.B	PED_ViewDetail+2
	MOVE.L	#$0000000a,NOTELEN
	TST.B	PED_ViewDetail+2
	BEQ.S	LAB_0784
LAB_0783:
	MOVE.L	#$00000005,NOTELEN
LAB_0784:
	BSR.S	RedrawPED
	RTS
	DC.W	$0000
BuildSuperSupportTable:
	BSR.S	BuildSSTStatic
	BSR.W	BuildSSTDynamic
	RTS
BuildSSTStatic:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	SuperSupportTable_PTR,A0
	MOVE.L	ABSEXECBASE.W,1600(A0)
	MOVE.L	_IntuitionBase,1604(A0)
	MOVE.L	_DosBase,1608(A0)
	MOVE.L	_AslBase+2,1612(A0)
	MOVE.L	_GraphicsBase,1620(A0)
	MOVE.L	_ReqToolsBase+2,1616(A0)
	MOVE.L	#GetMem,(A0)
	MOVE.L	#FreeMem,4(A0)
	MOVE.L	#PrintHexLong,212(A0)
	MOVE.L	#WriteAssDecLong,204(A0)
LAB_0787:
	MOVE.L	#PrintAssText,200(A0)
	MOVE.L	#PrintAssDecByte,208(A0)
	MOVE.L	#GetStreamBufBytes,400(A0)
	MOVE.L	#GetFileName,112(A0)
LAB_0788:
	MOVE.L	#SetFileRequestPat,104(A0)
	MOVE.L	#SetFileRequestPath,108(A0)
	MOVE.L	#SimpleFileRequest,100(A0)
	MOVE.L	#FileLength,116(A0)
	MOVEQ	#0,D0
	MOVE.W	Processor_FLAGS(PC),D0
LAB_0789:
	MOVE.L	D0,1800(A0)
	MOVE.L	#$00007fff,1820(A0)
	MOVE.L	#$00000010,1824(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
BuildSSTDynamic:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	SuperSupportTable_PTR,A0
	JSR	GetStreamBufBytes
	MOVE.L	D0,1812(A0)
	JSR	GetSystemFreq
	MOVE.L	D0,1804(A0)
	MOVE.W	OverSamp_FLAG,D0
	EXT.L	D0
	MOVE.L	D0,1816(A0)
	MOVE.L	VexSpeed,D0
	MULU	#$0006,D0
	LSR.W	#2,D0
	MOVE.L	D0,1808(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
GetFileName:
	MOVEA.L	FinalFileNameRT_PTR,A0
	RTS
DSPPlugLoad:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	DSPPLUG_MATCH+1,A0
	JSR	SetFileRequestPat
	MOVEQ	#4,D0
	BSR.W	GetPathBuf
	LEA	DSPLoad_TXT+1,A0
	JSR	SimpleFileRequest
	BSR.W	SavePathBuf
	TST.W	D0
	BEQ.W	DSPPlugLoad_X
	MOVEA.L	FinalFileNameRT_PTR,A0
	BSR.W	ClipExtension
	LEA	LAB_13D5+1,A1
	BSR.W	AddExtention
	BSR.W	DSPPlugCleanup
	BSR.W	FlushCaches
	MOVE.L	#$000003ed,D0
	BSR.W	EasyDOpenFFN
	TST.L	D0
	BEQ.S	DSPPlugLoad_X
	BSR.S	GetFileName
	BSR.W	FileLength
	MOVE.L	D0,D7
	LEA	DSPPlugInMem_PTR+2(PC),A0
	MOVE.L	D0,4(A0)
	JSR	GetMem
	TST.L	D0
	BEQ.S	DSPPlugLoad_ERR
	MOVE.L	D7,D0
	MOVEA.L	DSPPlugInMem_PTR+2(PC),A0
	BSR.W	EasyDRead
	TST.L	D0
	BEQ.S	DSPPlugLoad_RERR
	BSR.W	FlushCaches
	MOVEA.L	DSPPlugInMem_PTR+2(PC),A0
	CMPI.L	#$53796d70,(A0)+
	BNE.S	DSPPlugLoad_RERR
	CMPI.L	#$686f6e69,(A0)+
	BNE.S	DSPPlugLoad_RERR
	CMPI.L	#$65204453,(A0)+
	BNE.S	DSPPlugLoad_RERR
	CMPI.L	#$5020506c,(A0)+
	BNE.S	DSPPlugLoad_RERR
	CMPI.L	#$7567696e,(A0)+
	BNE.S	DSPPlugLoad_RERR
	CMPI.W	#$0001,(A0)+
	BNE.S	DSPPlugLoad_RERR
	TST.W	(A0)+
	BNE.S	DSPPlugLoad_RERR
	BSR.W	EasyDClose
	BSR.S	AnalyzeDSPParamDef
	MOVE.B	#$ff,DSPPlug_INMEM+3
	BSR.W	ShowDSPPlugGui
DSPPlugLoad_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DSPPlugLoad_RERR:
	LEA	DSPPlugInMem_PTR+2(PC),A0
	MOVE.L	#$00010003,MEM_DEBUG_INFO
	CLR.L	LAB_109F
	JSR	FreeMem
DSPPlugLoad_ERR:
	LEA	NoDSPPlugMem_TXT+1,A0
	BSR.W	PrintAssText
LAB_0790:
	CLR.L	DSPGUIDefMem
	BSR.W	ShowDSPPlugGui
	BSR.W	EasyDClose
	BRA.S	DSPPlugLoad_X
NotifyDSPPlugIn:
	CMPI.B	#$ff,DSPPlug_INMEM+3
	BNE.S	LAB_0792
	CMPI.B	#$ff,DSPPLUG_STATUS+1
	BEQ.S	LAB_0793
LAB_0792:
	RTS
LAB_0793:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetDSPPlugInJL
	JSR	24(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
StrBgn:
	TST.B	(A0)+
	BNE.S	StrBgn
	RTS
	DC.W	$0000
AnalyzeDSPParamDef:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetDSPPlugInJL
	MOVEA.L	SuperSupportTable_PTR,A0
	JSR	(A6)
	LEA	DSPGUIDefMem,A2
	CLR.L	(A2)
	TST.B	(A0)
	BEQ.S	AnalDSPGUIDef_X
	LEA	16(A2),A1
	MOVE.L	A1,(A2)+
	MOVE.L	A1,(A2)+
	MOVEQ	#0,D7
LAB_0796:
	TST.B	(A0)
	BEQ.S	AnalDSPGUIDef_X
	MOVE.L	A1,(A2)
	MOVE.L	A0,(A1)
	BSR.S	StrBgn
	MOVE.L	(A0),D0
	MOVE.L	(A0),4(A1)
	ADDQ.L	#4,A0
	MOVE.L	(A0),D0
	MOVE.L	(A0),8(A1)
	ADDQ.L	#4,A0
	MOVE.L	(A0),D0
	MOVE.L	(A0),12(A1)
	ADDQ.L	#4,A0
	MOVE.L	D7,16(A1)
	ADDQ.L	#1,D7
	LEA	20(A1),A1
	BRA.S	LAB_0796
AnalDSPGUIDef_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ShowDSPPlugGui:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CMPI.B	#$ff,DSPPlug_INMEM+3
	BNE.S	LAB_079B
	MOVEA.L	DSPGUIDefMem,A5
	TST.L	DSPGUIDefMem
	BEQ.S	LAB_079B
LAB_0799:
	MOVEA.L	(A5),A0
	MOVE.L	#$53593935,D0
	MOVEQ	#10,D1
	BSR.S	NGODrawTextLen
	MOVE.L	4(A5),D2
	MOVE.L	#$53593938,D0
	BSR.W	NGODrawDecWord5Char
LAB_079A:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_079B:
	LEA	LAB_079C(PC),A0
	MOVE.L	#$53593935,D0
	BSR.W	NGODrawText
	LEA	LAB_079D+1(PC),A0
	MOVE.L	#$53593938,D0
	BSR.W	NGODrawText
	BRA.S	LAB_079A
LAB_079C:
	MOVE.L	11565(A5),-(A6)
LAB_079D:
	MOVE.L	11565(A5),-(A6)
	MOVE.L	0(A5),-(A6)
	DC.W	$0000
NGODrawTextLen:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	D0,D2
	BSR.W	NGRGetLen
	SUB.W	D0,D1
	NEG.W	D1
	LEA	LAB_079F(PC),A1
	CLR.B	(A1)
	JSR	AddString
	LEA	LAB_079F(PC),A0
	LEA	0(A0,D1.W),A0
	MOVE.L	D2,D0
	BSR.W	NGODrawText
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_079F:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
DSPPlugInMem_PTR:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$01,D0
	DC.W	$0000
DSPPlugOn:
	CMPI.B	#$ff,DSPPlug_INMEM+3
	BEQ.S	LAB_07A2
	RTS
LAB_07A2:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.B	#$ff,DSPPLUG_STATUS+1
	BSR.W	GetDSPPlugInJL
	JSR	28(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DSPPlugOff:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.B	DSPPLUG_STATUS+1
	TST.B	DSPPlug_INMEM+3
	BEQ.S	LAB_07A4
	BSR.W	GetDSPPlugInJL
	JSR	32(A6)
LAB_07A4:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
GetDSPGUIDefMemPtrs:
	MOVE.L	DSPGUIDefMem,D0
	MOVE.L	LAB_131A,D1
	MOVE.L	LAB_131B,D2
	RTS
DSPPlugReportValue:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CMPI.B	#$ff,DSPPlug_INMEM+3
	BNE.S	LAB_07A7
	TST.L	DSPGUIDefMem
	BEQ.S	LAB_07A7
	MOVEA.L	DSPGUIDefMem,A0
	MOVE.L	4(A0),D0
	MOVE.L	16(A0),D1
	BSR.W	GetDSPPlugInJL
	JSR	16(A6)
LAB_07A7:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
DSPPlugCleanup:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	DSPPlugOff
	TST.B	DSPPlug_INMEM+3
	BEQ.S	LAB_07AA
	BSR.W	GetDSPPlugInJL
	JSR	4(A6)
	CLR.B	DSPPlug_INMEM+3
	LEA	DSPPlugInMem_PTR+2(PC),A0
	MOVE.L	#$00010003,MEM_DEBUG_INFO
	CLR.L	LAB_109F
	JSR	FreeMem
LAB_07AA:
	CLR.L	DSPGUIDefMem
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
DSPParamPrev:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CMPI.B	#$ff,DSPPlug_INMEM+3
	BNE.S	LAB_07AC
	BSR.W	GetDSPGUIDefMemPtrs
	TST.L	D0
	BEQ.S	LAB_07AC
	CMP.L	D0,D1
	BEQ.S	LAB_07AC
	SUBI.L	#$00000014,DSPGUIDefMem
	BSR.W	ShowDSPPlugGui
LAB_07AC:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
DSPParamNext:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CMPI.B	#$ff,DSPPlug_INMEM+3
	BNE.S	LAB_07AE
	BSR.W	GetDSPGUIDefMemPtrs
	TST.L	D0
	BEQ.S	LAB_07AE
	CMP.L	D0,D2
	BEQ.S	LAB_07AE
	ADDI.L	#$00000014,DSPGUIDefMem
	BSR.W	ShowDSPPlugGui
LAB_07AE:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
DSPParamDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CMPI.B	#$ff,DSPPlug_INMEM+3
	BNE.S	LAB_07B1
	MOVEA.L	DSPGUIDefMem,A0
	TST.L	(A0)
	BEQ.S	LAB_07B1
	BSR.W	SetDecShiftKeyRaster
	MOVE.L	4(A0),D1
	SUB.L	D0,D1
	CMP.L	8(A0),D1
	BGE.S	LAB_07B0
	MOVE.L	8(A0),D1
LAB_07B0:
	MOVE.L	D1,4(A0)
	BSR.W	ShowDSPPlugGui
	BSR.W	DSPPlugReportValue
LAB_07B1:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
DSPParamUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CMPI.B	#$ff,DSPPlug_INMEM+3
	BNE.S	LAB_07B4
	MOVEA.L	DSPGUIDefMem,A0
	TST.L	(A0)
	BEQ.S	LAB_07B4
	BSR.W	SetDecShiftKeyRaster
	ADD.L	4(A0),D0
	CMP.L	12(A0),D0
	BLE.S	LAB_07B3
	MOVE.L	12(A0),D0
LAB_07B3:
	MOVE.L	D0,4(A0)
	BSR.W	ShowDSPPlugGui
	BSR.W	DSPPlugReportValue
LAB_07B4:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
GetDSPPlugInJL:
	MOVEA.L	DSPPlugInMem_PTR+2(PC),A6
	LEA	24(A6),A6
	RTS
	DC.W	$0000
ProcDSPPlugIn:
	BSR.S	GetDSPPlugInJL
	JSR	8(A6)
	RTS
LCom:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualNotePtr
	MOVE.B	(A0),NoteSave
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SCom:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualNotePtr
	MOVE.B	NoteSave(PC),(A0)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
LICom:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualNotePtr
	MOVE.B	3(A0),LAB_07BF+3
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
SICom:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualNotePtr
	MOVE.B	LAB_07BF+3(PC),3(A0)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LPCom:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualNotePtr
	MOVE.B	1(A0),LAB_07BF+1
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
SPCom:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	GetActualNotePtr
	MOVE.B	LAB_07BF+1(PC),1(A0)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
LVCom:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	GetActualNotePtr
	MOVE.B	2(A0),LAB_07BF+2
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SVCom:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	GetActualNotePtr
	MOVE.B	LAB_07BF+2(PC),2(A0)
	BSR.W	PatEdDrawActLine
	BSR.W	DrawEventStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NoteSave:
LAB_07BF:
	ORI.B	#$00,D0
	DC.W	$0000
InstrFineTuneDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	BSR.W	SetDecShiftKeyRaster
	SUB.B	D0,138(A0)
	BSR.W	UpdateChangedInstrType
	BSR.W	DrawInstrName
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
InstrFineTuneUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	BSR.W	SetDecShiftKeyRaster
	ADD.B	D0,138(A0)
	BSR.W	UpdateChangedInstrType
	BSR.W	DrawInstrName
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
InstrTuneDown:
LAB_07C5:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	MOVE.B	139(A0),D1
	CMPI.B	#$e8,D1
	BEQ.S	LAB_07C9
	BSR.S	SetOctaveKeyRaster
	SUB.B	D0,D1
	CMPI.B	#$e8,D1
	BGE.S	LAB_07C7
	MOVEQ	#-24,D1
LAB_07C7:
	MOVE.B	D1,139(A0)
	BSR.W	UpdateChangedInstrType
LAB_07C8:
	BSR.W	DrawInstrName
LAB_07C9:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
InstrTuneUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	MOVE.B	139(A0),D1
	CMPI.B	#$18,D1
	BEQ.S	LAB_07CC
	BSR.S	SetOctaveKeyRaster
	ADD.B	D0,D1
	CMPI.B	#$18,D1
	BLE.S	LAB_07CB
	MOVEQ	#24,D1
LAB_07CB:
	MOVE.B	D1,139(A0)
	BSR.W	UpdateChangedInstrType
	BSR.W	DrawInstrName
LAB_07CC:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetOctaveKeyRaster:
	MOVEQ	#1,D0
	CMPI.W	#$ffff,Shift_KEY+2
	BEQ.S	SetOctShiftRaster_X
	RTS
SetOctShiftRaster_X:
	MOVEQ	#0,D0
	MOVE.W	LAB_119F,D0
	RTS
SetDecShiftKeyRaster:
	MOVEQ	#1,D0
	CMPI.W	#$ffff,Shift_KEY+2
	BEQ.S	SetDecShiftRaster_X
	RTS
SetDecShiftRaster_X:
	MOVEQ	#10,D0
	RTS
	DC.W	$0000
SetPosNegShiftRaster:
	MOVEQ	#1,D0
	CMPI.W	#$ffff,Shift_KEY+2
	BNE.S	SetPosNegShiftRaster_X
	MOVEQ	#-1,D0
SetPosNegShiftRaster_X:
	RTS
InitMidi:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	DeInitMidi
	MOVE.L	#OpenCamd,AssText_TXT
	BSR.W	PrintAssTextF
	CLR.L	CAMDMidiNode+2
	TST.L	_CamdBase
	BNE.S	LAB_07D4
	MOVE.L	#NoCAMDlib,AssText_TXT
	BSR.W	PrintAssTextF
	BRA.W	LAB_07DB
LAB_07D4:
	LEA	CreateNode_TAGS(PC),A0
	MOVEA.L	_CamdBase,A6
	JSR	-42(A6)
	MOVE.L	D0,CAMDMidiNode+2
	TST.L	D0
	BEQ.S	LAB_07D6
	TST.L	D0
	BPL.S	LAB_07D7
	CLR.L	CAMDMidiNode+2
LAB_07D6:
	MOVE.L	#NoMidiNode,AssText_TXT
	BSR.W	PrintAssTextF
	BRA.S	LAB_07DB
LAB_07D7:
	MOVE.L	#MidiNodeOk,AssText_TXT
	BSR.W	PrintAssTextF
	MOVEA.L	CAMDMidiNode+2(PC),A0
	MOVEQ	#0,D0
	LEA	openmidilink_TAGS(PC),A1
	MOVEA.L	_CamdBase,A6
	JSR	-84(A6)
	MOVE.L	D0,CAMDMidiLinkIn+2
	TST.L	D0
	BEQ.S	LAB_07DA
LAB_07D9:
	CMPI.L	#$ffffffff,D0
	BEQ.S	LAB_07DA
	MOVE.L	#MidiLinkOk+3,AssText_TXT
	BSR.W	PrintAssTextF
	BRA.S	LAB_07DB
LAB_07DA:
	CLR.L	CAMDMidiLinkIn+2
	MOVE.L	#NoCamdMIDI,AssText_TXT
	BSR.W	PrintAssTextF
	BSR.S	DeInitMidi
LAB_07DB:
	CLR.L	MidiAKey
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
CAMDMidiNode:
	ORI.B	#$00,D0
CAMDMidiLinkIn:
	ORI.B	#$00,D0
	DC.W	$0000
CreateNode_TAGS:
LAB_07DE:
	OR.B	D0,D0
	DC.W	$0041
	DC.L	MidiName_TXT+1
	OR.B	D0,D0
	DC.W	$0048
	DC.W	$0000
	MOVE.L	(A0),-(A3)
	OR.B	D0,D0
	ORI.W	#$0000,D7
	MOVE.L	(A0),-(A3)
	OR.B	D0,D0
	ORI.W	#$0000,D5
	DC.W	$000e
	ORI.B	#$00,D0
openmidilink_TAGS:
	OR.B	D0,D0
	DC.W	$004e
	DC.L	MLInName+1
	OR.B	D0,D0
	DC.W	$0041
	DC.L	MLLocation
	OR.B	D0,D0
	DC.W	$004d
	ORI.B	#$00,D0
	ORI.B	#$00,D0
DeInitMidi:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	TST.L	_CamdBase
	BEQ.S	LAB_07E4
	DC.W	$4aba
	DC.W	$ffaa
LAB_07E2:
	BEQ.S	LAB_07E4
	MOVE.L	#ClMidiNode,AssText_TXT
	BSR.W	PrintAssTextF
	MOVEA.L	CAMDMidiNode+2(PC),A0
LAB_07E3:
	MOVEA.L	_CamdBase,A6
	JSR	-48(A6)
LAB_07E4:
	CLR.L	MidiAKey
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
CheckMidiMsg:
	MOVEM.L	D0-D7/A0-A6,-(A7)
LAB_07E6:
	CLR.L	MidiAKey
	TST.L	_CamdBase
	BEQ.W	LAB_07F6
	DC.W	$4aba
	DC.W	$ff66
	BEQ.W	LAB_07F6
LAB_07E7:
	DC.W	$4aba
	DC.W	$ff62
	BEQ.W	LAB_07F6
LAB_07E8:
	MOVEA.L	CAMDMidiNode+2(PC),A0
	MOVEA.L	midimsgbufferPtr(PC),A1
	DC.W	$4a89
	BEQ.W	LAB_07F6
	CLR.L	(A1)
	CLR.L	4(A1)
LAB_07E9:
	MOVEA.L	_CamdBase,A6
	JSR	-144(A6)
	TST.L	D0
	BEQ.W	LAB_07F6
	MOVEA.L	midimsgbufferPtr(PC),A0
	MOVE.B	(A0),D7
LAB_07EA:
	CMP.B	MidiKeyOnMsg+1(PC),D7
	BNE.S	LAB_07EE
	TST.B	2(A0)
	BEQ.S	LAB_07E8
	MOVEQ	#0,D0
	MOVE.B	1(A0),D0
	SUBI.B	#$24,D0
	MOVE.W	D0,MidiAKey
	MOVE.B	2(A0),D0
LAB_07EB:
	MOVE.W	D0,LAB_07F8+2
	MULU	#$0064,D0
	DIVU	#$0080,D0
	DC.W	$4aba
	ADD.W	D2,D4
	BEQ.S	LAB_07EC
	MOVE.L	KeyboardEditPunch(PC),D0
LAB_07EC:
	MOVE.W	D0,KeyboardPunch
	BSR.W	PlayMidiKeyboard
	BRA.S	LAB_07E8
LAB_07EE:
	CMP.B	MidiPrgChange+2(PC),D7
	BNE.S	LAB_07EF
	MOVEQ	#0,D0
	MOVE.B	1(A0),D0
	ANDI.W	#$007f,D0
	BSR.W	GotoInstrNum
	BRA.W	LAB_07E8
LAB_07EF:
	CMPI.B	#$fa,(A0)
	BEQ.S	LAB_07F2
	CMPI.B	#$fb,(A0)
	BEQ.S	LAB_07F3
	CMPI.B	#$fc,(A0)
	BEQ.S	LAB_07F4
	MOVE.L	#UnknownMsgIn+1,AssText_TXT
	BSR.W	PrintAssTextF
	MOVEA.L	A0,A1
LAB_07F1:
	MOVEQ	#1,D0
	BSR.W	PrintHexBlock
	BRA.W	LAB_07E8
LAB_07F2:
	JSR	PlayActualSong
	BRA.W	LAB_07E8
LAB_07F3:
	JSR	PlayFromActualPos
	BRA.W	LAB_07E8
LAB_07F4:
	JSR	StopSong2
	BRA.W	LAB_07E8
LAB_07F6:
	MOVE.L	KeyboardEditPunch(PC),D0
	MOVE.W	D0,KeyboardPunch
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
midimsgbufferPtr:
	ORI.B	#$00,D0
	DC.W	$0000
	MOVE.L	(A0),-(A3)
	ORI.B	#$00,D1
MidiAKey:
LAB_07F8:
	ORI.B	#$00,D0
KeyboardPunch:
	ORI.W	#$0000,-(A4)
SetOS14Bit:
	MOVEM.L	D0-D7/A0-A6,-(A7)
LAB_07FC:
	MOVE.W	#$ffff,OverSamp_FLAG
	MOVE.L	#CopyBackStreamOS14Bit_Stereo,COPYBACK_JR
	BSR.W	RecalcFreqSystem
	BSR.W	ShowMainTitle
	MOVE.W	#$00ff,ADKCON
	BSR.W	AdjustAudioRegs
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetOS9Bit:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	#$ffff,OverSamp_FLAG
	MOVE.L	#CopyBackStreamOS9Bit_Stereo,COPYBACK_JR
	BSR.W	RecalcFreqSystem
	BSR.W	ShowMainTitle
	MOVE.W	#$00ff,ADKCON
	BSR.W	AdjustAudioRegs
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetStereo9Mode:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	SetZeroVolume
	CLR.W	OverSamp_FLAG
	BSR.W	RecalcFreqSystem
	MOVE.L	#CopyBackStream9Bit_Stereo,COPYBACK_JR
	BSR.W	ShowMainTitle
	MOVE.W	#$00ff,ADKCON
	BSR.S	AdjustAudioRegs
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
LAB_07FF:
	DC.L	SetStereo14Mode
StartupMode:
	DC.W	$4aba
	DC.W	$fffa
	BNE.S	StartupMode_do
	RTS
StartupMode_do:
	MOVEM.L	A0,-(A7)
	MOVEA.L	LAB_07FF(PC),A0
	JSR	(A0)
	CLR.L	LAB_07FF
	MOVEA.L	(A7)+,A0
	RTS
SetStereo14Mode:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.W	OverSamp_FLAG
	BSR.W	RecalcFreqSystem
	MOVE.L	#CopyBackStream14Bit_Stereo,COPYBACK_JR
	BSR.W	ShowMainTitle
	BSR.S	AdjustAudioRegs
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetZeroVolume:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#0,D0
	MOVEQ	#0,D1
	BRA.S	setvol_IN
	RTS
AdjustAudioRegs:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#64,D0
	MOVEQ	#64,D1
setvol_IN:
	CMPI.L	#CopyBackStream14Bit_Stereo,COPYBACK_JR
	BEQ.S	AdjustAudioRegs_14Bit
	CMPI.L	#CopyBackStreamOS14Bit_Stereo,COPYBACK_JR
	BEQ.S	AdjustAudioRegs_14Bit
	CMPI.L	#CopyBackStream14Bit_Surround,COPYBACK_JR
	BEQ.S	AdjustAudioRegs_14Bit
	CMPI.L	#CopyBackStream14Bit_Left,COPYBACK_JR
	BEQ.S	AdjustAudioRegs_14Bit
	CMPI.L	#CopyBackStream14Bit_Right,COPYBACK_JR
	BEQ.S	AdjustAudioRegs_14Bit
	CMPI.L	#CopyBackStream14Bit_Mono,COPYBACK_JR
	BEQ.S	AdjustAudioRegs_14Bit
	BRA.S	AdjustAudioRegs_do
AdjustAudioRegs_14Bit:
	MOVEQ	#1,D1
AdjustAudioRegs_do:
	MOVE.W	D0,AUD0VOL
	NOP
	MOVE.W	D0,AUD1VOL
	NOP
	MOVE.W	D1,AUD2VOL
	NOP
	MOVE.W	D1,AUD3VOL
	NOP
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
SetMonoSurrMode:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.W	OverSamp_FLAG
	BSR.W	RecalcFreqSystem
	MOVE.L	#CopyBackStream14Bit_Surround,COPYBACK_JR
	BSR.W	ShowMainTitle
	BSR.W	AdjustAudioRegs
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
SetMonoMode:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.W	OverSamp_FLAG
	BSR.W	RecalcFreqSystem
	MOVE.L	#CopyBackStream14Bit_Mono,COPYBACK_JR
	BSR.W	ShowMainTitle
	BSR.W	AdjustAudioRegs
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
SetLeftSurrMode:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.W	OverSamp_FLAG
	BSR.S	RecalcFreqSystem
	MOVE.L	#CopyBackStream14Bit_Left,COPYBACK_JR
	BSR.W	ShowMainTitle
	BSR.W	AdjustAudioRegs
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetRightSurrMode:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.W	OverSamp_FLAG
	BSR.S	RecalcFreqSystem
	MOVE.L	#CopyBackStream14Bit_Right,COPYBACK_JR
	BSR.W	ShowMainTitle
	BSR.W	AdjustAudioRegs
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
RecalcFreqBase:
	MOVEM.L	D0,-(A7)
	MOVE.L	VexPeriod,D0
	MULU	#$0083,D0
	TST.W	OverSamp_FLAG
	BEQ.S	LAB_080D
	LSL.L	#1,D0
LAB_080D:
	DC.W	$4c7a
	DC.W	$0000
	ROL.B	#3,D6
	MOVE.L	D0,System_FreqBase
	MOVEM.L	(A7)+,D0
	RTS
	DC.W	$0000
RecalcFreqSystem:
	BSR.S	RecalcFreqBase
	JSR	BuildFreqList
	BSR.W	BuildSSTDynamic
	RTS
	DC.W	$0000
RecordMacro:
	JSR	ToogleRecordMsg
	CMPI.W	#$ffff,AnalyzeMsgRECORD_FLAG
	BNE.S	LAB_0810
	JSR	AnalyzeMsgInitRecord
LAB_0810:
	BSR.W	ShowMainTitle
	RTS
ReplayMacro:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	BackupPattern
	BSR.W	BackupPatternOff
	JSR	ForceStopRecordMsg
	BSR.W	ShowMainTitle
	JSR	ReplayRecordedMsg
	BSR.W	DrawEventStatus
	BSR.W	PatEdDrawPattern
	BSR.W	BackupPatternOn
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ConvertHexLine:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	EXG	A0,A1
	MOVE.L	D0,D1
	SUBQ.W	#1,D1
DrawHexBlockL:
	MOVE.L	(A1)+,D0
	BSR.S	ConvertToHexLong
	ADDQ.L	#8,A0
	DBF	D1,DrawHexBlockL
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ConvertDumpLine:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A0,A2
	EXG	A0,A1
	MOVE.L	D0,D1
	SUBQ.W	#1,D1
	MOVE.W	D1,D2
DrawDumpL:
	MOVE.L	(A1)+,D0
	BSR.S	ConvertToHexLong
	ADDQ.L	#8,A0
	MOVE.B	#$20,(A0)+
	DBF	D1,DrawDumpL
	MOVE.B	#$20,(A0)+
DrawDumpL2:
	MOVE.B	(A2)+,(A0)+
	MOVE.B	(A2)+,(A0)+
	MOVE.B	(A2)+,(A0)+
	MOVE.B	(A2)+,(A0)+
	DBF	D2,DrawDumpL2
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ConvertToHexLong:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#7,D2
	LEA	HexList(PC),A1
CHLloop:
	ROL.L	#4,D0
	MOVE.W	D0,D1
	ANDI.W	#$000f,D1
	MOVE.B	0(A1,D1.W),(A0)+
	DBF	D2,CHLloop
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawDecByte:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	ConvertToDecByte
	LEA	DecByteSave,A0
	MOVEQ	#3,D0
	MOVEA.L	_GraphicsBase,A6
	JSR	-60(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
DrawSignDecByte:
	TST.B	D0
	BPL.S	DrawDecByte
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	ConvertToSignDecByte
	LEA	SignDecByte_TXT(PC),A0
	MOVEQ	#3,D0
	MOVEA.L	_GraphicsBase,A6
	JSR	-60(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SignDecByte_TXT:
	MOVE.L	0(A0,D3.W),-(A6)
ConvertToSignDecByte:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	SignDecByte_TXT(PC),A0
	MOVE.B	#$20,(A0)
	TST.B	D0
	BPL.S	LAB_081E
	CMPI.B	#$9c,D0
	BGT.S	LAB_081D
	MOVE.B	#$3d,(A0)
	NEG.B	D0
	BRA.S	LAB_081E
LAB_081D:
	MOVE.B	#$2d,(A0)
	NEG.B	D0
LAB_081E:
	JSR	ConvertToDecByte
	LEA	DecByteSave,A2
	MOVE.B	1(A2),1(A0)
	MOVE.B	2(A2),2(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
DrawSignDecByteXY:
	MOVEM.L	D0,-(A7)
	BSR.W	GFX_Move
	MOVE.W	D2,D0
	ANDI.L	#$000000ff,D0
	BSR.S	DrawSignDecByte
	MOVEM.L	(A7)+,D0
	RTS
DrawDecByteXY:
	MOVEM.L	D0,-(A7)
	BSR.W	GFX_Move
	MOVE.W	D2,D0
	ANDI.L	#$000000ff,D0
	BSR.W	DrawDecByte
	MOVEM.L	(A7)+,D0
	RTS
	DC.W	$0000
WriteAssNum:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	AssNum(PC),A0
	CLR.B	4(A0)
	BSR.W	AddString3Word
	MOVE.L	#AssNum,AssText_TXT
	BSR.W	PrintAssTextF
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
AssNum:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
WriteAssDecLong:
	MOVEM.L	A0,-(A7)
	LEA	DecLongSave(PC),A0
	BSR.W	ConvertToDecLong
	CLR.B	10(A0)
	MOVE.L	#DecLongSave,AssText_TXT
	BSR.W	PrintAssTextF
	MOVEA.L	(A7)+,A0
	RTS
PrintRenderInfoSize:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$33fc
	CLR.B	-(A0)
	DC.L	LAB_0828+1
	MOVEQ	#0,D7
	CMPI.L	#$00003e80,D0
	BLS.S	LAB_0825
	DC.W	$33fc
	DC.W	$4b62
	DC.L	LAB_0828+1
	MOVEQ	#1,D7
	DC.W	$4c7c
	ORI.B	#$00,D0
	BSET	D1,3200(A0)
	DC.W	$0000
	DC.W	$1388
	BCS.S	LAB_0825
	DC.W	$33fc
	DC.W	$4d62
	DC.L	LAB_0828+1
	DC.W	$4c7c
	ORI.B	#$00,D0
	BSET	D1,32258(A0)
LAB_0825:
	SWAP	D7
	MOVE.W	D0,D7
	DC.W	$beba
	DC.W	$002f
	BEQ.S	LAB_0826
	LEA	LAB_0827(PC),A0
	BSR.W	ConvertToDecLong
	MOVE.L	#LAB_0827,AssText_TXT
	BSR.W	PrintAssTextF
LAB_0826:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0827:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_0828:
	MOVEA.L	D2,A0
	MOVE.L	D0,D0
RIlastvalue:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
AddString3Word:
	MOVEM.L	A1,-(A7)
	MOVEA.L	A0,A1
	LEA	DecWordSave(PC),A0
	JSR	ConvertToDecWord
	LEA	LAB_0835+2(PC),A0
	MOVE.B	(A0)+,(A1)+
	MOVE.B	(A0)+,(A1)+
	MOVE.B	(A0)+,(A1)+
	MOVE.B	#$20,(A1)+
	MOVEA.L	A1,A0
	MOVEA.L	(A7)+,A1
	RTS
AddString3Word2:
	MOVEM.L	A0-A1,-(A7)
	MOVEA.L	A0,A1
	LEA	DecWordSave(PC),A0
	JSR	ConvertToDecWord
	LEA	LAB_0835+2(PC),A0
	MOVE.B	(A0)+,(A1)+
	MOVE.B	(A0)+,(A1)+
	MOVE.B	(A0),(A1)
	MOVEM.L	(A7)+,A0-A1
	RTS
DecWordXY3Char:
	MOVEM.L	D0-D1/A0-A1/A6,-(A7)
	BSR.W	GFX_Move
	MOVE.W	D2,D0
	LEA	DecWordSave(PC),A0
	JSR	ConvertToDecWord
	MOVEQ	#3,D0
	LEA	LAB_0835+2(PC),A0
	MOVEA.L	_GraphicsBase,A6
	JSR	-60(A6)
	MOVEM.L	(A7)+,D0-D1/A0-A1/A6
	RTS
	DC.W	$0000
DrawDecWordXY:
	MOVEM.L	D0,-(A7)
	BSR.W	GFX_Move
	MOVE.W	D2,D0
	BSR.S	DrawDecWord
	MOVEM.L	(A7)+,D0
	RTS
	DC.W	$0000
ConvertToDecLong:
	MOVEM.L	D0-D5/A0-A1,-(A7)
	MOVEQ	#48,D5
	MOVE.L	D0,D2
	MOVEQ	#0,D1
	MOVEA.L	A0,A1
	LEA	10(A0),A0
LAB_082F:
	MOVE.W	#$0009,D4
DecLSLOOP:
	DC.W	$4c7c
	MOVE.L	D1,D2
	ORI.B	#$0a,D0
	MOVE.B	D1,D3
	ANDI.B	#$0f,D3
	ADD.B	D5,D3
	MOVE.B	D3,-(A0)
	MOVEQ	#0,D1
	DBF	D4,DecLSLOOP
LAB_0831:
	MOVEQ	#8,D0
DecLongClr_L:
	CMP.B	(A1),D5
	BNE.S	DecLongClr_X
	MOVE.B	#$20,(A1)+
	DBF	D0,DecLongClr_L
DecLongClr_X:
	MOVEM.L	(A7)+,D0-D5/A0-A1
	RTS
DrawDecWord:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	DecWordSave(PC),A0
	JSR	ConvertToDecWord
	MOVEQ	#5,D0
	MOVEA.L	_GraphicsBase,A6
	JSR	-60(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DecWordSave:
LAB_0835:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
DrawDecLong:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GFX_Move
	LEA	DecLongSave(PC),A0
	MOVE.L	D2,D0
	BSR.S	ConvertToDecLong
	MOVEQ	#10,D0
	MOVEA.L	_GraphicsBase,A6
	JSR	-60(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DecLongSave:
	ORI.B	#$00,D0
LAB_083A:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.W	$0000
DrawHexLong:
	MOVEM.L	D0-D2/A0-A3/A5-A6,-(A7)
	MOVEA.L	A1,A5
	LEA	HexLongSave(PC),A2
	MOVE.W	#$0007,D2
WHLloop:
	LEA	HexList(PC),A3
	ROL.L	#4,D0
	MOVE.L	D0,D1
	ANDI.L	#$0000000f,D1
	MOVE.B	0(A3,D1.W),(A2)+
	DBF	D2,WHLloop
	LEA	HexLongSave(PC),A0
	MOVEQ	#8,D0
	MOVEA.L	A5,A1
	MOVEA.L	_GraphicsBase,A6
	JSR	-60(A6)
	MOVEM.L	(A7)+,D0-D2/A0-A3/A5-A6
	RTS
HexList:
	DC.W	$3031
	DC.W	$3233
	DC.W	$3435
	MOVE.W	57(A7,D3.L),D3
	DC.W	$4142
	DC.W	$4344
	DC.W	$4546
HexLongSave:
	MOVE.L	11822(A6),D7
	MOVE.L	11822(A6),D7
DrawHexLongXY:
	BSR.S	GFX_Move
	EXG	D0,D2
	BSR.S	DrawHexLong
	EXG	D0,D2
	RTS
	DC.W	$0000
DrawText:
	MOVEM.L	D0-D1/A0-A1/A6,-(A7)
	JSR	GetLen
	MOVEA.L	_GraphicsBase,A6
	JSR	-60(A6)
	MOVEM.L	(A7)+,D0-D1/A0-A1/A6
	RTS
TextLen:
	MOVEM.L	D1/A0-A1/A6,-(A7)
	MOVEA.L	_GraphicsBase,A6
	JSR	-54(A6)
	MOVEM.L	(A7)+,D1/A0-A1/A6
	RTS
	DC.W	$0000
DrawTextXY:
	BSR.S	GFX_Move
	BSR.S	DrawText
	RTS
	DC.W	$0000
GFX_WritePixel:
	MOVEM.L	D0-D1/A0-A1/A6,-(A7)
	MOVEA.L	_GraphicsBase,A6
	JSR	-324(A6)
	MOVEM.L	(A7)+,D0-D1/A0-A1/A6
	RTS
GFX_Text:
	MOVEM.L	D0-D1/A0-A1/A6,-(A7)
	MOVEA.L	_GraphicsBase,A6
	JSR	-60(A6)
	MOVEM.L	(A7)+,D0-D1/A0-A1/A6
	RTS
GFX_Move:
	MOVEM.L	D0-D1/A0-A1/A6,-(A7)
	MOVEA.L	_GraphicsBase,A6
	JSR	-240(A6)
	MOVEM.L	(A7)+,D0-D1/A0-A1/A6
	RTS
DrawLine:
	BSR.S	GFX_Move
	EXG	D2,D0
	EXG	D3,D1
	BSR.S	GFX_Draw
	EXG	D2,D0
	EXG	D3,D1
	RTS
	DC.W	$0000
GFX_Draw:
	MOVEM.L	D0-D1/A0-A1/A6,-(A7)
	MOVEA.L	_GraphicsBase,A6
	JSR	-246(A6)
	MOVEM.L	(A7)+,D0-D1/A0-A1/A6
	RTS
GFX_APen:
	MOVEM.L	D0-D1/A0-A1/A6,-(A7)
	MOVEA.L	_GraphicsBase,A6
	JSR	-342(A6)
	MOVEM.L	(A7)+,D0-D1/A0-A1/A6
	RTS
GFX_BPen:
	MOVEM.L	D0-D1/A0-A1/A6,-(A7)
	MOVE.W	D0,OLD_BPEN
	MOVEA.L	_GraphicsBase,A6
	JSR	-348(A6)
	MOVEM.L	(A7)+,D0-D1/A0-A1/A6
	RTS
OLD_BPEN:
	DC.W	$0000
GFX_DrMd:
	MOVEM.L	D0-D1/A0-A1/A6,-(A7)
	DC.W	$4a89
	BEQ.S	LAB_084D
	MOVEA.L	_GraphicsBase,A6
	JSR	-354(A6)
LAB_084D:
	MOVEM.L	(A7)+,D0-D1/A0-A1/A6
	RTS
Normal0Mode:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#0,D0
	BSR.S	GFX_DrMd
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
NormalMode:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#1,D0
	BSR.S	GFX_DrMd
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
GetProcessor:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	EXECBASE+2,A6
	MOVE.W	296(A6),D0
	CLR.B	Processor_FLUSH+2
	BTST	#3,D0
	BEQ.S	No040Processor
	MOVE.B	#$ff,Processor_FLUSH+2
No040Processor:
	MOVE.W	D0,Processor_FLAGS
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
Processor_FLAGS:
Processor_FLUSH:
	ORI.B	#$00,D0
	DC.W	$0000
FlushCaches:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-636(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
BuildLineSample_SRCNUMB:
BuildLineINFO_PTR:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ANDI.B	#$01,D0
	DC.W	$0000
GetLoopStep:
	MOVEM.L	D0-D1/D3/A0,-(A7)
	BSR.W	GetActualInstrument
	MOVE.L	12(A0),D0
	MOVE.L	#$00640000,D1
	DC.W	$4c40
	MOVE.B	D1,D0
	MOVE.L	D1,D0
	TST.L	D0
	BNE.S	LAB_0858
	MOVEQ	#1,D0
LAB_0858:
	CMPI.W	#$ffff,Shift_KEY+2
	BNE.S	LAB_085A
	MOVE.L	LOOPSTEPFAK(PC),D3
	DC.W	$4c03
	DC.W	$0000
	MULU	#$0021,D3
	LSR.L	#5,D3
	ADDQ.L	#1,D3
	CMPI.L	#$00010000,D3
	BCS.S	LAB_0859
	MOVE.L	#$0000ffff,D3
LAB_0859:
	MOVE.L	D3,LOOPSTEPFAK
	BRA.S	LAB_085B
LAB_085A:
	MOVE.L	#$00000003,LOOPSTEPFAK
LAB_085B:
	MOVE.L	D0,D2
	LSL.L	#1,D2
	MOVEM.L	(A7)+,D0-D1/D3/A0
	RTS
LOOPSTEPFAK:
	ORI.B	#$03,D0
	DC.W	$0000
LoopLeft:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	TST.B	(A0)
	BEQ.S	LAB_0860
	BSR.S	GetLoopStep
	BTST	#4,140(A0)
	BEQ.S	LAB_085E
	MOVE.B	#$ff,QuickLoopRedraw
LAB_085E:
	BSET	#4,140(A0)
	BSR.W	GetNewLoop
	SUB.L	D2,D0
	BPL.S	LAB_085F
	ADD.L	D2,D0
	MOVE.L	D0,D2
	MOVEQ	#0,D0
LAB_085F:
	ADD.L	D2,D1
	BSR.W	SetNewLoop
	BSR.W	ForceUpdateActInstrType
	BSR.W	DrawInstrument
LAB_0860:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
LoopRight:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	TST.B	(A0)
	BEQ.S	LAB_0864
	BSR.W	GetLoopStep
	BTST	#4,140(A0)
	BEQ.S	LAB_0862
	MOVE.B	#$ff,QuickLoopRedraw
LAB_0862:
	BSET	#4,140(A0)
	BSR.W	GetNewLoop
	ADD.L	D2,D0
	SUB.L	D2,D1
	BPL.S	LAB_0863
	ADD.L	D2,D1
	SUB.L	D2,D0
LAB_0863:
	BSR.W	SetNewLoop
	BSR.W	ForceUpdateActInstrType
	BSR.W	DrawInstrument
LAB_0864:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
QuickLoopRedraw:
	DC.W	$0000
LoopSmaller:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	TST.B	(A0)
	BEQ.S	LAB_0869
	BSR.W	GetLoopStep
	BTST	#4,140(A0)
	BEQ.S	LAB_0867
	MOVE.B	#$ff,QuickLoopRedraw
LAB_0867:
	BSET	#4,140(A0)
	BSR.W	GetNewLoop
	SUB.L	D2,D1
	BMI.S	LAB_086A
	TST.L	D1
	BEQ.S	LAB_086A
LAB_0868:
	BSR.W	SetNewLoop
	BSR.W	ForceUpdateActInstrType
	BSR.W	DrawInstrument
LAB_0869:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_086A:
	ADD.L	D2,D1
	BRA.S	LAB_0868
LoopLarger:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	TST.B	(A0)
	BEQ.S	LAB_086E
	BSR.W	GetLoopStep
	BTST	#4,140(A0)
	BEQ.S	LAB_086C
	MOVE.B	#$ff,QuickLoopRedraw
LAB_086C:
	BSET	#4,140(A0)
	BSR.W	GetNewLoop
	ADD.L	D2,D1
	MOVE.L	D1,D3
	ADD.L	D0,D3
	CMPI.L	#$00640000,D3
	BLS.S	LAB_086D
	MOVE.L	#$00640000,D3
	SUB.L	D0,D3
	MOVE.L	D3,D1
LAB_086D:
	BSR.W	SetNewLoop
	BSR.W	ForceUpdateActInstrType
	BSR.W	DrawInstrument
LAB_086E:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
RangeClr:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	BCLR	#0,146(A0)
	CLR.B	147(A0)
	CLR.B	148(A0)
	BSR.W	DrawInstrName
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
RangeLoop:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	BSET	#0,146(A0)
	MOVE.B	129(A0),147(A0)
	MOVE.B	130(A0),148(A0)
	BSR.W	DrawInstrName
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetRvsLineSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	TST.B	(A0)
	BEQ.S	LAB_0872
	BCHG	#0,140(A0)
	BSR.W	ReMakeSample
	BSR.W	DrawInstrName
LAB_0872:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetMirrSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	TST.B	(A0)
	BEQ.S	LAB_0874
	BCHG	#2,140(A0)
	BSR.W	ReMakeSample
	BSR.W	DrawInstrName
LAB_0874:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetFilter:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	TST.B	(A0)
	BEQ.S	LAB_0876
	BSR.W	SetPosNegShiftRaster
	ADD.B	D0,141(A0)
	BSR.W	ReMakeSample
	BSR.W	DrawInstrName
LAB_0876:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetFilter2:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	TST.B	(A0)
	BEQ.S	LAB_0878
	MOVEA.L	A0,A2
	MOVE.B	141(A2),D0
	DC.W	$49c0
	LEA	EditBuf,A0
	MOVE.L	D0,(A0)
	LEA	LPFilter_TXT+1,A1
	MOVEQ	#-32,D1
	MOVEQ	#127,D2
	BSR.W	ReqMinMaxLong
	TST.W	D0
	BEQ.S	LAB_0878
	MOVE.L	(A0),D0
	MOVE.B	D0,141(A2)
	BSR.W	ReMakeSample
	BSR.W	DrawInstrName
LAB_0878:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetSampleVolFade:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	TST.B	(A0)
	BEQ.S	LAB_087B
	MOVEA.L	A0,A2
	CLR.B	170(A2)
	MOVEM.L	A0,-(A7)
	LEA	SampleVFade+1,A0
	BSR.W	NGSetStatusText
	MOVEA.L	(A7)+,A0
	LEA	LAB_087D(PC),A0
	LEA	SampleVFadeBgn,A1
	MOVEQ	#0,D1
	MOVEQ	#100,D2
	BSR.W	ReqMinMaxLong
	TST.W	D0
	BEQ.S	LAB_087C
	LEA	LAB_087E(PC),A0
	LEA	SampleVFadeEnd+3,A1
	MOVEQ	#0,D1
	MOVEQ	#100,D2
	BSR.W	ReqMinMaxLong
	TST.W	D0
	BEQ.S	LAB_087C
	MOVE.B	#$02,170(A2)
	MOVE.L	LAB_087D(PC),D2
	MOVE.B	D2,171(A2)
	MOVE.L	LAB_087E(PC),D2
	MOVE.B	D2,172(A2)
LAB_087A:
	BSR.W	ReMakeSample
	BSR.W	DrawInstrName
LAB_087B:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_087C:
	MOVEM.L	A0,-(A7)
	LEA	SampleVFadeClr,A0
	BSR.W	NGSetStatusText
	MOVEA.L	(A7)+,A0
	BRA.S	LAB_087A
LAB_087D:
	ORI.B	#$64,D0
LAB_087E:
	ORI.B	#$00,D0
	ORI.B	#$64,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
SetResoFilter:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#76,D6
	MOVE.B	D6,ResoFilterLP
	MOVE.B	D6,ResoFilterLPb+1
	MOVE.B	D6,ResoFilterAbort
	MOVE.B	D6,ResoFilterSweep+1
	MOVE.B	D6,LAB_170F+1
	BSR.W	GetActualInstrName
	TST.B	(A0)
LAB_0880:
	BEQ.W	LAB_0885
	MOVEA.L	A0,A2
	CLR.B	160(A2)
	MOVEQ	#0,D7
	CMPI.W	#$ffff,Shift_KEY+2
	BEQ.W	SetResoFilterHP
	MOVEM.L	A0,-(A7)
	LEA	ResoFilterLP,A0
	BSR.W	NGSetStatusText
	MOVEA.L	(A7)+,A0
	LEA	LAB_0888(PC),A0
	LEA	LPResoFilter_TXT,A1
	MOVEQ	#0,D1
	MOVE.L	#$000000ff,D2
	BSR.W	ReqMinMaxLong
	TST.W	D0
	BEQ.W	LAB_0886
	LEA	LAB_0889(PC),A0
LAB_0881:
	LEA	LPResoFilterB_TXT,A1
	MOVEQ	#0,D1
	MOVE.L	#$000000ff,D2
	BSR.W	ReqMinMaxLong
	TST.W	D0
	BEQ.W	LAB_0886
	MOVEQ	#1,D7
	MOVE.B	#$01,161(A2)
	MOVE.L	LAB_0888(PC),D0
	MOVE.B	D0,162(A2)
	MOVE.L	LAB_0889(PC),D0
	MOVE.B	D0,163(A2)
	MOVEM.L	A0,-(A7)
	LEA	ResoFilterLPb+1,A0
	BSR.W	NGSetStatusText
	MOVEA.L	(A7)+,A0
	LEA	LAB_088A(PC),A0
	LEA	LPResoFilter_TXT,A1
LAB_0882:
	MOVEQ	#0,D1
	MOVE.L	#$000000ff,D2
	BSR.W	ReqMinMaxLong
	TST.W	D0
	BEQ.S	LAB_0887
	LEA	LAB_088B(PC),A0
	LEA	LPResoFilterB_TXT,A1
	MOVEQ	#0,D1
	MOVE.L	#$000000ff,D2
	BSR.W	ReqMinMaxLong
	TST.W	D0
	BEQ.S	LAB_0887
	MOVEQ	#5,D7
	MOVE.B	#$02,161(A2)
	MOVE.L	LAB_088A(PC),D0
	MOVE.B	D0,164(A2)
	MOVE.L	LAB_088B(PC),D0
	MOVE.B	D0,165(A2)
	MOVEM.L	A0,-(A7)
LAB_0883:
	LEA	ResoFilterSweep+1,A0
	BSR.W	NGSetStatusText
	MOVEA.L	(A7)+,A0
LAB_0884:
	MOVE.B	D7,160(A2)
	BSR.W	ReMakeSample
	BSR.W	DrawInstrName
LAB_0885:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0886:
	MOVEM.L	A0,-(A7)
	LEA	ResoFilterAbort,A0
	BSR.W	NGSetStatusText
	MOVEA.L	(A7)+,A0
	BRA.S	LAB_0884
LAB_0887:
	MOVEM.L	A0,-(A7)
	LEA	ResoFilterStatic,A0
	BSR.W	NGSetStatusText
	MOVEA.L	(A7)+,A0
	BRA.S	LAB_0884
LAB_0888:
	ORI.B	#$1e,D0
LAB_0889:
	ORI.B	#$00,D0
LAB_088A:
	ORI.B	#$1e,D0
LAB_088B:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
SetResoFilterHP:
	MOVEQ	#72,D6
	MOVE.B	D6,ResoFilterLP
	MOVE.B	D6,ResoFilterLPb+1
	MOVE.B	D6,ResoFilterAbort
	MOVE.B	D6,ResoFilterSweep+1
	MOVE.B	D6,LAB_170F+1
	MOVEM.L	A0,-(A7)
	LEA	ResoFilterLP,A0
	BSR.W	NGSetStatusText
	MOVEA.L	(A7)+,A0
	LEA	LAB_0895(PC),A0
	LEA	LPResoFilter_TXT,A1
	MOVEQ	#0,D1
LAB_088D:
	MOVE.L	#$000000ff,D2
	BSR.W	ReqMinMaxLong
	TST.W	D0
	BEQ.W	LAB_0893
	LEA	LAB_0896(PC),A0
	LEA	LPResoFilterB_TXT,A1
	MOVEQ	#0,D1
	MOVE.L	#$000000ff,D2
LAB_088E:
	BSR.W	ReqMinMaxLong
	TST.W	D0
	BEQ.W	LAB_0893
	MOVEQ	#3,D7
	MOVE.B	#$01,161(A2)
	MOVE.L	LAB_0895(PC),D0
	MOVE.B	D0,162(A2)
	MOVE.L	LAB_0896(PC),D0
	MOVE.B	D0,163(A2)
LAB_088F:
	MOVEM.L	A0,-(A7)
	LEA	ResoFilterLPb+1,A0
	BSR.W	NGSetStatusText
	MOVEA.L	(A7)+,A0
	LEA	LAB_0897(PC),A0
	LEA	LPResoFilter_TXT,A1
	MOVEQ	#0,D1
	MOVE.L	#$000000ff,D2
LAB_0890:
	BSR.W	ReqMinMaxLong
	TST.W	D0
	BEQ.S	LAB_0894
	LEA	LAB_0898(PC),A0
	LEA	LPResoFilterB_TXT,A1
	MOVEQ	#0,D1
	MOVE.L	#$000000ff,D2
	BSR.W	ReqMinMaxLong
	TST.W	D0
	BEQ.S	LAB_0894
	MOVEQ	#15,D7
	MOVE.B	#$02,161(A2)
	MOVE.L	LAB_0897(PC),D0
	MOVE.B	D0,164(A2)
	MOVE.L	LAB_0898(PC),D0
	MOVE.B	D0,165(A2)
	MOVEM.L	A0,-(A7)
LAB_0891:
	LEA	ResoFilterSweep+1,A0
	BSR.W	NGSetStatusText
	MOVEA.L	(A7)+,A0
LAB_0892:
	MOVE.B	D7,160(A2)
	BSR.W	ReMakeSample
	BSR.W	DrawInstrName
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0893:
	MOVEM.L	A0,-(A7)
	LEA	ResoFilterAbort,A0
	BSR.W	NGSetStatusText
	MOVEA.L	(A7)+,A0
	BRA.S	LAB_0892
LAB_0894:
	MOVEM.L	A0,-(A7)
	LEA	ResoFilterStatic,A0
	BSR.W	NGSetStatusText
	MOVEA.L	(A7)+,A0
	BRA.S	LAB_0892
LAB_0895:
	ORI.B	#$1e,D0
LAB_0896:
	ORI.B	#$00,D0
LAB_0897:
	ORI.B	#$1e,D0
LAB_0898:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.W	$0000
SetSamplePreOverS:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	SAMPLEPreOverS,A0
	LEA	SetSamplePreOverS_TXT,A1
	MOVEQ	#1,D1
	MOVEQ	#4,D2
	BSR.W	ReqMinMaxLong
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
SetScopeFrames:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	FRAMENUMB(PC),A0
	LEA	ScopeFrame_TXT,A1
	MOVEQ	#1,D1
	MOVEQ	#50,D2
	BSR.W	ReqMinMaxLong
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NGSetSampleBoost:
	MOVEM.L	D0-D7/A0-A6,-(A7)
LAB_089C:
	TST.L	NGSampleBoost+2
	BNE.S	LAB_089D
	MOVE.L	#$00000bb8,NGSampleBoost+2
LAB_089D:
	LEA	NGSampleBoost+2,A0
	LEA	SetSampleBoost_TXT,A1
	MOVEQ	#1,D1
	MOVE.L	#$00002710,D2
	BSR.W	ReqMinMaxLong
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetNoiseLimit:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	LAB_11DA,A0
	LEA	ProcVLimit_TXT,A1
	MOVEQ	#1,D1
	MOVEQ	#99,D2
	BSR.W	ReqMinMaxLong
	JSR	InitVolumeList
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetNoiseFilter:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	NoiseFilt(PC),A0
	LEA	NoiseFilt_TXT+3,A1
	MOVEQ	#0,D1
	MOVEQ	#100,D2
	BSR.W	ReqMinMaxLong
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NoiseFilt:
	ORI.B	#$00,D0
SetStPitchDiff:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	PITCHDIFF+2,A0
	LEA	PitchDiff_TXT+1,A1
	MOVEQ	#0,D1
	MOVE.L	#$000003e8,D2
	BSR.W	ReqMinMaxLong
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ExtractSetQuality:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	LAB_0ACD(PC),A0
	LEA	SetEx8bQuality_TXT,A1
	MOVEQ	#8,D2
	MOVEQ	#4,D1
	BSR.W	ReqMinMaxLong
ExtractSetQuality_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	RTS
	DC.W	$0000
SetStSampleDiff:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	SAMPLEDIFF+2,A0
	LEA	SampleDiff_TXT,A1
	MOVEQ	#0,D1
	MOVE.L	#$000007d0,D2
	BSR.W	ReqMinMaxLong
	MOVE.L	#$53593835,D0
	MOVE.W	LAB_11E3,D2
	BSR.W	NGODrawDecWord4Char
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
SetInstrNr:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	templong,A0
	LEA	GotoInstr_TXT+1,A1
	MOVEQ	#0,D1
	MOVE.L	#$000000ff,D2
	BSR.W	ReqMinMaxLong
	TST.W	D0
	BEQ.S	LAB_08A6
	MOVE.L	templong,D0
	BSR.W	GotoInstrNum
LAB_08A6:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SampleDiffD:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	SetDecShiftKeyRaster
	SUB.W	D0,LAB_11E3
	BPL.S	LAB_08A8
	CLR.L	SAMPLEDIFF+2
LAB_08A8:
	MOVE.L	#$53593835,D0
	MOVE.W	LAB_11E3,D2
	BSR.W	NGODrawDecWord4Char
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SampleDiffU:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	SetDecShiftKeyRaster
	ADD.W	D0,LAB_11E3
	CMPI.W	#$07d0,LAB_11E3
	BLS.S	LAB_08AA
	MOVE.W	#$07d0,LAB_11E3
LAB_08AA:
	MOVE.L	#$53593835,D0
	MOVE.W	LAB_11E3,D2
	BSR.W	NGODrawDecWord4Char
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PitchDiffD:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	SetDecShiftKeyRaster
	SUB.W	D0,LAB_11E5
	BPL.S	LAB_08AC
	CLR.L	PITCHDIFF+2
LAB_08AC:
	MOVE.L	#$53593831,D0
	MOVE.W	LAB_11E5,D2
	BSR.W	NGODrawDecWord3Char
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PitchDiffU:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	SetDecShiftKeyRaster
	ADD.W	D0,LAB_11E5
	MOVE.L	#$53593831,D0
	MOVE.W	LAB_11E5,D2
	BSR.W	NGODrawDecWord3Char
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetSampleVol:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	TST.B	(A0)
	BEQ.S	LAB_08AF
	MOVEA.L	A0,A2
	MOVEQ	#0,D0
	MOVE.B	134(A2),D0
	LEA	EditBuf,A0
	MOVE.L	D0,(A0)
	LEA	SetSampleVol_TXT,A1
	MOVEQ	#0,D1
	MOVE.L	#$000000c7,D2
	BSR.W	ReqMinMaxLong
	TST.W	D0
	BEQ.S	LAB_08AF
	MOVE.L	(A0),D0
	MOVE.B	D0,134(A2)
	BSR.S	ReMakeSample
	BSR.W	DrawInstrName
LAB_08AF:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ReMakeSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	CMPI.B	#$03,132(A0)
	BNE.S	ReMakeSample_Disk
	BSR.W	ReBuildLineSample
ReMakeSample_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ReMakeSample_Disk:
	BSR.W	ReloadActualSample
	BRA.S	ReMakeSample_X
SetDownSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	BSR.W	SetPosNegShiftRaster
	ADD.B	D0,143(A0)
	TST.B	143(A0)
	BPL.S	SetDownSample_X
	JSR	WarnFlash
	CLR.B	143(A0)
SetDownSample_X:
	BSR.S	ReMakeSample
	BSR.W	DrawInstrName
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
AutoReCalcLineSamples:
	BSR.W	SaveInstrumentNum
	BSR.S	AutoCalcLineSamples
	BSR.W	LoadInstrumentNum
	BSR.W	DrawInstrument
	BSR.W	DrawInstrParam
	RTS
AutoCalcLineSamples:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	MoveFirstInstrument
	MOVE.L	#$000000ff,D7
AutoCalcLineSamples_L:
	BSR.W	GetActualInstrName
	CMPI.B	#$03,132(A0)
	BNE.S	AutoCalcLineSamples_NEXT
	BSR.S	BackupIName
	BSR.W	ReBuildLineSample
	BSR.S	RecallIName
AutoCalcLineSamples_NEXT:
	BSR.W	HandleAllMsgs
	BSR.W	MoveNextInstrument
	DBF	D7,AutoCalcLineSamples_L
	BSR.W	MoveFirstInstrument
	BSR.W	DrawInstrument
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
RecallIName:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#63,D0
	LEA	INameBak+3,A1
LAB_08BA:
	EXG	A0,A1
	BRA.S	BackupIName_L
BackupIName:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#63,D0
	LEA	INameBak+3,A1
BackupIName_L:
	MOVE.L	(A0)+,(A1)+
	DBF	D0,BackupIName_L
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
GetInstrumentNameNum:
	MOVEA.L	SampleNames_PTR+2,A0
	MULU	#$0100,D0
	LEA	0(A0,D0.L),A0
	RTS
BuildNewTransWave:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	ReqInstrument
	TST.W	D0
	BEQ.W	LAB_08C1
	MOVE.L	D1,LAB_08C2
	BSR.W	ReqInstrument
	TST.W	D0
	BEQ.W	LAB_08C1
	MOVE.L	D1,LAB_08C3
	LEA	BuildTransSample_TEMP,A5
	MOVE.L	LAB_08C2(PC),D0
	BSR.W	GetInstrument
	MOVEA.L	A0,A1
	BSR.S	GetInstrumentNameNum
	MOVEA.L	A0,A4
	BSR.W	GetNewLoop
	MOVE.L	D0,(A5)+
	MOVE.L	D1,(A5)+
	BSR.W	GetRecalcedLoop
	MOVE.L	8(A1),D2
	ADD.L	D2,D0
	ADD.L	D2,D1
	MOVE.L	D0,LAB_08E2
	MOVE.L	D1,LAB_08E3
	MOVE.L	LAB_08C2(PC),D0
	MOVE.W	D0,TransWave_Info
	MOVE.W	D0,(A5)+
	MOVE.L	LAB_08C3(PC),D0
LAB_08BF:
	BSR.W	GetInstrument
	MOVEA.L	A0,A1
	BSR.S	GetInstrumentNameNum
	MOVEA.L	A0,A4
	BSR.W	GetNewLoop
	MOVE.L	D0,(A5)+
	MOVE.L	D1,(A5)+
	BSR.W	GetRecalcedLoop
	MOVE.L	8(A1),D2
	ADD.L	D2,D0
	ADD.L	D2,D1
	MOVE.L	D0,LAB_08E4
	MOVE.L	D1,LAB_08E5
	MOVE.L	LAB_08C3(PC),D0
	MOVE.W	D0,LAB_08E0+2
	MOVE.W	D0,(A5)+
	BSR.W	GetActualInstrName
	LEA	20(A0),A4
	LEA	BuildTransSample_TEMP,A5
LAB_08C0:
	MOVE.L	(A5)+,4(A4)
	MOVE.L	(A5)+,8(A4)
	MOVE.W	(A5)+,(A4)
	LEA	16(A4),A4
	MOVE.L	(A5)+,4(A4)
	MOVE.L	(A5)+,8(A4)
	MOVE.W	(A5)+,(A4)
	BRA.W	BuildTransSample_IN
LAB_08C1:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_08C2:
	ORI.B	#$00,D0
LAB_08C3:
	ORI.B	#$00,D0
ReqInstrument:
	MOVEM.L	D2-D7/A0-A1,-(A7)
	MOVEQ	#127,D2
	MOVEQ	#0,D1
LAB_08C5:
	LEA	InstNum,A0
	LEA	ReqInstrTXT,A1
	BSR.W	ReqMinMaxLong
	MOVE.L	InstNum,D1
	MOVEM.L	(A7)+,D2-D7/A0-A1
	RTS
	DC.W	$0000
RebuildTransSample:
	BSR.W	GetActualInstrName
	LEA	20(A0),A5
	MOVEQ	#0,D0
	MOVE.W	(A5),D0
	MOVE.W	D0,TransWave_Info
LAB_08C7:
	BSR.W	GetInstrument
	MOVE.L	4(A5),D0
	MOVE.L	8(A5),D1
	MOVEA.L	A0,A1
	BSR.W	GetRecalcedLoop
	MOVE.L	8(A1),D2
	ADD.L	D2,D0
	ADD.L	D2,D1
	MOVE.L	D0,LAB_08E2
	MOVE.L	D1,LAB_08E3
	LEA	16(A5),A5
	MOVE.W	(A5),D0
LAB_08C8:
	MOVE.W	D0,LAB_08E0+2
	BSR.W	GetInstrument
	MOVE.L	4(A5),D0
	MOVE.L	8(A5),D1
	MOVEA.L	A0,A1
	BSR.W	GetRecalcedLoop
	MOVE.L	8(A1),D2
	ADD.L	D2,D0
	ADD.L	D2,D1
	MOVE.L	D0,LAB_08E4
	MOVE.L	D1,LAB_08E5
	BRA.W	BuildTransSample_IN
	DC.W	$0000
BuildTransSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
LAB_08CA:
	LEA	BuildTransSample_TEMP,A5
	BSR.W	GetActualInstrName
	MOVEA.L	A0,A4
	BSR.W	GetNewLoop
	MOVE.L	D0,(A5)+
	MOVE.L	D1,(A5)+
	BSR.W	GetActualInstrument
	MOVEA.L	A0,A1
	BSR.W	GetRecalcedLoop
	MOVE.L	8(A1),D2
	ADD.L	D2,D0
	ADD.L	D2,D1
	MOVE.L	D0,LAB_08E2
LAB_08CB:
	MOVE.L	D1,LAB_08E3
	BSR.W	GetActualInstrNum
	MOVE.W	D0,TransWave_Info
	MOVE.W	D0,(A5)+
	BSR.W	MoveNextMonoInstrument
	BSR.W	GetActualInstrName
	MOVEA.L	A0,A4
	BSR.W	GetNewLoop
	MOVE.L	D0,(A5)+
	MOVE.L	D1,(A5)+
	BSR.W	GetActualInstrument
LAB_08CC:
	MOVEA.L	A0,A1
	BSR.W	GetRecalcedLoop
	MOVE.L	8(A1),D2
	ADD.L	D2,D0
	ADD.L	D2,D1
	MOVE.L	D0,LAB_08E4
	MOVE.L	D1,LAB_08E5
	BSR.W	GetActualInstrNum
	MOVE.W	D0,LAB_08E0+2
	MOVE.W	D0,(A5)+
	BSR.W	MoveNextMonoInstrument
	BSR.W	GetActualInstrName
	LEA	20(A0),A4
	LEA	BuildTransSample_TEMP,A5
	MOVE.L	(A5)+,4(A4)
	MOVE.L	(A5)+,8(A4)
	MOVE.W	(A5)+,(A4)
LAB_08CD:
	LEA	16(A4),A4
	MOVE.L	(A5)+,4(A4)
	MOVE.L	(A5)+,8(A4)
	MOVE.W	(A5)+,(A4)
BuildTransSample_IN:
	BSR.W	SaveActInstrName
	BSR.W	KillActualInstr
	BSR.W	LoadActInstrName
	MOVEQ	#0,D0
	BSR.W	GetActualSampleManagerEntry
LAB_08CF:
	BSR.W	InitSampleManEntry
	MOVEA.L	A0,A1
	MOVE.L	LAB_08E3(PC),D0
	SUB.L	LAB_08E2(PC),D0
	BEQ.W	LAB_08D2
	MULU	#$0050,D0
	LSL.L	#1,D0
	MOVE.L	D0,10(A1)
	MOVE.L	#$00010000,14(A1)
	LSR.L	#2,D0
	MOVE.L	D0,26(A1)
	LEA	6(A1),A0
	JSR	GetMem
	TST.L	D0
	BEQ.W	LAB_08D2
	MOVE.W	#$ffff,(A1)
	MOVE.L	6(A1),D0
	ADD.L	10(A1),D0
	SUBQ.L	#2,D0
	MOVE.L	D0,30(A1)
	ADDQ.L	#2,D0
	MOVEA.L	LAB_08E2(PC),A0
	MOVEA.L	6(A1),A2
	MOVEQ	#79,D7
	MOVEQ	#0,D5
	CLR.B	StatusTransReso1
LAB_08D0:
	MOVE.L	LAB_08E3(PC),D0
	SUB.L	LAB_08E2(PC),D0
	MOVE.L	D0,D2
	LSR.L	#1,D0
	MOVEQ	#0,D3
	MOVE.L	LAB_08E5(PC),D4
	SUB.L	LAB_08E4(PC),D4
	MOVEA.L	LAB_08E4(PC),A3
	SUBQ.W	#1,D0
	BMI.W	LAB_08D2
	MOVEA.L	LAB_08E2(PC),A0
	ADDQ.W	#1,D5
LAB_08D1:
	MOVE.W	(A0)+,D1
	MULS	D7,D1
	DIVS	#$0050,D1
	MOVE.L	D3,D6
	MULU	D4,D6
	DIVU	D2,D6
	DC.W	$3c33
	DC.W	$6200
	MULS	D5,D6
	DIVS	#$0050,D6
	ADD.W	D1,D6
	MOVE.W	D6,(A2)+
	ADDQ.W	#1,D3
	DBF	D0,LAB_08D1
	DBF	D7,LAB_08D0
	BSR.W	GetActualInstrName
	MOVE.B	#$03,132(A0)
	CLR.B	128(A0)
	MOVE.L	#$56695254,(A0)
	CLR.B	4(A0)
	MOVE.W	#$0001,6(A0)
	CLR.W	12(A0)
	CLR.W	8(A0)
	MOVE.W	#$0002,14(A0)
	MOVE.W	#$000a,18(A0)
	MOVE.W	#$0014,16(A0)
	MOVEA.L	A0,A2
	BSR.W	GetActualInstrument
	MOVEA.L	A0,A1
	BSR.W	GetActualSampleManagerEntry
	MOVEA.L	A0,A4
	BSR.W	NewPrepareSampleIn
	MOVEQ	#0,D0
	MOVEQ	#0,D1
	BSR.W	MakeSimpleIofSample
	BSR.W	ForceUpdateActInstrType
	BSR.W	DrawInstrument
LAB_08D2:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
TransResoSource1:
	MOVEM.L	D0-D7/A0-A2,-(A7)
	DC.W	$4aba
	ORI.L	#$670000a0,3130(A4)
	DC.W	$00ff
	DC.W	$00c6
	BEQ.S	LAB_08D5
	MOVE.B	#$ff,StatusTransReso1
	MOVEM.L	D0,-(A7)
	MOVEA.L	ResoSource1Ptr+2(PC),A1
LAB_08D4:
	MOVE.W	(A3)+,D1
	MOVE.W	D1,(A1)+
	DBF	D0,LAB_08D4
	MOVEM.L	(A7)+,D0
	MOVE.W	TransWResoDepth(PC),LAB_08DE+2
LAB_08D5:
	MOVEA.L	ResoSource1Ptr+2(PC),A0
	MOVEA.L	A0,A1
	MOVEA.L	A0,A2
	BCLR	#0,D0
	ADDA.L	D0,A2
	MOVEQ	#0,D2
	MOVE.W	LAB_08DE+2(PC),D2
	BEQ.S	LAB_08DB
	ADDQ.W	#1,LAB_08DE+2
	LSL.L	#5,D2
	ADDQ.L	#1,D2
	LSR.W	#1,D0
LAB_08D6:
	MOVE.W	(A0),D1
	ADDQ.L	#4,A0
	DIVS	D2,D1
	EXT.L	D1
	MOVE.W	(A1),D3
	EXT.L	D3
	SUB.L	D1,D3
	CMPI.L	#$00003fac,D3
	BLE.S	LAB_08D7
	MOVE.W	#$3fac,D3
LAB_08D7:
	CMPI.L	#$ffffc011,D3
	BGE.S	LAB_08D8
	MOVE.W	#$c011,D3
LAB_08D8:
	MOVE.W	D3,(A1)+
	MOVE.W	(A2),D3
	EXT.L	D3
	SUB.L	D1,D3
	CMPI.L	#$00003fac,D3
	BLE.S	LAB_08D9
	MOVE.W	#$3fac,D3
LAB_08D9:
	CMPI.L	#$ffffc011,D3
	BGE.S	LAB_08DA
	MOVE.W	#$c011,D3
LAB_08DA:
	MOVE.W	D3,(A2)+
	DBF	D0,LAB_08D6
	MOVEA.L	ResoSource1Ptr+2(PC),A3
LAB_08DB:
	MOVEM.L	(A7)+,D0-D7/A0-A2
	RTS
ResoOffset:
ResoSource1Ptr:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.W	$4e20
	ORI.B	#$00,D1
TransWResoDepth:
LAB_08DE:
	ORI.B	#$00,D1
TransWave_Info:
LAB_08E0:
	ORI.B	#$00,D0
LAB_08E2:
	ORI.B	#$00,D0
LAB_08E3:
	ORI.B	#$00,D0
LAB_08E4:
	ORI.B	#$00,D0
LAB_08E5:
	ORI.B	#$00,D0
StatusTransReso1:
	DC.W	$0000
ReBuildLineSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	CMPI.W	#$0001,6(A0)
	BEQ.W	RebuildTransSample
	MOVE.W	14(A0),D7
	MOVE.W	D7,BuildLineSample_SRCNUMB
	MOVE.W	16(A0),D6
	MOVE.W	18(A0),D5
	LEA	0(A0,D6.W),A0
	SUBQ.W	#1,D7
	MOVEA.L	BuildLineINFO_PTR+2(PC),A1
ReBuildLineSampleName_L:
	MOVE.B	1(A0),1(A1)
	MOVE.B	3(A0),3(A1)
	MOVE.B	2(A0),2(A1)
	LEA	0(A0,D5.W),A0
	ADDQ.L	#4,A1
	DBF	D7,ReBuildLineSampleName_L
	BRA.W	BuildLineSample_EXT
	DC.W	$0000
CloneToLineSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	TST.B	(A0)
	BEQ.S	CloneToLineSample_X
	MOVEA.L	BuildLineINFO_PTR+2(PC),A2
	MOVE.B	#$18,1(A2)
	BSR.W	GetActualInstrNum
	MOVE.B	D0,3(A2)
	MOVE.B	#$64,2(A2)
	MOVEQ	#1,D6
	MOVE.W	D6,BuildLineSample_SRCNUMB
	BSR.W	MoveNextInstrument
	BSR.W	KillActualInstr
	BSR.S	ResetLineSampleParams
	BRA.W	BuildLineSample_EXT
CloneToLineSample_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ResetLineSampleParams:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	BCLR	#0,140(A0)
	BCLR	#2,140(A0)
	BCLR	#3,140(A0)
	BCLR	#1,140(A0)
	CLR.B	144(A0)
	CLR.B	141(A0)
	CLR.B	143(A0)
	CLR.B	160(A0)
	CLR.B	161(A0)
	CLR.B	170(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
BuildRowSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	JSR	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVEA.L	BuildLineINFO_PTR+2(PC),A2
	MOVEQ	#0,D6
	MOVE.W	28(A0),D5
	MOVE.W	18(A0),D7
	SUBQ.W	#1,D7
	BMI.W	BuildLineSample_X
BuildRSCountSamples_L:
	CMPI.B	#$ff,1(A1)
	BEQ.S	BuildRSCountSamples_M
	MOVE.B	1(A1),1(A2)
	MOVE.B	3(A1),3(A2)
	MOVE.B	2(A1),2(A2)
	ADDQ.L	#4,A2
	ADDQ.W	#1,D6
BuildRSCountSamples_M:
	LEA	0(A1,D5.W),A1
	DBF	D7,BuildRSCountSamples_L
	MOVE.W	D6,BuildLineSample_SRCNUMB
	BSR.W	KillActualInstr
	CLR.B	LineSampleFlag
	BSR.W	GetActualInstrName
	BSR.W	ResetLineSampleParams
	BSET	#1,140(A0)
	MOVE.B	140(A0),LineSampleFlag
	BRA.S	BuildLineSample_EXT
	DC.W	$0000
BuildLineSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	JSR	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVEA.L	BuildLineINFO_PTR+2(PC),A2
	MOVE.W	CHANNEL_NUMB+2,D7
	SUBQ.W	#1,D7
	BMI.W	BuildLineSample_X
	MOVEQ	#0,D6
BuildLSCountSamples_L:
	CMPI.B	#$ff,1(A1)
	BEQ.S	BuildLSCountSamples_M
	MOVE.B	1(A1),1(A2)
	MOVE.B	3(A1),3(A2)
	MOVE.B	2(A1),2(A2)
	ADDQ.L	#4,A2
	ADDQ.L	#1,D6
BuildLSCountSamples_M:
	ADDQ.L	#4,A1
	DBF	D7,BuildLSCountSamples_L
	MOVE.W	D6,BuildLineSample_SRCNUMB
	BSR.W	ResetLineSampleParams
BuildLineSample_EXT:
	BSR.W	SaveActInstrName
	BSR.W	SaveLineSampleFlag
	BSR.W	KillActualInstr
	MOVE.W	BuildLineSample_SRCNUMB(PC),D6
	TST.W	D6
	BEQ.W	BuildLineSample_X
	BSR.W	GetActualSampleManagerEntry
	MOVEA.L	A0,A1
	MOVEA.L	A0,A4
	MOVEA.L	BuildLineINFO_PTR+2(PC),A2
	MOVEQ	#0,D0
	MOVE.B	3(A2),D0
	BSR.W	GetSampleManagerEntry
	MOVEA.L	A0,A3
	MOVE.W	Sample_STANDARD(PC),2(A1)
	MOVE.W	LAB_0C5E+2(PC),4(A1)
	MOVE.W	LAB_0C60(PC),22(A1)
	MOVE.W	LAB_0C60+2(PC),24(A1)
	BSR.W	GetLineSampleLen
	CLR.L	6(A1)
	MOVE.L	D0,10(A1)
	BEQ.W	BuildLineSample_X
	MOVE.L	#$00010000,14(A1)
	MOVE.L	D1,26(A1)
	LEA	6(A1),A0
	JSR	GetMem
	TST.L	D0
	BEQ.W	ERR_NoLineSMem
	MOVE.L	6(A1),D0
	ADD.L	10(A1),D0
	SUBQ.L	#2,D0
	MOVE.L	D0,30(A1)
	ADDQ.L	#2,D0
	SUBQ.L	#2,D0
	MOVE.L	D0,LineSampleEnd_PTR
	TST.L	6(A4)
	BEQ.W	BuildLineSample_X
	MOVE.W	#$ffff,(A4)
	BSR.W	BuildLineSetVolDiv
	MOVE.W	BuildLineSample_SRCNUMB(PC),D6
	SUBQ.W	#1,D6
	MOVEA.L	BuildLineINFO_PTR+2(PC),A2
	BSR.W	GetLSPitchBase
	MOVEA.L	6(A4),A1
	MOVEQ	#0,D2
BuildLineS_Copy2:
	BSR.W	GetLSPitch
	MOVEQ	#0,D0
	MOVE.B	3(A2),D0
	BSR.W	GetSampleManagerEntry
	MOVE.L	10(A0),D1
	MOVEA.L	6(A0),A0
	MOVE.L	10(A4),D7
	BSR.W	BuildLineSMoveDestPtr
	MOVEA.L	A0,A5
	ADDA.L	D1,A5
	MOVE.L	10(A4),D7
	LSR.L	#1,D7
	LSL.L	#1,D3
	SUBQ.L	#1,D7
	BMI.W	BuildLineSample_X
	EXG	D3,D0
	BSR.W	CorrectPREPExpand
	EXG	D3,D0
	SUBQ.L	#1,D7
	BMI.S	BuildLineS_ExitL1
	SUBQ.L	#2,A5
	BMI.S	BuildLineS_ExitL1
BuildLineS_Copy1:
	CMPA.L	A0,A5
	BCS.S	BuildLineS_ExitL1
	CMPA.L	LineSampleEnd_PTR,A1
	BHI.S	BuildLineS_ExitL1
	MOVE.W	(A0),D0
	EXT.L	D0
	DIVS	BuildLineSample_SRCNUMB(PC),D0
	ADD.W	D0,(A1)+
	ADD.L	D3,D2
	SWAP	D2
	DC.W	$41f0
	MOVE.L	D0,D1
	CLR.W	D2
	SWAP	D2
	SUBQ.L	#1,D7
	BPL.S	BuildLineS_Copy1
BuildLineS_ExitL1:
	ADDQ.L	#4,A2
	DBF	D6,BuildLineS_Copy2
	BSR.W	LoadActInstrName
	BSR.W	AntiknackVirt
	MOVE.B	#$01,AKTYPE
	BSR.W	NewPrepareSampleIn
	CLR.B	AKTYPE
	BSR.W	GetActualInstrName
	MOVE.L	A0,18(A4)
	MOVE.B	#$03,132(A0)
	MOVE.L	#$56695254,(A0)
	CLR.B	4(A0)
	CLR.W	6(A0)
	CLR.W	12(A0)
	MOVE.W	BuildLineSample_SRCNUMB(PC),D7
	MOVE.W	D7,14(A0)
	MOVE.W	#$0014,16(A0)
	MOVE.W	#$0004,18(A0)
	LEA	20(A0),A1
	SUBQ.W	#1,D7
	MOVEA.L	BuildLineINFO_PTR+2(PC),A0
BuildLineSampleName_L:
	MOVE.B	1(A0),1(A1)
	MOVE.B	3(A0),3(A1)
	MOVE.B	2(A0),2(A1)
	ADDQ.L	#4,A0
	ADDQ.L	#4,A1
	DBF	D7,BuildLineSampleName_L
	BSR.W	GetActualInstrName
LAB_08F7:
	MOVEA.L	A0,A2
	BSR.W	GetActualInstrument
	MOVEA.L	A0,A1
	BSR.W	GetActualSampleManagerEntry
	MOVEQ	#0,D0
	MOVEQ	#0,D1
	BSR.W	MakeSimpleIofSample
	BSR.W	LoadLineSampleFlag
	BSR.W	ForceUpdateActInstrType
	BSR.W	DrawInstrument
BuildLineSample_X:
	CLR.B	LineSampleFlag
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ERR_NoLineSMem:
	BSR.W	PrintActInstrInfo
	MOVE.L	#ERRNoLSMem,AssText_TXT
	BSR.W	PrintAssTextF
	BRA.S	BuildLineSample_X
GetLSPitchBase:
	MOVEM.L	D0,-(A7)
	MOVEQ	#0,D4
	MOVE.B	1(A2),D4
	BSR.W	BuildLineGetPitchTune
	ADD.B	D0,D4
	MOVEQ	#1,D3
	SWAP	D3
	MOVEM.L	(A7)+,D0
	RTS
GetLSPitch:
	MOVEM.L	D0-D2/A0,-(A7)
	MOVEQ	#0,D1
	MOVE.B	1(A2),D1
	BSR.W	BuildLineGetPitchTune
	ADD.B	D0,D1
	SUB.W	D4,D1
	ASL.W	#2,D1
	LEA	BuildLineSample_FREQBASE,A0
	MOVE.L	0(A0,D1.W),D3
	CMPI.B	#$c8,2(A2)
	BCS.S	BuildLineS_NoCommand
LAB_08FC:
	CMPI.B	#$f2,2(A2)
	BCS.S	BuildLineS_NoCommand
	CMPI.B	#$f7,2(A2)
	BHI.S	BuildLineS_NoCommand
	MOVE.L	D3,D0
	CMPI.B	#$f7,2(A2)
	BEQ.S	LAB_0900
	CMPI.B	#$f5,2(A2)
	BEQ.S	LAB_0901
	CMPI.B	#$f3,2(A2)
	BEQ.S	LAB_0902
	NEG.L	D0
	CMPI.B	#$f6,2(A2)
	BEQ.S	LAB_08FD
	CMPI.B	#$f4,2(A2)
	BEQ.S	LAB_08FE
	CMPI.B	#$f2,2(A2)
	BEQ.S	LAB_08FF
	BRA.S	BuildLineS_NoCommand
LAB_08FD:
	ASR.L	#7,D0
	BRA.S	LAB_0903
LAB_08FE:
	ASR.L	#6,D0
	BRA.S	LAB_0903
LAB_08FF:
	ASR.L	#5,D0
	BRA.S	LAB_0903
LAB_0900:
	LSR.L	#7,D0
	BRA.S	LAB_0903
LAB_0901:
	LSR.L	#6,D0
	BRA.S	LAB_0903
LAB_0902:
	LSR.L	#5,D0
LAB_0903:
	ADD.L	D0,D3
BuildLineS_NoCommand:
	MOVEM.L	(A7)+,D0-D2/A0
	RTS
TuneLSLength:
	MOVEM.L	D0,-(A7)
	DC.W	$4c3c
	ADDQ.B	#2,D0
	ORI.B	#$00,D1
	DC.W	$4c43
	ADDQ.B	#2,D0
	DC.W	$4c3c
	DC.W	$6400
LAB_0906:
	ORI.B	#$00,D1
	DC.W	$4c43
	DC.W	$6400
	MOVEM.L	(A7)+,D0
	RTS
BuildLineSMoveDestPtr:
	BTST	#1,LineSampleFlag(PC)
	BNE.S	BuildLineSMoveDestPtr_X
	MOVEA.L	6(A4),A1
BuildLineSMoveDestPtr_X:
	RTS
BuildLineSetVolDiv:
	MOVEQ	#1,D5
	BTST	#1,LineSampleFlag(PC)
	BNE.S	BuildLineSMoveDestPtr_X
	MOVEQ	#0,D5
	MOVE.W	BuildLineSample_SRCNUMB(PC),D5
	RTS
SaveLineSampleFlag:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	BTST	#1,LineSampleFlag(PC)
	BNE.S	SaveLineSampleFlag_X
	LEA	LineSampleFlag(PC),A2
	MOVE.B	140(A0),(A2)+
	MOVE.B	141(A0),(A2)+
	MOVE.B	128(A0),(A2)+
	MOVE.B	129(A0),(A2)+
	MOVE.B	130(A0),(A2)+
	MOVE.B	131(A0),(A2)+
	MOVE.B	138(A0),(A2)+
	MOVE.B	139(A0),(A2)+
	MOVE.B	142(A0),(A2)+
	MOVE.B	143(A0),(A2)+
	MOVE.B	134(A0),(A2)+
	MOVE.B	144(A0),(A2)+
	MOVE.W	150(A0),(A2)+
	MOVE.W	152(A0),(A2)+
	MOVE.B	160(A0),(A2)+
	MOVE.B	161(A0),(A2)+
	MOVE.L	162(A0),(A2)+
	MOVE.L	166(A0),(A2)+
	MOVE.L	170(A0),(A2)+
SaveLineSampleFlag_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LineSampleFlag:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
LoadLineSampleFlag:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	LEA	LineSampleFlag(PC),A2
	MOVE.B	(A2)+,140(A0)
	MOVE.B	(A2)+,141(A0)
	MOVE.B	(A2)+,128(A0)
	MOVE.B	(A2)+,129(A0)
	MOVE.B	(A2)+,130(A0)
	MOVE.B	(A2)+,131(A0)
	MOVE.B	(A2)+,138(A0)
	MOVE.B	(A2)+,139(A0)
	MOVE.B	(A2)+,142(A0)
	MOVE.B	(A2)+,143(A0)
	MOVE.B	(A2)+,134(A0)
	MOVE.B	(A2)+,144(A0)
	MOVE.W	(A2)+,150(A0)
	MOVE.W	(A2)+,152(A0)
	MOVE.B	(A2)+,160(A0)
	MOVE.B	(A2)+,161(A0)
	MOVE.L	(A2)+,162(A0)
	MOVE.L	(A2)+,166(A0)
	MOVE.L	(A2)+,170(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
CorrectPREPExpand:
	MOVEM.L	D1,-(A7)
	MOVE.L	SAMPLEPreOverS,D1
	SUBQ.L	#1,D1
	BEQ.S	CorrectPREP_X
	LSL.L	D1,D0
CorrectPREP_X:
	MOVEM.L	(A7)+,D1
	RTS
CorrectPREPShorten:
	MOVEM.L	D1,-(A7)
	MOVE.L	SAMPLEPreOverS,D1
	SUBQ.L	#1,D1
	BEQ.S	CorrectPREP_X
	LSR.L	D1,D0
	MOVEM.L	(A7)+,D1
	RTS
GetLineSampleLen:
	MOVEM.L	D2-D7/A0-A6,-(A7)
	MOVE.L	10(A0),D0
	MOVE.L	26(A0),D1
	BSR.S	CorrectPREPShorten
	EXG	D0,D1
	BSR.S	CorrectPREPShorten
	EXG	D0,D1
	BTST	#1,LineSampleFlag(PC)
	BNE.S	GetLineSampleLen_ISROW
GetLineSampleLen_X:
	MOVEM.L	(A7)+,D2-D7/A0-A6
	RTS
GetLineSampleLen_ISROW:
	MOVE.W	BuildLineSample_SRCNUMB(PC),D7
	SUBQ.W	#1,D7
	MOVEA.L	BuildLineINFO_PTR+2(PC),A2
	BSR.W	GetLSPitchBase
	MOVEQ	#0,D1
	MOVEQ	#0,D2
GetLineSampleLen_ISROWL:
	MOVEQ	#0,D0
	MOVE.B	3(A2),D0
	BSR.W	GetSampleManagerEntry
	MOVE.L	10(A0),D5
	MOVE.L	26(A0),D6
	BSR.W	GetLSPitch
	BSR.W	TuneLSLength
	ADD.L	D5,D2
	ADD.L	D6,D1
	ADDQ.L	#4,A2
	DBF	D7,GetLineSampleLen_ISROWL
	MOVE.L	D2,D0
	BSR.S	CorrectPREPShorten
	EXG	D0,D1
	BSR.S	CorrectPREPShorten
	EXG	D0,D1
	BRA.S	GetLineSampleLen_X
BuildLineGetPitchTune:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVEQ	#0,D0
	MOVE.B	3(A2),D0
	BSR.W	GetInstrument
	MOVE.W	44(A0),D0
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
	DC.W	$0000
CopyMemory:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	EXECBASE+2,A6
	JSR	-624(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
GetSpectrumRP:
	MOVEM.L	D0-D3/A0/A5,-(A7)
	MOVE.L	#$57494e41,D0
	MOVE.L	#$41303031,D1
	BSR.W	NGGetInnerAreaData
	MOVE.L	A5,SpectrumNGWIN
	MOVEM.L	(A7)+,D0-D3/A0/A5
	RTS
SpectrumNGWIN:
	ORI.B	#$00,D0
RedrawSpecFull:
	MOVEM.L	D0,-(A7)
	MOVE.L	#$57494e41,D0
	BSR.W	NGWDrawWindowID
	BSR.S	RedrawSpec
	MOVEM.L	(A7)+,D0
	RTS
	DC.W	$0000
RedrawSpec:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	GetSpectrumRP
	DC.W	$4a89
	BEQ.S	LAB_091B
	BSR.W	InitSpecNoteAdd
	BSR.S	DrawSpecHarmGround
LAB_091B:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
DrawSpecHarmGround:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$57494e41,D0
	MOVE.L	#$41303031,D1
	BSR.W	NGGetInnerAreaData
	MOVE.W	D2,D7
	DIVU	#$0024,D7
	MOVE.W	D7,SpecUnitSIZE
	MOVE.W	D3,D7
	DIVU	#$0024,D7
	CMP.W	SpecUnitSIZE(PC),D7
	BCC.S	LAB_091D
	MOVE.W	D7,SpecUnitSIZE
LAB_091D:
	DC.W	$4a89
	BEQ.S	LAB_091F
	MOVEM.W	D0-D3,Harm_RECSYS
	BSR.W	NGRNrm0DrMd
	BSR.W	NGRDarkAPen
	MOVEQ	#0,D2
	MOVEQ	#6,D7
	BSR.W	Set1PMask
LAB_091E:
	BSR.S	DrawSpecHarmGCircle
	ADDI.W	#$000c,D2
	DBF	D7,LAB_091E
	BSR.W	SetOldPMask
	MOVE.W	#$8000,SpecLivePitch
	CLR.W	SpecNoteNumb+2
	BSR.W	NGRInvDrMd
	BSR.W	NGRSpecialAPen
LAB_091F:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawSpecHarmGCircle:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	D2,D3
	MOVE.L	D2,D0
	BSR.S	GetHarmPixel
	BSR.W	GetSpectrumRP
	DC.W	$4a89
	BEQ.S	LAB_0922
	BSR.W	GFX_Move
	MOVEQ	#10,D7
	ADDQ.W	#1,D2
LAB_0921:
	MOVE.L	D2,D0
	BSR.S	GetHarmPixel
	BSR.W	GFX_Draw
	ADDQ.W	#1,D2
	DBF	D7,LAB_0921
	MOVE.L	D3,D0
	BSR.S	GetHarmPixel
	BSR.W	GFX_Draw
LAB_0922:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
DrawSpecUnitTest:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetSpectrumRP
	DC.W	$4a89
	BEQ.S	LAB_0925
	MOVE.W	SpecLivePitch(PC),D4
	CMPI.W	#$8000,D4
	BEQ.S	LAB_0924
	EXG	D0,D4
	BSR.S	GetHarmPixel
	BSR.W	DrawSpecUnit
	MOVE.W	D4,D0
LAB_0924:
	MOVE.W	D0,SpecLivePitch
	BSR.S	GetHarmPixel
	BSR.W	DrawSpecUnit
LAB_0925:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SpecLivePitch:
	OR.B	D0,D0
PitchToNoteOctave:
	ANDI.L	#$0000ffff,D0
	DIVU	#$000c,D0
	MOVE.W	D0,D1
	SWAP	D0
	RTS
GetHarmPixel:
	MOVEM.L	D2-D3/A0,-(A7)
	BSR.S	PitchToNoteOctave
	LEA	HarmSpec_Base(PC),A0
	MOVE.W	D1,D3
	DC.W	$4cb0
	DC.W	$0003
	DC.W	$0400
	MOVE.W	#$004b,D2
	LSL.W	#3,D3
	SUB.W	D3,D2
	MULS	D2,D0
	MULS	D2,D1
	MOVEQ	#4,D2
	ASR.L	D2,D0
	ADD.W	#$01f4,D0
	ASR.L	D2,D1
	ADD.W	#$01f4,D1
	LEA	Harm_RECSYS(PC),A0
	JSR	HiScalePixel
	MOVEM.L	(A7)+,D2-D3/A0
	RTS
Harm_RECSYS:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
HarmSpec_Base:
	DC.W	$0000
	DC.W	$ff9c
	DC.W	$0032
	DC.W	$ffaa
	ORI.W	#$ffce,(A6)
	ORI.W	#$0000,-(A4)
	ORI.W	#$0032,(A6)
	ORI.B	#$56,0(A2,D0.W)
	ORI.W	#$ffce,-(A4)
	ORI.W	#$ffaa,(A6)
	DC.W	$0032
	DC.W	$ff9c
	DC.W	$0000
	DC.W	$ffaa
	DC.W	$ffce
	DC.W	$ffce
	DC.W	$ffaa
InitSpecNoteAdd:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	SpecBuffer_PTR(PC),A2
	LEA	512(A2),A2
	MOVE.L	A2,SpecNoteAdd_PTR+2
	MOVE.L	A2,LAB_0939+2
	LEA	2048(A2),A2
	MOVE.L	A2,LAB_093A+2
	CLR.W	LAB_0937
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SwapSpecBuf:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEM.L	LAB_0939+2(PC),D0-D1
	EXG	D0,D1
	MOVEM.L	D0-D1,LAB_0939+2
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
UpdateDrawSpectrum:
	CMPI.W	#$ffff,PLAYER_STATUS+2
	BEQ.S	DrawSpectrum
	RTS
DrawSpectrum:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetSpectrumRP
	DC.W	$4a89
	BEQ.S	DrawSpectrumOrgan
	MOVE.L	SpecNoteAdd_PTR+2(PC),D6
	MOVE.L	LAB_093A+2(PC),SpecNoteAdd_PTR+2
	MOVEA.L	LAB_0939+2(PC),A2
	SUB.L	A2,D6
	LSR.L	#2,D6
	MOVE.L	D6,D0
	SUBQ.W	#1,D6
	BMI.S	LAB_0932
	MOVEQ	#4,D7
	BSR.W	SpecEraseOldNote
	MOVEA.L	SpecBuffer_PTR(PC),A5
	MOVEQ	#0,D5
LAB_092F:
	MOVEQ	#0,D0
	MOVEM.L	A0,-(A7)
	MOVEA.L	A2,A0
	BSR.W	GetNotePitch
	MOVEA.L	(A7)+,A0
	CMPI.B	#$ff,D0
	BEQ.S	LAB_0930
	JSR	UpdateColorOrgan
	BSR.W	SpecAddNote
LAB_0930:
	LEA	0(A2,D7.W),A2
	DBF	D6,LAB_092F
	TST.W	D5
	BEQ.S	LAB_0932
	MOVE.W	D5,SpecNoteNumb+2
	SUBQ.W	#1,D5
	MOVEA.L	SpecBuffer_PTR(PC),A5
LAB_0931:
	MOVE.W	(A5)+,D0
	BSR.W	GetHarmPixel
	BSR.W	DrawSpecUnit
	DBF	D5,LAB_0931
LAB_0932:
	BSR.W	SwapSpecBuf
	MOVE.W	#$01ff,LAB_0937
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawSpectrumOrgan:
	MOVE.L	SpecNoteAdd_PTR+2(PC),D6
	MOVE.L	LAB_093A+2(PC),SpecNoteAdd_PTR+2
	MOVEA.L	LAB_0939+2(PC),A2
	SUB.L	A2,D6
	LSR.L	#2,D6
	MOVE.L	D6,D0
	SUBQ.W	#1,D6
	BMI.S	LAB_0936
	MOVEQ	#4,D7
	CLR.W	SpecNoteNumb+2
	MOVEA.L	SpecBuffer_PTR(PC),A5
	MOVEQ	#0,D5
LAB_0934:
	MOVEQ	#0,D0
	MOVEM.L	A0,-(A7)
	MOVEA.L	A2,A0
	BSR.W	GetNotePitch
	MOVEA.L	(A7)+,A0
	CMPI.B	#$ff,D0
	BEQ.S	LAB_0935
	JSR	UpdateColorOrgan
LAB_0935:
	LEA	0(A2,D7.W),A2
	DBF	D6,LAB_0934
	TST.W	D5
	BEQ.S	LAB_0936
	MOVE.W	D5,SpecNoteNumb+2
	SUBQ.W	#1,D5
	MOVEA.L	SpecBuffer_PTR(PC),A5
LAB_0936:
	BSR.W	SwapSpecBuf
	MOVE.W	#$01ff,LAB_0937
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SpecNoteAdd_PTR:
LAB_0937:
	ORI.B	#$00,D0
LAB_0939:
	ORI.B	#$00,D0
LAB_093A:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
SpecEraseOldNote:
	DC.W	$4a7a
	DC.W	$00f4
	BNE.S	LAB_093C
	RTS
LAB_093C:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetSpectrumRP
	DC.W	$4a89
	BEQ.S	LAB_093E
	MOVE.W	SpecNoteNumb+2(PC),D5
	CLR.W	SpecNoteNumb+2
	SUBQ.W	#1,D5
	MOVEA.L	SpecBuffer_PTR(PC),A5
LAB_093D:
	MOVE.W	(A5)+,D0
	BSR.W	GetHarmPixel
	BSR.W	DrawSpecUnit
	DBF	D5,LAB_093D
LAB_093E:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
GetNotePitch:
	MOVEM.L	D1/A0,-(A7)
	JSR	CheckNoteType
	TST.W	D0
	BEQ.S	GetNotePitch_Ill
	CMPI.W	#$0001,D0
	BEQ.S	GetNotePitch_Ok
	CMPI.W	#$0003,D0
	BEQ.S	GetNotePitch_Complex
	SWAP	D0
	CMPI.B	#$f8,D0
	BEQ.S	GetNotePitch_Ok
	BRA.S	GetNotePitch_Ill
GetNotePitch_Complex:
	SWAP	D0
	CMPI.B	#$06,D0
	BEQ.S	GetNotePitch_Ok
	CMPI.B	#$12,D0
	BEQ.S	GetNotePitch_Ok
	CMPI.B	#$0f,D0
	BEQ.S	GetNotePitch_Ok
	BRA.S	GetNotePitch_Ill
GetNotePitch_Ok:
	MOVEQ	#0,D1
	MOVE.B	1(A0),D1
	MOVEQ	#0,D0
	MOVE.B	3(A0),D0
	BSR.W	GetInstrument
	MOVE.L	D1,D0
	BTST	#0,46(A0)
	BNE.S	GetNotePitch_X
	ADD.W	PatternTune(PC),D0
GetNotePitch_X:
	MOVEM.L	(A7)+,D1/A0
	RTS
GetNotePitch_Ill:
	MOVEQ	#-1,D0
	BRA.S	GetNotePitch_X
SpecAddNote:
	TST.W	D5
	BEQ.S	SpecAddNote_Do
	MOVEM.L	D7/A4,-(A7)
	MOVEA.L	SpecBuffer_PTR(PC),A4
	MOVE.W	D5,D7
	SUBQ.W	#1,D7
SpecAddNote_Check:
	CMP.W	(A4)+,D0
	BEQ.S	SpecAddNote_X
	DBF	D7,SpecAddNote_Check
	MOVEM.L	(A7)+,D7/A4
SpecAddNote_Do:
	ADDQ.W	#1,D5
	MOVE.W	D0,(A5)+
	RTS
SpecAddNote_X:
	MOVEM.L	(A7)+,D7/A4
	RTS
	DC.W	$0000
DrawSpecUnit:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A1,A5
	MOVEM.W	SPEC_SIZE,D6-D7
	MOVE.W	D0,D2
	MOVE.W	D1,D3
	ADD.W	D6,D2
	ADD.W	D7,D3
	SUB.W	D6,D0
	SUB.W	D7,D1
	MOVEA.L	_GraphicsBase,A6
	JSR	-306(A6)
loc_E3F6:
	MOVEA.L	A5,A1
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SPEC_SIZE:
	ORI.B	#$03,D3
SpecUnitSIZE:
SpecNoteNumb:
	ORI.B	#$00,D0
SpecBuffer_PTR:
	ORI.B	#$00,D0
	DC.W	$0000
	MOVE.L	D0,D0
	ORI.B	#$00,D1
DuplicatePosition:
	JSR	InsertPosition
	JSR	CopyPosition
	JSR	PosNumUp
	JSR	PastePosition
	BSR.W	UpdatePosList
	RTS
	DC.W	$0000
DuplicatePattern:
	JSR	CopyPattern
	BSR.W	PatternUp
	JSR	PastePattern
	BSR.W	UpdatePosList
	RTS
	DC.W	$0000
CutActualTrack:
	JSR	BackupPattern
	JSR	CopyActualTrack
	JSR	ClearActualTrack
	JSR	DrawEventStatusQ
	RTS
	DC.W	$0000
MoveTab:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	TabulatorMem_PTR+2(PC),A1
	MOVE.L	VEX_LinesPerPattern,D7
	SUBQ.L	#1,D7
	MOVEQ	#0,D0
	MOVEA.L	A1,A2
	MOVE.W	D7,D6
LAB_0952:
	TST.B	(A2)+
	BEQ.S	LAB_0953
	ADDQ.W	#1,D0
LAB_0953:
	DBF	D6,LAB_0952
	TST.W	D0
	BEQ.S	LAB_0958
	LEA	Test_PATTED+2,A0
	MOVEA.L	A1,A2
	MOVE.W	34(A0),D0
	ADD.W	62(A0),D0
	LEA	1(A2,D0.W),A2
	MOVE.W	D7,D6
	SUB.W	D0,D6
	BMI.S	LAB_0955
	SUBQ.W	#1,D6
	BMI.S	LAB_0955
	ADDQ.W	#1,D0
LAB_0954:
	TST.B	(A2)+
	BNE.S	LAB_0957
	ADDQ.W	#1,D0
	DBF	D6,LAB_0954
LAB_0955:
	MOVEA.L	A1,A2
	MOVE.W	D7,D6
	MOVEQ	#0,D0
LAB_0956:
	TST.B	(A2)+
	BNE.S	LAB_0957
	ADDQ.W	#1,D0
	DBF	D6,LAB_0956
	BRA.S	LAB_0958
LAB_0957:
	JSR	PattEdMoveToLine
LAB_0958:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetQuaterTabs:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#4,D1
	MOVEQ	#-1,D2
	MOVEA.L	TabulatorMem_PTR+2(PC),A0
	MOVE.L	VEX_LinesPerPattern,D0
	MOVE.B	D2,-1(A0,D0.W)
	DC.W	$4c41
	DC.W	$0000
	MOVE.W	D1,D7
	SUBQ.W	#1,D7
LAB_095A:
	MOVE.B	D2,(A0)
	LEA	0(A0,D0.W),A0
	DBF	D7,LAB_095A
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetTab:
	CMPI.W	#$ffff,Shift_KEY+2
	BNE.W	MoveTab
	MOVEM.L	D0/A0,-(A7)
	LEA	Test_PATTED+2,A0
	MOVE.W	34(A0),D0
	ADD.W	62(A0),D0
	BSR.S	SetTabulator
	MOVEM.L	(A7)+,D0/A0
	RTS
SetTabulator:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	TabulatorMem_PTR+2(PC),A1
	NOT.B	0(A1,D0.W)
	JSR	PatEdDrawActLine
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SpeedUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	MOVEA.L	24(A0),A2
	ADDQ.W	#1,14(A2)
	BSR.W	DrawPosition
	BSR.W	UpdatePosListQ
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	RTS
SpeedDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2,A0
	MOVEA.L	24(A0),A2
	CMPI.W	#$0001,14(A2)
	BEQ.S	LAB_095F
	SUBQ.W	#1,14(A2)
	BSR.W	DrawPosition
	BSR.W	UpdatePosListQ
LAB_095F:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadArea:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$000003ed,D0
	MOVE.L	A4,D1
	BSR.W	EasyDOpen
	MOVEA.L	A5,A0
	MOVE.L	D5,D0
	BSR.W	EasyDRead
	BSR.W	EasyDClose
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DecodeStrings:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Encode_START+1,A5
	MOVE.L	#$00003a24,D5
	BSR.S	DecodeArea
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DecodeArea:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	#$4130,D0
	LSR.L	#1,D5
	SUBQ.W	#2,D5
	BMI.S	LAB_0964
LAB_0963:
	ADD.W	D0,(A5)+
	ADDQ.W	#1,D0
	DBF	D5,LAB_0963
LAB_0964:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadDefaultPrefs:
	DC.W	$0c3a
	DC.W	$00ff
	DC.W	$004a
	BEQ.S	LoadDefPref
	RTS
LoadDefPref:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.B	DefaultPrefs
	LEA	DefaultPrefs_TXT(PC),A0
	MOVEA.L	FinalFileNameRT_PTR,A1
	JSR	CopyString
	MOVE.L	#$000003ed,D0
	BSR.W	EasyDOpenFFN
	TST.L	D0
	BEQ.W	LoadPrefs_X
	MOVE.L	#$00000330,D0
	LEA	GuiPrefsHead,A0
	BSR.W	EasyDRead
	TST.L	D0
	BEQ.W	LoadPrefs_X
	BRA.W	SetPrefs_LINK
DefaultPrefs:
	DC.W	$ff00
PrepareCDDA:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	LAB_096E+3(PC),A0
	JSR	SimpleFileRequest
	TST.W	D0
	BEQ.W	LAB_096B
	LEA	LAB_096C(PC),A0
	LEA	LAB_096D(PC),A1
	MOVEQ	#0,D1
	MOVE.L	#$00002710,D2
	BSR.W	ReqMinMaxLong
	TST.W	D0
	BEQ.S	LAB_096B
	DC.W	$4aba
	ORI.W	#$6762,11322(A4)
	ORI.W	#$2079,-(A6)
	DC.L	FinalFileNameRT_PTR
	MOVE.L	#$000003ed,D0
	BSR.W	EasyDOpenFFN
	TST.L	D0
	BEQ.S	LAB_096A
	BSR.W	GetFileName
	BSR.W	FileLength
	TST.L	D0
	BEQ.S	LAB_096A
	ANDI.L	#$fffffffc,D0
	BSR.W	WriteAssDecLong
	MOVE.L	D0,D7
	MOVE.L	D7,D5
	DC.W	$4c46
	ADDQ.B	#8,D5
	ADDQ.L	#1,D5
	DC.W	$4c06
	ADDQ.B	#8,D0
	SUB.L	D7,D5
	MOVE.L	D5,D0
	BSR.W	WriteAssDecLong
	MOVE.L	D0,D6
	LSR.L	#2,D6
	SUBQ.L	#1,D6
	BMI.S	LAB_096A
	MOVE.L	D7,D1
LAB_0969:
	MOVEQ	#0,D0
	BSR.W	EasyDWriteLong
	TST.L	D0
	BEQ.S	LAB_096A
	ADDQ.L	#4,D1
	DBF	D6,LAB_0969
LAB_096A:
	BSR.W	EasyDClose
LAB_096B:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_096C:
	DC.W	$0000
	DC.W	$0930
LAB_096D:
	CLR.W	28515(A4)
	BMI.S	LoadPrefs
	SUBQ.W	#1,31333(A1)
	MOVE.L	25902(A0),D0
	BEQ.S	LAB_0971+2
	DC.W	$2032
	DC.W	$3335
LAB_096E:
	MOVE.W	67(A1),D1
	NEG.W	D4
	DC.W	$4120
	NOT.W	27749(A1)
	MOVEA.L	A6,A0
LAB_096F:
	DC.W	$616d
	DC.W	$6500
LoadPrefs:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Prefs_MATCH,A0
	JSR	SetFileRequestPat
	LEA	PrefsDir_TXT,A0
LAB_0971:
	JSR	SetFileRequestPath
	LEA	LoadPrefs_TXT+1,A0
	JSR	SimpleFileRequest
	TST.W	D0
	BEQ.W	LoadPrefs_X
	MOVEA.L	FinalFileNameRT_PTR,A0
	BSR.W	ClipExtension
	LEA	LAB_13D1,A1
	BSR.W	AddExtention
	MOVE.L	#$000003ed,D0
	BSR.W	EasyDOpenFFN
	TST.L	D0
	BEQ.S	LoadPrefs_X
	MOVE.L	#$00000330,D0
	LEA	GuiPrefsHead,A0
	BSR.W	EasyDRead
	TST.L	D0
	BEQ.S	LoadPrefs_X
SetPrefs_LINK:
	CMPI.L	#$0053594d,GuiPrefsHead
	BNE.S	LoadPrefs_ILL
	CMPI.L	#$50524653,LAB_1302
	BNE.S	LoadPrefs_ILL
	CMPI.W	#$0001,LAB_1303
	BHI.S	LoadPrefs_ILL
	CMPI.W	#$0001,LAB_1303
	BCC.S	LoadPrefs_REV1
	BSR.W	SetAudioPrefs
	BRA.S	LoadPrefs_X
LoadPrefs_REV1:
	MOVE.B	LAB_1303+2,D0
	LEA	SetPrefs_LIST(PC),A0
LoadPrefs_L:
	MOVE.W	(A0)+,D1
	CMPI.W	#$ffff,D1
	BEQ.S	LoadPrefs_X
	MOVE.W	(A0)+,D2
	MOVEA.L	(A0)+,A1
	CMP.W	#$0001,D1
	BHI.S	LoadPrefs_L
	BTST	D2,D0
	BNE.S	LoadPrefs_L
	JSR	(A1)
	BRA.S	LoadPrefs_L
LoadPrefs_X:
	BSR.W	EasyDClose
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadPrefs_ILL:
	MOVE.L	#noprefs_TXT,AssText_TXT
	BSR.W	PrintAssTextF
	BRA.S	LoadPrefs_X
SetPrefs_LIST:
	ORI.B	#$02,D1
	DC.L	SetGuiPrefs
	ORI.B	#$01,D1
	DC.L	SetAudioPrefs
	ORI.B	#$03,D1
	DC.L	SetStructPrefs
	DC.W	$ffff
SavePrefs:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	DefaultPrefs_TXT(PC),A0
	MOVEA.L	FinalFileNameRT_PTR,A1
	JSR	CopyString
	BRA.S	SavePrefs_LINK
SavePrefsAs:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Prefs_MATCH,A0
	JSR	SetFileRequestPat
	LEA	PrefsDir_TXT,A0
	JSR	SetFileRequestPath
	LEA	SavePrefsAs_TXT+1,A0
LAB_097A:
	JSR	SimpleFileRequest
	TST.W	D0
	BEQ.S	SavePrefsAs_X
	MOVEA.L	FinalFileNameRT_PTR,A0
	BSR.W	ClipExtension
	LEA	LAB_13D1,A1
	BSR.W	AddExtention
SavePrefs_LINK:
LAB_097B:
	MOVE.L	#$0053594d,GuiPrefsHead
	MOVE.L	#$50524653,LAB_1302
	MOVE.L	#$00010000,LAB_1303
	MOVE.B	Prefs+1(PC),LAB_1303+2
	BSR.W	ReadGuiPrefs
	BSR.S	BuildAudioPrefs
	BSR.S	BuildStructPrefs
	MOVE.L	#$000003ee,D0
	BSR.W	EasyDOpenFFN
	TST.L	D0
	BEQ.S	SavePrefsAs_X
	MOVE.L	#$00000330,D0
	LEA	GuiPrefsHead,A0
	BSR.W	EasyDWrite
SavePrefsAs_X:
	BSR.W	EasyDClose
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DefaultPrefs_TXT:
	DC.W	$454e
	ADDQ.W	#3,D1
	ADDQ.W	#1,D3
	MOVEA.W	(A3),A5
	DC.W	$796d
	MOVEQ	#104,D0
	BLE.S	LAB_0986
	DC.W	$6965
	TRAP	#7
	DC.W	$2e70
	MOVEQ	#101,D1
	DC.W	$6673
Prefs:
	DC.W	$0000
TAudioPrefs:
	BCHG	#1,Prefs+1
	RTS
TVideoPrefs:
	BCHG	#2,Prefs+1
	RTS
TStructPrefs:
	BCHG	#3,Prefs+1
	RTS
BuildAudioPrefs:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	APrefs_MAKELIST,A0
	MOVEA.L	(A0)+,A1
	BSR.S	MakePrefs
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
BuildStructPrefs:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	StructPrefs_MAKELIST,A0
	MOVEA.L	(A0)+,A1
	BSR.S	MakePrefs
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetAudioPrefs:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BTST	#1,Prefs+1(PC)
	BNE.S	SetAudioPrefs_X
	LEA	APrefs_MAKELIST,A0
	MOVEA.L	(A0)+,A1
	BSR.S	SetPrefs
	TST.W	VL_PROCVLIMIT+2
LAB_0986:
	BNE.S	SetAudioPrefs_X
	MOVE.W	#$0063,VL_PROCVLIMIT+2
SetAudioPrefs_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetStructPrefs:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BTST	#3,Prefs+1(PC)
	BNE.S	SetStructPrefs_X
	LEA	StructPrefs_MAKELIST,A0
	MOVEA.L	(A0)+,A1
	BSR.S	SetPrefs
SetStructPrefs_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
MakePrefs:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	MPrefUnit_JL(PC),A3
MakePrefUnit_L:
	MOVE.L	(A0)+,D0
	CMPI.L	#$00000002,D0
	BHI.S	MakePrefUnit_X
	DC.W	$45f3
	DC.W	$0400
	MOVEA.L	(A2),A2
	JSR	(A2)
	BRA.S	MakePrefUnit_L
MakePrefUnit_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
MakeULPTR:
	MOVEA.L	(A0)+,A5
	MOVE.L	(A5),(A1)+
	RTS
MakeUWPTR:
	MOVEA.L	(A0)+,A5
	MOVE.W	(A5),(A1)+
	RTS
MakeUBPTR:
	MOVEA.L	(A0)+,A5
	MOVE.B	(A5),(A1)+
	RTS
MPrefUnit_JL:
	DC.L	MakeULPTR
	DC.L	MakeUWPTR
	DC.L	MakeUBPTR
SetPrefs:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	SPrefUnit_JL(PC),A3
SetPrefUnit_L:
	MOVE.L	(A0)+,D0
	CMPI.L	#$00000002,D0
	BHI.S	SetPrefUnit_X
	DC.W	$45f3
	DC.W	$0400
	MOVEA.L	(A2),A2
	JSR	(A2)
	BRA.S	SetPrefUnit_L
SetPrefUnit_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetULPTR:
	MOVEA.L	(A0)+,A5
	MOVE.L	(A1)+,(A5)
	RTS
SetUWPTR:
	MOVEA.L	(A0)+,A5
	MOVE.W	(A1)+,(A5)
	RTS
SetUBPTR:
	MOVEA.L	(A0)+,A5
	MOVE.B	(A1)+,(A5)
	RTS
SPrefUnit_JL:
	DC.L	SetULPTR
	DC.L	SetUWPTR
	DC.L	SetUBPTR
	DC.W	$0000
PrintAssDecByte:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	ConvertToDecByte
	LEA	DecByteSave,A0
	BSR.W	PrintAssText
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PrintDblAssHex:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	LAB_09F1+3(PC),A0
	BSR.W	ConvertToHexLong
	MOVE.L	D1,D0
	LEA	AssHex(PC),A0
	BSR.W	ConvertToHexLong
	LEA	LAB_09F1+3(PC),A0
	MOVE.B	#$20,8(A0)
	BSR.W	PrintAssText
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PrintHexLong:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	AssHex(PC),A0
	BSR.W	ConvertToHexLong
	BSR.W	PrintAssText
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PrintDblAssString:
	MOVEM.L	A0,-(A7)
	BSR.S	ClrAssString
	BSR.S	AddAssString
	MOVEA.L	A1,A0
	BSR.S	AddAssString
	BSR.S	DisplayAssString
	MOVEA.L	(A7)+,A0
	RTS
ClrAssString:
	MOVEM.L	A0,-(A7)
	MOVEA.L	TempAssString(PC),A0
	CLR.B	(A0)
	MOVEA.L	(A7)+,A0
	RTS
AddAssString:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	TempAssString(PC),A1
	TST.B	(A0)
	BEQ.S	AddAssString_X
	JSR	AddString
AddAssString_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DisplayAssString:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	TempAssString(PC),A0
	TST.B	(A0)
	BEQ.S	DisplayAStr_X
	BSR.W	PrintAssText
	CLR.B	(A0)
DisplayAStr_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
EasyDOpenFFN:
	MOVEM.L	D1/A0,-(A7)
	BSR.S	ClrAssString
	LEA	EasyDO,A0
	CMPI.L	#$000003ee,D0
	BNE.S	EasyDOpenNEW
	LEA	EasyDOLD,A0
EasyDOpenNEW:
	BSR.S	AddAssString
	MOVEA.L	FinalFileNameRT_PTR,A0
	BSR.S	AddAssString
	BSR.S	DisplayAssString
	MOVE.L	FinalFileNameRT_PTR,D1
	BSR.W	EasyDOpen
	MOVEM.L	(A7)+,D1/A0
	RTS
	DC.W	$0000
EasyDFindFile:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVEQ	#-2,D2
	MOVEA.L	_DosBase,A6
	JSR	-84(A6)
	MOVE.L	D0,D7
	TST.L	D0
	BEQ.S	LAB_09A4
	MOVE.L	D7,D1
	MOVEA.L	_DosBase,A6
	JSR	-90(A6)
LAB_09A4:
	MOVE.L	D7,D0
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
Overwrite_TestFFN:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.B	#$ff,Overwrite_STATUS
	DC.W	$0c3a
	DC.W	$00ff
	DC.W	$00aa
	BNE.S	LAB_09A6
	MOVE.L	FinalFileNameRT_PTR,D1
	BSR.S	EasyDFindFile
	TST.L	D0
	BEQ.S	LAB_09A6
	LEA	Overwrite_CTXT+1(PC),A0
	JSR	MulitChoiceRequest
	TST.W	D0
	BNE.S	LAB_09A6
	CLR.B	Overwrite_STATUS
LAB_09A6:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
Overwrite_STATUS:
Overwrite_CTXT:
	ORI.W	#$696c,D6
	BCS.S	LAB_09A9+2
	DC.W	$4578
	DC.W	$6973
	MOVEQ	#115,D2
	MOVE.L	-(A0),D7
	DC.W	$4f76
	BCS.S	Wait5Secs
	DC.W	$7772
	BVS.S	LAB_09B2+2
	BCS.S	LAB_09AB
	MOVE.W	D0,-(A7)
	SUBQ.W	#4,-(A5)
	DC.W	$737c
	DC.W	$4162
	BLE.S	LAB_09B3
	MOVEQ	#0,D2
EasyDOpen:
LAB_09A9:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	BSR.W	EasyDClrBLen
	MOVE.L	D0,D2
	CMPI.L	#$000003ee,D2
	BNE.S	LAB_09AC
	DC.W	$0c3a
LAB_09AB:
	DC.W	$00ff
	ORI.W	#$6616,D6
	BSR.W	EasyDFindFile
	TST.L	D0
	BEQ.S	LAB_09AC
	LEA	Overwrite_CTXT+1(PC),A0
	JSR	MulitChoiceRequest
	TST.W	D0
	BEQ.S	LAB_09AF
LAB_09AC:
	MOVEA.L	_DosBase,A6
	JSR	-30(A6)
	TST.L	D0
	BNE.S	LAB_09AD
	MOVE.L	#EasyDOERR,AssText_TXT
	BSR.W	PrintAssTextF
LAB_09AD:
	MOVE.L	D0,EasyDHandle
LAB_09AE:
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
LAB_09AF:
	MOVEQ	#0,D0
	BRA.S	LAB_09AE
EasyDOpen_SAFE:
	ORI.B	#$00,D0
Wait5Secs:
	MOVEM.L	D0-D7/A0-A6,-(A7)
LAB_09B2:
	MOVE.L	#$00000096,D1
	MOVEA.L	_DosBase,A6
LAB_09B3:
	JSR	-198(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
EasyDClose:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	EasyDHandle(PC),D1
	BEQ.S	EasyDClose_X
	MOVE.L	#Done_TXT+1,AssText_TXT
	BSR.W	PrintAssTextF
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
EasyDClose_X:
	LEA	EasyDWBuf_PTR+2(PC),A0
	MOVE.L	#$00010006,MEM_DEBUG_INFO
	CLR.L	LAB_109F
	JSR	FreeMem
	CLR.L	EasyDHandle
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ReqMinMaxLong:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVE.L	(A0),D6
LAB_09B7:
	JSR	LongRequest
	TST.W	D0
	BEQ.S	LAB_09BA
	MOVE.L	(A0),D0
	CMP.L	D0,D1
	BLE.S	LAB_09B8
	MOVE.L	D1,(A0)
	BRA.S	LAB_09B7
LAB_09B8:
	CMP.L	D0,D2
	BGE.S	LAB_09B9
	MOVE.L	D2,(A0)
	BRA.S	LAB_09B7
LAB_09B9:
	MOVE.L	D0,D6
	MOVEQ	#-1,D0
LAB_09BA:
	MOVE.L	D6,(A0)
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
	DC.W	$0000
ReqFileBLen:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#8,D1
	MOVE.L	#$00002710,D2
	LEA	EasyBufLen+2(PC),A0
	LEA	RBufLen_TXT,A1
	MOVEQ	#10,D6
	MOVE.L	(A0),D7
	LSR.L	D6,D7
	MOVE.L	D7,(A0)
	BSR.S	ReqMinMaxLong
	MOVE.L	(A0),D7
	LSL.L	D6,D7
	MOVE.L	D7,(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
EasyDGetBuf:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.B	EasyDWBuf_STATUS+2
	MOVE.L	D0,D6
	LSL.L	#1,D6
	MOVE.L	EasyBufLen+2(PC),D7
	LEA	EasyDWBuf_PTR+2(PC),A0
LAB_09BD:
	MOVE.L	D7,4(A0)
	JSR	GetMem
	TST.L	D0
	BNE.S	LAB_09BE
	CLR.L	(A0)
	LSR.L	#1,D7
	CMP.L	D6,D7
	BCC.S	LAB_09BD
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_09BE:
	MOVE.L	D7,D0
	BSR.W	WriteAssDecLong
	BSR.W	WriteAssDecLong
	MOVE.L	D7,EasyDWBuf_MAXLEN+2
	BSR.S	EasyDWBufInit
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
EasyDWBufInit:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	EasyDWBuf_PTR+2(PC),EasyDWBuf_APTR+2
	CLR.L	EasyDWBuf_LEN+2
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
EasyDFlushBuf:
	DC.W	$4aba
	BCLR	D2,(A6)
	BNE.S	LAB_09C1
	RTS
LAB_09C1:
	MOVEM.L	A0,-(A7)
	MOVE.L	EasyDWBuf_LEN+2(PC),D0
	MOVEA.L	EasyDWBuf_PTR+2(PC),A0
	BSR.S	EasyDWrite
	MOVEA.L	(A7)+,A0
	RTS
	DC.W	$0000
EasyDWriteBuf:
	TST.B	EasyDWBuf_STATUS+2
	BEQ.S	LAB_09C3
	BSR.W	EasyDGetBuf
LAB_09C3:
	DC.W	$4aba
	BCHG	D2,26442(A6)
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVE.L	EasyDWBuf_LEN+2(PC),D7
	ADD.L	D0,D7
	CMP.L	EasyDWBuf_MAXLEN+2(PC),D7
	BLS.S	LAB_09C4
	MOVE.L	D0,D7
	BSR.S	EasyDFlushBuf
	TST.L	D0
	BEQ.S	LAB_09C5
	BSR.S	EasyDWBufInit
	MOVE.L	D7,D0
LAB_09C4:
	MOVEA.L	EasyDWBuf_APTR+2(PC),A1
	BSR.W	CopyMemory
	ADD.L	D0,EasyDWBuf_APTR+2
	MOVE.L	D7,EasyDWBuf_LEN+2
	MOVEQ	#-1,D0
LAB_09C5:
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
	DC.W	$0000
EasyDGetBLen:
	MOVE.L	LAB_09EB+2(PC),D0
	RTS
EasyDClrBLen:
	CLR.L	LAB_09EB+2
	RTS
	DC.W	$0000
EasyDWrite:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVE.L	A0,D2
	MOVE.L	D0,D3
	MOVEQ	#0,D0
	MOVE.L	EasyDHandle(PC),D1
	BEQ.S	LAB_09C9
	MOVEA.L	_DosBase,A6
	JSR	-48(A6)
	TST.L	D0
	BPL.S	LAB_09CA
	MOVEQ	#0,D0
LAB_09C9:
	TST.L	D0
	BNE.S	LAB_09CA
	MOVE.L	#EasyDWERR,AssText_TXT
	BSR.W	PrintAssTextF
LAB_09CA:
	ADD.L	D0,LAB_09EB+2
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
EasyDHandle:
	ORI.B	#$00,D0
EasyDWriteLong:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVE.L	D0,EasyDLong
	MOVE.L	D1,D2
	MOVE.L	EasyDHandle(PC),D1
	MOVEQ	#-1,D3
	MOVEA.L	_DosBase,A6
	JSR	-66(A6)
	LEA	EasyDLong(PC),A0
	MOVEQ	#4,D0
	BSR.S	EasyDWrite
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
EasyDLong:
	ORI.B	#$00,D0
EasyDRead:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVE.L	A0,D2
	MOVE.L	D0,D3
	MOVEQ	#0,D0
	MOVE.L	EasyDHandle(PC),D1
	BEQ.S	EasyDRead_X
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	TST.L	D0
	BPL.S	EasyDRead_X
	MOVEQ	#-1,D0
EasyDRead_X:
	ADDQ.L	#1,D0
	TST.L	D0
	BNE.S	EasyDRead_OK
	MOVE.L	#EasyDRERR,AssText_TXT
	BSR.W	PrintAssTextF
EasyDRead_OK:
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
	DC.W	$0000
SaveInstrSetup:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	SampleList_MATCH+1,A0
	JSR	SetFileRequestPat
	LEA	SaveInstrSetup_TXT+1,A0
	MOVEQ	#3,D0
	BSR.W	GetPathBuf
	JSR	SimpleFileRequest
	BSR.W	SavePathBuf
	TST.W	D0
	BEQ.S	SaveInstrSetup_X
	BSR.W	SaveActualInstruments
SaveInstrSetup_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadActualBlock:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Block_MATCH+1,A0
	JSR	SetFileRequestPat
	LEA	LoadActualBlock_TXT+1,A0
	MOVEQ	#3,D0
	BSR.W	GetPathBuf
	JSR	SimpleFileRequest
	BSR.W	SavePathBuf
	TST.W	D0
	BNE.S	LAB_09D5
LAB_09D4:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_09D5:
	MOVEA.L	ActualBlock_PTR,A3
	DC.W	$4a8b
	BEQ.S	LAB_09D4
	LEA	ActualBlock_INFO,A2
	MOVE.L	#$000003ed,D0
	BSR.W	EasyDOpenFFN
	TST.L	D0
	BEQ.S	LAB_09D4
	BSR.W	EasyDReadLong
	TST.L	D1
	BEQ.W	LAB_09D7
	CMPI.L	#$53796d42,D0
	BNE.W	LAB_09D7
	BSR.W	EasyDReadLong
	TST.L	D1
	BEQ.W	LAB_09D7
	CMPI.L	#$00000001,D0
	BNE.S	LAB_09D7
	BSR.W	EasyDReadLong
	BSR.W	EasyDReadLong
	TST.L	D1
	BEQ.S	LAB_09D7
	MOVE.L	D0,D2
	BEQ.S	LAB_09D7
	BSR.S	EasyDReadLong
	BSR.S	EasyDReadLong
	TST.L	D1
	BEQ.S	LAB_09D7
	MOVE.L	D0,D3
	BEQ.S	LAB_09D7
	BSR.S	EasyDReadLong
	BSR.S	EasyDReadLong
	TST.L	D1
	BEQ.S	LAB_09D7
	CMPI.L	#$00000004,D0
	BNE.S	LAB_09D7
	BSR.S	EasyDReadLong
	BSR.S	EasyDReadLong
	TST.L	D1
	BEQ.S	LAB_09D7
	TST.L	D0
	BEQ.S	LAB_09D7
	MOVE.W	D2,10(A2)
	MOVE.W	D3,12(A2)
	MOVEA.L	A3,A0
	BSR.W	EasyDRead
	TST.L	D1
	BEQ.S	LAB_09D7
	BSR.S	EasyDReadLong
	TST.L	D1
	BEQ.S	LAB_09D6
	BSR.S	EasyDReadLong
	TST.L	D1
	BEQ.S	LAB_09D6
	TST.L	D0
	BEQ.S	LAB_09D6
	LEA	Block_Diz(PC),A0
	CLR.B	(A0)
	MOVE.L	#$00000100,D0
	BSR.W	EasyDRead
	TST.L	D1
	BEQ.S	LAB_09D6
	TST.B	(A0)
	BEQ.S	LAB_09D6
	BSR.W	PrintAssText
LAB_09D6:
	BSR.W	EasyDClose
	BRA.W	LAB_09D4
LAB_09D7:
	BSR.W	EasyDClose
	CLR.W	10(A2)
	CLR.W	12(A2)
	BRA.W	LAB_09D4
EasyDReadLong:
	MOVEM.L	A0,-(A7)
	LEA	EasyDLong(PC),A0
	MOVEQ	#4,D0
	BSR.W	EasyDRead
	MOVE.L	D0,D1
	MOVE.L	(A0),D0
	MOVEA.L	(A7)+,A0
	RTS
SaveActualBlock:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Block_MATCH+1,A0
	JSR	SetFileRequestPat
	LEA	SaveActualBlock_TXT,A0
	MOVEQ	#3,D0
	BSR.W	GetPathBuf
	JSR	SimpleFileRequest
	BSR.W	SavePathBuf
	TST.W	D0
	BNE.S	LAB_09DB
LAB_09DA:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_09DB:
	MOVEA.L	FinalFileNameRT_PTR,A0
	BSR.W	ClipExtension
	LEA	LAB_13D3+1,A1
	BSR.W	AddExtention
	LEA	ActualBlock_INFO,A2
	TST.W	10(A2)
	BEQ.S	LAB_09DA
	TST.W	12(A2)
	BEQ.S	LAB_09DA
	MOVEA.L	ActualBlock_PTR,A3
	DC.W	$4a8b
	BEQ.S	LAB_09DA
	LEA	Block_HEAD(PC),A0
	MOVEQ	#0,D0
	MOVE.W	10(A2),D0
	MOVE.L	D0,12(A0)
	MOVE.L	D0,D7
	MOVE.W	12(A2),D0
	MOVE.L	D0,20(A0)
	DC.W	$4c00
	MOVEQ	#0,D0
	MULU	#$0004,D7
	MOVE.L	D7,36(A0)
	MOVE.B	#$ff,EasyDOpen_SAFE
	MOVE.L	#$000003ee,D0
	BSR.W	EasyDOpenFFN
	CLR.B	EasyDOpen_SAFE
	TST.L	D0
	BEQ.S	LAB_09DA
	MOVEQ	#40,D0
	LEA	Block_HEAD(PC),A0
	BSR.W	EasyDWrite
	MOVE.L	D7,D0
	MOVEA.L	A3,A0
	BSR.W	EasyDWrite
	MOVE.L	#$000000ff,D0
	LEA	Block_Diz(PC),A0
	LEA	Block_Diz_TXT,A1
	JSR	StringRequest
	TST.B	(A0)
	BEQ.S	LAB_09DC
	TST.W	D0
	BEQ.S	LAB_09DC
	MOVE.L	#$00000108,D0
	LEA	Block_Diz_HEAD(PC),A0
	BSR.W	EasyDWrite
LAB_09DC:
	BSR.W	EasyDClose
	BRA.W	LAB_09DA
Block_HEAD:
	SUBQ.W	#1,EXT_0033
	DC.W	$0001
	DC.W	$ffff
	DC.W	$ffff
	ORI.B	#$00,D0
	DC.W	$ffff
	DC.W	$fffe
	ORI.B	#$00,D0
	DC.W	$ffff
	DC.W	$fffb
	ORI.B	#$04,D0
	DC.W	$ffff
	DC.W	$fff3
	ORI.B	#$00,D0
Block_Diz_HEAD:
	DC.W	$ffff
	DC.W	$ffeb
	DC.W	$0000
	BTST	D0,D0
Block_Diz:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
LAB_09E0:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
Block_Diz_HEADEND:
	DC.W	$0000
LoadInstrSetup:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	SampleList_MATCH+1,A0
	JSR	SetFileRequestPat
	LEA	LoadInstrSetup_TXT,A0
	MOVEQ	#3,D0
	BSR.W	GetPathBuf
	JSR	SimpleFileRequest
	BSR.W	SavePathBuf
	TST.W	D0
	BEQ.S	LoadInstrSetup_X
	BSR.W	LoadActualInstruments
	BSR.W	AutoLoadSamples
	BSR.W	AutoCalcLineSamples
LoadInstrSetup_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ReloadInstrSetup:
	BSR.W	AutoLoadSamples
	JMP	AutoCalcLineSamples(PC)
SaveActualProject:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	FinalFileNameRT_PTR,A1
	MOVEA.L	ProjectName_PTR,A0
	TST.B	(A0)
	BEQ.W	SaveActualProject_X
	JSR	CopyString
	MOVE.B	LAB_1164,MODULE_SONGTYPE+1
	BRA.S	SaveActualProject_LINK
SaveActualProjectAs:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Song_MATCH,A0
	JSR	SetFileRequestPat
	LEA	SongDir_TXT,A0
	JSR	SetFileRequestPath
	LEA	SaveActualProject_TXT,A0
	MOVEQ	#1,D0
	BSR.W	GetPathBuf
	BSR.W	GetTempProj
	JSR	SimpleFileRequest
	BSR.W	SavePathOnlyBuf
	TST.W	D0
	BEQ.S	SaveActualProject_X
	MOVEA.L	FinalFileNameRT_PTR,A0
	BSR.W	ClipExtension
	LEA	Song_EXT+1,A1
	BSR.W	AddExtention2
	BSR.W	SavePathBuf
LAB_09E7:
	MOVE.B	#$ff,MODULE_SONGTYPE+1
	MOVE.B	#$ff,EasyDOpen_SAFE
SaveActualProject_LINK:
	BRA.W	SaveActualModule_LINKSONG
	CLR.B	MODULE_SONGTYPE+1
	MOVEA.L	FinalFileNameRT_PTR,A1
	MOVEA.L	ProjectName_PTR,A0
	TST.B	(A0)
	BEQ.S	SaveActualProject_X
	JSR	CopyString
SaveActualProject_X:
	CLR.B	EasyDOpen_SAFE
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
EasyBufLen:
	ORI.B	#$04,D0
LAB_09EB:
	ORI.B	#$00,D0
EasyDWBuf_APTR:
	ORI.B	#$00,D0
EasyDWBuf_LEN:
	ORI.B	#$00,D0
EasyDWBuf_MAXLEN:
	ORI.B	#$00,D0
EasyDWBuf_PTR:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$01,D0
ChannelNumb_JL:
	ORI.B	#$00,D0
	DC.W	$0004
	DC.L	DoNil
	ORI.B	#$08,D0
	DC.L	SetEightVoices
	ORI.B	#$10,D0
	DC.L	SetSixteenVoices
	ORI.B	#$20,D0
	DC.L	SetThirtytwoVoices
	ORI.B	#$40,D0
	DC.L	SetSixtyFourVoices
	ORI.B	#$80,D0
	DC.L	Set128Voices
	DC.W	$0000
	BTST	D0,D0
	DC.L	Set256Voices
	DC.W	$ffff
	DC.W	$ffff
LAB_09F1:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
AssHex:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
ModHead_PTR:
	ORI.B	#$00,D0
	DC.W	$0000
	DC.W	$043c
	ORI.B	#$00,D1
ModSong_PTR:
	ORI.B	#$00,D0
LAB_09F5:
	DC.W	$0001
	DC.W	$f400
	ORI.B	#$00,D1
ModuleDiz_PTR:
	ORI.B	#$00,D0
LAB_09F7:
	ORI.B	#$00,D0
	ORI.B	#$00,D1
ModuleDiz2_PTR:
	ORI.B	#$00,D0
LAB_09F9:
	ORI.B	#$00,D0
	ORI.B	#$00,D1
TempAssString:
	ORI.B	#$00,D0
	DC.W	$0000
	ANDI.B	#$01,D0
TabulatorMem_PTR:
	ORI.B	#$00,D0
LAB_09FC:
	ORI.B	#$00,D0
	ORI.B	#$01,D0
	DC.W	$0000
LoadActualModule:
	JSR	ClrLockState
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$0c3a
	DC.W	$00ff
	MOVE.L	A2,(A0)+
	BEQ.W	LoadActualModule_Xc
	JSR	HideBlockRange
	JSR	PatEdCrsrOff
	MOVE.B	#$ff,SONGFILEIO
	JSR	PattedUpdateReset
	BSR.W	FreeModuleDiz
	BSR.W	FreeModuleDiz2
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$0ab6
	BEQ.S	ReLoadActualModule
	CLR.B	MODULE_SONGTYPE+1
	LEA	SoundModule_MATCH+1,A0
	JSR	SetFileRequestPat
	LEA	ModuleDir_TXT,A0
	JSR	SetFileRequestPath
	LEA	LoadMod_TXT,A0
	MOVEQ	#2,D0
	BSR.W	GetPathBuf
	JSR	SimpleFileRequest
	BSR.W	SavePathOnlyBuf
	TST.W	D0
	BEQ.W	LoadActualModule_Xb
	BSR.W	SavePathBuf
	BSR.W	SetTempProj
	BSR.W	StopActualSong
	BSR.W	DeactivateDsp
	BSR.W	RedrawSpectrum
	MOVEA.L	FinalFileNameRT_PTR,A0
	MOVEA.L	ProjectName_PTR,A1
	JSR	CopyString
	CLR.B	LAB_1164
	BSR.W	ShowProjectName
ReLoadActualModule:
	BSR.W	DeactivateDsp
	MOVE.B	#$ff,SONGFILEIO
	MOVEM.L	A0,-(A7)
	MOVEA.L	SAMPLEMANLIST_PTR,A0
	BSR.W	FreeAllSamples
	BSR.W	InitSampleManagement
	MOVEA.L	(A7)+,A0
	CLR.W	MOD_RELOAD
LAB_09FF:
	MOVE.L	FinalFileNameRT_PTR,D1
	MOVE.L	#$000003ed,D2
	MOVEA.L	_DosBase,A6
	JSR	-30(A6)
	MOVEA.L	D0,A5
	BEQ.W	LoadActualModule_ERR
	MOVE.L	#LoadActualModule_HEAD,D2
	MOVEQ	#8,D3
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	LEA	LoadActualModule_HEAD,A0
	CMPI.L	#$58504b46,(A0)
	BNE.S	LAB_0A00
	MOVE.L	#UnpackXpk_TXT,AssText_TXT
	BSR.W	PrintAssTextF
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
	MOVEA.L	FinalFileNameRT_PTR,A0
	LEA	UnpackedName+1,A1
	BSR.W	UnpackXPKFile
	TST.W	D0
	BEQ.S	LAB_0A00
	MOVE.B	#$ff,DeleteTempXPKFile+1
	EXG	A0,A1
	JSR	CopyString
	BRA.S	LAB_09FF
LAB_0A00:
	CMPI.L	#$53796d4d,(A0)
	BNE.W	LoadActualModule_NOSYM
	TST.L	4(A0)
	BEQ.W	LoadActualModule_READERR
	CMPI.L	#$00000001,4(A0)
LAB_0A01:
	BHI.W	LoadActualModule_READERR
LoadActualModule_NOIRESET:
	MOVE.B	#$ff,SONGFILEIO
	BSR.W	MoveFirstInstrument
	CLR.W	LAB_0A65+2
	BSR.W	LoadModuleParts
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
	DC.W	$0c7a
	DC.W	$ffff
LAB_0A03:
	BCHG	D4,-(A0)
	BEQ.W	LoadActualModule_Xb
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$0dfe
	BEQ.S	LoadActualModule_HUNKERR
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$1e6c
	BEQ.S	LoadActualModule_PUREMOD
	CMPI.B	#$ff,MODULE_SONGTYPE+1
	BNE.S	LoadActualModule_PUREMOD
	BSR.W	AutoLoadSamples
	MOVE.B	#$ff,LAB_1164
LoadActualModule_PUREMOD:
	MOVE.B	#$ff,SONGFILEIO
	BSR.W	AutoCalcLineSamples
LoadActualModule_HUNKERR:
	LEA	Test_PATTED+2,A0
	JSR	HideBlockRange
	JSR	PattedUpdateDisp
	JSR	PatEdCrsrOn
	BSR.W	RebuildSoundSystem
	BSR.W	UpdatePosList
	BSR.W	MoveFirstInstrument
	JSR	DrawInstrument
	BSR.W	InitPSong
	JSR	MoveFirstPosition
	JSR	DrawSongStatus
	DC.W	$0c7a
	DC.W	$ffff
	BCLR	D6,(A2)
	BEQ.S	LoadActualModule_Xb
	MOVE.L	#Done_TXT+1,AssText_TXT
	BSR.W	PrintAssTextF
	BSR.S	DelTempXPKFile
	CLR.W	AutoLoadMod+2
	CMPI.W	#$ffff,BatchProc
	BNE.S	LoadActualModule_Xb
	MOVE.W	#$ffff,AutoPlayMod
LoadActualModule_Xb:
	CLR.B	SONGFILEIO
LoadActualModule_Xc:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadActualModule_READERR:
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
LoadActualModule_ERR:
	MOVE.L	#ErrLoadMod+1,AssText_TXT
	BSR.W	PrintAssTextF
	CLR.W	BatchProc
	CLR.W	AutoLoadMod+2
	BRA.S	LoadActualModule_Xb
	DC.W	$0000
DelTempXPKFile:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CMPI.B	#$ff,DeleteTempXPKFile+1
	BNE.S	LAB_0A0B
	MOVE.L	#UnpackedName+1,D1
	MOVEA.L	_DosBase,A6
	JSR	-72(A6)
	CLR.B	DeleteTempXPKFile+1
LAB_0A0B:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
LoadActualModule_NOSYM:
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
	MOVE.L	FinalFileNameRT_PTR,D1
	MOVE.L	#$000003ed,D2
	MOVEA.L	_DosBase,A6
	JSR	-30(A6)
	MOVEA.L	D0,A5
	BEQ.S	LoadActualModule_ERR
	LEA	ModHead_PTR(PC),A0
	JSR	GetMem
	TST.L	D0
	BEQ.W	LAB_0A10
	MOVE.L	ModHead_PTR(PC),D2
	MOVE.L	#$0000043c,D3
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
LAB_0A0D:
	JSR	-42(A6)
	MOVEA.L	ModHead_PTR(PC),A0
	CMPI.L	#$4d2e4b2e,1080(A0)
	BNE.W	LAB_0A0E
	MOVE.L	#PTMod_TXT+1,AssText_TXT
	BSR.W	PrintAssTextF
	MOVE.L	#$000009c4,NGSampleBoost+2
	MOVE.B	#$ff,MKFORMAT+1
	BSR.W	MKLoadSongData
	MOVE.B	#$41,LAB_13DC+1
	BSR.W	MKLoadSamples
	MOVE.L	#Done_TXT+1,AssText_TXT
	BSR.W	PrintAssTextF
	LEA	ModHead_PTR(PC),A0
	JSR	FreeMem
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
	LEA	Test_PATTED+2,A0
	JSR	HideBlockRange
	JSR	PattedUpdateDisp
	JSR	PatEdCrsrOn
	BSR.W	RebuildSoundSystem
	BSR.W	UpdatePosList
	JSR	MoveFirstPosition
	BSR.W	MoveFirstInstrument
	JSR	DrawInstrument
	BRA.W	LoadActualModule_Xb
LAB_0A0E:
	CMPI.L	#$45787465,(A0)
	BNE.S	LAB_0A0F
	CMPI.L	#$6e646564,4(A0)
	BNE.S	LAB_0A0F
	CMPI.L	#$204d6f64,8(A0)
	BNE.S	LAB_0A0F
	CMPI.L	#$756c653a,12(A0)
	BNE.S	LAB_0A0F
	MOVE.L	#XMFormat_TXT+1,AssText_TXT
	BSR.W	PrintAssTextF
LAB_0A0F:
	LEA	ModHead_PTR(PC),A0
	JSR	FreeMem
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
	BRA.W	LoadActualModule_ERR
LAB_0A10:
	MOVE.L	#XMnomem_TXT,AssText_TXT
	BSR.W	PrintAssTextF
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
	BRA.W	LoadActualModule_ERR
MKBuildPosList:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	MoveFirstSeq
	MOVEA.L	A0,A2
	MOVEA.L	TestSongData_PTR,A0
	MOVEQ	#32,D6
	SUBQ.W	#1,D0
	BMI.S	LAB_0A13
	LEA	Test_SONG,A3
	MOVEA.L	42(A3),A4
	CLR.W	2(A4)
	MOVEQ	#0,D2
LAB_0A12:
	ADDQ.W	#1,2(A4)
	MOVE.B	(A2)+,D2
	BSR.S	LAB_0A14
	LEA	0(A0,D6.W),A0
	DBF	D0,LAB_0A12
LAB_0A13:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0A14:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	#$0001,4(A0)
	CLR.W	6(A0)
	MOVE.W	D2,8(A0)
	CLR.W	10(A0)
	MOVE.W	#$0004,14(A0)
	MOVE.L	VEX_LinesPerPattern,D1
	CMPI.L	#$00000040,D1
	BLS.S	LAB_0A15
	MOVEQ	#64,D1
	CMPI.L	#$00000080,VEX_LinesPerPattern
	BNE.S	LAB_0A15
	MOVE.W	#$0080,D1
	MOVE.W	#$0002,14(A0)
LAB_0A15:
	MOVE.W	D1,12(A0)
	BSR.W	SetPatHeadPTR
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
MKLoadSongData:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	950(A0),A0
	MOVE.L	#MKNUMBPOS_TXT,AssText_TXT
	BSR.W	PrintAssTextF
	MOVEQ	#0,D0
	MOVE.B	(A0),D0
	BSR.W	WriteAssDecLong
	ADDQ.L	#2,A0
	MOVEQ	#0,D1
	BSR.W	MKBuildPosList
LAB_0A17:
	MOVE.B	(A0)+,D2
	CMP.B	D2,D1
	BHI.S	LAB_0A18
	MOVE.B	D2,D1
LAB_0A18:
	DBF	D0,LAB_0A17
	MOVEQ	#0,D0
	MOVE.B	D1,D0
	ADDQ.W	#1,D0
	MOVE.L	D0,D7
	MOVE.L	#MKNOPAT_TXT+1,AssText_TXT
	BSR.W	PrintAssTextF
	BSR.W	WriteAssDecLong
	MULU	#$0400,D0
	LEA	ModSong_PTR(PC),A0
	MOVE.L	D0,4(A0)
	JSR	GetMem
	TST.L	D0
	BEQ.S	LAB_0A1A
	MOVE.L	A5,D1
	MOVE.L	ModSong_PTR(PC),D2
	MOVE.L	LAB_09F5(PC),D3
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	TST.L	D0
	BEQ.S	LAB_0A19
	BMI.S	LAB_0A19
	MOVEA.L	ModSong_PTR(PC),A0
	BSR.S	MKConvertSongData
LAB_0A19:
	LEA	ModSong_PTR(PC),A0
	JSR	FreeMem
LAB_0A1A:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
MKConvertSongData:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	NoteMem_PTR+2,A1
	MOVEQ	#0,D4
	MOVE.W	CHANNEL_NUMB+2,D4
	SUBQ.W	#8,D4
	MULU	#$0004,D4
	SUBQ.W	#1,D7
	MOVE.W	CHANNEL_NUMB+2,D3
	MULU	#$0004,D3
LAB_0A1C:
	MOVEQ	#63,D5
LAB_0A1D:
	MOVEQ	#3,D6
LAB_0A1E:
	MOVE.L	(A0)+,D0
	BSR.S	MKConvertEvent
	CMPI.L	#$00000080,VEX_LinesPerPattern
	BNE.S	LAB_0A1F
	MOVE.L	D1,0(A1,D3.W)
	MOVE.L	D1,4(A1,D3.W)
LAB_0A1F:
	MOVE.L	D0,(A1)+
	MOVE.L	D0,(A1)+
	DBF	D6,LAB_0A1E
	LEA	0(A1,D4.W),A1
	CMPI.L	#$00000080,VEX_LinesPerPattern
	BNE.S	LAB_0A20
	LEA	0(A1,D3.W),A1
LAB_0A20:
	DBF	D5,LAB_0A1D
	DBF	D7,LAB_0A1C
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
MKConvertEvent:
	MOVEM.L	D2-D7/A0-A6,-(A7)
	TST.L	D0
	BEQ.W	LAB_0A27
	MOVE.W	D0,D1
	MOVE.W	D0,D6
	ANDI.W	#$0fff,D6
	MOVE.L	D0,D2
	ANDI.L	#$f000f000,D2
	MOVE.L	D2,D3
	LSR.W	#8,D2
	LSR.W	#4,D2
	ROL.L	#8,D3
	ADD.B	D3,D2
	ANDI.L	#$0000003f,D2
	SUBQ.B	#1,D2
	SWAP	D0
	ANDI.L	#$00000fff,D0
	ANDI.L	#$00000fff,D1
	MOVE.L	D0,D3
	MOVEQ	#0,D0
	CMPI.W	#$0358,D3
	BHI.S	LAB_0A22
	CMPI.W	#$0071,D3
	BCS.S	LAB_0A22
	BSR.W	MKGetpitch
	BRA.S	LAB_0A23
LAB_0A22:
	MOVE.L	#$00ff0000,D0
LAB_0A23:
	MOVE.W	#$6400,D0
	MOVE.W	D1,D7
	LSR.W	#8,D7
	CMPI.B	#$0c,D7
	BNE.S	LAB_0A25
	ANDI.W	#$00ff,D1
	MULU	#$0064,D1
	DIVU	#$0040,D1
	CMPI.W	#$0064,D1
	BHI.S	LAB_0A26
	TST.W	D1
	BNE.S	LAB_0A24
	MOVEQ	#1,D1
LAB_0A24:
	LSL.W	#8,D1
	MOVE.W	D1,D0
LAB_0A25:
	MOVE.B	D2,D0
	CMPI.B	#$ff,D2
	BEQ.S	LAB_0A27
LAB_0A26:
	BSR.S	MKConvert2ndFX
	MOVEM.L	(A7)+,D2-D7/A0-A6
	RTS
LAB_0A27:
	MOVE.L	#$00ff0000,D0
	BRA.S	LAB_0A26
MKConvert2ndFX:
	MOVEM.L	D0,-(A7)
	MOVE.L	#$00ff0000,D1
	BSR.S	MKCPitchSlideD
	BSR.S	MKCPitchSlideU
	BSR.S	MKCVSlideD
	BSR.S	MKCVSlideU
	MOVEM.L	(A7)+,D0
	RTS
MKCVSlideU:
	CMPI.W	#$0a10,D6
	BCS.S	LAB_0A2A
	CMPI.W	#$0a1f,D6
	BHI.S	LAB_0A2A
	MOVE.L	#$01000000,D1
LAB_0A2A:
	RTS
MKCVSlideD:
	CMPI.W	#$0a00,D6
	BCS.S	LAB_0A2C
	CMPI.W	#$0a0f,D6
	BHI.S	LAB_0A2C
	MOVE.L	#$02000000,D1
LAB_0A2C:
	RTS
MKCPitchSlideD:
	CMPI.W	#$0200,D6
	BCS.S	LAB_0A2E
	CMPI.W	#$02ff,D6
	BHI.S	LAB_0A2E
	MOVE.L	#$03000000,D1
LAB_0A2E:
	RTS
MKCPitchSlideU:
	CMPI.W	#$0100,D6
	BCS.S	LAB_0A30
	CMPI.W	#$01ff,D6
	BHI.S	LAB_0A30
	MOVE.L	#$04000000,D1
LAB_0A30:
	RTS
MKGetpitch:
	MOVEM.L	D4/A0,-(A7)
	LEA	MKperiodconv,A0
	MOVE.L	#$00010000,D0
LAB_0A32:
	MOVE.W	(A0)+,D4
	CMPI.W	#$ffff,D4
	BEQ.S	LAB_0A33
	CMP.W	D4,D3
	BCC.S	LAB_0A33
	ADDI.L	#$00010000,D0
	BRA.S	LAB_0A32
LAB_0A33:
	SUBI.L	#$00040000,D0
	BPL.S	LAB_0A34
	MOVE.L	#$00010000,D0
LAB_0A34:
	ANDI.L	#$00ff0000,D0
	MOVEM.L	(A7)+,D4/A0
	RTS
	DC.W	$0000
MKLoadSamples:
	BSR.W	MoveFirstInstrument
	MOVE.L	#MK_AnalyzeSample,AssText_TXT
	BSR.W	PrintAssTextF
	MOVEA.L	A0,A4
	LEA	20(A4),A3
	MOVEQ	#30,D7
LAB_0A36:
	MOVEQ	#0,D0
	MOVE.W	22(A3),D0
	TST.L	D0
	BNE.S	LAB_0A37
	BSR.W	DoKillActualInstr
	BSR.W	MoveNextInstrument
	BRA.S	LAB_0A38
LAB_0A37:
	LSL.L	#1,D0
	BSR.S	MKLoadSample
LAB_0A38:
	LEA	30(A3),A3
	DBF	D7,LAB_0A36
	RTS
MKLoadSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	SampleTemp_PTR(PC),A4
	CLR.L	(A4)
	MOVE.L	D0,4(A4)
	MOVEA.L	A4,A0
	JSR	GetMem
	MOVE.L	(A4),D2
	BEQ.S	LAB_0A3B
	MOVE.L	A5,D1
	MOVE.L	4(A4),D3
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	TST.L	D0
	BEQ.S	LAB_0A3B
	BMI.S	LAB_0A3B
	BSR.S	MKExctractSamples
	MOVE.L	(A4),D2
	BSR.W	DoKillActualInstr
	BSR.W	MKMakeName
	BSR.W	NewLoadHunkBuildSample
	JSR	DrawInstrument
	BSR.W	MoveNextInstrument
	MOVE.L	#$00010007,MEM_DEBUG_INFO
	CLR.L	LAB_109F
	LEA	SampleTemp_PTR(PC),A0
	JSR	FreeMem
LAB_0A3A:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0A3B:
	BRA.S	LAB_0A3A
MKExctractSamples:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#MK_Name,D1
	MOVE.L	#$000003ee,D2
	MOVEA.L	_DosBase,A6
	JSR	-30(A6)
	MOVEA.L	D0,A5
	BEQ.S	LAB_0A3D
	MOVEQ	#0,D0
	MOVE.L	A5,D1
	MOVE.L	SampleTemp_PTR(PC),D2
	MOVE.L	LAB_0A5B(PC),D3
	MOVEA.L	_DosBase,A6
	JSR	-48(A6)
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
LAB_0A3D:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
LoadModuleReadLong:
	MOVEM.L	D2-D7/A0-A6,-(A7)
	LEA	LoadActualModule_TEMP(PC),A4
	MOVE.L	A4,D2
	MOVEQ	#4,D3
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	MOVE.L	(A4),D1
	MOVEM.L	(A7)+,D2-D7/A0-A6
	RTS
LoadActualModule_TEMP:
	ORI.B	#$00,D0
LoadModuleParts:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.W	LoadHunkPart_RERROR
	CLR.B	RELOADGO_FLAG
	CLR.L	NGSampleBoost+2
	LEA	LoadModuleParts_JL+2(PC),A4
LAB_0A41:
	BSR.S	LoadModuleReadLong
	TST.L	D1
	BEQ.S	LAB_0A45
	TST.L	D0
	BEQ.S	LAB_0A45
	BMI.S	LAB_0A45
	MOVEA.L	A4,A3
LAB_0A42:
	BSR.W	HandleAllMsgs
	MOVE.L	(A3)+,D2
	TST.L	D2
	BEQ.S	LAB_0A43
	MOVEA.L	(A3)+,A0
	CMP.L	D1,D2
	BNE.S	LAB_0A42
	JSR	(A0)
	DC.W	$0c3a
	DC.W	$00ff
	MOVEP.L	26434(A6),D0
	DC.W	$0c7a
	DC.W	$ffff
	MOVEP	D3,26320(A2)
	BRA.S	LAB_0A45
LAB_0A43:
	MOVE.L	#LoadModskip_TXT+1,AssText_TXT
	BSR.W	PrintAssTextF
	TST.L	D1
	BEQ.S	LAB_0A45
	TST.L	D1
	BMI.S	LAB_0A44
	BSR.W	LoadModuleReadLong
	BRA.S	LAB_0A41
LAB_0A44:
	BSR.W	LoadModuleReadLong
	TST.L	D0
	BEQ.S	LAB_0A46
	BMI.S	LAB_0A46
	MOVE.L	D1,D2
	MOVE.L	A5,D1
	BSR.W	DOSSkip
	CMPI.L	#$ffffffff,D0
	BEQ.S	LAB_0A46
	BRA.S	LAB_0A41
LAB_0A45:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0A46:
	MOVE.L	#ErrLoadHunk,AssText_TXT
	BSR.W	PrintAssTextF
	JSR	WarnFlash
	MOVE.W	#$ffff,LoadHunkPart_RERROR
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadSkipLong:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	LoadModuleReadLong
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadModuleParts_JL:
	ORI.B	#$00,D0
	DC.W	$000a
	DC.L	LoadNGSampleBoost
	ORI.B	#$0b,D0
	DC.L	LoadSkipLong
	ORI.B	#$0c,D0
	DC.L	LoadSkipLong
	DC.W	$ffff
	DC.W	$ffff
	DC.L	LoadHCHANNELN
	DC.W	$ffff
	DC.W	$fffe
	DC.L	LoadHunkTRACKLEN
	DC.W	$ffff
	DC.W	$fffd
	DC.L	LoadHunkPATTERNNUMB
	DC.W	$ffff
	DC.W	$fffc
	DC.L	LoadHunkSAMPLENUMB
	DC.W	$ffff
	DC.W	$fffb
	DC.L	LoadHunkNOTESIZE
	DC.W	$ffff
	DC.W	$fffa
	DC.L	LoadHunkSYSTEMSPEED
	DC.W	$ffff
	DC.W	$fff6
	DC.L	LoadHunkSONGDATA
	DC.W	$ffff
	DC.W	$ffef
	DC.L	LoadHunkDeltaSAMPLE
	DC.W	$ffff
	DC.W	$ffee
	DC.L	LoadHunkDelta16
	DC.W	$ffff
	DC.W	$fff5
	DC.L	LoadHunkSAMPLE
	DC.W	$ffff
	DC.W	$fff4
	DC.L	LoadHunkEMPTYSAMPLE
	DC.W	$ffff
	DC.W	$fff3
	DC.L	LoadHunkNOTEDATA
	DC.W	$ffff
	DC.W	$fff2
	DC.L	LoadHunkSAMPLENAMES
	DC.W	$ffff
	DC.W	$fff1
	DC.L	LoadHunkSEQUENCE
	DC.W	$ffff
	DC.W	$fff0
	DC.L	LoadHunkINFOTEXT
	DC.W	$ffff
	DC.W	$ffec
	DC.L	LoadHunkINFOTEXT2
	DC.W	$ffff
	DC.W	$fff9
	DC.L	LoadHunkLoadSongSamples
	ORI.B	#$00,D0
	ORI.B	#$00,D0
LoadModuleInfo:
	ORI.B	#$00,D0
LAB_0A4A:
	ORI.B	#$00,D0
LAB_0A4B:
	ORI.B	#$00,D0
LAB_0A4C:
	ORI.B	#$00,D0
LAB_0A4D:
	ORI.B	#$00,D0
LAB_0A4E:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
RELOADGO_FLAG:
LoadHunkSAMPLE_DELTA:
	ORI.B	#$00,D0
LAB_0A51:
	ORI.B	#$00,D0
LoadHunkReloadGo:
	MOVE.B	#$ff,RELOADGO_FLAG
	RTS
	DC.W	$0000
LoadHunkDelta16:
	DC.W	$0c7a
	DC.W	$ffff
	BCLR	D0,D4
	BEQ.S	LoadHunkReloadGo
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	#$ffff,LAB_0A51
	CLR.W	LoadHunkSAMPLE_DELTA+2
	BRA.S	LoadHunkSAMPLE_IN
LoadHunkDeltaSAMPLE:
	DC.W	$0c7a
	DC.W	$ffff
	BCHG	D0,26576(A0)
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	#$ffff,LoadHunkSAMPLE_DELTA+2
	CLR.W	LAB_0A51
	BRA.S	LoadHunkSAMPLE_IN
LoadHunkSAMPLE:
	DC.W	$0c7a
	DC.W	$ffff
	MOVEP.L	26548(A4),D0
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.W	LoadHunkSAMPLE_DELTA+2
	CLR.W	LAB_0A51
LoadHunkSAMPLE_IN:
	BSR.W	LoadModuleReadLong
	TST.L	D0
	BEQ.W	LoadHunkPartERR
	BMI.W	LoadHunkPartERR
	LEA	SampleTemp_PTR(PC),A4
	CLR.L	(A4)
	MOVE.L	D1,4(A4)
	BEQ.S	LoadHunkSAMPLE_X
	MOVEA.L	A4,A0
	JSR	GetMem
	MOVE.L	(A4),D2
	BEQ.W	LoadHunkPartERR
	MOVE.L	A5,D1
	MOVE.L	4(A4),D3
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	TST.L	D0
	BEQ.S	LoadHunkSAMPLE_ERR
	BMI.S	LoadHunkSAMPLE_ERR
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$ff5e
	BNE.S	LoadHunkSAMPLE_Pak2
	MOVE.L	(A4),D2
	BEQ.S	LoadHunkSAMPLE_Unpacked
	MOVE.L	4(A4),D3
	BEQ.S	LoadHunkSAMPLE_Unpacked
	BSR.W	Delta16UnPackBlk
	BRA.S	LoadHunkSAMPLE_Unpacked
LoadHunkSAMPLE_Pak2:
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$ff44
	BNE.S	LoadHunkSAMPLE_Unpacked
	MOVE.L	(A4),D2
	BEQ.S	LoadHunkSAMPLE_Unpacked
	MOVE.L	4(A4),D3
	BEQ.S	LoadHunkSAMPLE_Unpacked
	BSR.W	DeltaUnPackModuleBlock
LoadHunkSAMPLE_Unpacked:
	BSR.W	NewLoadHunkBuildSample
	JSR	DrawInstrument
	BSR.S	MoveNextMonoInstrument
	MOVEA.L	A4,A0
	TST.L	(A0)
	BEQ.S	LoadHunkSAMPLE_X
	MOVE.L	#$00010007,MEM_DEBUG_INFO
	CLR.L	LAB_109F
	JSR	FreeMem
LoadHunkSAMPLE_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SampleTemp_PTR:
	ORI.B	#$00,D0
LAB_0A5B:
	ORI.B	#$00,D0
	ORI.B	#$01,D1
LoadHunkSAMPLE_ERR:
	MOVEA.L	A4,A0
	MOVE.L	#$00010007,MEM_DEBUG_INFO
	MOVE.L	#$00000001,LAB_109F
	JSR	FreeMem
	BRA.W	LoadHunkPartERR
	DC.W	$0000
MoveNextMonoInstrument:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	MoveNextInstrument
	BSR.W	GetActualInstrName
	CMPI.B	#$02,132(A0)
	BNE.S	MoveNextMonoInstrument_X
	BSR.W	MoveNextInstrument
MoveNextMonoInstrument_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadHunkEMPTYSAMPLE:
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$004e
	BEQ.W	LoadHunkReloadGo
	BSR.W	MoveNextInstrument
	RTS
LoadHCHANNELN:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	LAB_0A65(PC),A4
	BSR.W	LoadModuleReadLong
	MOVE.L	D1,LoadModuleInfo
	CMPI.W	#$ffff,(A4)
	BNE.S	LoadHCHANNELN_N
	MOVE.W	CHANNEL_NUMB+2,4(A4)
	MOVE.W	D1,6(A4)
	CMP.W	CHANNEL_NUMB+2,D1
	BEQ.S	LoadHCHANNELN_X
	MOVE.W	#$ffff,2(A4)
	BRA.S	LoadHCHANNELN_X
LoadHCHANNELN_N:
	CMP.W	CHANNEL_NUMB+2,D1
	BNE.S	LoadHunkPart_SetReload
LoadHCHANNELN_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
MOD_RELOAD:
LAB_0A63:
	ORI.B	#$00,D0
LAB_0A65:
	ORI.B	#$00,D0
LAB_0A67:
	ORI.B	#$00,D0
LAB_0A68:
	ORI.B	#$00,D0
LAB_0A69:
	DC.W	$0000
ToogleSongConv:
	NOT.W	LAB_0A65
	RTS
LoadHunkLoadSongSamples:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	LoadModuleReadLong
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadHunkPart_SetReload:
	MOVE.W	#$ffff,MOD_RELOAD
	MOVE.W	D1,LAB_0A63+2
	CMPI.W	#$0004,D1
	BNE.S	HunkSetChan0
	BRA.S	HunkSetChan6
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
HunkSetChan0:
	CMPI.W	#$0008,D1
	BNE.S	HunkSetChan1
	BSR.W	SetEightVoices
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
HunkSetChan1:
	CMPI.W	#$0010,D1
	BNE.S	HunkSetChan2
	BSR.W	SetSixteenVoices
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
HunkSetChan2:
	CMPI.W	#$0020,D1
	BNE.S	HunkSetChan3
	BSR.W	SetThirtytwoVoices
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
HunkSetChan3:
	CMPI.W	#$0040,D1
	BNE.S	HunkSetChan4
	BSR.W	SetSixtyFourVoices
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
HunkSetChan4:
	CMPI.W	#$0080,D1
	BNE.S	HunkSetChan5
	BSR.W	Set128Voices
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
HunkSetChan5:
	CMPI.W	#$0100,D1
	BNE.S	HunkSetChan6
	BSR.W	Set256Voices
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
HunkSetChan6:
	MOVE.W	#$ffff,LoadHunkPart_RERROR
	CLR.W	MOD_RELOAD
	BRA.W	LoadHunkPartERR
LoadHunkTRACKLEN:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	LAB_0A65(PC),A4
	BSR.W	LoadModuleReadLong
	MOVE.L	D1,LAB_0A4A
	MOVE.L	VEX_LinesPerPattern,D2
	CMPI.W	#$ffff,(A4)
	BNE.S	LoadHunkTRACKLEN_N
	MOVE.W	D2,8(A4)
	MOVE.W	D1,10(A4)
	CMP.W	D2,D1
	BEQ.S	LoadHunkTRACKLEN_X
	MOVE.W	#$ffff,2(A4)
	BRA.S	LoadHunkTRACKLEN_X
LoadHunkTRACKLEN_N:
	CMP.W	D2,D1
	BEQ.S	LoadHunkTRACKLEN_X
	MOVE.L	D1,VEX_LinesPerPattern
	MOVE.W	#$ffff,MOD_RELOAD
	MOVE.W	#$ffff,MAINEXIT_FLAG
LoadHunkTRACKLEN_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadHunkSAMPLENUMB:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	LoadModuleReadLong
	MOVE.L	D1,D2
	ANDI.L	#$0000ffff,D1
	MOVE.L	D1,LAB_0A4C
	SWAP	D2
	ANDI.L	#$000000ff,D2
	MOVE.L	#$00000bb8,D7
	MOVE.W	VEX_Setup,D6
	LSR.W	D6,D7
	MOVE.L	D7,NGSampleBoost+2
	TST.B	D2
	BEQ.S	LAB_0A78
	MULU	#$2710,D2
	DIVU	#$00c8,D2
	MOVE.W	VEX_Setup,D3
	LSR.W	D3,D2
	MOVE.L	D2,NGSampleBoost+2
	MOVE.L	#Sampleboost_TXT,AssText_TXT
	BSR.W	PrintAssTextF
LAB_0A78:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadNGSampleBoost:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	LoadModuleReadLong
	MOVE.L	D1,NGSampleBoost+2
	MOVE.L	#NGtxt,AssText_TXT
	BSR.W	PrintAssTextF
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
LoadHunkPATTERNNUMB:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	LoadModuleReadLong
	MOVE.L	D1,LAB_0A4B
	MOVE.L	D1,D2
	SWAP	D2
	ANDI.L	#$0000ffff,D1
	ANDI.L	#$0000ffff,D2
	TST.L	D2
	BNE.S	LoadHunk_PatDef
	MOVEQ	#64,D2
LoadHunk_PatDef:
	MOVE.W	D2,LAB_0A69
	BSR.S	LoadHunkPATTERNNUMBSet
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ToogleKeepPatternMumb:
	NOT.W	KeepPatternMumb
	RTS
KeepPatternMumb:
	DC.W	$0000
LoadHunkPATTERNNUMBSet:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$fff6
	BNE.S	LoadHunkPNS_M1
	CMP.L	VEX_PattNumb,D2
	BLS.S	LoadHunkPATTERNNUMB_OK
LoadHunkPNS_M1:
	CMP.L	VEX_PattNumb,D2
	BEQ.S	LoadHunkPATTERNNUMB_OK
	MOVE.L	D2,VEX_PattNumb
	MOVE.W	#$ffff,MOD_RELOAD
	MOVE.W	#$ffff,MAINEXIT_FLAG
LoadHunkPATTERNNUMB_OK:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadHunkNOTESIZE:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	LoadModuleReadLong
	MOVE.L	D1,LAB_0A4D
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadHunkSYSTEMSPEED:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	LoadModuleReadLong
	MOVE.L	D1,LAB_0A4E
	MOVE.L	D1,VexSpeed
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadHunkSONGDATA:
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$fdce
	BEQ.W	LoadHunkReloadGo
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	LoadModuleReadLong
	TST.L	D0
	BEQ.W	LoadHunkPartERR
	BMI.W	LoadHunkPartERR
	MOVE.L	D1,D3
	MOVE.L	A5,D1
	MOVE.L	TestSongData_PTR,D2
	BSR.W	ReadUnpack
	BSR.W	UpdatePatHeadPtrs
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadHunkSEQUENCE:
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$fd9a
	BEQ.W	LoadHunkReloadGo
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	LoadModuleReadLong
	TST.L	D0
	BEQ.W	LoadHunkPartERR
	BMI.W	LoadHunkPartERR
	MOVE.L	D1,D3
	MOVE.L	A5,D1
	MOVE.L	SequenceMem_PTR+2,D2
	BSR.W	ReadUnpack
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadHunkINFOTEXT:
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$fd6a
	BEQ.W	LoadHunkReloadGo
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	LoadModuleReadLong
	TST.L	D0
	BEQ.W	LoadHunkPartERR
	BMI.W	LoadHunkPartERR
	LEA	ModuleDiz_PTR(PC),A0
	MOVE.L	D1,4(A0)
	ADDQ.L	#4,4(A0)
	JSR	GetMem
	TST.L	(A0)
	BEQ.W	LoadHunkPartERR
	MOVE.L	(A0),D2
	MOVE.L	D1,D3
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadHunkINFOTEXT2:
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$fd20
	BEQ.W	LoadHunkReloadGo
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	LoadModuleReadLong
	TST.L	D0
	BEQ.W	LoadHunkPartERR
	BMI.W	LoadHunkPartERR
	LEA	ModuleDiz2_PTR(PC),A0
	MOVE.L	D1,4(A0)
	ADDQ.L	#4,4(A0)
	JSR	GetMem
	TST.L	(A0)
	BEQ.W	LoadHunkPartERR
	MOVE.L	(A0),D2
	MOVE.L	D1,D3
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadHunkSetInfoObj:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadHunkNOTEDATA:
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$fccc
	BEQ.W	LoadHunkReloadGo
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	LoadModuleReadLong
	TST.L	D0
	BEQ.W	LoadHunkPartERR
	BMI.W	LoadHunkPartERR
	MOVE.L	D1,D3
	BEQ.W	LoadHunkPartERR
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$fcb0
	BEQ.S	LoadHunkConvNoteData
	MOVE.L	A5,D1
	MOVE.L	NoteMem_PTR+2,D2
	BSR.W	ReadUnpack
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadHunkConvNoteData:
	MOVE.L	D1,D3
	BEQ.W	ConvNoteData_ERR
	MOVEQ	#0,D0
	MOVE.W	LAB_0A67+2(PC),D0
	MULU	LAB_0A68+2(PC),D0
	MOVEQ	#4,D1
	MULU	LAB_0A69(PC),D1
	DC.W	$4c00
	MOVE.B	D0,D0
	LEA	NoteConvMem(PC),A0
	CLR.L	(A0)
	MOVE.L	D1,4(A0)
	JSR	GetMem
	TST.L	D0
	BEQ.W	LoadHunkPartERR
	MOVE.L	A5,D1
	MOVE.L	(A0),D2
	BSR.W	ReadUnpack
	LEA	LAB_0A65(PC),A2
	MOVEA.L	NoteConvMem(PC),A0
	MOVEA.L	NoteMem_PTR+2,A1
	MOVEQ	#4,D0
	MOVE.W	4(A2),D1
	SUB.W	6(A2),D1
	BMI.S	ConvNoteData_ERR
	MULU	D0,D1
	MOVE.L	VEX_LineSize+2,D3
	MOVE.W	8(A2),D2
	SUB.W	10(A2),D2
	BMI.S	ConvNoteData_ERR
	MULU	D3,D2
	MOVE.W	12(A2),D5
	SUBQ.W	#1,D5
	BMI.S	ConvNoteData_ERR
ConvNoteData_L3:
	MOVE.W	10(A2),D6
	SUBQ.W	#1,D6
	BMI.S	ConvNoteData_ERR
ConvNoteData_L2:
	MOVE.W	6(A2),D7
	SUBQ.W	#1,D7
	BMI.S	ConvNoteData_ERR
ConvNoteData_L1:
	JSR	CopyNote
	LEA	0(A0,D0.W),A0
	LEA	0(A1,D0.W),A1
	DBF	D7,ConvNoteData_L1
	LEA	0(A1,D1.W),A1
	DBF	D6,ConvNoteData_L2
	LEA	0(A1,D2.W),A1
	DBF	D5,ConvNoteData_L3
	LEA	NoteConvMem(PC),A0
	MOVE.L	#$00010009,MEM_DEBUG_INFO
	CLR.L	LAB_109F
	JSR	FreeMem
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ConvNoteData_ERR:
	LEA	NoteConvMem(PC),A0
	MOVE.L	#$00010009,MEM_DEBUG_INFO
	MOVE.L	#$00000001,LAB_109F
	JSR	FreeMem
	BRA.S	LoadHunkPartERR
NoteConvMem:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$01,D1
LoadHunkSAMPLENAMES:
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$fba4
	BEQ.W	LoadHunkReloadGo
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	LoadModuleReadLong
	TST.L	D0
	BEQ.S	LoadHunkPartERR
	BMI.S	LoadHunkPartERR
	MOVE.L	D1,D3
	BEQ.S	LoadHunkPartERR
	MOVE.L	A5,D1
	MOVE.L	SampleNames_PTR+2,D2
	BSR.W	ReadUnpack
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadHunkPartERR:
	MOVE.L	#ErrLoadHunk,AssText_TXT
	BSR.W	PrintAssTextF
	JSR	WarnFlash
	MOVE.W	#$ffff,LoadHunkPart_RERROR
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadHunkPart_RERROR:
	DC.W	$0000
NewLoadHunkBuildSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	CMPI.B	#$02,132(A0)
	BEQ.S	NewLoadHunkBuildSample_X
	LEA	LoadTempSample_MEM(PC),A2
	MOVE.L	(A4),(A2)
	MOVE.L	4(A4),4(A2)
	MOVE.L	8(A4),8(A2)
	LEA	NewLoadSample_INFO,A5
	BSR.W	NewLoadSampleHunk
	MOVE.L	(A2),(A4)
	CLR.L	(A2)
NewLoadHunkBuildSample_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
FreeModuleDiz2:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	ModuleDiz2_PTR(PC),A0
	TST.L	(A0)
	BEQ.S	LAB_0A95
	MOVE.L	#$00010008,MEM_DEBUG_INFO
	MOVE.L	#$00000002,LAB_109F
	JSR	FreeMem
	CLR.L	(A0)
	CLR.L	4(A0)
LAB_0A95:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
FreeModuleDiz:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	ModuleDiz_PTR(PC),A0
	TST.L	(A0)
	BEQ.S	LAB_0A97
	MOVE.L	#$00010008,MEM_DEBUG_INFO
	MOVE.L	#$00000001,LAB_109F
	JSR	FreeMem
	CLR.L	(A0)
	CLR.L	4(A0)
LAB_0A97:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SelectModuleDiz:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	FreeModuleDiz
	LEA	All_MATCH+1,A0
	JSR	SetFileRequestPat
	LEA	SelectModuleDiz_TXT+1,A0
	JSR	SimpleFileRequest
	TST.W	D0
	BEQ.W	LAB_0A9C
	MOVEA.L	FinalFileNameRT_PTR,A0
	BSR.W	FileLength
	TST.L	D0
	BEQ.S	LAB_0A99
	LEA	ModuleDiz_PTR(PC),A0
	MOVE.L	D0,4(A0)
	ADDQ.L	#4,4(A0)
	JSR	GetMem
	TST.L	(A0)
	BEQ.S	LAB_0A99
	MOVE.L	FinalFileNameRT_PTR,D1
	MOVE.L	#$000003ed,D2
	MOVEA.L	_DosBase,A6
	JSR	-30(A6)
	TST.L	D0
	BEQ.S	LAB_0A9B
	MOVEA.L	D0,A5
	MOVE.L	ModuleDiz_PTR(PC),D2
	MOVE.L	LAB_09F7(PC),D3
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	TST.L	D0
	BMI.S	LAB_0A9A
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
	BSR.S	ShowSongInfo
LAB_0A99:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0A9A:
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
LAB_0A9B:
	BSR.W	FreeModuleDiz
	JSR	WarnFlash
	BRA.S	LAB_0A99
LAB_0A9C:
	MOVE.L	#DizCleared_TXT,AssText_TXT
	BSR.W	PrintAssTextF
	BRA.S	LAB_0A99
ShowSongInfoAll:
	BSR.S	ShowSongInfo
	BSR.W	ShowSongInfo2
	RTS
ShowSongInfo:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	ModuleDiz_PTR(PC),A0
	JSR	InfoRequest
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SelectModuleDiz2:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	FreeModuleDiz2
	LEA	All_MATCH+1,A0
	JSR	SetFileRequestPat
	LEA	SelectModuleDiz2_TXT,A0
	JSR	SimpleFileRequest
	TST.W	D0
	BEQ.W	SelectModuleDiz2_X2
	MOVEA.L	FinalFileNameRT_PTR,A0
	BSR.W	FileLength
	TST.L	D0
	BEQ.S	SelectModuleDiz2_X
	LEA	ModuleDiz2_PTR(PC),A0
	MOVE.L	D0,4(A0)
	ADDQ.L	#4,4(A0)
	JSR	GetMem
	TST.L	(A0)
	BEQ.S	SelectModuleDiz2_X
	MOVE.L	FinalFileNameRT_PTR,D1
	MOVE.L	#$000003ed,D2
	MOVEA.L	_DosBase,A6
	JSR	-30(A6)
	TST.L	D0
	BEQ.S	SelectModuleDiz2_ERRX
	MOVEA.L	D0,A5
	MOVE.L	ModuleDiz2_PTR(PC),D2
	MOVE.L	LAB_09F9(PC),D3
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	TST.L	D0
	BMI.S	SelectModuleDiz2_ERRX2
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
	BSR.S	ShowSongInfo2
SelectModuleDiz2_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SelectModuleDiz2_ERRX2:
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
SelectModuleDiz2_ERRX:
	BSR.W	FreeModuleDiz2
	JSR	WarnFlash
	BRA.S	SelectModuleDiz2_X
SelectModuleDiz2_X2:
	MOVE.L	#DizCleared_TXT,AssText_TXT
	BSR.W	PrintAssTextF
	BRA.S	SelectModuleDiz2_X
ShowSongInfo2:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$4aba
	ROXR.B	#7,D4
	BEQ.S	LAB_0AA5
	DC.W	$4aba
	ROXR.B	#7,D2
	BEQ.S	LAB_0AA5
	MOVE.L	#TempDizName,D1
	MOVE.L	#$000003ee,D0
	BSR.W	EasyDOpen
	TST.L	D0
	BEQ.S	LAB_0AA6
	MOVEA.L	ModuleDiz2_PTR(PC),A0
	MOVE.L	LAB_09F9(PC),D0
	BSR.W	EasyDWrite
	TST.L	D0
	BEQ.S	LAB_0AA6
	BSR.W	EasyDClose
	BSR.S	ShowInfoExtern
LAB_0AA5:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0AA6:
	MOVEA.L	ModuleDiz2_PTR(PC),A0
	JSR	InfoRequest
	BRA.S	LAB_0AA5
InfoObjType:
	ORI.B	#$00,D1
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
Command_TAGS:
	ORI.B	#$00,D0
	DC.W	$0000
ShowInfoExtern:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$4aba
	DC.W	$ffe4
	BEQ.S	LAB_0AAA
	DC.W	$0cba
	ORI.B	#$00,D1
	DC.W	$ffda
	BEQ.S	LAB_0AAC
LAB_0AAA:
	MOVE.L	#Command_TXT+1,AssText_TXT
	BSR.W	PrintAssTextF
	MOVE.L	#Command_TXT+1,D1
	MOVE.L	#Command_TAGS,D2
	MOVEA.L	_DosBase,A6
	JSR	-606(A6)
LAB_0AAB:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0AAC:
	MOVE.L	#CommandPic_TXT+3,AssText_TXT
	BSR.W	PrintAssTextF
	MOVE.L	#CommandPic_TXT+3,D1
	MOVE.L	#Command_TAGS,D2
	MOVEA.L	_DosBase,A6
	JSR	-606(A6)
	BRA.S	LAB_0AAB
ExtractActual8Bit:
	MOVE.B	#$ff,Ex8Bit+1
	BSR.S	ExtractActualModule
	CLR.B	Ex8Bit+1
	RTS
	DC.W	$0000
ExtractActualModule:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	SoundModule_MATCH+1,A0
	JSR	SetFileRequestPat
	LEA	ModuleDir_TXT,A0
	JSR	SetFileRequestPath
	LEA	ExtractMod_TXT,A0
	MOVEQ	#2,D0
	BSR.W	GetPathBuf
	JSR	SimpleFileRequest
	BSR.W	SavePathBuf
	TST.W	D0
	BEQ.W	ExtractActualModule_X
	MOVE.L	#Extracting_TXT+1,AssText_TXT
	BSR.W	PrintAssTextF
	BSR.W	StopActualSong
	MOVEA.L	FinalFileNameRT_PTR,A0
	BSR.W	ClipExtension
	LEA	SoundModule_EXT,A1
	BSR.W	AddExtention
	MOVE.L	FinalFileNameRT_PTR,D1
	MOVE.L	#$000003ed,D2
	MOVEA.L	_DosBase,A6
	JSR	-30(A6)
	MOVEA.L	D0,A5
	BEQ.S	ExtractActualModule_ERR
	MOVE.L	#ExtractActualModule_HEAD,D2
	MOVEQ	#8,D3
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	LEA	ExtractActualModule_HEAD(PC),A0
	CMPI.L	#$53796d4d,(A0)
	BNE.S	ExtractActualModule_READERR
	TST.L	4(A0)
	BEQ.S	ExtractActualModule_READERR
	CMPI.L	#$00000001,4(A0)
	BHI.S	ExtractActualModule_READERR
	MOVEA.L	SAMPLEMANLIST_PTR,A0
	BSR.W	FreeAllSamples
	BSR.W	InitSampleManagement
	BSR.W	MoveFirstInstrument
	BSR.S	ExtractModuleParts
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
	BSR.W	MoveFirstInstrument
	BSR.W	DrawActualWave
	MOVE.L	#Done_TXT+1,AssText_TXT
	BSR.W	PrintAssTextF
ExtractActualModule_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ExtractActualModule_READERR:
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
ExtractActualModule_ERR:
	MOVE.L	#ErrLoadMod+1,AssText_TXT
	BSR.W	PrintAssTextF
	JSR	WarnFlash
	BRA.S	ExtractActualModule_X
ExtractActualModule_HEAD:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
ExtractModuleParts:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.W	ExtractHunkPart_RERROR
	LEA	ExtractModuleParts_JL(PC),A4
ExtractModuleParts_L:
	BSR.W	LoadModuleReadLong
	TST.L	D1
	BEQ.S	ExtractModuleParts_X+4
	TST.L	D0
	BEQ.S	ExtractModuleParts_X+4
	BMI.S	ExtractModuleParts_X+4
	MOVEA.L	A4,A3
ExtractModuleParts_L2:
	MOVE.L	(A3)+,D2
	TST.L	D2
	BNE.S	LAB_0AB7
	TST.L	D1
	BEQ.S	ExtractModuleParts_X+4
	TST.L	D1
	BMI.S	LAB_0AB6
	BSR.W	ExtractHunkReadLong
	BRA.S	LAB_0AB8
LAB_0AB6:
	BSR.W	ExtractHunkSkip
	BRA.S	LAB_0AB8
LAB_0AB7:
	MOVEA.L	(A3)+,A0
	CMP.L	D1,D2
	BNE.S	ExtractModuleParts_L2
	JSR	(A0)
LAB_0AB8:
	DC.W	$0c7a
	DC.W	$ffff
ExtractModuleParts_X:
	SUBI.L	#$66c64cdf,D4
	DC.W	$7fff
	RTS
ExtractModuleParts_JL:
	ORI.B	#$0a,D0
	DC.L	ExtractHunkReadLong
	ORI.B	#$0b,D0
	DC.L	ExtractHunkReadLong
	ORI.B	#$0c,D0
	DC.L	ExtractHunkReadLong
	DC.W	$ffff
	DC.W	$ffff
	DC.L	ExtractHunkReadLong
	DC.W	$ffff
	DC.W	$fffe
	DC.L	ExtractHunkReadLong
	DC.W	$ffff
	DC.W	$fffd
	DC.L	ExtractHunkReadLong
	DC.W	$ffff
	DC.W	$fffc
	DC.L	ExtractHunkReadLong
	DC.W	$ffff
	DC.W	$fffb
	DC.L	ExtractHunkReadLong
	DC.W	$ffff
	DC.W	$fffa
	DC.L	ExtractHunkReadLong
	DC.W	$ffff
	DC.W	$fff6
	DC.L	ExtractHunkSkip
	DC.W	$ffff
	DC.W	$fff5
	DC.L	ExtractHunkSAMPLE
	DC.W	$ffff
	DC.W	$ffef
	DC.L	ExtractHunkDeltaSAMPLE
	DC.W	$ffff
	DC.W	$ffee
	DC.L	ExtractHunkDelta16SAMPLE
	DC.W	$ffff
	DC.W	$fff4
	DC.L	ExtractHunkEMPTYSAMPLE
	DC.W	$ffff
	DC.W	$fff3
	DC.L	ExtractHunkSkip
	DC.W	$ffff
	DC.W	$fff2
	DC.L	ExtractHunkSAMPLENAMES
	DC.W	$ffff
	DC.W	$fff1
	DC.L	ExtractHunkSkip
	DC.W	$ffff
	DC.W	$fff0
	DC.L	ExtractHunkSkip
	ORI.B	#$00,D0
	ORI.B	#$00,D0
ExtractModuleInfo:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
ExtractHunkDeltaSAMPLE:
	MOVE.W	#$ffff,DeltaExtract
	BSR.S	ExtractHunkSAMPLE
	CLR.W	DeltaExtract
	RTS
ExtractHunkDelta16SAMPLE:
	MOVE.W	#$ffff,LAB_0ABE+2
	BSR.S	ExtractHunkSAMPLE
	CLR.W	LAB_0ABE+2
	RTS
DeltaExtract:
LAB_0ABE:
	ORI.B	#$00,D0
ExtractHunkSAMPLE:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	LoadModuleReadLong
	TST.L	D0
	BEQ.W	ExtractHunkPartERR
	BMI.W	ExtractHunkPartERR
	LEA	SampleTemp_PTR(PC),A4
	CLR.L	(A4)
	MOVE.L	D1,4(A4)
	BEQ.W	ExtractHunkSAMPLE_X
	MOVEA.L	A4,A0
	JSR	GetMem
	MOVE.L	(A0),D2
	BEQ.W	ExtractHunkPartERR
	MOVE.L	A5,D1
	MOVE.L	4(A4),D3
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	TST.L	D0
	BEQ.S	ExtractHunkSAMPLE_ERR
	BMI.S	ExtractHunkSAMPLE_ERR
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$ffb6
	BEQ.S	ExtractHSMP_D16
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$ffac
	BEQ.S	ExtractHSMP_D8
	BRA.S	ExtractHunkSAMPLE_Unpacked
ExtractHSMP_D8:
	MOVE.L	(A4),D2
	MOVE.L	4(A4),D3
	BSR.W	DeltaUnPackModuleBlock
	BRA.S	ExtractHunkSAMPLE_Unpacked
ExtractHSMP_D16:
	MOVE.L	(A4),D2
	MOVE.L	4(A4),D3
	BSR.W	Delta16UnPackBlk
	BRA.S	ExtractHunkSAMPLE_Unpacked
	NOP
ExtractHunkSAMPLE_Unpacked:
	BSR.S	SaveTempSample
	BSR.W	GetActualInstrName
	CMPI.B	#$01,132(A0)
	BNE.S	ExtractHunkSAMPLE_MONO
	BSR.W	MoveNextInstrument
ExtractHunkSAMPLE_MONO:
	BSR.W	MoveNextInstrument
	MOVEA.L	A4,A0
	MOVE.L	#$00010010,MEM_DEBUG_INFO
	CLR.L	LAB_109F
	JSR	FreeMem
	CLR.L	SampleTemp_PTR
ExtractHunkSAMPLE_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ExtractHunkSAMPLE_ERR:
	MOVE.L	#ErrLoadMod+1,AssText_TXT
	BSR.W	PrintAssTextF
	MOVEA.L	A4,A0
	MOVE.L	#$00010010,MEM_DEBUG_INFO
	MOVE.L	#$00000001,LAB_109F
	JSR	FreeMem
	CLR.L	SampleTemp_PTR
	BRA.W	ExtractHunkPartERR
SaveTempSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	TST.B	(A0)
	BEQ.S	SaveTempSample_X
	DC.W	$4aba
	DC.W	$f486
	BEQ.S	SaveTempSample_X
	DC.W	$4aba
	DC.W	$f484
	BEQ.S	SaveTempSample_X
SaveTempS_NameScan_NEW:
	MOVE.L	A0,D1
SaveTempS_NameScan_L:
	MOVE.B	(A0)+,D0
	TST.B	D0
	BEQ.S	SaveTempS_NameScan_FINAL
	CMPI.B	#$3a,D0
	BEQ.S	SaveTempS_NameScan_NEW
	CMPI.B	#$2f,D0
	BEQ.S	SaveTempS_NameScan_NEW
	BRA.S	SaveTempS_NameScan_L
SaveTempS_NameScan_FINAL:
	SUBQ.L	#2,D1
	MOVEA.L	D1,A0
	MOVE.B	#$74,(A0)
	MOVE.B	#$3a,1(A0)
	MOVE.L	#$000003ee,D2
	MOVEA.L	_DosBase,A6
	JSR	-30(A6)
	MOVEA.L	D0,A5
	BEQ.S	SaveTempSample_X
	MOVE.L	A5,D1
	MOVE.L	SampleTemp_PTR(PC),D2
	MOVE.L	LAB_0A5B(PC),D3
	TST.B	Ex8Bit+1
	BEQ.S	SaveTempSample_NoC
	BSR.S	ConvTempSample
SaveTempSample_NoC:
	MOVEA.L	_DosBase,A6
	JSR	-48(A6)
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
SaveTempSample_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SAVE8BIT_QUALITY:
LAB_0ACD:
	ORI.B	#$08,D0
	DC.W	$0000
ConvTempSample:
	MOVEM.L	D0-D1/D6-D7/A0-A3,-(A7)
	MOVEA.L	D2,A0
	CMPI.L	#$4d414553,(A0)
	BEQ.S	ConvTempSample_do
	CMPI.L	#$52494646,(A0)
	BEQ.S	ConvTempSample_wav
	BRA.S	ConvTempSample_X
ConvTempSample_do:
	MOVEA.L	A0,A1
	TST.L	12(A0)
	BEQ.W	ConvTempSample_STEREO
	MOVE.L	RenderMaestroHead_ADR,D1
	LEA	0(A0,D1.L),A0
	MOVE.L	D3,D7
	SUB.L	D1,D7
	LSR.L	#1,D7
	TST.L	D7
	BEQ.S	ConvTempSample_X
	MOVE.L	D7,D3
	MOVEQ	#16,D6
	SUB.W	SAVE8BIT_QUALITY+2(PC),D6
ConvTempSample_L:
	MOVE.W	(A0)+,D0
	ASR.W	D6,D0
	MOVE.B	D0,(A1)+
	SUBQ.L	#1,D7
	BNE.S	ConvTempSample_L
ConvTempSample_X:
	MOVEM.L	(A7)+,D0-D1/D6-D7/A0-A3
	RTS
	DC.W	$0000
ConvTempSample_wav:
	MOVEA.L	A0,A1
	CMPI.L	#$57415645,8(A0)
	BNE.S	ConvTempSample_X
	CMPI.L	#$64617461,36(A0)
	BNE.S	ConvTempSample_X
	CMPI.W	#$1000,34(A0)
	BNE.S	ConvTempSample_X
	CMPI.W	#$0200,22(A0)
	BEQ.S	ConvTempSample_WAVSte
	CMPI.W	#$0100,22(A0)
	BNE.S	ConvTempSample_X
	MOVEQ	#44,D1
	LEA	0(A0,D1.L),A0
	MOVE.L	D3,D7
	SUB.L	D1,D7
	LSR.L	#1,D7
	TST.L	D7
	BEQ.S	ConvTempSample_X
	MOVE.L	D7,D3
	MOVEQ	#8,D6
	SUB.W	SAVE8BIT_QUALITY+2(PC),D6
ConvTempSample_wavL:
	MOVE.B	1(A0),D0
	ASR.B	D6,D0
	MOVE.B	D0,(A1)+
	ADDQ.L	#2,A0
	SUBQ.L	#1,D7
	BNE.S	ConvTempSample_wavL
	BRA.S	ConvTempSample_X
ConvTS_MEM:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D1
	DC.W	$0000
ConvTempSample_X2:
	MOVEM.L	(A7)+,D0-D7/A0-A1
	BRA.S	ConvTempSample_X
ConvTempSample_WAVSte:
	MOVEM.L	D0-D7/A0-A1,-(A7)
	MOVE.L	RenderMaestroHead_ADR,D1
	LEA	0(A0,D1.L),A1
	MOVEQ	#44,D1
	LEA	0(A0,D1.L),A0
	MOVE.L	D3,D7
	SUB.L	D1,D7
	LSR.L	#2,D7
	TST.L	D7
	BEQ.S	ConvTempSample_X2
ConvTempSample_PreWav_L:
	MOVE.B	1(A0),D0
	MOVE.B	D0,(A1)
	MOVE.B	3(A0),D0
	MOVE.B	D0,2(A1)
	ADDQ.L	#4,A0
	ADDQ.L	#4,A1
	SUBQ.L	#1,D7
	BNE.S	ConvTempSample_PreWav_L
	MOVEM.L	(A7)+,D0-D7/A0-A1
ConvTempSample_STEREO:
	MOVE.L	RenderMaestroHead_ADR,D1
	LEA	0(A0,D1.L),A0
	MOVE.L	D3,D7
	SUB.L	D1,D7
	LSR.L	#1,D7
	BEQ.W	ConvTempSample_X
	MOVEM.L	A0,-(A7)
	LEA	ConvTS_MEM(PC),A0
	MOVE.L	D7,4(A0)
	JSR	GetMem
	MOVEA.L	(A7)+,A0
	TST.L	D0
	MOVEA.L	ConvTS_MEM(PC),A2
	MOVE.L	D7,D3
	LSR.L	#1,D7
	BEQ.W	ConvTempSample_X
	MOVEM.L	D6-D7,-(A7)
	MOVEQ	#8,D6
	SUB.W	SAVE8BIT_QUALITY+2(PC),D6
ConvTempSample_SL:
	MOVE.L	(A0)+,D0
	LSR.W	#8,D0
	ASR.B	D6,D0
	MOVE.B	D0,(A1)+
	SWAP	D0
	LSR.W	#8,D0
	ASR.B	D6,D0
	MOVE.B	D0,(A2)+
	SUBQ.L	#1,D7
	BNE.S	ConvTempSample_SL
	MOVEM.L	(A7)+,D6-D7
	MOVEA.L	ConvTS_MEM(PC),A0
ConvTempSample_SL2:
	MOVE.B	(A0)+,D0
	MOVE.B	D0,(A1)+
	SUBQ.L	#1,D7
	BNE.S	ConvTempSample_SL2
	LEA	ConvTS_MEM(PC),A0
	MOVE.L	#$00010011,MEM_DEBUG_INFO
	CLR.L	LAB_109F
	JSR	FreeMem
	MOVE.L	D3,LAB_1399
	MOVE.L	D3,LAB_1396
	MOVEM.L	D3,-(A7)
	LSR.L	#1,D3
	MOVE.L	D3,LAB_1397
	MOVEM.L	(A7)+,D3
	ADDI.L	#$0000006c,LAB_1396
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	A5,D1
	MOVE.L	#IFF_HEAD,D2
	MOVEQ	#116,D3
	MOVEA.L	_DosBase,A6
	JSR	-48(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	MOVEM.L	(A7)+,D0-D1/D6-D7/A0-A3
	RTS
ExtractHunkEMPTYSAMPLE:
	BSR.W	MoveNextInstrument
	RTS
ExtractHunkReadLong:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	LoadModuleReadLong
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ExtractHunkSkip:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	LoadModuleReadLong
	TST.L	D0
	BEQ.S	ExtractHunkPartERR
	BMI.S	ExtractHunkPartERR
	MOVE.L	D1,D2
	MOVE.L	A5,D1
	BSR.S	DOSSkip
	CMPI.L	#$ffffffff,D0
	BEQ.S	ExtractHunkPartERR
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ExtractHunkSAMPLENAMES:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	LoadModuleReadLong
	TST.L	D0
	BEQ.S	ExtractHunkPartERR
	BMI.S	ExtractHunkPartERR
	MOVE.L	D1,D3
	BEQ.S	ExtractHunkPartERR
	MOVE.L	A5,D1
	MOVE.L	SampleNames_PTR+2,D2
	BSR.W	ReadUnpack
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ExtractHunkPartERR:
	MOVE.L	#ErrLoadHunk,AssText_TXT
	BSR.W	PrintAssTextF
	MOVE.W	#$ffff,ExtractHunkPart_RERROR
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ExtractHunkPart_RERROR:
	DC.W	$0000
	RTS
DOSSkip:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVEQ	#0,D3
	MOVEA.L	_DosBase,A6
	JSR	-66(A6)
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
SaveActualModule:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	SoundModule_MATCH+1,A0
	BSR.W	SetFileRequestPat
	LEA	ModuleDir_TXT,A0
	BSR.W	SetFileRequestPath
	LEA	SaveMod_TXT,A0
	MOVEQ	#2,D0
	BSR.W	GetPathBuf
	BSR.W	GetTempProj
	BSR.W	SimpleFileRequest
	BSR.W	SavePathOnlyBuf
	TST.W	D0
	BEQ.W	SaveActualModule_X
	MOVEA.L	FinalFileNameRT_PTR(PC),A0
	BSR.W	ClipExtension
	LEA	SoundModule_EXT,A1
	BSR.W	AddExtention2
	BSR.W	SavePathBuf
	CLR.B	MODULE_SONGTYPE+1
	MOVE.B	#$ff,EasyDOpen_SAFE
SaveActualModule_LINKSONG:
	MOVE.B	MODULE_SONGTYPE+1,LAB_1164
	LEA	Test_PATTED+2,A0
	LEA	ActualModule_HEAD(PC),A1
	BSR.W	BuildModuleHeader
	MOVEM.L	A0-A1,-(A7)
	LEA	tempstring,A1
	CLR.B	(A1)
	LEA	SaveProj_PRE+1,A0
	JSR	AddString
	MOVEA.L	FinalFileNameRT_PTR(PC),A0
	JSR	AddString
	MOVE.L	#tempstring,AssText_TXT
	BSR.W	PrintAssTextF
	MOVEM.L	(A7)+,A0-A1
	BSR.W	Overwrite_TestFFN
	DC.W	$0c3a
	DC.W	$00ff
	ADDA.W	(A6)+,A7
	BNE.W	SaveActualModule_ERR
	MOVE.L	FinalFileNameRT_PTR(PC),D1
	MOVE.L	#$000003ee,D2
	MOVEA.L	_DosBase,A6
	JSR	-30(A6)
	MOVEA.L	D0,A5
	BEQ.W	SaveActualModule_ERR
	MOVE.L	#ActualModule_HEAD,D2
	MOVEQ	#88,D3
	CMPI.B	#$ff,MODULE_SONGTYPE+1
	BEQ.S	SaveActualModule_AsSong
	SUBQ.L	#8,D3
SaveActualModule_AsSong:
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-48(A6)
	MOVEQ	#-14,D1
	MOVE.L	SampleNames_PTR+2,D2
	MOVE.L	LAB_127F+2,D3
	DC.W	$0c3a
	DC.W	$00ff
	SUBI.L	#$661c6100,-(A0)
	DC.W	$0a36
	MOVEM.L	A0-A1,-(A7)
	LEA	Instr_TXT+1,A0
	LEA	Packed_TXT+1,A1
	BSR.W	PrintDblAssString
	MOVEM.L	(A7)+,A0-A1
NoPackSongA:
	BSR.W	WriteModuleBlock
	TST.L	D0
	BMI.W	SaveActualModule_WRITEERR
	MOVEQ	#-10,D1
	MOVE.L	TestSongData_PTR,D2
	MOVE.L	LAB_1182,D3
	DC.W	$0c3a
	DC.W	$00ff
	SUBI.W	#$661c,-(A4)
	BSR.W	PackData
	MOVEM.L	A0-A1,-(A7)
	LEA	Pos_TXT,A0
	LEA	Packed_TXT+1,A1
	BSR.W	PrintDblAssString
	MOVEM.L	(A7)+,A0-A1
NoPackSongB:
	BSR.W	WriteModuleBlock
	TST.L	D0
	BMI.W	SaveActualModule_WRITEERR
	MOVEQ	#-13,D1
	MOVE.L	NoteMem_PTR+2,D2
	MOVE.L	LAB_1121+2,D3
	DC.W	$0c3a
	DC.W	$00ff
	DC.W	$0428
	BNE.S	NoPackSongC
	BSR.W	PackData
	MOVEM.L	A0-A1,-(A7)
	LEA	Song_TXT+1,A0
	LEA	Packed_TXT+1,A1
	BSR.W	PrintDblAssString
	MOVEM.L	(A7)+,A0-A1
NoPackSongC:
	BSR.W	WriteModuleBlock
	TST.L	D0
	BMI.W	SaveActualModule_WRITEERR
	MOVEQ	#-15,D1
	MOVE.L	SequenceMem_PTR+2,D2
	MOVE.L	LAB_1179+2,D3
	DC.W	$0c3a
	DC.W	$00ff
	BSET	D1,26140(A4)
	BSR.W	PackData
	MOVEM.L	A0-A1,-(A7)
	LEA	Seq_TXT,A0
	LEA	Packed_TXT+1,A1
	BSR.W	PrintDblAssString
	MOVEM.L	(A7)+,A0-A1
NoPackSongD:
	BSR.W	WriteModuleBlock
	TST.L	D0
	BMI.W	SaveActualModule_WRITEERR
	MOVEQ	#-16,D1
	MOVE.L	ModuleDiz_PTR(PC),D2
	BEQ.S	WriteModule_NoDiz
	MOVE.L	LAB_09F7(PC),D3
	BEQ.S	WriteModule_NoDiz
	BSR.W	WriteModuleBlock
	TST.L	D0
	BMI.W	SaveActualModule_WRITEERR
	MOVE.L	#Dizwrite_TXT,AssText_TXT
	BSR.W	PrintAssTextF
WriteModule_NoDiz:
	MOVEQ	#-20,D1
	MOVE.L	ModuleDiz2_PTR(PC),D2
	BEQ.S	WriteModule_NoDiz2
	MOVE.L	LAB_09F9(PC),D3
	BEQ.S	WriteModule_NoDiz2
	BSR.W	WriteModuleBlock
	TST.L	D0
	BMI.S	SaveActualModule_WRITEERR
	MOVE.L	#Dizwrite2_TXT,AssText_TXT
	BSR.W	PrintAssTextF
	MOVEQ	#-19,D1
	MOVE.L	#InfoObjType,D2
	MOVEQ	#16,D3
	BSR.W	WriteModuleBlock
	BMI.S	SaveActualModule_WRITEERR
WriteModule_NoDiz2:
	BSR.W	WriteModuleSamples
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
	MOVEA.L	FinalFileNameRT_PTR(PC),A0
	MOVEA.L	ProjectName_PTR,A1
	JSR	CopyString
	BSR.W	DrawPattedTitle
	MOVE.L	#Done_TXT+1,AssText_TXT
	BSR.W	PrintAssTextF
SaveActualModule_X:
	CLR.B	MODULE_SONGTYPE+1
	BSR.W	FreeModuleDiz
	BSR.W	FreeModuleDiz2
	CLR.B	EasyDOpen_SAFE
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SaveActualModule_WRITEERR:
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
SaveActualModule_ERR:
	MOVE.L	#Errsavefile,AssText_TXT
	BSR.W	PrintAssTextF
	MOVE.L	#Fail_TXT+1,AssText_TXT
	BSR.W	PrintAssTextF
	BRA.S	SaveActualModule_X
ActualModule_HEAD:
	SUBQ.W	#1,EXT_0034
	DC.W	$0001
	DC.W	$ffff
	DC.W	$ffff
	ORI.B	#$00,D0
	DC.W	$ffff
	DC.W	$fffe
	ORI.B	#$00,D0
	DC.W	$ffff
	DC.W	$fffd
	ORI.B	#$00,D0
	DC.W	$ffff
	DC.W	$fffc
	ORI.B	#$00,D0
	DC.W	$ffff
	DC.W	$fffb
	ORI.B	#$00,D0
	DC.W	$ffff
	DC.W	$fffa
	ORI.B	#$00,D0
	ORI.B	#$0a,D0
	ORI.B	#$00,D0
	ORI.B	#$0b,D0
	ORI.B	#$00,D0
	ORI.B	#$0c,D0
	ORI.B	#$00,D0
	DC.W	$ffff
	DC.W	$fff9
	ORI.B	#$00,D0
ActualModule_HEADEND:
	DC.W	$0000
WriteModuleSamples:
	CMPI.B	#$ff,MODULE_SONGTYPE+1
	BNE.S	WriteModuleSamples_Do
	RTS
WriteModuleSamples_Do:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	SampleNames_PTR+2,A4
	MOVE.L	#$000000ff,D7
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$027a
	BNE.S	WriteModuleSamples_L
	MOVE.L	#Delta_TXT+1,AssText_TXT
	BSR.W	PrintAssTextF
WriteModuleSamples_L:
	MOVEA.L	A4,A0
	TST.B	(A0)
	BEQ.W	WriteModuleSamp_Empty
	CMPI.B	#$fc,128(A0)
	BEQ.W	WriteModuleSamp_Empty
	CMPI.B	#$03,132(A0)
	BEQ.W	WriteModuleSamp_Empty
	CMPI.B	#$02,132(A0)
	BEQ.W	WriteModuleSamples_NEXT
	BSR.W	FileLength
	MOVE.L	D0,D6
	BEQ.W	WriteModuleSamp_Empty
	LEA	WriteModuleSamp_MEM(PC),A0
	MOVE.L	D6,4(A0)
	JSR	GetMem
	TST.L	(A0)
	BEQ.W	SaveModSamp_NOMEMERR
	MOVE.L	A4,D1
	MOVE.L	#$000003ed,D2
	MOVEA.L	_DosBase,A6
	JSR	-30(A6)
	MOVE.L	D0,D5
	BEQ.S	SaveModSamp_OPENERR
	MOVE.L	D5,D1
	MOVE.L	WriteModuleSamp_MEM(PC),D2
	MOVE.L	LAB_0AFC(PC),D3
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	TST.L	D0
	BMI.S	SaveModSamp_READERR
	MOVE.L	D5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
	MOVEM.L	A0,-(A7)
	LEA	WriteModuleSamp_MEM(PC),A0
	BSR.W	UnpackXPKMem
	MOVEA.L	(A7)+,A0
	MOVEQ	#-11,D1
	MOVE.L	WriteModuleSamp_MEM(PC),D2
	MOVE.L	LAB_0AFC(PC),D3
	DC.W	$0c7a
	DC.W	$ffff
	MOVEP.L	D0,26118(A6)
	MOVEQ	#-17,D1
	BSR.W	DeltaPackModuleBlock
SaveModSamp_Unpacked:
	BSR.W	WriteModuleBlock
	TST.L	D0
	BMI.S	SaveModSamp_WRITEERR
	LEA	WriteModuleSamp_MEM(PC),A0
	MOVE.L	#$00010011,MEM_DEBUG_INFO
	MOVE.L	#$00000001,LAB_109F
	JSR	FreeMem
	BRA.S	WriteModuleSamples_NEXT
SaveModSamp_READERR:
	MOVE.L	D5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
SaveModSamp_OPENERR:
	LEA	WriteModuleSamp_MEM(PC),A0
	MOVE.L	#$00010011,MEM_DEBUG_INFO
	MOVE.L	#$00000002,LAB_109F
	JSR	FreeMem
SaveModSamp_NOMEMERR:
	MOVE.L	#WriteModErr_TXT,AssText_TXT
	BSR.W	PrintAssTextF
	BRA.S	WriteModuleSamp_Empty
SaveModSamp_WRITEERR:
	LEA	WriteModuleSamp_MEM(PC),A0
	MOVE.L	#$00010011,MEM_DEBUG_INFO
	MOVE.L	#$00000003,LAB_109F
	JSR	FreeMem
	MOVE.L	#WriteModErr_TXT,AssText_TXT
	BSR.W	PrintAssTextF
	BRA.S	WriteModuleSamples_X
WriteModuleSamples_NEXT:
	LEA	256(A4),A4
	DBF	D7,WriteModuleSamples_L
WriteModuleSamples_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
WriteModuleSamp_MEM:
	ORI.B	#$00,D0
LAB_0AFC:
	ORI.B	#$00,D0
	ORI.B	#$01,D1
WriteModuleSamp_EMPTYSAMPLE:
	DC.W	$ffff
	DC.W	$fff4
WriteModuleSamp_Empty:
	MOVE.L	A5,D1
	MOVE.L	#WriteModuleSamp_EMPTYSAMPLE,D2
	MOVEQ	#4,D3
	MOVEA.L	_DosBase,A6
	JSR	-48(A6)
	TST.L	D0
	BEQ.S	WriteModuleSamples_ERR
	BPL.S	WriteModuleSamples_NEXT
WriteModuleSamples_ERR:
	BSR.W	WarnFlash
	BRA.S	WriteModuleSamples_X
WriteModuleBlock:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVEM.L	D2-D3,LAB_0B05
	LEA	WriteModuleBlock_TEMP(PC),A0
	MOVE.L	D1,(A0)
	MOVE.L	D3,4(A0)
	CMPI.W	#$ffff,PACKRESULT
	BNE.S	WriteModuleHead_Unpacked
	ADDI.L	#$0000000a,4(A0)
WriteModuleHead_Unpacked:
	MOVE.L	A0,D2
	MOVEQ	#8,D3
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-48(A6)
	TST.L	D0
	BMI.S	WriteModuleBlock_X
	CMPI.W	#$ffff,PACKRESULT
	BNE.S	WriteModuleBlock_Unpacked
	MOVE.L	#PACKHEAD,D2
	MOVEQ	#10,D3
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-48(A6)
	TST.L	D0
	BMI.S	WriteModuleBlock_X
WriteModuleBlock_Unpacked:
	MOVEM.L	LAB_0B05(PC),D2-D3
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-48(A6)
WriteModuleBlock_X:
	MOVEM.L	(A7)+,D1-D7/A0-A6
	BSR.W	FreePackMem
	CLR.W	PACKRESULT
	RTS
WriteModuleBlock_TEMP:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
LAB_0B05:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
BuildModuleHeader:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#0,D0
	MOVE.W	18(A0),D0
	MOVE.L	D0,12(A1)
	MOVE.W	14(A0),D0
	MOVE.L	D0,20(A1)
	MOVE.L	VEX_PattNumb,D0
	MOVE.W	D0,28(A1)
	MOVE.L	VEX_PosNumb,D0
	MOVE.W	D0,30(A1)
	MOVE.L	#$00000100,D0
	MOVE.L	D0,36(A1)
	MOVE.W	30(A0),D0
	MOVE.L	D0,44(A1)
	MOVE.L	VexSpeed,52(A1)
	MOVE.L	NGSampleBoost+2,60(A1)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ToogleModDeltaWrite:
	NOT.W	PACKSAMPLE+2
	RTS
TooglePackSong:
	NOT.B	PACKSONG
	RTS
PACKSONG:
PACKSAMPLE:
	ORI.B	#$00,D0
DeltaPackModuleBlock:
	BTST	#3,140(A4)
	BEQ.S	DeltaPack8ModuleBlock
	MOVEQ	#-18,D1
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	PackDelta16(PC),A5
	BSR.S	Proc16ModBlk
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
Proc16ModBlk:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$00001000,D0
	MOVEA.L	D2,A0
	SUBQ.L	#1,D3
	BMI.S	Proc16ModBlk_X
Proc16ModBlk_L:
	SUB.L	D0,D3
	BMI.S	Proc16ModBlk_X
	JSR	(A5)
	LEA	0(A0,D0.L),A0
	BRA.S	Proc16ModBlk_L
Proc16ModBlk_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
Delta16Buf_PTR:
	ORI.B	#$00,D0
	DC.W	$0000
	MOVE.L	D0,D0
	ORI.B	#$00,D1
DeltaPack8ModuleBlock:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	D2,A0
	SUBQ.L	#2,D3
	BMI.S	DeltaPackModuleBlock_X
	MOVE.B	(A0)+,D4
DeltaPackModuleBlock_L:
	MOVE.B	(A0),D0
	MOVE.B	D0,D5
	SUB.B	D4,D0
	MOVE.B	D0,(A0)+
	MOVE.B	D5,D4
	SUBQ.L	#1,D3
	BPL.S	DeltaPackModuleBlock_L
DeltaPackModuleBlock_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PD16Precode:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A0,A1
	MOVEA.L	Delta16Buf_PTR(PC),A2
	LSR.L	#1,D0
	SUBQ.W	#1,D0
	MOVE.W	D0,D7
PackDelta16_L:
	MOVE.W	(A0)+,D2
	MOVE.B	D2,(A1)+
	LSR.W	#8,D2
	MOVE.B	D2,(A2)+
	DBF	D0,PackDelta16_L
	MOVEA.L	Delta16Buf_PTR(PC),A0
PackDelta16_L2:
	MOVE.B	(A0)+,D2
	MOVE.B	D2,(A1)+
	DBF	D7,PackDelta16_L2
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PackD162:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	SUBQ.W	#2,D0
	MOVE.B	(A0)+,D2
PackD162_L:
	MOVE.B	(A0),D3
	MOVE.B	D3,D4
	SUB.B	D2,D4
	MOVE.B	D4,(A0)+
	MOVE.B	D3,D2
	DBF	D0,PackD162_L
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
UnpackD162:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	SUBQ.W	#2,D0
	MOVE.B	(A0)+,D2
UnPackD162_L:
	ADD.B	(A0),D2
	MOVE.B	D2,(A0)+
	DBF	D0,UnPackD162_L
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PackDelta16:
	BSR.S	PD16Precode
	BSR.S	PackD162
	RTS
UnPackDelta16:
	BSR.S	UnpackD162
	BSR.S	PD16preUncode
	RTS
PD16preUncode:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A0,A3
	MOVEA.L	Delta16Buf_PTR(PC),A2
	MOVE.L	D0,D7
	LSR.L	#1,D0
	LEA	0(A0,D0.W),A1
	SUBQ.W	#1,D0
UnPackDelta16_L:
	MOVE.B	(A1)+,D2
	LSL.W	#8,D2
	MOVE.B	(A0)+,D2
	MOVE.W	D2,(A2)+
	DBF	D0,UnPackDelta16_L
	MOVEA.L	Delta16Buf_PTR(PC),A0
	MOVEA.L	A3,A1
	MOVE.L	D7,D0
	BSR.W	CopyMemory
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
Delta16UnPackBlk:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	UnPackDelta16(PC),A5
	BSR.W	Proc16ModBlk
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DeltaUnPackModuleBlock:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	D2,A0
	MOVE.B	(A0)+,D4
DeltaUnpackModuleBlock_L:
	SUBQ.L	#1,D3
	BEQ.S	DeltaUnpackModuleBlock_X
	ADD.B	(A0),D4
	MOVE.B	D4,(A0)+
	BRA.S	DeltaUnpackModuleBlock_L
DeltaUnpackModuleBlock_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
AddExtention2:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	AddExtention
	MOVEA.L	FileNameRT_PTR(PC),A0
	BSR.S	ClipExtension
	BSR.S	AddExtention
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
AddExtention:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	EXG	A0,A1
	BSR.W	AddString
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ClipFileNameExt:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	FinalFileNameRT_PTR(PC),A0
	BSR.S	ClipExtension
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ClipExtension:
	MOVEM.L	D0-D7/A0-A6,-(A7)
ClipExtension_L:
	MOVE.B	(A0)+,D0
	BEQ.S	ClipExtension_X
	CMPI.B	#$2e,D0
	BNE.S	ClipExtension_L
	CLR.B	-1(A0)
ClipExtension_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SaveActualInstruments:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	FinalFileNameRT_PTR(PC),A0
	BSR.S	ClipExtension
	LEA	SampleList_EXT,A1
	BSR.S	AddExtention
	MOVE.L	FinalFileNameRT_PTR(PC),D1
	MOVE.L	#$000003ee,D2
	MOVEA.L	_DosBase,A6
	JSR	-30(A6)
	MOVEA.L	D0,A5
	BEQ.S	SaveActualInstruments_X
	MOVE.L	A5,D1
	MOVE.L	SampleNames_PTR+2,D2
	MOVE.L	LAB_127F+2,D3
	MOVEA.L	_DosBase,A6
	JSR	-48(A6)
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
	MOVE.L	#Done_TXT+1,AssText_TXT
	BSR.W	PrintAssTextF
SaveActualInstruments_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LOAD_NOINSTRUMENTS:
	DC.W	$0000
LoadActualProject:
	JSR	ClrLockState
	JSR	HideBlockRange
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$0c3a
	DC.W	$00ff
	DC.W	$00b4
	BEQ.W	LoadActualProject_Xc
	MOVE.B	#$ff,SONGFILEIO
	JSR	PattedUpdateReset
	CLR.B	MODULE_SONGTYPE+1
	CLR.W	MOD_RELOAD
	LEA	Song_MATCH,A0
	BSR.W	SetFileRequestPat
	LEA	SongDir_TXT,A0
	BSR.W	SetFileRequestPath
	LEA	LoadActualProject_TXT,A0
	MOVEQ	#1,D0
	BSR.W	GetPathBuf
	BSR.W	SimpleFileRequest
	BSR.W	SavePathBuf
	TST.W	D0
	BEQ.S	LoadActualProject_X
	MOVEA.L	FinalFileNameRT_PTR(PC),A0
	MOVEA.L	ProjectName_PTR,A1
	BSR.W	CopyString
	BSR.W	SetTempProj
	BSR.W	StopActualSong
	BSR.W	DeactivateDsp
	BSR.W	ShowProjectName
	BSR.W	LoadActualSong
	DC.W	$0c7a
	DC.W	$ffff
	ROR.W	#5,D2
	BEQ.S	LoadActualProject_ModX
	CMPI.B	#$ff,MODULE_SONGTYPE+1
	BEQ.S	LoadActualProject_Mod2X
	BSR.S	LoadActualInstruments
	BSR.W	LoadActualSongData
	BSR.W	LoadActualSongSeq
	BSR.W	AutoLoadSamples
	BSR.W	AutoCalcLineSamples
LoadActualProject_Mod2X:
	CLR.B	MODULE_SONGTYPE+1
LoadActualProject_ModX:
	LEA	Test_PATTED+2,A0
	JSR	PattedUpdateDisp
	BSR.W	UpdatePosList
LoadActualProject_X:
	CLR.B	SONGFILEIO
LoadActualProject_Xc:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SONGFILEIO:
	ORI.B	#$00,D0
LoadActualInstruments:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	FinalFileNameRT_PTR(PC),A0
	BSR.W	ClipExtension
	LEA	SampleList_EXT,A1
	BSR.W	AddExtention
	MOVE.L	FinalFileNameRT_PTR(PC),D1
	MOVE.L	#$000003ed,D2
	MOVEA.L	_DosBase,A6
	JSR	-30(A6)
	MOVEA.L	D0,A5
	BEQ.S	LoadActualInstruments_X
	MOVE.L	A5,D1
	MOVE.L	SampleNames_PTR+2,D2
	MOVE.L	LAB_127F+2,D3
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
	MOVE.L	#Done_TXT+1,AssText_TXT
	BSR.W	PrintAssTextF
LoadActualInstruments_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadActualSong:
	JSR	HideBlockRange
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	PattedUpdateReset
	BSR.W	FreeModuleDiz
	BSR.W	FreeModuleDiz2
	MOVEA.L	FinalFileNameRT_PTR(PC),A0
	BSR.W	ClipExtension
	LEA	Song_EXT+1,A1
	BSR.W	AddExtention
	MOVE.L	FinalFileNameRT_PTR(PC),D1
	MOVE.L	#$000003ed,D2
	MOVEA.L	_DosBase,A6
	JSR	-30(A6)
	MOVEA.L	D0,A5
	BEQ.S	LoadActualSong_X
	MOVE.L	A5,D1
	MOVE.L	NoteMem_PTR+2,D2
	MOVEA.L	D2,A4
	MOVEQ	#4,D3
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	CMPI.L	#$53796d4d,(A4)
	BEQ.S	LINK_LoadasMod
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
	MOVE.L	FinalFileNameRT_PTR(PC),D1
	MOVE.L	#$000003ed,D2
	MOVEA.L	_DosBase,A6
	JSR	-30(A6)
	MOVEA.L	D0,A5
	BEQ.S	LoadActualSong_X
	MOVE.L	A5,D1
	MOVE.L	NoteMem_PTR+2,D2
	MOVE.L	LAB_1121+2,D3
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
LoadActualSong_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LINK_LoadasMod:
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
	MOVE.B	#$ff,MODULE_SONGTYPE+1
	BRA.W	ReLoadActualModule
LoadActualSongData:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	FinalFileNameRT_PTR(PC),A0
	BSR.W	ClipExtension
	LEA	SongData_EXT+1,A1
	BSR.W	AddExtention
	MOVE.L	FinalFileNameRT_PTR(PC),D1
	MOVE.L	#$000003ed,D2
	MOVEA.L	_DosBase,A6
	JSR	-30(A6)
	MOVEA.L	D0,A5
	BEQ.S	LoadActualSongData_X
	MOVE.L	A5,D1
	MOVE.L	TestSongData_PTR,D2
	MOVE.L	LAB_1182,D3
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
	BSR.W	UpdatePatHeadPtrs
LoadActualSongData_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadActualSongSeq:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	InitSequences
	MOVEA.L	FinalFileNameRT_PTR(PC),A0
	BSR.W	ClipExtension
	LEA	SongSeq_EXT,A1
	BSR.W	AddExtention
	MOVE.L	FinalFileNameRT_PTR(PC),D1
	MOVE.L	#$000003ed,D2
	MOVEA.L	_DosBase,A6
	JSR	-30(A6)
	MOVEA.L	D0,A5
	BEQ.S	LoadActualSongSeq_X
	MOVE.L	A5,D1
	MOVE.L	SequenceMem_PTR+2,D2
	MOVE.L	LAB_1179+2,D3
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
LoadActualSongSeq_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ReadUnpack:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	D2,D7
	MOVE.L	D3,D6
	LEA	PACKMEM(PC),A0
	MOVE.L	D3,4(A0)
	BSR.W	GetMem
	MOVE.L	PACKMEM(PC),D2
	TST.L	D2
	BEQ.S	ReadUnpack_NOMEM
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	BSR.S	UnpackData
LAB_0B3B:
	BSR.W	FreePackMem
ReadUnpack_NOMEM:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
UnpackData:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	PACKMEM(PC),A0
	MOVEA.L	D7,A1
	CMPI.L	#$5041434b,(A0)
	BNE.S	UnpackData_NotPacked
	CMPI.W	#$ffff,4(A0)
	BNE.S	UnpackData_NotPacked
	LEA	10(A0),A0
UnpackData_L:
	MOVEQ	#0,D2
	MOVE.B	(A0)+,D2
	CMPI.B	#$ff,D2
	BEQ.S	UnpackData_X
	CMPI.B	#$03,D2
	BHI.S	UnpackData_ERR
	LEA	Unpack_JL(PC),A2
	DC.W	$2472
	MOVE.L	D0,D2
	JSR	(A2)
	BRA.S	UnpackData_L
UnpackData_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
UnpackData_ERR:
	MOVE.L	#ERRUnpacked_TXT+1,AssText_TXT
	BSR.W	PrintAssTextF
	BRA.S	UnpackData_X
UnpackData_NotPacked:
	MOVE.L	D6,D0
	BSR.W	CopyMemory
	BRA.S	UnpackData_X
Unpack_JL:
	DC.L	DoUnpackNone
	DC.L	DoUnpackLongs
	DC.L	DoUnpackDblLong
	DC.L	DoUnpackNullBytes
DoUnpackNone:
	MOVEM.L	D0,-(A7)
	MOVEQ	#0,D0
	MOVE.B	(A0)+,D0
	BSR.W	CopyMemory
	LEA	0(A0,D0.W),A0
	LEA	0(A1,D0.W),A1
	MOVEM.L	(A7)+,D0
	RTS
DoUnpackDblLong:
	MOVEM.L	D0,-(A7)
	MOVE.L	(A0)+,D0
	MOVE.L	D0,(A1)+
	MOVE.L	D0,(A1)+
	MOVEM.L	(A7)+,D0
	RTS
DoUnpackLongs:
	MOVEM.L	D0-D1,-(A7)
	MOVEQ	#0,D1
	MOVE.B	(A0)+,D1
	MOVE.L	(A0)+,D0
	SUBQ.L	#1,D1
	BMI.S	DoUnpackLongs_X
DoUnpackLongs_L:
	MOVE.L	D0,(A1)+
	DBF	D1,DoUnpackLongs_L
DoUnpackLongs_X:
	MOVEM.L	(A7)+,D0-D1
	RTS
DoUnpackNullBytes:
	MOVEM.L	D0,-(A7)
	MOVEQ	#0,D0
	MOVE.B	(A0)+,D0
	SUBQ.W	#1,D0
UnpackNullBytes_L:
	CLR.B	(A1)+
	DBF	D0,UnpackNullBytes_L
	MOVEM.L	(A7)+,D0
	RTS
UnpackNone:
	MOVEM.L	D0,-(A7)
	MOVEQ	#0,D0
	MOVE.B	(A0)+,D0
	BSR.W	CopyMemory
	MOVEM.L	(A7)+,D0
	RTS
PackData:
	MOVEM.L	D0-D1/D4-D7/A0-A6,-(A7)
	CLR.W	PACKRESULT
	LEA	PACKMEM(PC),A0
	MOVE.L	D3,4(A0)
	BSR.W	GetMem
	TST.L	(A0)
	BEQ.S	PackData_Fail
	MOVEA.L	(A0),A1
	MOVEA.L	D2,A0
	MOVE.L	D3,D0
	MOVE.L	D0,LAB_1315+2
	MOVEQ	#0,D7
	LEA	Pack_JL(PC),A5
	BSR.S	ClearPackNone
PackData_L:
	MOVEQ	#0,D4
	MOVEQ	#0,D5
	BSR.W	CheckDblLong
	BSR.W	PackUseHigh
	BSR.W	CheckLongs
	BSR.W	PackUseHigh
	BSR.W	CheckNullBytes
	BSR.W	PackUseHigh
	DC.W	$4df5
	ADDQ.B	#2,D0
	MOVEA.L	(A6),A6
	JSR	(A6)
	TST.L	D0
	BNE.S	PackData_L
	BSR.S	WritePackNone
	CMPI.W	#$ffff,PACKRESULT
	BNE.S	PackData_Fail
	MOVE.B	#$ff,(A1)
	ADDQ.L	#1,D7
	MOVE.L	D7,D3
	MOVE.L	PACKMEM(PC),D2
PackData_Fail:
	MOVEM.L	(A7)+,D0-D1/D4-D7/A0-A6
	RTS
FreePackMem:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	PACKMEM(PC),A0
	TST.L	(A0)
	BEQ.S	FreePackMem_X
	MOVE.L	#$00010012,MEM_DEBUG_INFO
	CLR.L	LAB_109F
	BSR.W	FreeMem
	CLR.L	(A0)
FreePackMem_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
Pack_JL:
	DC.L	PackNone
	DC.L	PackLongs
	DC.L	PackDbLong
	DC.L	PackNullBytes
ClearPackNone:
	MOVE.L	A0,LAB_0B57
	CLR.L	NONEPACKINFO
	RTS
WritePackNone:
	MOVEM.L	D0/A0,-(A7)
	MOVE.L	NONEPACKINFO(PC),D0
	TST.L	D0
	BEQ.S	WritePackNone_X
	CLR.B	(A1)+
	MOVE.B	D0,(A1)+
	ADDQ.L	#2,D7
	ADD.L	D0,D7
	MOVEA.L	LAB_0B57(PC),A0
	BSR.W	CopyMemory
	LEA	0(A1,D0.L),A1
WritePackNone_X:
	MOVEM.L	(A7)+,D0/A0
	BSR.S	ClearPackNone
	RTS
PackNone:
	DC.W	$0cba
	ORI.B	#$ff,D0
	DC.W	$0012
	BNE.S	PackNone_OK
	BSR.S	WritePackNone
PackNone_OK:
	ADDQ.L	#1,A0
	SUBQ.L	#1,D0
	ADDQ.L	#1,NONEPACKINFO
	RTS
NONEPACKINFO:
	ORI.B	#$00,D0
LAB_0B57:
	ORI.B	#$00,D0
PackNullBytes:
	BSR.S	WritePackNone
	MOVEM.L	D2,-(A7)
	MOVEQ	#0,D2
	MOVE.B	PACKNULLBYTES+1(PC),D2
	MOVE.B	#$03,(A1)+
	MOVE.B	D2,(A1)+
	SUB.L	D2,D0
	LEA	0(A0,D2.W),A0
	ADDQ.L	#2,D7
	MOVEM.L	(A7)+,D2
	MOVE.W	#$ffff,PACKRESULT
	BSR.S	ClearPackNone
	RTS
PackDbLong:
	BSR.S	WritePackNone
	MOVEM.L	D2,-(A7)
	MOVE.L	(A0),D2
	MOVE.B	#$02,(A1)+
	MOVE.L	D2,(A1)+
	SUBQ.L	#8,D0
	ADDQ.L	#8,A0
	ADDQ.L	#5,D7
	MOVEM.L	(A7)+,D2
	MOVE.W	#$ffff,PACKRESULT
	BSR.W	ClearPackNone
	RTS
PackLongs:
	BSR.W	WritePackNone
	MOVEM.L	D4-D5,-(A7)
	MOVEQ	#0,D5
	MOVE.B	PACKEDLONGS(PC),D5
	MOVE.L	(A0),D4
	MOVE.B	#$01,(A1)+
	MOVE.B	D5,(A1)+
	MOVE.L	D4,(A1)+
	LSL.L	#2,D5
	SUB.L	D5,D0
	LEA	0(A0,D5.W),A0
	ADDQ.L	#6,D7
	MOVEM.L	(A7)+,D4-D5
	MOVE.W	#$ffff,PACKRESULT
	BSR.W	ClearPackNone
	RTS
PackUseHigh:
	CMP.L	D4,D1
	BLS.S	PackUseHigh_Keep
	MOVE.L	D1,D4
	MOVE.L	D2,D5
PackUseHigh_Keep:
	RTS
CheckDblLong:
	MOVEM.L	D7,-(A7)
	MOVE.L	D0,D7
	LSR.L	#2,D7
	SUBQ.L	#1,D7
	BMI.S	CheckDblLong_Fail
	TST.L	D7
	BEQ.S	CheckDblLong_Fail
	MOVE.L	(A0),D2
	CMP.L	4(A0),D2
	BNE.S	CheckDblLong_Fail
	MOVEQ	#3,D1
CheckDblLong_X:
	MOVEQ	#2,D2
	MOVEM.L	(A7)+,D7
	RTS
CheckDblLong_Fail:
	MOVEQ	#0,D1
	BRA.S	CheckDblLong_X
CheckLongs:
	MOVEM.L	D3/D7/A0,-(A7)
	MOVE.L	D0,D7
	LSR.L	#2,D7
	SUBQ.L	#1,D7
	BMI.S	CheckLongs_Fail
	TST.L	D7
LAB_0B61:
	BEQ.S	CheckLongs_Fail
	MOVE.L	(A0)+,D2
	MOVEQ	#0,D3
CheckLongs_L:
	ADDQ.L	#1,D3
	CMP.L	(A0)+,D2
	BNE.S	CheckLongs_END
	SUBQ.L	#1,D7
	BNE.S	CheckLongs_L
CheckLongs_END:
	CMPI.L	#$00000100,D3
	BCS.S	CheckLongs_OK
	MOVE.L	#$000000ff,D3
CheckLongs_OK:
	MOVE.B	D3,PACKEDLONGS
	SUBQ.L	#1,D3
	BEQ.S	CheckLongs_Fail
	ADDQ.L	#2,D3
	MOVE.L	D3,D1
CheckLongs_X:
	MOVEM.L	(A7)+,D3/D7/A0
	MOVEQ	#1,D2
	RTS
CheckLongs_Fail:
	MOVEQ	#0,D1
	BRA.S	CheckLongs_X
PACKEDLONGS:
PACKNULLBYTES:
	DC.W	$0000
CheckNullBytes:
	MOVEM.L	D3/D7/A0,-(A7)
	TST.B	(A0)
	BNE.S	CheckNullBytes_Fail
	MOVE.L	D0,D7
	SUBQ.L	#1,D7
	BMI.S	CheckNullBytes_Fail
	TST.L	D7
	BEQ.S	CheckNullBytes_Fail
	MOVEQ	#-1,D3
CheckNullBytes_L:
	ADDQ.L	#1,D3
	TST.B	(A0)+
	BNE.S	CheckNullBytes_END
	SUBQ.L	#1,D7
	BNE.S	CheckNullBytes_L
CheckNullBytes_END:
	CMPI.L	#$00000003,D3
	BCS.S	CheckNullBytes_Fail
	CMPI.L	#$00000100,D3
	BCS.S	CheckNullBytes_OK
	MOVE.L	#$000000ff,D3
CheckNullBytes_OK:
	MOVE.B	D3,PACKNULLBYTES+1
	SUBQ.L	#2,D3
	MOVE.L	D3,D1
CheckNullBytes_X:
	MOVEM.L	(A7)+,D3/D7/A0
	MOVEQ	#3,D2
	RTS
CheckNullBytes_Fail:
	MOVEQ	#0,D1
	BRA.S	CheckNullBytes_X
PACKMEM:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D1
UpdatePatHeadPtrs:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	TestSongData_PTR,A0
	MOVE.L	#$000001ff,D7
UpdatePatHeadPtrs_L:
	BSR.W	SetPatHeadPTR
	LEA	32(A0),A0
	DBF	D7,UpdatePatHeadPtrs_L
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
AutoLoadSamples:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	MoveFirstInstrument
	LEA	Test_INSTRMAN,A5
	MOVE.W	12(A5),D7
	BEQ.S	AutoLoadSamples_X
	SUBQ.W	#1,D7
	MOVEA.L	SampleNames_PTR+2,A2
	MOVEA.L	SAMPLEMANLIST_PTR,A3
	MOVEA.L	FirstEntry_INSTR,A4
	MOVEA.L	A3,A0
	BSR.W	FreeAllSamples
	MOVEA.L	A3,A0
	BSR.W	InitSampleManagement
AutoLoadSamples_L:
	BSR.W	GetActualInstrName
	TST.B	(A0)
	BEQ.S	AutoLoadSamples_NEXT
	CMPI.B	#$03,132(A0)
	BEQ.S	AutoLoadSamples_NEXT
	CMPI.B	#$02,132(A0)
	BEQ.S	AutoLoadSamples_NEXT
	CMPI.B	#$fc,128(A0)
	BEQ.S	AutoLoadSamples_NEXT
	BSR.W	ReloadActualSample
AutoLoadSamples_NEXT:
	BSR.W	HandleAllMsgs
	BSR.W	MoveNextInstrument
	DBF	D7,AutoLoadSamples_L
AutoLoadSamples_X:
	JSR	DrawInstrument
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SaveActInstrName:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	MOVEA.L	TempInstrName_PTR(PC),A1
	BSR.W	CopyInstrName
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadActInstrName:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	MOVEA.L	TempInstrName_PTR(PC),A1
	EXG	A0,A1
	BSR.W	CopyInstrName
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
TempInstrName_PTR:
	ORI.B	#$00,D0
	DC.W	$0000
	BTST	D0,D0
	ORI.B	#$01,D1
	DC.W	$0000
NewLoadSampleHunk:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	NewLoadSample_INFO,A5
	MOVEQ	#1,D0
	BSR.W	GetActualInstrName
	MOVE.L	A0,20(A5)
	MOVE.W	D0,(A5)
	MOVEQ	#-1,D0
	BRA.W	NewLoadSample_HUNKIN
SAMPLERESOLUTION:
	DC.W	$0008
	DC.W	$0000
SetCustomScreenPrefs:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	TempPrefs_Head(PC),A2
	MOVE.L	(A0),D0
	MOVE.L	D0,20(A2)
	MOVE.L	4(A0),D0
	MOVE.W	D0,24(A2)
	MOVE.L	8(A0),D0
	MOVE.W	D0,26(A2)
	MOVE.W	12(A0),D0
	MOVE.W	D0,28(A2)
	MOVE.W	#$0001,30(A2)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
SetMenuPrefs:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	TempPrefs_Head(PC),A0
	CMPI.L	#$00000001,8(A0)
	BCS.W	LAB_0B7D
	CMPI.L	#$00000001,12(A0)
	BCS.W	LAB_0B7D
	MOVEA.L	PathBuf_PTR(PC),A0
	LEA	2048(A0),A0
	LEA	MT_Flag1,A2
	BSR.W	SetMPStat
	MOVE.L	D0,LAB_0044
	LEA	MT_Flag2,A2
	BSR.W	SetMPStat
	MOVE.L	D0,LAB_0046
	LEA	MT_Flag3+1,A2
	BSR.S	SetMPStat
	MOVE.L	D0,LAB_0041
	LEA	MT_Flag4+1,A2
	BSR.S	SetMPStat
	MOVE.L	D0,LAB_003F
	LEA	MT_Flag5+1,A2
	BSR.S	SetMPStat
	MOVE.L	D0,InstrUpdate
	LEA	MT_Flag6+1,A2
	BSR.S	SetMPStat
	MOVE.B	D0,ForceUpdate
	LEA	MT_Flag7+1,A2
	BSR.S	SetMPStat
	MOVE.B	D0,AutoActWindow
	LEA	MT_Flag8+3,A2
	BSR.S	SetMPStat
	MOVE.B	D0,FORCEKNACK
	LEA	MT_Flag9,A2
	BSR.S	SetMPStat
	MOVE.B	D0,PACKSONG
	LEA	MT_Flag10+1,A2
	BSR.S	SetMPStat
	MOVE.W	D0,PACKSAMPLE+2
	LEA	MT_Flag11,A2
	BSR.S	SetMPStat
	MOVE.B	D0,FASTGFX+2
LAB_0B7D:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetMPStat:
	MOVE.B	(A0)+,D0
	MOVE.B	(A0)+,D1
	TST.B	D0
	BNE.S	LAB_0B7F
	MOVEQ	#1,D0
	RTS
LAB_0B7F:
	MOVE.B	D1,1(A2)
	CMPI.B	#$20,D1
	BNE.S	LAB_0B80
	MOVEQ	#0,D0
	RTS
LAB_0B80:
	MOVEQ	#-1,D0
	RTS
	DC.W	$0000
MakeMenuPrefs:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	PathBuf_PTR(PC),A0
	LEA	2048(A0),A0
	LEA	LAB_0044,A1
	BSR.S	AddMPStat
	LEA	LAB_0046,A1
	BSR.S	AddMPStat
	LEA	LAB_0041,A1
	BSR.S	AddMPStat
	LEA	LAB_003F,A1
	BSR.S	AddMPStat
	LEA	InstrUpdate,A1
	BSR.S	AddMPStat
	LEA	ForceUpdate,A1
	BSR.S	AddMPStat
	LEA	AutoActWindow,A1
	BSR.S	AddMPStat
	LEA	FORCEKNACK,A1
	BSR.S	AddMPStat
	LEA	PACKSONG(PC),A1
	BSR.S	AddMPStat
	LEA	PACKSAMPLE+2(PC),A1
	BSR.S	AddMPStat
	LEA	FASTGFX+2,A1
	BSR.S	AddMPStat
	CLR.B	(A0)+
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
AddMPStat:
	MOVE.B	#$20,D0
	TST.B	(A1)
	BEQ.S	LAB_0B83
	MOVE.B	#$2b,D0
LAB_0B83:
	MOVE.B	#$ff,(A0)+
	MOVE.B	D0,(A0)+
	RTS
LoadTempPrefs:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$000003ed,D2
	MOVE.L	#TempPrefs_TXT,D1
	MOVEA.L	_DosBase,A6
	JSR	-30(A6)
	TST.L	D0
	BEQ.W	LAB_0B86
	MOVE.L	D0,EasyDHandle
	LEA	TempPrefs_Head(PC),A0
	MOVE.L	A0,D2
	MOVEQ	#32,D3
	MOVE.L	EasyDHandle(PC),D1
	MOVEQ	#0,D0
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	TST.L	D0
	BMI.S	LAB_0B85
	LEA	TempPrefs_Head(PC),A0
	CMPI.L	#$53544d50,(A0)
	BNE.S	LAB_0B85
	CMPI.L	#$50524546,4(A0)
	BNE.S	LAB_0B85
	MOVE.W	16(A0),GUILook
	MOVEA.L	PathBuf_PTR(PC),A0
	MOVE.L	#$00000c00,D3
	MOVE.L	A0,D2
	MOVE.L	EasyDHandle(PC),D1
	MOVEQ	#0,D0
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	TST.L	D0
	BMI.S	LAB_0B85
	LEA	TempPrefs_Head(PC),A0
	CMPI.W	#$0001,30(A0)
	BSR.W	SetMenuPrefs
	MOVE.L	EasyDHandle(PC),D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0B85:
	MOVE.L	EasyDHandle(PC),D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
LAB_0B86:
	BSR.W	InitPathBuf
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SaveTempPrefs:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$00000001,LAB_0B8B
	MOVE.L	#$00000001,LAB_0B8C
	BSR.W	MakeMenuPrefs
	MOVE.L	#$000003ee,D0
	MOVE.L	#TempPrefs_TXT,D1
	BSR.W	EasyDOpen
	TST.L	D0
	BEQ.S	LAB_0B88
	LEA	TempPrefs_Head(PC),A0
	MOVE.W	GUILook,16(A0)
	MOVEQ	#32,D0
	BSR.W	EasyDWrite
	MOVEA.L	PathBuf_PTR(PC),A0
	MOVE.L	#$00000c00,D0
	BSR.W	EasyDWrite
	BSR.W	EasyDClose
LAB_0B88:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PathBuf_PTR:
	ORI.B	#$00,D0
	DC.W	$0000
	CMPI.B	#$01,D0
	DC.W	$0001
TempPrefs_Head:
	SUBQ.W	#1,(A4)
	DC.W	$4d50
	ADDQ.W	#8,(A2)
	DC.W	$4546
LAB_0B8B:
	ORI.B	#$01,D0
LAB_0B8C:
	ORI.B	#$01,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
ClearTempProj:
	MOVEM.L	A0,-(A7)
	MOVEA.L	TempProjName,A0
	CLR.B	(A0)
	MOVEA.L	(A7)+,A0
	RTS
InitPathBuf:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	SampleDir_TXT,A0
	MOVEA.L	PathBuf_PTR(PC),A1
	BSR.W	CopyString
	LEA	SongDir_TXT,A0
	LEA	256(A1),A1
	BSR.W	CopyString
	LEA	ModuleDir_TXT,A0
	LEA	256(A1),A1
	BSR.W	CopyString
	LEA	SongDir_TXT,A0
	LEA	256(A1),A1
	BSR.W	CopyString
	LEA	DSPPLUG_Dir,A0
	LEA	256(A1),A1
	BSR.W	CopyString
	LEA	SampleDir_TXT,A0
	LEA	256(A1),A1
	BSR.W	CopyString
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
SetTempProj:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	FileNameRT_PTR(PC),A0
	MOVEA.L	TempProjName,A1
	BSR.W	CopyString
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
GetTempProj:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	TempProjName,A0
	MOVEA.L	ProjectName_PTR,A2
	TST.B	(A0)
	BEQ.S	LAB_0B91
	MOVEA.L	FileNameRT_PTR(PC),A1
	BSR.W	CopyString
LAB_0B91:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
GetPathBuf:
	MOVEM.L	D0/A0,-(A7)
	MOVE.W	D0,PathBufID
	MOVEA.L	PathBuf_PTR(PC),A0
	LSL.L	#8,D0
	LEA	0(A0,D0.W),A0
	BSR.W	SetFileRequestPath
	LEA	128(A0),A0
	MOVEA.L	FileNameRT_PTR(PC),A1
	BSR.W	CopyString
	MOVEM.L	(A7)+,D0/A0
	RTS
	DC.W	$0000
SavePathBuf:
	MOVEM.L	D0/A0-A1,-(A7)
	MOVE.W	PathBufID,D0
	MOVEA.L	PathBuf_PTR(PC),A0
	LSL.L	#8,D0
	LEA	0(A0,D0.W),A1
	BSR.W	GetReqPath
	BSR.W	CopyString
	MOVEA.L	FileNameRT_PTR(PC),A0
	LEA	128(A1),A1
	BSR.W	CopyString
	MOVEM.L	(A7)+,D0/A0-A1
	RTS
	DC.W	$0000
SavePathOnlyBuf:
	MOVEM.L	D0/A0-A1,-(A7)
	MOVE.W	PathBufID,D0
	MOVEA.L	PathBuf_PTR(PC),A0
	LSL.L	#8,D0
	LEA	0(A0,D0.W),A1
	BSR.W	GetReqPath
	BSR.W	CopyString
	MOVEM.L	(A7)+,D0/A0-A1
	RTS
	DC.W	$0000
NewLoadSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	NewLoadSample_INFO(PC),A5
	BSR.W	GetActualInstrName
	MOVE.L	A0,20(A5)
	CMPI.B	#$02,132(A0)
	BEQ.W	NewLoadSample_X
	MOVE.W	D0,(A5)
	TST.W	D0
	BNE.S	NewLoadSample_KeepName
	LEA	All_MATCH+1,A0
	BSR.W	SetFileRequestPat
	MOVEQ	#0,D0
	BSR.W	GetPathBuf
	LEA	LoadNewSample_TXT,A0
	BSR.W	SimpleFileRequest
	BSR.W	SavePathBuf
	TST.W	D0
	BEQ.W	NewLoadSample_X
	BSR.W	KillActualInstr
	MOVEA.L	FinalFileNameRT_PTR(PC),A0
	MOVEA.L	20(A5),A1
	BSR.W	CopyString
	MOVEA.L	20(A5),A0
	BSR.W	InitSampleName
NewLoadSample_KeepName:
	MOVEA.L	20(A5),A0
	BSR.W	LoadTempSample
	CMPI.W	#$ffff,D0
	BNE.W	NewLoadSample_ERR
NewLoadSample_HUNKIN:
	BSR.W	GetTempSampleBody
	DC.W	$0c7a
	DC.W	$0010
	DC.W	$fb80
	BNE.S	NewLoadSample_M
	MOVEM.L	A5,-(A7)
	MOVEA.L	20(A5),A5
	BSET	#3,140(A5)
	MOVEA.L	(A7)+,A5
NewLoadSample_M:
	CMPI.W	#$0001,D1
	BEQ.S	NewLoadSample_Stereo
	MOVE.W	D1,2(A5)
	MOVE.L	A0,4(A5)
	MOVE.L	D0,8(A5)
	MOVEA.L	20(A5),A0
	CLR.B	132(A0)
	BSR.S	MakeFinalSample
	BRA.S	NewLoadSample_X
NewLoadSample_Stereo:
	MOVE.W	D1,2(A5)
	MOVE.L	A0,4(A5)
	LSR.L	#1,D0
	MOVE.L	D0,D7
	MOVE.L	D0,8(A5)
	MOVEA.L	20(A5),A1
	MOVE.B	#$01,132(A1)
	MOVE.W	SAMPLERESOLUTION(PC),D6
	BSR.S	MakeFinalSample
	MOVE.W	D6,SAMPLERESOLUTION
	BSR.W	MoveNextInstrument
	BSR.W	GetActualInstrName
	EXG	A0,A1
	BSR.W	CopyString
	MOVE.B	#$02,132(A1)
	MOVE.L	A1,20(A5)
	MOVEA.L	4(A5),A0
	ADDA.L	D7,A0
	MOVE.L	A0,4(A5)
	BSR.S	MakeFinalSample
	BSR.W	MovePrevInstrument
NewLoadSample_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
NewLoadSample_ERR:
	BSR.W	PrintActInstrInfo
	MOVE.L	#ErrTempSample,AssText_TXT
	JSR	PrintAssTextF
	BSR.W	FreeTempSample
	BRA.S	NewLoadSample_X
MakeFinalSample:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	BSR.W	GetActualSampleManagerEntry
	MOVEA.L	A0,A4
	MOVE.L	A0,28(A5)
	BSR.W	FreeSample
	BSR.W	InitSampleManEntry
	BSR.W	GetActualInstrument
	MOVE.L	A0,24(A5)
	MOVEA.L	A0,A3
	MOVE.L	8(A5),D0
	DC.W	$0c7a
	DC.W	$0008
	DC.W	$fab8
	BEQ.S	NLSResolOk
	LSR.L	#1,D0
NLSResolOk:
	MOVE.L	D0,26(A4)
	MOVEQ	#0,D2
	MOVE.W	4(A4),D2
	DC.W	$0c7a
	DC.W	$0008
	DC.W	$faa4
	BEQ.S	NLSResolOk2
	LSR.W	#1,D2
NLSResolOk2:
	MOVE.L	8(A5),D0
	LSL.L	D2,D0
	LSL.L	#1,D0
	MOVE.L	D0,10(A4)
	LEA	6(A4),A0
	BSR.W	GetMem
	TST.L	D0
	BEQ.W	MakeFinalSample_ERR
	MOVEA.L	4(A5),A0
	MOVEA.L	6(A4),A1
	MOVE.L	8(A5),D0
	MOVEA.L	EXECBASE+2,A6
	JSR	-624(A6)
	MOVE.W	#$ffff,(A4)
	MOVE.L	26(A4),D0
	MOVE.W	VEX_StartSetup+2(PC),D1
	MOVEA.L	6(A4),A0
	DC.W	$0c7a
	DC.W	$0010
	DC.W	$fa5a
	BEQ.S	NLSResolOk3
	BSR.W	Convert8to16Bit
NLSResolOk3:
	MOVE.W	#$0008,SAMPLERESOLUTION
	BSR.W	NewPrepareSample
	MOVEA.L	6(A4),A0
	MOVE.L	10(A4),D0
	ADDA.L	D0,A0
	SUBQ.L	#1,A0
	SUBQ.L	#1,A0
	MOVE.L	A0,30(A4)
	MOVE.L	20(A5),18(A4)
	MOVEQ	#0,D0
	MOVEQ	#0,D1
	CLR.W	(A3)
	MOVE.L	D0,4(A3)
	MOVE.W	D1,2(A3)
	MOVE.L	10(A4),12(A3)
	MOVE.L	6(A4),8(A3)
	MOVE.L	30(A4),16(A3)
	MOVEQ	#-1,D0
	BSR.W	ForceUpdateActInstrType
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
MakeFinalSample_ERR:
	BSR.W	PrintActInstrInfo
	MOVE.L	#ErrTempSample,AssText_TXT
	JSR	PrintAssTextF
	MOVEQ	#0,D0
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
InitSampleName:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.B	128(A1)
	CLR.B	129(A1)
	CLR.B	130(A1)
	CLR.W	150(A1)
	CLR.W	152(A1)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
GetTempSampleBody:
	MOVEM.L	D2-D7/A1-A6,-(A7)
	LEA	LoadTempSample_MEM(PC),A5
	MOVEA.L	(A5),A0
	MOVE.L	4(A5),D0
	CMPI.L	#$464f524d,(A0)
	BNE.W	GetTempSampleBody_WAVE2
	CMPI.L	#$41494646,8(A0)
	BEQ.W	GetTempSampleBody_AIFF
	CMPI.L	#$4d415544,8(A0)
	BEQ.W	GetTempSampleBody_MAUD
	CMPI.L	#$38535658,8(A0)
	BNE.W	GetTempSampleBody_WAVE
	MOVE.W	#$3820,aifformat_TXT
	MOVE.L	#$4d4f4e4f,LAB_13A8
	MOVE.W	#$2020,LAB_13A9
	BSR.W	NewSearchForIffBody
	CMPI.W	#$0001,D1
	BNE.S	LAB_0BA3
	MOVEQ	#1,D1
	MOVE.L	#$53544552,LAB_13A8
	MOVE.W	#$454f,LAB_13A9
LAB_0BA3:
	MOVE.L	#$38535658,LAB_13A2
	CMPI.B	#$ff,AUTOLOADSAMPLE
	BEQ.S	LAB_0BA4
	MOVE.L	#NameFormat_TXT,AssText_TXT
	JSR	PrintAssTextF
LAB_0BA4:
	CMPI.W	#$0001,D1
	BNE.W	GetTempSampleBody_RAW
GetTempSampleBody_X:
	MOVEM.L	(A7)+,D2-D7/A1-A6
	RTS
	DC.W	$0000
GetTempSampleBody_AIFF:
	MOVEQ	#0,D1
	MOVE.W	#$0008,SAMPLERESOLUTION
	MOVE.L	D0,D4
	LEA	12(A0),A2
LAB_0BA7:
	MOVE.L	(A2)+,D2
	MOVE.L	(A2)+,D3
	CMPI.L	#$53534e44,D2
	BEQ.S	GetTSAIFF_bodyfound
	SUB.L	D3,D4
	BMI.W	GetTempSampleBody_RAW
	LEA	0(A2,D3.L),A2
	BRA.S	LAB_0BA7
	BRA.W	GetTempSampleBody_RAW
	MOVEQ	#0,D1
	MOVE.W	#$0008,SAMPLERESOLUTION
GetTSAIFF_bodyfound:
	MOVE.L	#$41494646,LAB_13A2
	MOVE.W	#$3820,aifformat_TXT
	MOVE.L	#$4d4f4e4f,LAB_13A8
	MOVE.W	#$2020,LAB_13A9
	CMPI.W	#$0010,26(A0)
	BNE.S	LAB_0BA9
	MOVE.W	#$3136,aifformat_TXT
	MOVE.W	#$0010,SAMPLERESOLUTION
LAB_0BA9:
	MOVEA.L	A0,A3
	MOVE.L	D3,D0
	MOVEA.L	A2,A0
	CMPI.W	#$0001,20(A3)
	BEQ.S	LAB_0BAA
	MOVE.L	#$53544552,LAB_13A8
	MOVE.W	#$454f,LAB_13A9
	MOVEQ	#1,D1
	BSR.W	ConvertMaestro
LAB_0BAA:
	CMPI.B	#$ff,AUTOLOADSAMPLE
	BEQ.W	GetTempSampleBody_X
	MOVE.L	#NameFormat_TXT,AssText_TXT
	JSR	PrintAssTextF
	BRA.W	GetTempSampleBody_X
GetTempSampleBody_MAUD:
	CMPI.L	#$4d484452,12(A0)
	BNE.W	GetTempSampleBody_WAVE
	MOVE.W	#$3820,aifformat_TXT
	MOVE.L	#$4d4f4e4f,LAB_13A8
	MOVE.W	#$2020,LAB_13A9
	MOVEQ	#0,D1
	MOVE.W	#$0008,SAMPLERESOLUTION
	CMPI.L	#$00100010,24(A0)
	BNE.S	GetTempSB_MAUD8Bit
	MOVE.W	#$0010,SAMPLERESOLUTION
	MOVE.W	#$3136,aifformat_TXT
GetTempSB_MAUD8Bit:
	CMPI.W	#$0002,36(A0)
	BNE.S	GetTempSB_MAUDmono
	MOVEQ	#1,D1
	MOVE.L	#$53544552,LAB_13A8
	MOVE.W	#$454f,LAB_13A9
GetTempSB_MAUDmono:
	MOVEQ	#100,D2
	MOVEA.L	A0,A2
GetTempSB_MAUDscan_L:
	CMPI.L	#$4d444154,(A2)+
	BEQ.S	GetTempSB_MAUDBODY
	DBF	D2,GetTempSB_MAUDscan_L
	BRA.S	GetTempSampleBody_RAW
GetTempSB_MAUDBODY:
	MOVE.L	(A2)+,D0
	MOVEA.L	A2,A0
	BSR.W	ConvUnsignByteTOSignByte
	MOVEM.L	D0-D1/A0,-(A7)
	MOVEM.L	(A7)+,D0-D1/A0
	BSR.W	ConvertMaestro
	MOVE.L	#$4d415544,LAB_13A2
	CMPI.B	#$ff,AUTOLOADSAMPLE
	BEQ.S	LAB_0BB0
	MOVE.L	#NameFormat_TXT,AssText_TXT
	JSR	PrintAssTextF
LAB_0BB0:
	BRA.W	GetTempSampleBody_X
GetTempSampleBody_WAVE:
	CMPI.L	#$52494646,(A0)
	BNE.S	GetTempSampleBody_RAW
	CMPI.L	#$57415645,8(A0)
	BNE.S	GetTempSampleBody_RAW
	CMPI.L	#$64617461,36(A0)
	BNE.S	GetTempSampleBody_RAW
	CMPI.W	#$1000,34(A0)
	BEQ.S	SampleBody_WAVE16Bit
	LEA	44(A0),A0
	SUBI.L	#$0000002c,D0
	BSR.W	ConvUnsignByteTOSignByte
GetTempSampleBody_RAW:
	MOVEQ	#0,D1
	CMPI.L	#$4d414553,(A0)
	BEQ.W	GetTempSample_Maestro
	CMPI.L	#$31364254,(A0)
	BNE.W	GetTempSampleBody_X
	CLR.L	(A0)
GetTempSample_Set16Bit:
	MOVE.W	#$0010,SAMPLERESOLUTION
	BRA.W	GetTempSampleBody_X
SampleBody_WAVE16Bit:
	MOVEQ	#0,D1
	MOVE.W	#$0010,SAMPLERESOLUTION
	MOVE.L	40(A0),D0
	BSR.S	LongIntelToMot
	BCLR	#0,D0
	CMPI.W	#$0200,22(A0)
	BNE.S	SampleBody_WAVE16Mono
	MOVEQ	#1,D1
	BCLR	#1,D0
SampleBody_WAVE16Mono:
	LEA	44(A0),A0
	MOVEM.L	D0-D2/A0,-(A7)
	LSR.L	#1,D0
SampleBodyWAVE_L:
	MOVE.W	(A0),D1
	MOVE.W	D1,D2
	LSL.W	#8,D1
	LSR.W	#8,D2
	MOVE.B	D2,D1
	MOVE.W	D1,(A0)+
	SUBQ.L	#1,D0
	BNE.S	SampleBodyWAVE_L
	MOVEM.L	(A7)+,D0-D2/A0
	MOVE.W	#$0010,SAMPLERESOLUTION
	BSR.W	ConvertMaestro
	BRA.W	GetTempSampleBody_X
LongIntelToMot:
	BSR.S	WordIntelToMot
	SWAP	D0
	BSR.S	WordIntelToMot
	RTS
WordIntelToMot:
	MOVEM.L	D1,-(A7)
	MOVE.W	D0,D1
	LSL.W	#8,D0
	LSR.W	#8,D1
	MOVE.B	D1,D0
	MOVEM.L	(A7)+,D1
	RTS
GetTempSampleBody_WAVE2:
	MOVE.W	#$3820,aifformat_TXT
	MOVE.L	#$4d4f4e4f,LAB_13A8
	MOVE.W	#$2020,LAB_13A9
	LEA	0(A0,D0.L),A4
	CMPI.L	#$52494646,(A0)
	BNE.W	GetTempSampleBody_RAW
	CMPI.L	#$57415645,8(A0)
	BNE.W	GetTempSampleBody_RAW
	LEA	12(A0),A0
GetTempSampleBody2_L:
	MOVE.L	(A0)+,D2
	MOVE.L	(A0)+,D3
	MOVE.L	D2,WaveCHNK_ID
	BSR.W	IntelLongToMot_D3
	CMPI.L	#$64617461,D2
	BEQ.S	GetTempSampleBody2_data
	CMPI.L	#$666d7420,D2
	BEQ.S	GetTempSampleBody2_format
	CMPI.L	#$66616374,D2
	BEQ.W	GetTempSampleBody2_unsupported
GetTempSampleBody2_cont:
	LEA	0(A0,D3.L),A0
	CMPA.L	A0,A4
	BCS.W	GetTempSampleBody_RAW
	BRA.S	GetTempSampleBody2_L
GetTempSampleBody2_format:
	CMPI.L	#$0000000e,D3
	BNE.S	LAB_0BBD
	CMPI.L	#$64617461,16(A0)
	BNE.S	LAB_0BBD
	MOVEQ	#16,D3
LAB_0BBD:
	MOVEQ	#0,D1
	MOVE.W	#$0008,SAMPLERESOLUTION
	CMPI.W	#$0200,2(A0)
	BNE.S	LAB_0BBE
	MOVE.L	#$53544552,LAB_13A8
	MOVE.W	#$454f,LAB_13A9
	MOVEQ	#1,D1
LAB_0BBE:
	CMPI.W	#$0800,14(A0)
	BEQ.S	LAB_0BBF
	MOVE.W	#$3136,aifformat_TXT
	MOVE.W	#$0010,SAMPLERESOLUTION
LAB_0BBF:
	BRA.S	GetTempSampleBody2_cont
GetTempSampleBody2_data:
	MOVE.L	#$57415620,LAB_13A2
	CMPI.B	#$ff,AUTOLOADSAMPLE
	BEQ.S	LAB_0BC1
	MOVE.L	#NameFormat_TXT,AssText_TXT
	JSR	PrintAssTextF
LAB_0BC1:
	MOVE.L	D3,D0
	LEA	0(A0,D0.L),A5
	CMPA.L	A5,A4
	BCC.S	LAB_0BC2
	MOVE.L	A5,D4
	SUB.L	A4,D4
	SUB.L	D4,D0
	MOVE.L	#IllegalSLen_TXT,AssText_TXT
	JSR	PrintAssTextF
LAB_0BC2:
	DC.W	$0c7a
	DC.W	$0010
	DC.W	$f5ec
	BEQ.S	LAB_0BC3
	BSR.S	ConvIntelTOMotChunk
	BRA.W	GetTempSampleBody_X
LAB_0BC3:
	BCLR	#0,D0
	TST.W	D1
	BEQ.S	LAB_0BC4
	BCLR	#1,D0
LAB_0BC4:
	MOVE.L	D0,D4
	BSR.S	ConvUnsignByteTOSignByte16
	BSR.W	ConvertMaestro
	BRA.W	GetTempSampleBody_X
	DC.W	$0000
GetTempSampleBody2_unsupported:
	MOVE.L	#IFF_HEADE,AssText_TXT
	JSR	PrintAssTextF
	BRA.W	GetTempSampleBody2_cont
ConvUnsignByteTOSignByte16:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	D0,D2
	LSR.L	#1,D2
	SUBQ.L	#1,D2
LAB_0BC7:
	MOVE.W	(A0),D0
	MOVE.W	D0,D1
	LSL.W	#8,D0
	LSR.W	#8,D1
	MOVE.B	D1,D0
	MOVE.W	D0,(A0)+
	SUBQ.L	#1,D2
	BNE.S	LAB_0BC7
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ConvIntelTOMotChunk:
	DC.W	$0c7a
	DC.W	$0008
	DC.W	$f590
	BEQ.S	ConvUBtoSB_do
	BRA.S	ConvUnsignByteTOSignByte16
ConvUnsignByteTOSignByte:
	DC.W	$0c7a
	DC.W	$0008
	DC.W	$f586
	BEQ.S	ConvUBtoSB_do
	RTS
ConvUBtoSB_do:
	MOVEM.L	D0-D1/A0,-(A7)
	SUBQ.L	#1,D0
LAB_0BCB:
	MOVEQ	#0,D1
	MOVE.B	(A0),D1
	SUBI.W	#$0080,D1
	MOVE.B	D1,(A0)+
LAB_0BCC:
	SUBQ.L	#1,D0
	BNE.S	LAB_0BCB
	MOVEM.L	(A7)+,D0-D1/A0
	RTS
IntelLongToMot_D3:
LAB_0BCD:
	MOVEM.L	D0,-(A7)
	MOVE.L	D3,D0
	BSR.W	LongIntelToMot
	MOVE.L	D0,D3
	MOVEM.L	(A7)+,D0
	RTS
GetTempSample_Maestro:
	MOVE.W	#$3136,aifformat_TXT
	MOVE.L	#$4d4f4e4f,LAB_13A8
	MOVE.W	#$2020,LAB_13A9
	TST.L	12(A0)
	BNE.S	GetTSMaestroMono
	MOVEQ	#1,D1
	MOVE.L	#$53544552,LAB_13A8
	MOVE.W	#$454f,LAB_13A9
GetTSMaestroMono:
	MOVEM.L	D1,-(A7)
	MOVE.L	RenderMaestroHead_ADR,D1
	LEA	0(A0,D1.L),A0
	SUB.L	D1,D0
	MOVEM.L	(A7)+,D1
	MOVE.W	#$0010,SAMPLERESOLUTION
	BSR.S	ConvertMaestro
	MOVE.L	#$4d414553,LAB_13A2
	CMPI.B	#$ff,AUTOLOADSAMPLE
	BEQ.S	LAB_0BD1
	MOVE.L	#NameFormat_TXT,AssText_TXT
	JSR	PrintAssTextF
LAB_0BD1:
	BRA.W	GetTempSampleBody_X
ConvertMaestro:
	CMPI.L	#$00000001,D1
	BEQ.S	ConvertMaestroDo
	RTS
ConvertMaestroDo:
	MOVEM.L	D0-D7/A0-A3,-(A7)
	MOVE.L	D0,D2
	MOVEA.L	A0,A2
	LSR.L	#1,D0
	MOVE.L	D0,LAB_0BD9
	LEA	TempMaestro(PC),A0
	BSR.W	GetMem
	TST.L	D0
	BEQ.S	ConvertMaestro_X
	MOVE.L	D2,D7
	LSR.L	#1,D7
	MOVEA.L	A2,A1
	MOVEA.L	A2,A0
	MOVEA.L	TempMaestro(PC),A3
	DC.W	$0c7a
	DC.W	$0008
	DC.W	$f4a4
	BEQ.S	Convert8BitMaestro_L
	LSR.L	#1,D7
ConvertMaestro_L:
	MOVE.L	(A0)+,D0
	MOVE.W	D0,(A1)+
	SWAP	D0
	MOVE.W	D0,(A3)+
	SUBQ.L	#1,D7
	BNE.S	ConvertMaestro_L
ConvertMaestro_EX:
	MOVEA.L	TempMaestro(PC),A0
	MOVE.L	D2,D0
	LSR.L	#1,D0
	BSR.W	CopyMemory
	LEA	TempMaestro(PC),A0
	MOVE.L	#$00010013,MEM_DEBUG_INFO
	CLR.L	LAB_109F
	BSR.W	FreeMem
ConvertMaestro_X:
	MOVEM.L	(A7)+,D0-D7/A0-A3
	RTS
Convert8BitMaestro_L:
	MOVE.W	(A0)+,D0
	MOVE.B	D0,(A1)+
	LSR.W	#8,D0
	MOVE.B	D0,(A3)+
	SUBQ.L	#1,D7
	BNE.S	Convert8BitMaestro_L
	BRA.S	ConvertMaestro_EX
TempMaestro:
	ORI.B	#$00,D0
LAB_0BD9:
	ORI.B	#$00,D0
	ORI.B	#$00,D1
FreeTempSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	LoadTempSample_MEM(PC),A0
	TST.L	(A0)
	BEQ.S	FreeTempSample_X
	MOVE.L	#$00010005,MEM_DEBUG_INFO
	MOVE.L	#$00000003,LAB_109F
	BSR.W	FreeMem
	CLR.L	(A0)
FreeTempSample_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
LoadTempSample:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVEQ	#0,D7
	BSR.S	FreeTempSample
	MOVEA.L	A0,A4
	BSR.W	FileLength
	MOVE.L	D0,D5
	BEQ.S	LoadTempSample_ERR
	LEA	LoadTempSample_MEM(PC),A0
	MOVE.L	D5,4(A0)
	BSR.W	GetMem
	TST.L	D0
	BEQ.S	LoadTempSample_ERR
	MOVE.L	#$000003ed,D2
	MOVE.L	A4,D1
	MOVEA.L	_DosBase,A6
	JSR	-30(A6)
	TST.L	D0
	BEQ.S	LoadTempSample_ERR
	MOVEA.L	D0,A5
	MOVE.L	A5,D1
	MOVE.L	LoadTempSample_MEM(PC),D2
	MOVE.L	D5,D3
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	TST.L	D0
	BMI.S	LoadTempSample_ERR2
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
	BSR.S	UnpackTempSample
	MOVEQ	#-1,D7
LoadTempSample_X:
	MOVE.L	D7,D0
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
LoadTempSample_ERR2:
	MOVE.L	A5,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
LoadTempSample_ERR:
	BSR.S	PrintActInstrInfo
	MOVE.L	#ErrTempSample2+1,AssText_TXT
	JSR	PrintAssTextF
	BRA.S	LoadTempSample_X
PrintActInstrInfo:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrNum
	TST.B	D0
	BSR.W	ConvertToDecByte
	LEA	DecByteSave(PC),A0
	MOVEA.L	A4,A1
	BSR.W	PrintDblAssString
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LoadTempSample_MEM:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$01,D1
	DC.W	$0000
UnpackTempSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	LoadTempSample_MEM(PC),A0
	BSR.W	UnpackXPKMem
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ExportSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	CheckInstrument
	CMPI.B	#$ff,D0
	BEQ.S	LAB_0BE4
	LEA	All_MATCH+1,A0
	BSR.W	SetFileRequestPat
	LEA	Exporttxt+1,A0
	MOVEQ	#0,D0
	BSR.W	GetPathBuf
	BSR.W	SimpleFileRequest
	BSR.W	SavePathBuf
	TST.W	D0
	BEQ.S	LAB_0BE4
	BSR.W	GetActualSampleManagerEntry
	MOVEA.L	A0,A2
	MOVE.L	#$000003ee,D0
	BSR.W	EasyDOpenFFN
	TST.L	D0
	BEQ.S	LAB_0BE4
	MOVEA.L	6(A2),A0
	MOVE.L	10(A2),D0
	MOVE.L	(A0),D7
	MOVE.L	#$31364254,(A0)
	BSR.W	EasyDWrite
	BSR.W	EasyDClose
	MOVE.L	D7,(A0)
LAB_0BE4:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ReloadActualSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	CMPI.B	#$02,132(A0)
	BNE.S	LAB_0BE7
	BSR.W	MovePrevInstrument
	MOVEQ	#1,D0
	BSR.W	NewLoadSample
	BSR.W	MoveNextInstrument
	JSR	DrawInstrument
LAB_0BE6:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0BE7:
	MOVEQ	#1,D0
	BSR.W	NewLoadSample
	JSR	DrawInstrument
	BRA.S	LAB_0BE6
LoadNewSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.B	AUTOLOADSAMPLE
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$79ae
	BEQ.S	LAB_0BEA
	MOVEQ	#0,D0
	BSR.W	NewLoadSample
	BSR.W	DrawActualWave
	JSR	DrawInstrName
LAB_0BE9:
	MOVE.B	#$ff,AUTOLOADSAMPLE
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0BEA:
	LEA	All_MATCH+1,A0
	BSR.W	SetFileRequestPat
	LEA	SampleDir_TXT,A0
	BSR.W	SetFileRequestPath
	LEA	ReselectSample_TXT,A0
	MOVEQ	#0,D0
	BSR.W	GetPathBuf
	BSR.W	SimpleFileRequest
	BSR.W	SavePathBuf
	TST.W	D0
	BEQ.S	LAB_0BE9
	BSR.W	GetActualInstrName
	MOVEA.L	A0,A1
	MOVEA.L	FinalFileNameRT_PTR(PC),A0
	BSR.W	CopyString
	BSR.W	ReloadActualSample
	BRA.S	LAB_0BE9
NewSearchForIffBody:
	MOVEM.L	D2-D7/A2-A6,-(A7)
	MOVEQ	#0,D1
	LEA	0(A0,D0.L),A3
	LEA	12(A0),A2
	MOVE.L	4(A0),D5
	MOVEQ	#0,D0
LAB_0BEC:
	TST.B	(A2)
	BNE.S	LAB_0BED
	ADDQ.L	#1,A2
LAB_0BED:
	MOVE.L	(A2)+,D2
	CMPA.L	A3,A2
	BCC.S	LAB_0BEF
	CMPI.L	#$424f4459,D2
	BEQ.S	LAB_0BF2
	CMPI.L	#$56484452,D2
	BEQ.S	LAB_0BF1
	CMPI.L	#$4348414e,D2
	BEQ.S	LAB_0BF0
LAB_0BEE:
	MOVE.L	(A2)+,D4
	LEA	0(A2,D4.L),A2
	BRA.S	LAB_0BEC
LAB_0BEF:
	MOVEM.L	(A7)+,D2-D7/A2-A6
	RTS
LAB_0BF0:
	MOVE.L	4(A2),D4
	ANDI.L	#$00000006,D4
	CMPI.L	#$00000006,D4
	BNE.S	LAB_0BEE
	MOVEQ	#1,D1
	BRA.S	LAB_0BEE
LAB_0BF1:
	BRA.S	LAB_0BEE
LAB_0BF2:
	MOVE.L	(A2),D0
	LEA	4(A2),A0
	BRA.S	LAB_0BEF
	DC.W	$0000
UnpackXPKFile:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVE.L	A0,LAB_0BF7
	MOVE.L	A1,LAB_0BF8
	TST.L	_XpkBase+2
	BEQ.S	LAB_0BF4
	LEA	LAB_0BF6(PC),A0
	MOVEA.L	_XpkBase+2,A6
	JSR	-48(A6)
	TST.L	D0
	BNE.S	LAB_0BF4
	MOVEQ	#-1,D0
	BRA.S	LAB_0BF5
LAB_0BF4:
	MOVEQ	#0,D0
LAB_0BF5:
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
LAB_0BF6:
	OR.B	D0,D0
	ADDQ.W	#4,(A1)
LAB_0BF7:
	ORI.B	#$00,D0
	OR.B	D0,D0
	ADDQ.W	#4,-(A0)
LAB_0BF8:
	ORI.B	#$00,D0
	OR.B	D0,D0
	DC.W	$5875
	DC.L	XPKErrMsg+3
	ORI.B	#$00,D0
	DC.W	$0000
UnpackXPKMem:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	TST.L	_XpkBase+2
	BEQ.S	UnpackXPKMem_FinalX
	MOVEA.L	A0,A5
UnpackXPK_redo:
	MOVE.L	4(A5),D0
	MOVEA.L	(A5),A0
	CMPI.L	#$58504b46,(A0)
	BEQ.S	UnpackXPK_do
	BRA.S	UnpackXPKMem_FinalX
UnpackXPK_do:
	MOVE.L	A0,LAB_0C06
	MOVE.L	D0,LAB_0C07+2
	LEA	XPKTags(PC),A0
	MOVEA.L	_XpkBase+2,A6
	JSR	-48(A6)
	TST.L	D0
	BNE.S	UnpackXPKMem_ERR
	MOVEA.L	A5,A0
	MOVE.L	#$00010014,MEM_DEBUG_INFO
	CLR.L	LAB_109F
	BSR.W	FreeMem
	MOVEA.L	A5,A0
	MOVE.L	XPK_UNPACKEDLEN(PC),4(A0)
	BSR.W	GetMem
	TST.L	D0
	BEQ.S	UnpackOutMem_ERR
	MOVE.L	XPK_UNPACKEDLEN(PC),D0
	MOVEA.L	XPKBuffer_PTR(PC),A0
	MOVEA.L	(A5),A1
	BSR.W	CopyMemory
	BSR.S	FreeXPKBuffer
UnpackXPKMem_X:
	BRA.S	UnpackXPK_redo
UnpackXPKMem_FinalX:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
UnpackOutMem_ERR:
	MOVE.L	#XPKErrMsg2,AssText_TXT
	JSR	PrintAssTextF
	BSR.S	FreeXPKBuffer
	BRA.S	UnpackXPKMem_FinalX
UnpackXPKMem_ERR:
	MOVE.L	#XPKErrMsg+3,AssText_TXT
	JSR	PrintAssTextF
	BRA.S	UnpackXPKMem_FinalX
FreeXPKBuffer:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	XPKBuffer_PTR(PC),A1
	MOVE.L	XPKBuffer_LEN(PC),D0
	TST.L	D0
	BEQ.S	FreeXPKBuffer_X
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-210(A6)
FreeXPKBuffer_X:
	CLR.L	XPKBuffer_LEN
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
XPK_UNPACKEDLEN:
	ORI.B	#$00,D0
XPKBuffer_LEN:
	ORI.B	#$00,D0
XPKBuffer_PTR:
	ORI.B	#$00,D0
XPKTags:
	OR.B	D0,D0
	ADDQ.W	#4,(A3)
LAB_0C06:
	ORI.B	#$00,D0
	OR.B	D0,D0
LAB_0C07:
	ADDQ.W	#4,0(A0,D0.W)
	DC.W	$0000
	OR.B	D0,D0
	ADDQ.W	#4,-(A3)
	DC.L	XPKBuffer_PTR
	OR.B	D0,D0
	DC.W	$5873
	DC.L	XPKBuffer_LEN
	OR.B	D0,D0
	DC.W	$5872
	DC.L	XPK_UNPACKEDLEN
	OR.B	D0,D0
	DC.W	$5875
	DC.L	XPKErrMsg+3
	ORI.B	#$00,D0
GetWaveArea:
	MOVEM.L	A0,-(A7)
	MOVE.L	#$57494e53,D0
	MOVE.L	#$53574156,D1
	JSR	NGGetInnerAreaData
	DC.W	$4a88
	BEQ.S	LAB_0C0A
	DC.W	$4a8d
	BEQ.S	LAB_0C0A
	TST.L	(A5)
	BEQ.S	LAB_0C0A
LAB_0C09:
	MOVEA.L	(A7)+,A0
	RTS
LAB_0C0A:
	SUBA.L	A1,A1
	BRA.S	LAB_0C09
	DC.W	$0000
DrawActualWave:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	NGCheckWaveSizeOk
	TST.B	D7
	BNE.W	LAB_0C11
	LEA	Test_INSTRMAN(PC),A2
	MOVE.W	10(A2),D2
	MOVEA.L	SAMPLEMANLIST_PTR,A3
	MULU	#$0038,D2
	LEA	0(A3,D2.L),A3
	CLR.W	OLDSAPOL_LINE
	CMPI.W	#$ffff,(A3)
	BNE.S	LAB_0C13
	MOVEA.L	6(A3),A0
	MOVE.L	10(A3),D4
	TST.L	D4
	BEQ.S	LAB_0C13
	DC.W	$4a88
	BEQ.S	LAB_0C13
	BSR.S	GetWaveArea
	DC.W	$4a89
	BEQ.S	LAB_0C12
	JSR	NGRDarkAPen
	MOVEM.L	A0,-(A7)
	BSR.W	GetActualInstrName
	TST.B	128(A0)
	BEQ.S	LAB_0C0D
	BTST	#4,140(A0)
	BEQ.S	LAB_0C0D
	MOVEM.L	D4,-(A7)
LAB_0C0C:
	MOVE.W	D2,D4
	LSR.W	#2,D2
	SUB.W	D2,D4
	MOVE.W	D4,D2
	MOVEM.L	(A7)+,D4
	BRA.S	LAB_0C0E
LAB_0C0D:
	CLR.B	QuickLoopRedraw
LAB_0C0E:
	MOVEA.L	(A7)+,A0
	DC.W	$0c3a
	DC.W	$00ff
LAB_0C0F:
	DC.W	$a322
	BEQ.S	LAB_0C10
	BSR.W	NGDrawWave
LAB_0C10:
	BSR.W	DrawLoopRange
	BSR.S	DrawInstrFilterStatus
LAB_0C11:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0C12:
	BSR.W	BGClearWaveB
	BRA.S	LAB_0C11
LAB_0C13:
	BSR.W	BGClearWaveB
	BRA.S	LAB_0C11
DrawInstrFilterStatus:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualInstrName
	TST.B	(A0)
LAB_0C15:
	BEQ.W	LAB_0C19
	MOVEA.L	A0,A2
	TST.B	161(A2)
	BEQ.W	LAB_0C19
	TST.B	160(A2)
	BEQ.W	LAB_0C19
	MOVE.W	#$4c50,ResoFilter_TXT
	BTST	#1,160(A2)
	BEQ.S	LAB_0C16
	MOVE.W	#$4850,ResoFilter_TXT
LAB_0C16:
	MOVEQ	#0,D0
	MOVE.B	162(A2),D0
	LEA	LAB_0C1B+1(PC),A0
	BSR.W	AddString3Word2
	MOVEQ	#0,D0
	MOVE.B	163(A2),D0
	LEA	LAB_0C1C+2(PC),A0
	BSR.W	AddString3Word2
	MOVEQ	#0,D0
	MOVE.B	164(A2),D0
	LEA	LAB_0C1E(PC),A0
	BSR.W	AddString3Word2
	MOVEQ	#0,D0
	MOVE.B	165(A2),D0
	LEA	LAB_0C1F+1(PC),A0
LAB_0C17:
	BSR.W	AddString3Word2
	BSR.W	GetWaveArea
	DC.W	$4a89
	BEQ.S	LAB_0C19
	JSR	NGRDarkAPen
	JSR	NGRNrm0DrMd
	CLR.B	ResoFilter_TXTb+2
	CMPI.B	#$01,161(A2)
	BEQ.S	LAB_0C18
	MOVE.B	#$2d,ResoFilter_TXTb+2
LAB_0C18:
	LEA	ResoFilter_TXT(PC),A0
	JSR	NGRDrawTextXYGadFC
	ADDQ.W	#1,D0
	JSR	NGRDrawTextXYGadFC
LAB_0C19:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ResoFilter_TXT:
	DC.W	$4c50
	NOT.B	-(A0)
LAB_0C1B:
	MOVE.L	48(A0,D3.W),D4
LAB_0C1C:
	MOVEA.L	48(A2,D3.W),A0
ResoFilter_TXTb:
	MOVE.W	11560(A1),D0
LAB_0C1E:
	MOVE.W	32(A0,D3.W),D0
LAB_0C1F:
	MOVEQ	#48,D1
	DC.W	$3030
	MOVE.L	D0,-(A4)
NGLimitYDraw:
	MOVEM.L	D1,-(A7)
	BSR.S	NGLimitY
	BSR.W	GFX_Draw
	MOVEM.L	(A7)+,D1
	RTS
NGLimitYPixel:
	MOVEM.L	D1,-(A7)
	BSR.S	NGLimitY
	BSR.W	GFX_WritePixel
	MOVEM.L	(A7)+,D1
	RTS
NGLimitYMove:
	MOVEM.L	D1,-(A7)
	BSR.S	NGLimitY
	BSR.W	GFX_Move
	MOVEM.L	(A7)+,D1
	RTS
NGLimitY:
	MOVEM.L	D4-D7,-(A7)
	MOVEM.W	NGDrawLimits(PC),D4-D7
	CMP.W	D1,D5
	BHI.S	LAB_0C25
	CMP.W	D1,D7
	BCS.S	LAB_0C24
	BRA.S	LAB_0C26
LAB_0C24:
	MOVE.W	D7,D1
	BRA.S	LAB_0C26
LAB_0C25:
	MOVE.W	D5,D1
LAB_0C26:
	MOVEM.L	(A7)+,D4-D7
	RTS
NGSetDrawLimits:
	MOVEM.W	D0-D1,NGDrawLimits
	MOVEM.W	D2-D3,LAB_0C2A
	ADD.W	D0,LAB_0C2A
	ADD.W	D1,LAB_0C2A+2
	RTS
NGDrawLimits:
	ORI.B	#$00,D0
LAB_0C2A:
	ORI.B	#$00,D0
	DC.W	$0000
BGClearWave:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#1,D4
	JSR	NGRDrawBack
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
BGClearWaveB:
	MOVEM.L	D0-D7/A0-A6,-(A7)
LAB_0C2E:
	MOVE.L	#$57494e53,D0
	MOVE.L	#$53574156,D1
	JSR	NGRClearAreaID
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
NGCheckWaveSizeOk:
	MOVEM.L	D0-D6/A0-A6,-(A7)
	MOVE.L	#$57494e53,D0
	MOVE.L	#$53574156,D1
	JSR	NGGetInnerAreaData
	CMPI.W	#$0028,D2
	BCS.S	LAB_0C31
	CMPI.W	#$0006,D3
	BCS.S	LAB_0C31
	DC.W	$4a89
	BEQ.S	LAB_0C31
	MOVEQ	#0,D7
LAB_0C30:
	MOVEM.L	(A7)+,D0-D6/A0-A6
	RTS
LAB_0C31:
	MOVEQ	#-1,D7
	BRA.S	LAB_0C30
	DC.W	$0000
NGDrawWave:
	MOVEM.L	D0-D7,-(A7)
	BSR.S	NGCheckWaveSizeOk
	TST.B	D7
	BNE.S	LAB_0C33
	BSR.S	BGClearWave
	MOVE.L	D0,D7
	BSR.W	NGSet1PMask
	JSR	NGRDarkAPen
	JSR	NGRNrm0DrMd
	EXG	D0,D7
	BSR.S	LAB_0C34
	EXG	D0,D7
	BSR.W	NGSetPMask
LAB_0C33:
	MOVEM.L	(A7)+,D0-D7
	RTS
LAB_0C34:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	D4,A4
	ANDI.L	#$0000ffff,D2
	MOVE.L	D2,LAB_0C3F+2
	SUBQ.W	#1,D2
	BMI.W	LAB_0C3E
	BSR.W	NGSetDrawLimits
	LSR.W	#1,D3
	ADD.W	D3,D1
	MOVE.W	D1,D5
	MOVE.L	NGSampleBoost+2(PC),D6
	BEQ.W	LAB_0C3A
	MULU	#$0148,D6
	DIVU	#$00c8,D6
	LSR.W	#1,D3
	MOVE.W	(A0),D1
	MULS	D3,D1
	DIVS	D6,D1
	ADD.W	D5,D1
	MOVEM.W	D3/D5-D6,DrawWaveInfo+2
	BSR.W	NGLimitYMove
	MOVEQ	#0,D4
	TST.B	WaveStyle+1
	BEQ.S	LAB_0C36
	CMPI.B	#$03,WaveStyle+1
	BEQ.S	LAB_0C35
	BRA.S	LAB_0C38
LAB_0C35:
	MOVE.L	A4,D7
	DC.W	$4c04
	MOVEQ	#0,D0
	DC.W	$4c7a
	MOVEQ	#7,D0
	DC.W	$00d6
	LSR.L	#1,D7
	DC.W	$3230
	MOVEQ	#0,D5
	MULS	D3,D1
	DIVS	D6,D1
	ADD.W	D5,D1
	BSR.W	NGLimitYDraw
	ADDQ.W	#1,D0
	ADDQ.W	#1,D4
	DBF	D2,LAB_0C35
	BRA.S	LAB_0C3A
LAB_0C36:
	LSR.W	#1,D2
	BEQ.S	LAB_0C3A
LAB_0C37:
	MOVE.L	A4,D7
	DC.W	$4c04
	MOVEQ	#0,D0
	DC.W	$4c7a
	MOVEQ	#7,D0
	ORI.L	#$e28f3230,31232(A4)
	MULS	D3,D1
	DIVS	D6,D1
	ADD.W	D5,D1
	BSR.W	NGLimitYDraw
	ADDQ.W	#2,D0
	ADDQ.W	#2,D4
	DBF	D2,LAB_0C37
	BRA.S	LAB_0C3A
LAB_0C38:
	MOVEA.L	A1,A5
	MOVEA.L	A0,A3
	CMPI.B	#$02,WaveStyle+1
	BEQ.S	LAB_0C3B
	MOVE.L	A4,D7
	LSR.L	#2,D7
	MOVEA.L	D7,A4
LAB_0C39:
	BSR.S	LAB_0C3D
	BSR.S	LAB_0C3D
	BSR.S	LAB_0C3D
	BSR.S	LAB_0C3D
	ADDQ.W	#1,D0
	DBF	D2,LAB_0C39
LAB_0C3A:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0C3B:
	MOVE.L	A4,D7
	LSR.L	#4,D7
	MOVEA.L	D7,A4
LAB_0C3C:
	BSR.S	LAB_0C3D
	BSR.S	LAB_0C3D
	BSR.S	LAB_0C3D
	BSR.S	LAB_0C3D
	BSR.S	LAB_0C3D
	BSR.S	LAB_0C3D
	BSR.S	LAB_0C3D
	BSR.S	LAB_0C3D
	BSR.S	LAB_0C3D
	BSR.S	LAB_0C3D
	BSR.S	LAB_0C3D
	BSR.S	LAB_0C3D
	BSR.S	LAB_0C3D
	BSR.S	LAB_0C3D
	BSR.S	LAB_0C3D
	BSR.S	LAB_0C3D
	ADDQ.W	#1,D0
	DBF	D2,LAB_0C3C
	BRA.S	LAB_0C3A
	DC.W	$0000
LAB_0C3D:
	MOVE.L	A4,D7
	DC.W	$4c04
	MOVEQ	#0,D0
	DC.W	$4c7a
	MOVEQ	#7,D0
	DC.W	$002e
	LSR.L	#1,D7
	DC.W	$3233
	MOVEQ	#0,D5
	MULS	D3,D1
	DIVS	D6,D1
	ADD.W	D5,D1
	BSR.W	NGLimitY
	MOVEM.L	D0,-(A7)
	MOVEA.L	A5,A1
	MOVEA.L	_GraphicsBase,A6
	JSR	-324(A6)
	MOVEM.L	(A7)+,D0
	ADDQ.W	#1,D4
	RTS
LAB_0C3E:
	BRA.S	LAB_0C3A
LAB_0C3F:
	ORI.B	#$00,D0
DrawWaveInfo:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.W	$0000
GFX_SetWrMsk:
	MOVE.B	D0,24(A1)
	RTS
	DC.W	$0000
Set1PMask:
	TST.B	FASTGFX+2
	RTS
Set2OnlyPMask:
	RTS
	DC.W	$0000
Set2PMask:
	RTS
	DC.W	$0000
SetOldPMask:
	RTS
WrMsk_BAK:
	DC.W	$0000
NGSet1PMask:
	MOVE.B	24(A1),D0
	MOVE.B	#$01,24(A1)
	RTS
NGSetPMask:
	MOVE.B	D0,24(A1)
	RTS
	DC.W	$0000
DrawLoopRange:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	NGCheckWaveSizeOk
	TST.B	D7
	BNE.S	LAB_0C4B
	MOVE.L	#$57494e53,D0
	MOVE.L	#$53574156,D1
	JSR	NGGetInnerAreaData
	DC.W	$4a8d
	BEQ.S	LAB_0C4B
	DC.W	$4a89
	BEQ.S	LAB_0C4B
	BSR.W	GetActualInstrName
	TST.B	128(A0)
	BEQ.S	LAB_0C4B
	BTST	#4,140(A0)
	BEQ.S	LAB_0C4A
	BSR.S	DrawNewLoopRange
	BRA.S	LAB_0C4B
LAB_0C4A:
	CLR.B	QuickLoopRedraw
	BSR.W	DrawOldLoopRange
LAB_0C4B:
	CLR.B	QuickLoopRedraw
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ClearNewLoopRange:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$57494e53,D0
	MOVE.L	#$53574156,D1
	JSR	NGGetInnerAreaData
	MOVE.W	D2,D5
	LSR.W	#2,D2
	ADD.W	D2,D0
	ADD.W	D2,D0
	ADD.W	D2,D0
	SUB.W	D2,D5
	SUB.W	D2,D5
	SUB.W	D2,D5
	MOVE.W	D5,D2
	BSR.W	BGClearWave
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
DrawNewLoopRange:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	ClearNewLoopRange
	MOVEM.L	D0,-(A7)
	BSR.W	NGSet1PMask
	BSR.S	LAB_0C4F
	BSR.W	NGSetPMask
	MOVEM.L	(A7)+,D0
	DC.W	$0c3a
	DC.W	$00ff
	SUBX.B	-(A6),-(A7)
	BNE.S	LAB_0C4E
	BSR.W	InvertOldLoopRect
LAB_0C4E:
	BSR.W	DrawNewLoopRec
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
LAB_0C4F:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A0,A2
	BSR.W	GetNewLoop
	MOVE.L	D0,D6
	MOVE.L	D1,D7
	MOVE.L	#$57494e53,D0
	MOVE.L	#$53574156,D1
	JSR	NGGetInnerAreaData
	JSR	NGRDarkAPen
	JSR	NGRNrm0DrMd
	MOVEM.L	D1/D3,-(A7)
	ADD.W	D2,D0
	LSR.W	#3,D2
	SUB.W	D2,D0
	MOVE.W	D2,D7
	SUBQ.W	#2,D7
	BMI.S	LAB_0C52
	TST.W	D7
	BEQ.S	LAB_0C52
	BSR.W	GetActualInstrument
	MOVEA.L	A0,A2
	MOVEA.L	20(A2),A3
	MOVEA.L	24(A2),A4
	ADDQ.L	#2,A4
	ADDQ.W	#1,D0
	MOVEM.W	DrawWaveInfo+2(PC),D4-D6
	MOVEA.L	A1,A5
	MOVEA.L	_GraphicsBase,A6
	MOVEM.L	D0/D7,-(A7)
LAB_0C50:
	MOVE.W	(A3)+,D1
	MULS	D4,D1
	DIVS	D6,D1
	ADD.W	D5,D1
	BSR.S	LAB_0C53
	ADDQ.W	#1,D0
	DBF	D7,LAB_0C50
	MOVEM.L	(A7)+,D0/D7
	SUBQ.W	#1,D0
LAB_0C51:
	MOVE.W	-(A4),D1
	SUBQ.W	#1,D0
	MULS	D4,D1
	DIVS	D6,D1
	ADD.W	D5,D1
	BSR.S	LAB_0C53
	DBF	D7,LAB_0C51
	MOVEM.L	(A7)+,D1/D3
	ADD.W	D1,D3
	MOVE.W	D3,D5
	BSR.S	LAB_0C53
LAB_0C52:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0C53:
	MOVEM.L	D0-D1/D3,-(A7)
	MOVE.W	D0,D2
	MOVE.W	D5,D3
	CMP.W	D1,D3
	BCC.S	LAB_0C54
	EXG	D1,D3
LAB_0C54:
	MOVEA.L	A5,A1
	JSR	-306(A6)
	MOVEM.L	(A7)+,D0-D1/D3
	RTS
DrawNewLoopRec:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	D2,D4
	LSR.W	#2,D4
	SUB.W	D4,D2
	BMI.S	LAB_0C56
	BSR.W	GetActualInstrument
	MOVEA.L	A0,A2
	JSR	NGRInvDrMd
	JSR	NGRDarkAPen
	MOVE.L	8(A2),D4
	MOVE.L	20(A2),D7
	SUB.L	D4,D7
	MOVE.L	16(A2),D5
	SUB.L	D4,D5
	ANDI.L	#$0000ffff,D2
	DC.W	$4c02
	MOVEQ	#6,D2
	DC.W	$4c45
	MOVEQ	#6,D2
	ADD.W	D0,D7
	SWAP	D0
	MOVE.W	D7,D0
	SWAP	D0
	MOVE.L	24(A2),D7
	SUB.L	D4,D7
	DC.W	$4c02
	MOVEQ	#6,D2
	DC.W	$4c45
	MOVEQ	#6,D2
	ADD.W	D0,D7
	SWAP	D0
	MOVE.W	D7,D2
	ADD.W	D1,D3
	MOVEA.L	_GraphicsBase,A6
	MOVEM.L	D0-D3/A1/A6,OldLoopInv
	MOVEA.L	_GraphicsBase,A6
	JSR	-306(A6)
LAB_0C56:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
InvertOldLoopRect:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEM.L	OldLoopInv(PC),D0-D3/A1/A6
	DC.W	$4a89
	BEQ.S	LAB_0C58
	JSR	NGRInvDrMd
	JSR	NGRDarkAPen
	MOVEM.L	OldLoopInv(PC),D0-D3/A1/A6
	MOVEA.L	_GraphicsBase,A6
	JSR	-306(A6)
LAB_0C58:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
OldLoopInv:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
DrawOldLoopRange:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A0,A2
	MOVEQ	#0,D6
	MOVE.B	129(A0),D6
	MOVEQ	#0,D7
	MOVE.B	130(A0),D7
	MOVE.L	#$57494e53,D0
	MOVE.L	#$53574156,D1
	JSR	NGGetInnerAreaData
	MULU	D2,D6
	DIVU	#$0064,D6
	MULU	D2,D7
	DIVU	#$0064,D7
	MOVE.W	D7,D2
	ADD.W	D6,D0
	ADD.W	D0,D2
	JSR	NGRDarkAPen
	JSR	NGRInvDrMd
	ADD.W	D1,D3
	MOVEA.L	_GraphicsBase,A6
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	_GraphicsBase,A6
	JSR	-306(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	SUB.W	D1,D3
	LSR.W	#1,D3
	ADD.W	FONT_BASE+2,D1
	MOVE.W	D2,D4
	ADD.W	D0,D4
	LSR.W	#1,D4
	ADDQ.W	#2,D0
	MOVEQ	#0,D2
	MOVE.B	129(A2),D2
	JSR	NGRNrm0DrMd
	BSR.W	DrawDecByteXY
	ADDQ.W	#1,D0
	BSR.W	DrawDecByteXY
	MOVE.B	130(A2),D2
	ADD.W	D3,D1
	MOVE.W	D4,D0
	BSR.W	DrawDecByteXY
	ADDQ.W	#1,D0
	BSR.W	DrawDecByteXY
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
InitSampleManagement:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$000000ff,D7
	MOVEQ	#56,D6
LAB_0C5C:
	BSR.S	InitSampleManEntry
	LEA	0(A0,D6.L),A0
	DBF	D7,LAB_0C5C
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
InitSampleManEntry:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.W	(A0)
	MOVE.W	Sample_STANDARD(PC),2(A0)
	MOVE.W	LAB_0C5E+2(PC),4(A0)
	MOVE.W	LAB_0C60(PC),22(A0)
	MOVE.W	LAB_0C60+2(PC),24(A0)
	CLR.L	6(A0)
	CLR.L	10(A0)
	MOVE.L	#$00010000,14(A0)
	CLR.L	26(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
Sample_STANDARD:
LAB_0C5E:
	ORI.B	#$01,D2
LAB_0C60:
	ORI.B	#$64,(A0)+
GetActualSampleManagerEntry:
	MOVE.L	D0,-(A7)
	BSR.W	GetActualInstrNum
	MOVEA.L	SAMPLEMANLIST_PTR,A0
	MULU	#$0038,D0
	LEA	0(A0,D0.L),A0
	MOVE.L	(A7)+,D0
	RTS
GetSampleManagerEntry:
	MOVE.L	D0,-(A7)
	MOVEA.L	SAMPLEMANLIST_PTR,A0
	MULU	#$0038,D0
	LEA	0(A0,D0.L),A0
	MOVE.L	(A7)+,D0
	RTS
MoveFirstInstrument:
	MOVEM.L	A0,-(A7)
	LEA	Test_INSTRMAN(PC),A0
	CLR.W	10(A0)
	MOVEA.L	(A7)+,A0
	RTS
SaveInstrumentNum:
	MOVEM.L	A0,-(A7)
	LEA	Test_INSTRMAN(PC),A0
	MOVE.W	10(A0),ActualInstrumentNum
	MOVEA.L	(A7)+,A0
	RTS
LoadInstrumentNum:
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$73f6
	BNE.S	LAB_0C67
	RTS
LAB_0C67:
	MOVEM.L	A0,-(A7)
	LEA	Test_INSTRMAN(PC),A0
	MOVE.W	ActualInstrumentNum(PC),10(A0)
	MOVEA.L	(A7)+,A0
	RTS
InitInstrList:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	FastIHandle_INSTRLIST+2(PC),A1
	MOVE.L	#$000000ff,D7
LAB_0C69:
	MOVE.L	A0,(A1)+
	MOVE.W	#$fffc,(A0)
	LEA	64(A0),A0
	DBF	D7,LAB_0C69
	MOVE.L	#$ffffffff,(A1)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
GetActualInstrument:
	MOVEM.L	D0,-(A7)
	LEA	Test_INSTRMAN(PC),A0
	MOVE.W	10(A0),D0
	MULU	#$0040,D0
	MOVEA.L	FirstEntry_INSTR,A0
	LEA	0(A0,D0.L),A0
	MOVEM.L	(A7)+,D0
	RTS
GetInstrument:
	MOVEM.L	D0,-(A7)
	MULU	#$0040,D0
	MOVEA.L	FirstEntry_INSTR,A0
	LEA	0(A0,D0.L),A0
	MOVEM.L	(A7)+,D0
	RTS
GetActualInstrName:
	MOVEM.L	D0,-(A7)
	MOVEA.L	SampleNames_PTR+2(PC),A0
	BSR.S	GetActualInstrNum
	MULU	#$0100,D0
	LEA	0(A0,D0.L),A0
	MOVEM.L	(A7)+,D0
	RTS
GetActualInstrNum:
	MOVEM.L	A0,-(A7)
	LEA	Test_INSTRMAN(PC),A0
	MOVE.W	10(A0),D0
	MOVEA.L	(A7)+,A0
	RTS
GotoInstrNum:
	MOVEM.L	D0-D1,-(A7)
	EXG	D0,D1
	BSR.S	GetActualInstrNum
	CMP.W	D0,D1
	BEQ.S	LAB_0C6F
	EXG	D0,D1
	BSR.S	SetActualInstrNum
	JSR	DrawInstrument
LAB_0C6F:
	MOVEM.L	(A7)+,D0-D1
	RTS
SetActualInstrNum:
	MOVEM.L	A0,-(A7)
	LEA	Test_INSTRMAN(PC),A0
	MOVE.W	D0,10(A0)
	MOVEA.L	(A7)+,A0
	RTS
MoveNextInstrument:
	MOVEM.L	D0/A0,-(A7)
	LEA	Test_INSTRMAN(PC),A0
	MOVE.W	10(A0),D0
	CMP.W	12(A0),D0
	BEQ.S	LAB_0C72
	ADDQ.L	#4,(A0)
	ADDQ.W	#1,10(A0)
LAB_0C72:
	MOVEM.L	(A7)+,D0/A0
	RTS
MovePrevInstrument:
	MOVEM.L	A0,-(A7)
	LEA	Test_INSTRMAN(PC),A0
	TST.W	10(A0)
	BEQ.S	LAB_0C74
	SUBQ.L	#4,(A0)
	SUBQ.W	#1,10(A0)
LAB_0C74:
	MOVEA.L	(A7)+,A0
	RTS
ToogleForceAKnack:
	NOT.B	FORCEKNACK
	RTS
SetKnackDeepth:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#0,D1
	MOVE.L	#$000007d0,D2
	LEA	KNACKSTEPS+2(PC),A0
	LEA	KnackDeep_TXT,A1
	BSR.W	ReqMinMaxLong
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
AKTYPE:
	DC.W	$0000
AntiKnack16:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$43f0
	DC.W	$0a00
	MOVE.L	KNACKSTEPS+2(PC),D6
	CMPI.L	#$00000008,D6
	BCS.S	AntiKnack16_X
	CMP.L	D6,D0
	BCS.S	AntiKnack16_X
	SUBQ.W	#1,D6
	MOVE.W	D6,D7
	SUBQ.W	#1,D7
	BMI.S	AntiKnack16_X
	MOVEQ	#1,D5
	MOVE.L	#$00007fff,D4
	DIVU	D6,D4
	MOVEQ	#15,D2
	MOVE.L	D7,KNACKLEN
	DC.W	$4a3a
	MOVEQ	#-100,D1
	BNE.S	AntiKnack16_do1
	TST.W	(A0)
	BEQ.S	AntiKnack16_M
AntiKnack16_do1:
	CLR.W	(A0)+
AntiKnack16_L1:
	MOVE.W	(A0),D1
	MOVE.W	D5,D3
	MULU	D4,D3
	MULS	D3,D1
	ASR.L	D2,D1
	MOVE.W	D1,(A0)+
	ADDQ.W	#1,D5
	DBF	D7,AntiKnack16_L1
AntiKnack16_M:
	MOVEA.L	A1,A0
	DC.W	$4a3a
	DC.W	$ffaa
	BNE.S	ForceAKOut
	DC.W	$4a3a
	MOVEQ	#118,D1
	BNE.S	ForceAKOut
	TST.W	-2(A0)
	BEQ.S	AntiKnack16_X
ForceAKOut:
	MOVE.L	KNACKLEN(PC),D7
	MOVEQ	#1,D5
	CLR.W	-(A0)
AntiKnack16_L2:
	MOVE.W	-(A0),D1
	MOVE.W	D5,D3
	MULU	D4,D3
	MULS	D3,D1
	ASR.L	D2,D1
	MOVE.W	D1,(A0)
	ADDQ.W	#1,D5
	DBF	D7,AntiKnack16_L2
AntiKnack16_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
MaximizeSample16to100:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#100,D5
	BRA.S	MaximizeSample16_in
MaximizeSample16:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEM.L	A0,-(A7)
	BSR.W	GetActualInstrName
	MOVEQ	#0,D5
	MOVE.B	134(A0),D5
	MOVEA.L	(A7)+,A0
MaximizeSample16_in:
	BSR.W	GetSampleRange16
	ANDI.L	#$0000ffff,D1
	ANDI.L	#$0000ffff,D2
	TST.W	D1
	BPL.S	MaximizeSample16_M1
	NEG.W	D1
MaximizeSample16_M1:
	TST.W	D2
	BPL.S	MaximizeSample16_M2
	NEG.W	D2
MaximizeSample16_M2:
	CMP.W	D2,D1
	BHI.S	MaximizeSample16_M3
	EXG	D2,D1
MaximizeSample16_M3:
	BSR.S	BoostSample16
MaximizeSample16_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PrintHexBlock:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	D0,D1
LAB_0C87:
	MOVE.L	(A0)+,D0
	BSR.W	PrintHexLong
	DBF	D1,LAB_0C87
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PrintAssDec:
	BRA.W	WriteAssDecLong
BoostSample16:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.W	LAB_0C97
	MOVE.L	D0,D7
	MOVEA.L	A0,A5
	MOVEQ	#100,D3
	TST.W	D5
	BNE.S	LAB_0C8A
	MOVEQ	#100,D5
LAB_0C8A:
	MOVE.W	D5,D3
	CMPI.W	#$0064,D3
	BLS.S	LAB_0C8B
	MOVE.W	D3,LAB_0C97
	SUBI.W	#$0064,LAB_0C97
	MOVEQ	#100,D3
	MOVEQ	#100,D5
LAB_0C8B:
	MOVE.L	NGSampleBoost+2(PC),D4
	TST.W	D1
	BNE.S	LAB_0C8C
	EXG	D1,D2
	TST.W	D1
	BEQ.S	LAB_0C90
LAB_0C8C:
	MOVEA.L	A0,A2
	CMPI.L	#$00007fff,D1
	BCS.S	LAB_0C8D
	MOVE.L	#$00007fff,D1
LAB_0C8D:
	MOVE.L	#$00007ff0,D2
	MULU	D5,D2
	DIVU	#$0064,D2
	MULU	D4,D2
	DIVU	#$2710,D2
LAB_0C8E:
	SUBQ.L	#1,D0
	BMI.S	LAB_0C8F
	MOVE.W	(A0),D3
	MULS	D2,D3
	DIVS	D1,D3
	MOVE.W	D3,(A0)+
	BRA.S	LAB_0C8E
LAB_0C8F:
	MOVE.L	D7,D0
	MOVE.W	D5,D1
	MOVEA.L	A5,A0
	DC.W	$4a7a
	ORI.W	#$6702,-(A6)
	BSR.S	LAB_0C91
LAB_0C90:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0C91:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	LAB_0C97(PC),D6
	MOVEQ	#100,D5
	SUB.W	D6,D5
	MOVE.L	NGSampleBoost+2(PC),D7
	MULU	#$7fff,D7
	DIVU	#$2710,D7
	MOVE.W	D7,D2
	LSR.W	#1,D7
	MOVE.W	D7,D1
	MULU	D5,D1
	DIVU	#$0064,D1
	MOVE.W	D2,D4
	SUB.W	D1,D4
LAB_0C92:
	SUBQ.L	#1,D0
	BMI.S	LAB_0C93
	MOVE.W	(A0),D3
	BSR.S	LAB_0C94
	MOVE.W	D3,(A0)+
	BRA.S	LAB_0C92
LAB_0C93:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0C94:
	TST.W	D3
	BPL.S	LAB_0C95
	NEG.W	D3
	BSR.S	LAB_0C95
	NEG.W	D3
	RTS
LAB_0C95:
	CMP.W	D1,D3
	BHI.S	LAB_0C96
	MULU	D4,D3
	DIVU	D1,D3
	RTS
LAB_0C96:
	SUB.W	D1,D3
	MULU	D1,D3
	DIVU	D4,D3
	ADD.W	D4,D3
	RTS
LAB_0C97:
	DC.W	$0000
GetSampleRange16:
	MOVEM.L	D0/D3-D7/A0-A6,-(A7)
	SUBQ.L	#1,D0
	BMI.S	GetSampleRange16_X
	MOVE.W	(A0)+,D1
	SUBQ.L	#1,D0
	BMI.S	GetSampleRange16_X
	MOVE.W	(A0)+,D2
	CMP.W	D1,D2
	BGE.S	GetSampleRange16_L
	EXG	D1,D2
GetSampleRange16_L:
	SUBQ.L	#1,D0
	BMI.S	GetSampleRange16_X
	MOVE.W	(A0)+,D3
	CMP.W	D1,D3
	BGE.S	GetSampleRange16_LoStays
	MOVE.W	D3,D1
	BRA.S	GetSampleRange16_L
GetSampleRange16_LoStays:
	CMP.W	D2,D3
	BLE.S	GetSampleRange16_L
	MOVE.W	D3,D2
	BRA.S	GetSampleRange16_L
GetSampleRange16_X:
	MOVEM.L	(A7)+,D0/D3-D7/A0-A6
	RTS
Convert16to8Bit:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A0,A1
	MOVEQ	#2,D1
LAB_0C9D:
	MOVE.B	(A0),(A1)+
	LEA	0(A0,D1.W),A0
	SUBQ.L	#1,D0
	BNE.S	LAB_0C9D
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
Convert8to16Bit:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A0,A1
	LEA	0(A0,D0.L),A0
	DC.W	$43f1
	DC.W	$0a00
LAB_0C9F:
	MOVE.B	-(A0),D1
	EXT.W	D1
	ASL.W	#7,D1
	MOVE.W	D1,-(A1)
	SUBQ.L	#1,D0
	BNE.S	LAB_0C9F
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
AntiknackVirt:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	26(A4),D0
	MOVEA.L	6(A4),A0
AntiknackVirt_L:
	TST.W	(A0)+
	BNE.S	AntiknackVirt_do
	SUBQ.L	#1,D0
	BNE.S	AntiknackVirt_L
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
AntiknackVirt_do:
	MOVE.W	(A0),D0
	EXT.L	D0
	DIVS	#$0002,D0
	MOVE.W	D0,-2(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
testplace:
	ORI.B	#$00,D0
NewPrepareSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetActualSampleManagerEntry
	MOVEA.L	A0,A4
	BSR.S	NewPrepareSampleIn
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
NewPrepareSampleIn:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	26(A4),D0
	MOVEA.L	6(A4),A0
	BSR.W	ProcessRvsLineSample
	MOVE.L	26(A4),D0
	MOVEA.L	6(A4),A0
	BSR.W	ProcessIFiltSample
	MOVE.L	26(A4),D0
	MOVEA.L	6(A4),A0
	BSR.W	ProcessDownsample
	MOVE.L	26(A4),D0
	MOVEA.L	6(A4),A0
	BSR.W	ProcessVolumeFade
	MOVE.L	26(A4),D0
	MOVEA.L	6(A4),A0
	BSR.W	ProcessResoLPFilter
	MOVE.L	26(A4),D0
	MOVEA.L	6(A4),A0
	MOVE.L	NoiseFilt(PC),D7
	MOVEM.L	A0,-(A7)
	BSR.W	GetActualInstrName
	MOVEQ	#0,D6
	MOVE.B	141(A0),D6
	MOVEA.L	(A7)+,A0
	TST.B	D6
	BPL.S	LAB_0CA6
	MOVEQ	#0,D6
LAB_0CA6:
	ADD.W	D6,D7
	BSR.S	AntialiasSample
	MOVEQ	#0,D1
	MOVE.W	VEX_StartSetup+2(PC),D1
	BSR.W	AntiKnack16
	BSR.W	MaximizeSample16
	BSR.S	NGPrepareSample
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
doAnitaliasB:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	SUBQ.L	#2,D0
	BMI.S	LAB_0CA9
	MOVE.L	D0,D7
	MOVE.W	(A0),D0
	EXT.L	D0
LAB_0CA8:
	MOVE.W	(A0),D1
	EXT.L	D1
	ADD.L	D1,D1
	ADD.L	D0,D1
	DC.W	$4c7c
	MOVE.B	D1,D4
	ORI.B	#$03,D0
	MOVE.W	D1,(A0)+
	MOVE.L	D1,D0
	SUBQ.L	#1,D7
	BPL.S	LAB_0CA8
LAB_0CA9:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
AntialiasSample:
	MOVEM.L	D7,-(A7)
	TST.B	D7
	BEQ.S	LAB_0CAB
	SUBQ.L	#1,D7
	BPL.S	LAB_0CAC
LAB_0CAB:
	MOVEM.L	(A7)+,D7
	RTS
LAB_0CAC:
	BSR.S	doAnitaliasB
	DBF	D7,LAB_0CAC
	BRA.S	LAB_0CAB
	DC.W	$0000
NGPrepareSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$41f0
	DC.W	$0a00
	MOVEA.L	A0,A1
	DC.W	$43f1
	DC.W	$0a00
	SUBQ.L	#2,D0
	BMI.S	LAB_0CAF
	MOVE.W	-(A0),D2
	MOVE.W	D2,-(A1)
	EXT.L	D2
LAB_0CAE:
	MOVE.W	-(A0),D4
	EXT.L	D4
	MOVE.L	D4,D3
	ADD.L	D2,D3
	ASR.L	#1,D3
	MOVE.W	D3,-(A1)
	MOVE.W	D4,-(A1)
	MOVE.L	D4,D2
	SUBQ.L	#1,D0
	BPL.S	LAB_0CAE
	MOVE.W	D4,-(A1)
LAB_0CAF:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ProcessDownsample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A0,A1
	BSR.W	GetActualInstrument
	MOVEA.L	A0,A2
	BSR.W	GetActualInstrName
	MOVEQ	#0,D7
	MOVE.B	143(A0),D7
	MOVE.L	SAMPLEPreOverS(PC),D6
	ADD.L	D6,D7
	SUBQ.L	#1,D7
	MOVEA.L	Actual_FREQDEF(PC),A3
	MOVE.W	6(A3),D5
	MULU	D6,D5
	MOVE.W	D5,2(A3)
	TST.B	D7
	BMI.S	ProcessDownsample_X
	SUBQ.W	#1,D7
	BMI.S	ProcessDownsample_X
ProcessDownsample_L2:
	BSR.S	ProcessDownsampleDo
	DBF	D7,ProcessDownsample_L2
ProcessDownsample_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ProcessDownsampleDo:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	D0,D6
	TST.B	D7
LAB_0CB4:
	BMI.W	ProcessDownsampleDo_NEG
	LEA	6(A4),A1
	LEA	ProcessSampleTemp_PTR(PC),A0
LAB_0CB5:
	CLR.L	(A0)
	MOVE.L	4(A1),D1
	LSL.L	#1,D1
	MOVE.L	D1,4(A0)
	MOVE.L	8(A1),8(A0)
	BSR.W	GetMem
	TST.L	D0
	BEQ.S	ERRNoDSMem
	MOVE.L	26(A4),D0
	MOVE.L	D0,D7
	LSL.L	#1,D0
	MOVE.L	D0,26(A4)
	MOVEA.L	6(A4),A0
	MOVEA.L	ProcessSampleTemp_PTR(PC),A1
	SUBQ.L	#1,D7
	BMI.S	ERRNoDSMem
	MOVE.W	(A0)+,D1
	EXT.L	D1
LAB_0CB6:
	MOVE.W	D1,(A1)+
LAB_0CB7:
	MOVE.W	(A0)+,D2
	EXT.L	D2
	ADD.L	D2,D1
	ASR.L	#1,D1
	MOVE.W	D1,(A1)+
	MOVE.L	D2,D1
	SUBQ.L	#1,D7
	BNE.S	LAB_0CB6
	LEA	6(A4),A0
	MOVE.L	#$00010004,MEM_DEBUG_INFO
	CLR.L	LAB_109F
	BSR.W	FreeMem
	LEA	ProcessSampleTemp_PTR(PC),A1
	MOVE.L	(A1)+,6(A4)
	MOVE.L	(A1)+,10(A4)
	MOVE.L	6(A4),D0
	ADD.L	10(A4),D0
	SUBQ.L	#2,D0
	MOVE.L	D0,30(A4)
	MOVE.L	(A1)+,14(A4)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ERRNoDSMem:
	BSR.W	PrintActInstrInfo
	MOVE.L	#ErrNoDSMem_TXT,AssText_TXT
	JSR	PrintAssTextF
ProcessDownsampleDo_NEG:
LAB_0CB9:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ProcessSampleTemp_PTR:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
LAB_0CBC:
	ORI.B	#$00,D1
	DC.W	$0000
ProcessRvsLineSample:
	MOVEM.L	D0-D2/A0-A1,-(A7)
	BSR.W	ProcessMirrorSample
	MOVEA.L	A0,A1
	BSR.W	GetActualInstrName
	BTST	#0,140(A0)
	BEQ.S	LAB_0CBF
	MOVEA.L	A1,A0
	ADDA.L	D0,A1
	ADDA.L	D0,A1
	MOVEQ	#2,D2
	LSR.L	#1,D0
LAB_0CBE:
	SUBQ.L	#1,D0
	BMI.S	LAB_0CBF
	MOVE.W	(A0),D1
	MOVE.W	-(A1),(A0)
	MOVE.W	D1,(A1)
	LEA	0(A0,D2.W),A0
	BRA.S	LAB_0CBE
LAB_0CBF:
	MOVEM.L	(A7)+,D0-D2/A0-A1
LAB_0CC0:
	RTS
	DC.W	$0000
ProcessResoLPFilter:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A0,A1
	BSR.W	GetActualInstrName
	LEA	162(A0),A6
	MOVE.B	160(A0),D7
	MOVE.B	D7,ResoFilter_FLAGS
	TST.B	D7
	BEQ.S	LAB_0CC2
	TST.L	D0
	BEQ.S	LAB_0CC2
	BTST	#0,D7
	BEQ.S	LAB_0CC2
	LSR.B	#1,D7
	BSR.S	LAB_0CC3
LAB_0CC2:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0CC3:
	MOVEQ	#0,D1
	MOVE.B	(A6),D1
	MOVE.L	D1,ResoFilter_DATA
	MOVE.L	D1,LAB_0CD4
	MOVEQ	#0,D1
	MOVE.B	1(A6),D1
	MOVE.L	D1,LAB_0CD3
	MOVE.L	D1,LAB_0CD5
	CMPI.B	#$01,161(A0)
	BEQ.S	LAB_0CC6
	MOVEQ	#0,D1
	MOVE.B	2(A6),D1
LAB_0CC4:
	MOVE.L	D1,LAB_0CD4
	MOVEQ	#0,D1
	MOVE.B	3(A6),D1
LAB_0CC5:
	MOVE.L	D1,LAB_0CD5
LAB_0CC6:
	MOVE.L	D0,ResoFilter_SAMPLES
	BSR.S	LAB_0CC7
	RTS
LAB_0CC7:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#0,D2
	MOVEQ	#0,D3
	MOVEQ	#0,D4
	MOVEQ	#0,D5
	MOVEQ	#0,D6
LAB_0CC8:
	MOVE.W	(A1),D1
	ASR.W	#1,D1
	BSR.S	ResoFilterCalcPara
	BSR.S	ResoFilter
	MOVE.W	D1,(A1)+
	SUBQ.L	#1,D0
	BNE.S	LAB_0CC8
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ResoFilterCalcPara:
	MOVEM.L	D0-D7/A0-A6,-(A7)
LAB_0CCA:
	MOVE.L	LAB_0CD4(PC),D2
	SUB.L	ResoFilter_DATA(PC),D2
	MOVE.L	ResoFilter_SAMPLES(PC),D5
	MOVE.L	D5,D3
	SUB.L	D0,D3
	DC.W	$4c02
	MOVE.W	D4,D6
	DC.W	$4c45
	MOVE.W	D4,D6
	ADD.L	ResoFilter_DATA(PC),D3
	MOVE.L	D3,ResoFilter_FREQ
	MOVE.L	LAB_0CD5(PC),D2
	SUB.L	LAB_0CD3(PC),D2
	MOVE.L	ResoFilter_SAMPLES(PC),D5
	MOVE.L	D5,D3
	SUB.L	D0,D3
	DC.W	$4c02
	MOVE.W	D4,D6
	DC.W	$4c45
	MOVE.W	D4,D6
	ADD.L	LAB_0CD3(PC),D3
	MOVE.L	D3,ResoFilter_RESO
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ResoFilter:
	EXT.L	D1
	MOVE.L	D1,D4
	SUB.L	D2,D4
	MOVE.L	ResoFilter_FREQ(PC),D6
	DC.W	$4c04
	BVC.W	LAB_0B61
	ADD.L	D6,D3
	MOVE.L	ResoFilter_FREQ(PC),D6
	DC.W	$4c03
	BVC.W	LAB_0BCC
	ADD.L	D6,D2
	MOVE.L	ResoFilter_RESO(PC),D6
	DC.W	$4c02
	BVC.W	LAB_0BCD+2
	ADD.L	D6,D2
	ASR.L	#2,D2
	MOVE.L	D2,D1
	BTST	#1,ResoFilter_FLAGS(PC)
	BEQ.S	LAB_0CCC
	MOVE.L	D4,D1
LAB_0CCC:
	CMPI.L	#$00007fff,D1
	BGT.S	LAB_0CCD
	CMPI.L	#$ffff8001,D1
	BLT.S	LAB_0CCE
	RTS
LAB_0CCD:
	MOVE.W	#$7fff,D1
	RTS
LAB_0CCE:
	MOVE.W	#$8001,D1
	RTS
ResoFilter_SAMPLES:
	ORI.B	#$00,D0
ResoFilter_FREQ:
	ORI.B	#$00,D0
ResoFilter_RESO:
	ORI.B	#$00,D0
ResoFilter_DATA:
	ORI.B	#$00,D0
LAB_0CD3:
	ORI.B	#$00,D0
LAB_0CD4:
	ORI.B	#$00,D0
LAB_0CD5:
	ORI.B	#$00,D0
ResoFilter_FLAGS:
	DC.W	$0000
ProcessVolumeFade:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A0,A1
	BSR.W	GetActualInstrName
	CMPI.B	#$02,170(A0)
	BNE.S	LAB_0CD8
	BSR.S	LAB_0CD9
LAB_0CD8:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0CD9:
	MOVEQ	#0,D1
	MOVE.B	171(A0),D1
	MULU	#$0147,D1
	MOVE.L	D1,ResoFilter_DATA
	MOVEQ	#0,D1
	MOVE.B	172(A0),D1
	MULU	#$0147,D1
	MOVE.L	D1,LAB_0CD4
	MOVE.L	D0,ResoFilter_SAMPLES
	BSR.S	LAB_0CDA
	RTS
LAB_0CDA:
	MOVEM.L	D0-D7/A0-A6,-(A7)
LAB_0CDB:
	MOVE.W	(A1),D1
	BSR.S	LAB_0CDC
	BSR.S	LAB_0CDE
	MOVE.W	D1,(A1)+
	SUBQ.L	#1,D0
	BNE.S	LAB_0CDB
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0CDC:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	LAB_0CD4(PC),D2
	SUB.L	ResoFilter_DATA(PC),D2
	MOVE.L	ResoFilter_SAMPLES(PC),D5
	MOVE.L	D5,D3
	SUB.L	D0,D3
	DC.W	$4c02
	MOVE.W	D4,D6
	DC.W	$4c45
	MOVE.W	D4,D6
	ADD.L	ResoFilter_DATA(PC),D3
	MOVE.L	D3,LAB_0CDD
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0CDD:
	ORI.B	#$00,D0
LAB_0CDE:
	MOVE.L	LAB_0CDD(PC),D2
	MULS	D2,D1
	DIVS	#$7fbc,D1
	RTS
	DC.W	$0000
ProcessMirrorSample:
	MOVEM.L	A0-A1,-(A7)
	MOVEA.L	A0,A1
	BSR.W	GetActualInstrName
	BTST	#2,140(A0)
	BEQ.S	LAB_0CE0
	MOVEA.L	A1,A0
	BSR.S	InvertSample
LAB_0CE0:
	MOVEM.L	(A7)+,A0-A1
	RTS
InvertSample:
	MOVEM.L	D0-D1/A0,-(A7)
LAB_0CE2:
	SUBQ.L	#1,D0
	BMI.S	LAB_0CE3
	MOVE.W	(A0),D1
	NEG.W	D1
	MOVE.W	D1,(A0)+
	BRA.S	LAB_0CE2
LAB_0CE3:
	MOVEM.L	(A7)+,D0-D1/A0
	RTS
MakeD0WPos:
	TST.W	D0
	BMI.S	DoMakeD0WPos
	RTS
DoMakeD0WPos:
	NEG.W	D0
	RTS
ProcessIFiltSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	IFiltSample(PC),A6
	MOVEA.L	A0,A1
	BSR.W	GetActualInstrName
	MOVEQ	#0,D7
	MOVE.B	141(A0),D7
	TST.L	D7
	BEQ.S	LAB_0CE8
	TST.B	D7
	BPL.S	LAB_0CE8
	EXT.W	D7
	NEG.W	D7
	LEA	NegIFiltSample(PC),A6
	MOVEA.L	A1,A0
	SUBQ.W	#1,D7
LAB_0CE7:
	JSR	(A6)
	DBF	D7,LAB_0CE7
LAB_0CE8:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
IFiltSample:
	MOVEM.L	D0-D2/D4/A0,-(A7)
	SUBQ.L	#4,D0
	BMI.S	LAB_0CEB
	TST.L	D0
	BEQ.S	LAB_0CEB
	MOVEQ	#1,D4
	MOVE.W	(A0),D2
	EXT.L	D2
LAB_0CEA:
	MOVE.L	D2,D1
	MOVE.W	(A0),D2
	EXT.L	D2
	ADD.L	D1,D2
	ASR.L	D4,D2
	MOVE.W	D2,(A0)+
	SUBQ.L	#1,D0
	BNE.S	LAB_0CEA
LAB_0CEB:
	MOVEM.L	(A7)+,D0-D2/D4/A0
	RTS
ShrinkSample:
	MOVEM.L	D0-D3/A1,-(A7)
	TST.L	D0
	BEQ.S	LAB_0CEE
	MOVEQ	#1,D3
LAB_0CED:
	MOVE.W	(A1),D2
	ASR.W	D3,D1
	MOVE.W	D2,(A1)+
	SUBQ.L	#1,D0
	BNE.S	LAB_0CED
LAB_0CEE:
	MOVEM.L	(A7)+,D0-D3/A1
	RTS
	DC.W	$0000
NegIFiltSample:
	BSR.S	ShrinkSample
	MOVEM.L	D0-D7/A0-A6,-(A7)
	TST.L	D0
	BEQ.S	LAB_0CF1
	MOVEQ	#1,D3
	MOVEQ	#1,D4
	MOVE.W	(A1),D2
LAB_0CF0:
	MOVE.W	D2,D1
	MOVE.W	(A1),D2
	EXT.L	D1
	EXT.L	D2
	ASR.L	D3,D1
	SUB.L	D1,D2
	ASR.L	D4,D2
	MOVE.W	D2,(A1)+
	SUBQ.L	#1,D0
	BNE.S	LAB_0CF0
LAB_0CF1:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
FreeAllSamples:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$000000ff,D7
LAB_0CF3:
	BSR.S	FreeSample
	LEA	56(A0),A0
	DBF	D7,LAB_0CF3
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
FreeSample:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	TST.W	(A0)
	BEQ.S	LAB_0CF5
	CLR.W	(A0)
	ADDQ.L	#6,A0
	MOVE.L	#$00010004,MEM_DEBUG_INFO
	MOVE.L	#$00000003,LAB_109F
	BSR.W	FreeMem
LAB_0CF5:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
FileLength:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVE.L	A0,D1
	MOVEQ	#-2,D2
	MOVEA.L	_DosBase,A6
	JSR	-84(A6)
	MOVE.L	D0,D1
	MOVE.L	D0,D6
	TST.L	D0
	BEQ.S	FileLengthERR
	MOVE.L	FLInfo_PTR(PC),D2
	MOVEA.L	_DosBase,A6
	JSR	-102(A6)
	MOVEA.L	FLInfo_PTR(PC),A0
	MOVE.L	124(A0),D7
	MOVE.L	D6,D1
	MOVEA.L	_DosBase,A6
	JSR	-90(A6)
	MOVE.L	D7,D0
FileLengthX:
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
FileLengthERR:
	MOVEQ	#0,D0
	MOVE.L	#ErrNoFileLen+3,AssText_TXT
	JSR	PrintAssTextF
	BRA.S	FileLengthX
FLInfo_PTR:
	ORI.B	#$00,D0
	DC.W	$0000
	ANDI.B	#$01,D0
	DC.W	$0000
FreeFile:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	TST.L	D0
	BEQ.S	FreeFileX
	SUBI.L	#$0000000c,D0
	MOVEA.L	D0,A0
	LEA	LoadFile_PTR(PC),A0
	MOVE.L	#$00010015,MEM_DEBUG_INFO
	CLR.L	LAB_109F
	BSR.W	FreeMem
FreeFileX:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
LoadFile:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVEA.L	A0,A2
	BSR.W	FileLength
	MOVE.L	D0,D4
	BEQ.S	LoadFileERR
	ADDI.L	#$0000000c,D4
	MOVE.L	D4,LAB_0CFF
	SUBI.L	#$0000000c,D4
	LEA	LoadFile_PTR(PC),A0
	BSR.W	GetMem
	TST.L	D0
	BEQ.S	LoadFileERR
	LEA	LoadFile_PTR(PC),A0
	MOVEA.L	(A0),A3
	MOVE.L	(A0)+,(A3)+
	MOVE.L	(A0)+,(A3)+
	MOVE.L	(A0)+,(A3)+
	MOVE.L	A2,D1
	MOVE.L	#$000003ed,D2
	MOVEA.L	_DosBase,A6
	JSR	-30(A6)
	MOVEA.L	D0,A4
	BEQ.S	LoadFileERR
	MOVE.L	A4,D1
	MOVE.L	A3,D2
	MOVE.L	D4,D3
	MOVEA.L	_DosBase,A6
	JSR	-42(A6)
	MOVE.L	A4,D1
	MOVEA.L	_DosBase,A6
	JSR	-36(A6)
	MOVE.L	A3,D0
LoadFileX:
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
LoadFile_PTR:
	ORI.B	#$00,D0
LAB_0CFF:
	ORI.B	#$00,D0
	ORI.B	#$00,D1
LoadFileERR:
	MOVEQ	#0,D0
	BSR.W	WarnFlash
	BRA.S	LoadFileX
	DC.W	$0000
ClrFileName:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	#$01ff,D0
LAB_0D02:
	CLR.B	(A0)+
	DBF	D0,LAB_0D02
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
CopyInstrName:
	MOVEM.L	D0/A0-A1,-(A7)
	MOVE.W	#$00ff,D0
LAB_0D04:
	MOVE.B	(A0)+,(A1)+
	DBF	D0,LAB_0D04
	MOVEM.L	(A7)+,D0/A0-A1
	RTS
SetEditJump:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	JumpLen+2(PC),A0
	MOVE.L	(A0),D7
	LEA	EditJump_TXT,A1
	MOVEQ	#1,D1
	MOVE.L	VEX_LinesPerPattern(PC),D2
	SUBQ.L	#1,D2
	BSR.W	ReqMinMaxLong
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
KeyPosNumDown:
	MOVEM.L	A0,-(A7)
	LEA	PosNumDown,A0
	JSR	DecShiftRepeat
	JSR	DrawEventStatus
	MOVEA.L	(A7)+,A0
	RTS
	DC.W	$0000
KeyPosNumUp:
	MOVEM.L	A0,-(A7)
	LEA	PosNumUp,A0
	JSR	DecShiftRepeat
	JSR	DrawEventStatus
	MOVEA.L	(A7)+,A0
	RTS
	DC.W	$0000
KeyPatNumDown:
	MOVEM.L	A0,-(A7)
	LEA	PatternDown(PC),A0
	JSR	DecShiftRepeat
	JSR	PattedUpdateDisp
	JSR	DrawEventStatus
	MOVEA.L	(A7)+,A0
	RTS
	DC.W	$0000
KeyPatNumUp:
	MOVEM.L	A0,-(A7)
	LEA	PatternUp(PC),A0
	JSR	DecShiftRepeat
	JSR	PattedUpdateDisp
	JSR	DrawEventStatus
	MOVEA.L	(A7)+,A0
	RTS
	DC.W	$0000
PatternDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	HideBlockRange
	JSR	PatEdCrsrOff
	JSR	GetActualPattEd
	MOVEA.L	24(A0),A1
	MOVE.W	8(A1),D0
	TST.W	D0
	BEQ.S	LAB_0D0B
	SUBQ.W	#1,D0
	MOVE.W	D0,8(A1)
	SUBI.L	#$00000010,(A1)
LAB_0D0B:
	DC.W	$0c3a
	DC.W	$00ff
	BVS.S	LAB_0D0F
	BEQ.S	LAB_0D0C
	JSR	PattedUpdateDisp
	JSR	UpdatePosList
LAB_0D0C:
	JSR	PatEdCrsrOn
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PatternUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	HideBlockRange
	JSR	PatEdCrsrOff
	JSR	GetActualPattEd
	MOVEA.L	24(A0),A1
	MOVE.W	8(A1),D0
	MOVE.L	VEX_PattNumb(PC),D1
	SUBQ.W	#1,D1
	CMP.W	D1,D0
	BEQ.S	LAB_0D0E
	ADDQ.W	#1,D0
	MOVE.W	D0,8(A1)
	ADDI.L	#$00000010,(A1)
LAB_0D0E:
	DC.W	$0c3a
	DC.W	$00ff
	BVS.S	LAB_0D0F
	BEQ.S	LAB_0D10
	JSR	PattedUpdateDisp
LAB_0D0F:
	JSR	UpdatePosList
LAB_0D10:
	JSR	PatEdCrsrOn
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
KeySwapRecordState:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	SwapRecordState
	BSR.S	DrawRecordStatus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawRecordStatus:
	MOVEM.L	D0-D1,-(A7)
	MOVE.W	RECORD_STATUS(PC),D1
	MOVE.L	#$53453031,D0
	JSR	NGSetGadBool
	MOVEM.L	(A7)+,D0-D1
	RTS
SwapRecordState:
	NOT.W	RECORD_STATUS
	JSR	ShowMainTitle
	RTS
RECORD_STATUS:
	DC.W	$0000
	DC.W	$ffff
	DC.W	$0000
Space:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	GetPEDRP+6
	DC.W	$4a89
	BEQ.S	LAB_0D16
	JSR	HideBlockRange
	JSR	ProcessInstrPaint
LAB_0D16:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DownInstr:
	MOVEM.L	D0-D7/A0-A6,-(A7)
LAB_0D18:
	BSR.W	GetActualInstrNum
	TST.W	D0
	BEQ.S	LAB_0D1A
	MOVEQ	#0,D0
	DC.W	$0c7a
	DC.W	$ffff
	BLS.S	LAB_0D18+2
	BNE.S	LAB_0D19
	MOVEQ	#9,D0
LAB_0D19:
	BSR.W	MovePrevInstrument
	BSR.W	DrawActualWave
	DBF	D0,LAB_0D19
	JSR	DrawInstrName
LAB_0D1A:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
UpInstr:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#0,D0
	DC.W	$0c7a
	DC.W	$ffff
	BLS.S	LAB_0D18+2
	BNE.S	LAB_0D1C
	MOVEQ	#9,D0
LAB_0D1C:
	BSR.W	MoveNextInstrument
	BSR.W	DrawActualWave
	DBF	D0,LAB_0D1C
	JSR	DrawInstrName
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
TrackLenUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2(PC),A0
	MOVEA.L	24(A0),A1
	MOVEQ	#1,D0
	DC.W	$0c7a
	DC.W	$ffff
	BLS.S	LAB_0D18+2
	BNE.S	LAB_0D1E
	MOVEQ	#10,D0
LAB_0D1E:
	ADD.W	D0,12(A1)
	MOVE.L	VEX_LinesPerPattern(PC),D1
	CMP.W	12(A1),D1
	BCC.S	LAB_0D1F
	MOVE.W	D1,12(A1)
LAB_0D1F:
	JSR	DrawPosition
	JSR	UpdatePosListQ
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	RTS
	DC.W	$0000
TrackLenDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2(PC),A0
	MOVEA.L	24(A0),A1
	MOVEQ	#1,D0
	DC.W	$0c7a
	DC.W	$ffff
	BLS.S	LAB_0D26+2
	BNE.S	LAB_0D21
	MOVEQ	#10,D0
LAB_0D21:
	SUB.W	D0,12(A1)
	BMI.S	LAB_0D22
	BEQ.S	LAB_0D22
	BRA.S	LAB_0D23
LAB_0D22:
	MOVE.W	#$0001,12(A1)
LAB_0D23:
	JSR	DrawPosition
	JSR	UpdatePosListQ
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
LoopUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2(PC),A0
	MOVEA.L	24(A0),A1
	MOVEQ	#1,D0
	DC.W	$0c7a
	DC.W	$ffff
	BLS.S	LAB_0D26+2
	BNE.S	LAB_0D25
	MOVEQ	#10,D0
LAB_0D25:
	ADD.W	D0,4(A1)
	JSR	DrawPosition
	JSR	UpdatePosListQ
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
LoopDown:
LAB_0D26:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2(PC),A0
	MOVEA.L	24(A0),A1
	MOVEQ	#1,D0
	DC.W	$0c7a
	DC.W	$ffff
	BHI.S	LAB_0D26+2
	BNE.S	LAB_0D28
	MOVEQ	#10,D0
LAB_0D28:
	SUB.W	D0,4(A1)
	BMI.S	LAB_0D29
	BEQ.S	LAB_0D29
	BRA.S	LAB_0D2A
LAB_0D29:
	MOVE.W	#$0001,4(A1)
LAB_0D2A:
	JSR	DrawPosition
	JSR	UpdatePosListQ
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
StartPosUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2(PC),A0
	MOVEA.L	24(A0),A2
	MOVEQ	#1,D0
	DC.W	$0c7a
	DC.W	$ffff
	BHI.S	LAB_0D26+2
	BNE.S	LAB_0D2C
	MOVEQ	#10,D0
LAB_0D2C:
	ADD.W	D0,10(A2)
	JSR	DrawPosition
LAB_0D2D:
	JSR	UpdatePosListQ
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
StartPosDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2(PC),A0
	MOVEA.L	24(A0),A2
	MOVEQ	#1,D0
	DC.W	$0c7a
LAB_0D2F:
	DC.W	$ffff
	BHI.S	LAB_0D26+2
	BNE.S	LAB_0D30
	MOVEQ	#10,D0
LAB_0D30:
	SUB.W	D0,10(A2)
	BPL.S	LAB_0D31
	CLR.W	10(A2)
LAB_0D31:
	JSR	DrawPosition
LAB_0D32:
	JSR	UpdatePosListQ
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PosTuneUp:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2(PC),A0
	MOVEA.L	24(A0),A2
	BSR.W	SetOctaveKeyRaster
	ADD.W	D0,16(A2)
PosTuneUpS:
LAB_0D34:
	JSR	DrawPosition
	JSR	UpdatePosListQ
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PosTuneDown:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_PATTED+2(PC),A0
	MOVEA.L	24(A0),A2
	BSR.W	SetOctaveKeyRaster
	SUB.W	D0,16(A2)
	BRA.S	PosTuneUpS
	DC.W	$0000
SetUpdatePos:
	MOVE.L	#$ffffffff,AutoUpdate_DrPos
	BSR.S	ResetGotoNextLine
	RTS
	DC.W	$0000
SetUpdateSeq:
	MOVE.L	#$ffffffff,AutoUpdate_DrSeq
	RTS
UpdateDrawSequence:
	JSR	DrawSequence
	CLR.L	AutoUpdate_DrSeq
	RTS
	DC.W	$0000
SetRowOffset:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	PatEdCrsrOff
	JSR	GetActualPattEd
	MOVEA.L	24(A0),A1
	MOVE.W	10(A1),34(A0)
	CLR.W	62(A0)
	JSR	PatEdCrsrOn
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
UpdateDrawPosition:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	SetRowOffset
	JSR	UpdatePosList
	JSR	PattedUpdateDisp
	JSR	DrawEventStatus
	BSR.W	UpdateActWave
	CLR.L	AutoUpdate_DrPos
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ResetGotoNextLine:
	CLR.W	GotoNextLine_COUNTER
	CLR.L	AutoUpdate_NextLine
	RTS
GotoNextLine_COUNTER:
	DC.W	$0000
SetGotoNextLine:
	MOVE.L	#$ffffffff,AutoUpdate_NextLine
	ADDQ.W	#1,GotoNextLine_COUNTER
	RTS
	DC.W	$0000
UpdateGotoNextLine:
	DC.W	$0c7a
	DC.W	$ffff
	BMI.S	LAB_0D40
	BNE.S	LAB_0D41
	CMPI.W	#$ffff,LAB_0044
LAB_0D40:
	BEQ.S	LAB_0D42
LAB_0D41:
	RTS
LAB_0D42:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	GotoNextLine_COUNTER(PC),A2
	MOVE.W	(A2),D0
	BEQ.S	LAB_0D45
LAB_0D43:
	JSR	GetActualPattEd
	JSR	PattEdMoveNextLine
	SUBQ.W	#1,D0
	BNE.S	LAB_0D43
LAB_0D45:
	CLR.W	(A2)
LAB_0D46:
	JSR	DrawEventStatusQ
	CLR.L	AutoUpdate_NextLine
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
IMSGInfo:
	RTS
	DC.W	$0000
GetMsgShift:
	MOVEM.L	D1,-(A7)
	CLR.L	Shift_KEY+2
LAB_0D49:
	MOVE.L	24(A0),D1
	BTST	#2,D1
	BEQ.S	GetMsgShift_noL
	MOVE.W	#$ffff,ShiftL_KEY
GetMsgShift_noL:
	ANDI.L	#$00000003,D1
	TST.B	D1
	BEQ.S	GetMsgShift_X
	MOVE.W	#$ffff,Shift_KEY+2
GetMsgShift_X:
	MOVEM.L	(A7)+,D1
	RTS
MAINEXIT:
	MOVE.W	#$ffff,MAINEXIT_FLAG
LAB_0D4D:
	RTS
	DC.W	$0000
GetSystemFreq:
	MOVEM.L	D2-D3,-(A7)
	MOVEQ	#0,D2
	MOVE.L	VexQuality(PC),D3
	DC.W	$4c3c
	MOVE.W	D2,D2
	DC.W	$0000
	MOVEQ	#-61,D0
	DC.W	$4c7c
	MOVE.W	D2,D2
	ORI.B	#$64,D0
	MOVE.L	D3,D0
	MOVEM.L	(A7)+,D2-D3
	RTS
	DC.W	$0000
GetRealSystemFreq:
LAB_0D4F:
	MOVEM.L	D2-D3,-(A7)
	MOVEQ	#0,D2
	MOVE.L	VexQuality(PC),D3
	DC.W	$4c3c
	MOVE.W	D2,D2
	DC.W	$0000
	MOVEQ	#-61,D0
	DC.W	$4c7c
	MOVE.W	D2,D2
	ORI.B	#$64,D0
	MOVE.L	D3,D0
	DC.W	$4c39
	DC.W	$0000
	DC.L	OverSample3
	MOVEM.L	(A7)+,D2-D3
	RTS
	DC.W	$0000
DecWordXY5Char:
	DC.W	$4a89
	BNE.S	DecWordXY5Char_do
	RTS
DecWordXY5Char_do:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GFX_Move
	LEA	DecLongSave(PC),A0
	MOVEQ	#0,D0
LAB_0D53:
	MOVE.W	D2,D0
	BSR.W	ConvertToDecLong
	MOVEQ	#5,D0
	LEA	LAB_083A+1(PC),A0
	TST.W	D2
	BNE.S	DecWordXY5Char_ok
	MOVE.B	#$30,4(A0)
DecWordXY5Char_ok:
	MOVEA.L	_GraphicsBase(PC),A6
	JSR	-60(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
UpdateActWave:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	TST.L	InstrUpdate
	BEQ.S	LAB_0D58
	JSR	GetActualNotePtr
	CMPI.B	#$06,(A0)
	BEQ.S	LAB_0D57
LAB_0D56:
	JSR	CheckNoteType
	CMPI.W	#$0001,D0
	BEQ.S	LAB_0D57
	CMPI.B	#$05,(A0)
	BNE.S	LAB_0D58
	CMPI.B	#$ff,1(A0)
	BEQ.S	LAB_0D58
LAB_0D57:
	MOVEQ	#0,D0
	MOVE.B	3(A0),D0
	BSR.W	GotoInstrNum
LAB_0D58:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
BuildLT_Trans:
LAB_0D59:
	MOVE.L	#$5472616e,(A4)+
	MOVE.L	#$73576176,(A4)+
	MOVE.W	#$6520,(A4)+
	CLR.B	(A4)+
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
BuildLineTxt:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	LineSampleDef_Txt,A1
	MOVEA.L	A1,A4
	CLR.B	(A4)
	BSR.W	GetActualInstrName
	MOVE.W	6(A0),D4
	MOVE.W	14(A0),D7
	MOVE.W	16(A0),D6
	MOVE.W	18(A0),D5
	LEA	0(A0,D6.W),A0
LAB_0D5C:
	CMPI.W	#$0001,D4
	BEQ.S	BuildLT_Trans
	MOVE.B	3(A0),D4
	SUBQ.W	#1,D7
	BMI.S	BuildLineTxt_X
	BNE.S	BuildLineTxt_L
	MOVE.L	#$52656d69,(A4)+
	MOVE.L	#$78202020,(A4)+
	BRA.S	BuildLineTxt_X
BuildLineTxt_L:
	CMP.B	3(A0),D4
	BNE.S	BuildLineTxt_Mix
	LEA	0(A0,D5.W),A0
	DBF	D7,BuildLineTxt_L
	MOVE.L	#$43686f72,(A4)+
LAB_0D5E:
	MOVE.L	#$64202020,(A4)+
	BRA.S	BuildLineTxt_X
BuildLineTxt_Mix:
	MOVE.L	#$4f766572,(A4)+
	MOVE.L	#$6c617920,(A4)+
BuildLineTxt_X:
	MOVEQ	#0,D0
	MOVE.B	D4,D0
	BSR.W	ConvertToDecByte
	LEA	DecByteSave(PC),A0
	MOVE.B	(A0)+,(A4)+
	MOVE.B	(A0)+,(A4)+
	MOVE.B	(A0)+,(A4)+
	CLR.B	(A4)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
InitProjectTitle:
	MOVEM.L	D0-D7/A0-A6,-(A7)
LAB_0D62:
	MOVE.B	#$ff,LAB_1164
	MOVEA.L	ProjectName_PTR(PC),A1
	CLR.B	(A1)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
DrawPattedTitle:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	ProjSong_TXT+1,A0
	DC.W	$0c3a
	DC.W	$00ff
	SUBQ.W	#7,D6
	BEQ.S	LAB_0D65
LAB_0D64:
	LEA	ProjMod_TXT+1,A0
LAB_0D65:
	MOVEA.L	PattedTit_PTR+2(PC),A1
	BSR.W	CopyString
	MOVEA.L	ProjectName_PTR(PC),A0
	TST.B	(A0)
	BNE.S	LAB_0D66
	LEA	EmptyProject_TXT+3,A0
LAB_0D66:
	BSR.W	AddString
	MOVE.L	#$50544544,D0
	JSR	NGFindWindow
	DC.W	$4a88
	BEQ.S	LAB_0D67
	MOVEA.L	(A0),A0
	DC.W	$4a88
	BEQ.S	LAB_0D67
	MOVEA.W	#$ffff,A2
	MOVEA.L	_IntuitionBase,A6
	JSR	-276(A6)
LAB_0D67:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
FillUpSpaces:
	MOVEM.L	D0-D1/A0,-(A7)
	MOVEQ	#32,D1
	SUBQ.W	#1,D0
LAB_0D69:
	TST.B	(A0)+
	BEQ.S	LAB_0D6B
	DBF	D0,LAB_0D69
	CLR.B	(A0)+
LAB_0D6A:
	MOVEM.L	(A7)+,D0-D1/A0
	RTS
LAB_0D6B:
	SUBQ.L	#1,A0
LAB_0D6C:
	MOVE.B	D1,(A0)+
	DBF	D0,LAB_0D6C
	CLR.B	(A0)+
	BRA.S	LAB_0D6A
PlayMidiKeyboard:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	CheckInstrument
	TST.W	D0
	BNE.S	LAB_0D6E
	BSR.W	GetActualInstrument
	MOVEA.L	A0,A1
	BSR.W	GetActualInstrName
	MOVEA.L	A0,A2
	DC.W	$4aba
	DIVU	D4,D1
	BEQ.S	LAB_0D6E
	MOVE.W	MidiAKey(PC),D0
	MOVE.W	D0,D1
	LSL.W	#3,D0
	LEA	Standard_KEYTRANS(PC),A0
	BRA.S	PlayKeyNote_In
LAB_0D6E:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PlayKeyNote:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	8(A0),A0
	ANDI.W	#$00ff,D0
	BTST	#7,D0
	BNE.W	PlayKeyNote_X
	LSL.W	#3,D0
	MOVE.W	4(A0,D0.W),D1
PlayKeyNote_In:
	ADD.W	KeyboardTune,D1
	MOVEM.L	A0,-(A7)
	MOVE.W	D1,D2
	BTST	#0,142(A2)
	BNE.S	PlayKeyNote_NoPosTune
	LEA	Test_PATTED+2(PC),A0
	MOVEA.L	24(A0),A0
	ADD.W	16(A0),D1
PlayKeyNote_NoPosTune:
	MOVEA.L	(A7)+,A0
	MOVE.L	0(A0,D0.W),D0
	CMPI.L	#$ffffffff,D0
	BEQ.S	PlayKeyNote_X
	MOVE.W	D1,D0
	ADD.W	44(A1),D0
	BSR.W	GetNoteFreq
	DC.W	$0c7a
	DC.W	$ffff
	ADDQ.W	#7,26378(A0)
	DC.W	$0c7a
	DC.W	$ffff
	ADDQ.W	#7,(A6)+
	BEQ.S	PlayKeyNote_Upper
	BRA.S	PlayKeyNote_M1
PlayKeyNote_Upper:
	LSL.L	#1,D0
	ADD.W	LAB_119F(PC),D1
	ADD.W	LAB_119F(PC),D2
PlayKeyNote_M1:
	MOVEA.L	A1,A0
	BSR.W	PlayFreq
	MOVE.W	D1,D0
	BSR.W	DrawSpecUnitTest
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$fa14
	BNE.S	PlayKeyNote_X
	MOVE.W	D2,D0
	LEA	Test_INSTRMAN(PC),A1
	MOVE.W	10(A1),D1
	LEA	Test_PATTED+2(PC),A0
	JSR	BackupPattern
	JSR	HideBlockRange
	BSR.W	SetNote
PlayKeyNote_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
InitKeyTrans:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A0,A4
	MOVE.W	20(A4),D7
	SUBQ.W	#1,D7
	BMI.S	LAB_0D77
	MOVEA.L	8(A4),A1
	MOVEQ	#-1,D6
LAB_0D76:
	MOVE.L	D6,(A1)+
	DBF	D7,LAB_0D76
	MOVEA.L	(A4),A3
	BSR.S	DoInitKeyTrans
	MOVEA.L	4(A4),A3
	BSR.S	DoInitKeyTrans
LAB_0D77:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
DoInitKeyTrans:
	DC.W	$4a8b
	BEQ.S	LAB_0D7A
	MOVEQ	#0,D6
	MOVE.W	(A3)+,D6
LAB_0D79:
	MOVEQ	#0,D5
	MOVE.B	(A3)+,D5
	TST.B	D5
	BEQ.S	LAB_0D7A
	LSL.W	#3,D5
	MOVE.L	D6,D0
	MOVEA.L	22(A4),A0
	BSR.W	GetNoteFreq
	MOVEA.L	8(A4),A0
	MOVE.L	D0,0(A0,D5.W)
	MOVE.W	D6,4(A0,D5.W)
	ADDQ.W	#1,D6
	BRA.S	LAB_0D79
LAB_0D7A:
	RTS
	DC.W	$0000
SetPatHeadPTR:
	MOVEM.L	D0/A0-A1,-(A7)
	MOVEA.L	A0,A1
	MOVE.W	8(A0),D0
	MULU	#$0010,D0
	MOVEA.L	First_PATHEAD+2(PC),A0
	LEA	0(A0,D0.L),A0
	MOVE.L	A0,(A1)
	MOVEM.L	(A7)+,D0/A0-A1
	RTS
	DC.W	$0000
PlaySong:
	DC.W	$0c7a
	DC.W	$ffff
	BEQ.S	LAB_0D7F+4
	BEQ.S	LAB_0D7D
	RTS
LAB_0D7D:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A0,A5
	NEG.B	SignalACount
	BMI.S	LAB_0D7E
	JSR	SignalAutoUpdate
LAB_0D7E:
	SUBQ.W	#1,16(A5)
	BNE.S	LAB_0D80
	MOVEA.L	8(A5),A4
LAB_0D7F:
	MOVE.W	14(A5),16(A5)
	BSR.S	PlaySongData
LAB_0D80:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PlaySongData:
	MOVEA.L	(A4),A3
	BSR.W	PlaySongPattern
	CMPI.W	#$ffff,D0
	BNE.S	LAB_0D82
	SUBQ.W	#1,6(A4)
	BNE.S	LAB_0D82
	SUBQ.W	#1,2(A5)
	BEQ.S	LAB_0D83
	LEA	32(A4),A4
	MOVE.L	A4,8(A5)
	MOVE.W	14(A4),14(A5)
	JSR	MovePosUp
	BSR.W	SetUpdatePos
LAB_0D82:
	RTS
	DC.W	$0000
LAB_0D83:
	BSR.W	SetUpdateSeq
	MOVEA.L	42(A5),A2
	CMPI.W	#$ffff,6(A2)
	BEQ.S	LAB_0D87
	SUBQ.W	#1,48(A5)
	BNE.S	LAB_0D85
LAB_0D84:
	LEA	16(A2),A2
	MOVE.L	A2,42(A5)
	ADDQ.W	#1,46(A5)
	CMPI.W	#$003f,46(A5)
	BCC.S	LAB_0D86
	BEQ.S	LAB_0D87
	CMPI.W	#$0001,6(A2)
	BEQ.S	LAB_0D84
	CMPI.W	#$ffff,6(A2)
	BEQ.S	LAB_0D87
	TST.W	4(A2)
	BEQ.S	LAB_0D84
	JSR	ResetRelTime
	MOVE.W	4(A2),48(A5)
	JSR	BackupActTime
LAB_0D85:
	MOVEA.L	A5,A0
	BSR.W	ReInitSongSeq
	JSR	GotoFirstPosition
	BSR.W	SetUpdatePos
	BSR.W	ResetGotoNextLine
	BRA.S	LAB_0D82
	DC.W	$0000
LAB_0D86:
	BSR.W	StopSong
LAB_0D87:
	MOVEA.L	A5,A0
	JSR	MoveFirstPlayedSeq
	BSR.W	ReInitSong
	JSR	ResetRelMasterTime
	JSR	GotoFirstPosition
	BSR.W	SetUpdatePos
	BSR.W	ResetGotoNextLine
	JSR	BackupActTime
	BSR.W	SetUpdateSeq
	MOVE.B	#$ff,Rend_EXIT
	BRA.W	LAB_0D82
	DC.W	$0000
PlaySongPattern:
	CMPI.W	#$04d2,12(A3)
	BEQ.S	PlaySongPatternDo
	MOVE.L	A4,ActualSongData
	MOVE.W	12(A4),2(A3)
	MOVE.W	16(A4),D2
	ADD.W	SequenzTune(PC),D2
LAB_0D89:
	MOVE.W	D2,PatternTune
	MOVEA.L	4(A3),A2
	MOVE.W	10(A4),D2
	MOVE.W	D2,SongPlayerPos_Y+2
	MOVE.W	34(A5),D3
	MULU	D3,D2
	LEA	0(A2,D2.W),A2
	MOVE.L	A2,8(A3)
	MOVE.W	#$04d2,12(A3)
PlaySongPatternDo:
	MOVEA.L	8(A3),A2
	MOVE.L	A2,VEX_ACTUALLINE
	BSR.S	PlayStereoPatLine
	MOVE.L	A2,8(A3)
	ADDQ.W	#1,SongPlayerPos_Y+2
	MOVEQ	#0,D0
	SUBQ.W	#1,2(A3)
	BNE.S	PlaySongPattern_X
	BSR.W	ResetGotoNextLine
	BSR.W	SetUpdatePos
	MOVEQ	#-1,D0
	CLR.W	12(A3)
PlaySongPattern_X:
	RTS
	DC.W	$0000
PlayStereoPatLine:
	BSR.W	SetGotoNextLine
	MOVEM.L	D1-D7/A6,-(A7)
	MOVE.W	18(A5),D7
	LSR.W	#1,D7
	MOVE.W	D7,D2
	SUBQ.W	#1,D7
	MOVEQ	#0,D1
	MOVEQ	#1,D2
	LEA	PlayTrackInfo+1,A1
PlayStereoPatLine_L:
	BSR.W	PlayLineNote
	ADDQ.L	#4,A2
	EXG	D1,D2
	DC.W	$4a3a
	BHI.S	LAB_0D89+4
	BNE.S	PlayStereoP_Check
PlayStereoNote_NRM:
	MOVE.B	#$ff,DOSAMPLEDIFF
	BSR.S	PlayLineNote
	CLR.B	DOSAMPLEDIFF
	ADDQ.L	#4,A2
PlayStereoNote_CONT:
	CLR.B	PlayStereoCheck+2
	EXG	D1,D2
	ADDQ.W	#2,D1
	ADDQ.W	#2,D2
	DBF	D7,PlayStereoPatLine_L
PlayStereoPatLine_X:
	MOVEM.L	(A7)+,D1-D7/A6
	RTS
	DC.W	$0000
PlayStereoNote2:
	MOVEM.L	(A7)+,D0/A0
PlayStereoNote:
	SUBQ.L	#4,A2
	ADDQ.B	#1,3(A2)
	BSR.S	PlayLineNoteExp
	SUBQ.B	#1,3(A2)
	ADDQ.L	#8,A2
	BRA.S	PlayStereoNote_CONT
PlayStereoP_Check:
	CMPI.L	#$00ff0000,(A2)
	BEQ.S	PlayStereoNote
	MOVEM.L	D0/A0,-(A7)
	MOVEA.L	A2,A0
	JSR	CheckNoteType
	TST.W	D0
	BEQ.S	PlayStereoNote2
	CMPI.W	#$0002,D0
	BNE.S	PlayStereoP_Check2
	CMPI.B	#$64,2(A2)
	BLS.S	PlayStereoNote2
PlayStereoP_Check2:
	MOVEM.L	(A7)+,D0/A0
	BRA.S	PlayStereoNote_NRM
PlayLineNoteExp:
	MOVE.B	#$ff,DOSAMPLEDIFF
	BSR.S	PlayLineNote
	CLR.B	DOSAMPLEDIFF
	RTS
PatternTune:
	DC.W	$0000
PlayLineNote:
	TST.B	(A1)+
	BNE.S	LAB_0D98
	RTS
LAB_0D98:
	CMPI.L	#$00ff0000,(A2)
	BNE.S	LAB_0D99
	RTS
LAB_0D99:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	TST.L	EventModifyJSR
	BEQ.S	PlayLineNote_ForceMono
	MOVEA.L	EventModifyJSR,A6
	JSR	(A6)
PlayLineNote_ForceMono:
	DC.W	$4a7a
	SUBX.W	-(A2),-(A6)
	BEQ.S	LAB_0D9B
	SUBQ.W	#1,LAB_0937
	MOVEA.L	SpecNoteAdd_PTR+2(PC),A0
	MOVE.L	(A2),(A0)
	ADDQ.L	#4,A0
	MOVE.L	A0,SpecNoteAdd_PTR+2
LAB_0D9B:
	CMPI.B	#$01,(A2)
	BGE.W	PlayLineNote_IsComplexFX
	CMPI.B	#$ff,1(A2)
	BEQ.W	PlayLineNote_NoNote
	MOVEQ	#0,D0
	MOVE.B	3(A2),D0
	LEA	Test_INSTRMAN(PC),A1
	MULU	8(A1),D0
	MOVEA.L	4(A1),A1
	MOVEA.L	0(A1,D0.L),A1
	MOVEQ	#0,D0
	MOVE.B	1(A2),D0
	ADD.W	44(A1),D0
	DC.W	$4a7a
	DC.W	$ff8c
	BEQ.S	LAB_0D9C
	BTST	#0,46(A1)
	BNE.S	LAB_0D9C
	ADD.W	PatternTune(PC),D0
LAB_0D9C:
	MOVE.B	2(A2),D3
	MOVEA.L	28(A5),A0
	BSR.W	GetNoteFreq
	CMPI.W	#$0001,38(A1)
	BNE.S	LAB_0D9D
	MOVE.B	#$ff,PlayStereoCheck+2
LAB_0D9D:
	MOVEA.L	A1,A4
	LEA	Test_VOICEEXPANDER(PC),A5
	MOVE.W	2(A5),D2
	MULU	D2,D1
	MOVEA.L	6(A5),A0
	LEA	0(A0,D1.W),A0
	MOVE.L	(A2),48(A0)
	CLR.L	98(A0)
	BSR.W	ClearInstrSaPos
	TST.B	D3
	BNE.S	LAB_0D9E
	MOVEQ	#100,D3
LAB_0D9E:
	BSR.W	StartSample
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PlayLineNote_NoNote:
	LEA	Test_VOICEEXPANDER(PC),A5
	MOVE.W	2(A5),D2
	MULU	D2,D1
	MOVEA.L	6(A5),A0
	LEA	0(A0,D1.W),A0
	MOVEQ	#0,D3
	MOVE.B	2(A2),D3
	BEQ.W	PlayLineNote_X
	CMPI.B	#$c8,D3
	BHI.S	PlayLineNote_ISVOLCOMMAND
	LSL.W	#8,D3
	MOVE.W	D3,20(A0)
	MOVE.B	#$ff,46(A0)
	BRA.W	PlayLineNote_X
	DC.W	$0000
PlayLineNote_ISVOLCOMMAND:
	LEA	VOLUMECOM_JL(PC),A1
	SUBI.W	#$00f2,D3
	BMI.S	PlayLineNote_VError
	DC.W	$2271
	MOVE.W	D0,D2
	JMP	(A1)
PlayLineNote_VError:
	BSR.W	WarnFlash
	BRA.W	PlayLineNote_X
PlayLineNote_SpeedDown:
	MOVEQ	#1,D0
	LEA	Test_SONG(PC),A5
	CMP.W	14(A5),D0
	BCC.W	PlayLineNote_X
LAB_0DA3:
	SUB.W	D0,14(A5)
	BRA.W	PlayLineNote_X
	DC.W	$0000
PlayLineNote_SpeedUp:
	LEA	Test_SONG(PC),A5
	ADDQ.W	#1,14(A5)
	BRA.W	PlayLineNote_X
ClearInstrSaPos:
	MOVEM.L	A6,-(A7)
	MOVEA.L	30(A0),A6
	DC.W	$4a8e
	BEQ.S	LAB_0DA6
	CLR.L	60(A6)
LAB_0DA6:
	MOVEA.L	(A7)+,A6
	RTS
PlayLineNote_StopSample:
	BSR.S	ClearInstrSaPos
	CLR.W	16(A0)
	MOVE.B	#$ff,47(A0)
	BRA.W	PlayLineNote_X
PlayLineNote_ContSample:
	CMPI.B	#$ff,64(A0)
	BEQ.S	PlayLineNote_X
LAB_0DA9:
	MOVE.W	#$0001,16(A0)
	MOVE.B	#$ff,46(A0)
	BRA.S	PlayLineNote_X
	DC.W	$0000
PlayLineNote_KeyOff:
	CMPI.W	#$0008,34(A0)
	BNE.S	PlayLineNote_X
	MOVE.L	36(A0),(A0)
	MOVE.L	40(A0),12(A0)
	MOVE.W	#$ffff,44(A0)
	MOVE.B	#$ff,46(A0)
	BRA.S	PlayLineNote_X
PlayLineNote_PitchUp:
	MOVE.L	8(A0),D0
	LSR.L	#7,D0
	ADD.L	D0,8(A0)
	BRA.S	PlayLineNote_X
PlayLineNote_PitchUp2:
	MOVE.L	8(A0),D0
	LSR.L	#6,D0
	ADD.L	D0,8(A0)
	BRA.S	PlayLineNote_X
PlayLineNote_PitchUp3:
	MOVE.L	8(A0),D0
	LSR.L	#5,D0
	ADD.L	D0,8(A0)
	BRA.S	PlayLineNote_X
PlayLineNote_PitchDown:
	MOVE.L	8(A0),D0
	LSR.L	#7,D0
	SUB.L	D0,8(A0)
	BRA.S	PlayLineNote_X
PlayLineNote_PitchDown2:
	MOVE.L	8(A0),D0
	LSR.L	#6,D0
	SUB.L	D0,8(A0)
	BRA.S	PlayLineNote_X
PlayLineNote_PitchDown3:
	MOVE.L	8(A0),D0
	LSR.L	#5,D0
LAB_0DB1:
	SUB.L	D0,8(A0)
PlayLineNote_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PlayLineNote_IsComplexFX:
	MOVEQ	#0,D0
	MOVE.B	(A2),D0
	CMPI.B	#$19,D0
	BHI.S	PlayLineNote_ComplexFXErr
	LEA	ComplexFX_JMP(PC),A0
	DC.W	$2070
	DC.W	$0400
	JMP	(A0)
PlayLineNote_ComplexFXErr:
	BSR.W	WarnFlash
	BRA.S	PlayLineNote_X
	DC.W	$0000
PlayLineNote_FxVSlideDown:
	BSR.W	PlayNoteGetSample
	MOVEQ	#0,D3
	MOVE.B	2(A2),D3
	LSL.W	#4,D3
	NEG.W	D3
	MOVE.W	D3,60(A0)
	BRA.S	PlayLineNote_X
PlayLineNote_FxVSlideUp:
	BSR.W	PlayNoteGetSample
	MOVEQ	#0,D3
	MOVE.B	2(A2),D3
	LSL.W	#4,D3
	MOVE.W	D3,60(A0)
LAB_0DB7:
	BRA.S	PlayLineNote_X
	DC.W	$0000
PlayLineNote_FxPSlideDown:
	BSR.W	PlayNoteGetSample
	MOVEQ	#0,D3
	MOVE.B	2(A2),D3
	NEG.W	D3
	MOVE.W	D3,62(A0)
	BRA.S	PlayLineNote_X
	DC.W	$0000
PlayLineNote_FxPSlideUp:
	BSR.W	PlayNoteGetSample
	MOVEQ	#0,D3
	MOVE.B	2(A2),D3
	MOVE.W	D3,62(A0)
	BRA.S	PlayLineNote_X
ReplayFXSetSpeed:
	MOVEM.L	D0/A5,-(A7)
	MOVEQ	#0,D0
	MOVE.B	2(A2),D0
	BEQ.S	ReplayFXSetSpeed_Zero
	LEA	Test_SONG(PC),A5
	MOVE.W	D0,14(A5)
ReplayFXSetSpeed_Zero:
	MOVEM.L	(A7)+,D0/A5
	BRA.W	PlayLineNote_X
PlayLNFilter:
	MOVEM.L	D0-D3/A6,-(A7)
	BSR.W	PlayNoteGetSample
	CMPI.B	#$05,1(A2)
	BCC.S	sfdf
	MOVEQ	#0,D3
	MOVE.B	2(A2),D3
	BSR.W	GetRealSystemFreq
	DC.W	$4c3c
	MOVE.W	D0,D0
	DC.W	$0000
	OR.L	-(A0),D6
	DC.W	$4c40
	MOVE.W	D3,D0
	CMPI.L	#$00000190,D3
	BLS.S	LAB_0DBD
	MOVE.W	#$0190,D3
LAB_0DBD:
	MOVE.W	D3,140(A0)
	MOVEQ	#0,D3
	MOVE.B	3(A2),D3
	MOVE.W	D3,142(A0)
	MOVE.B	1(A2),144(A0)
	TST.B	1(A2)
	BEQ.S	LAB_0DC0
	TST.B	2(A2)
	BEQ.S	LAB_0DC0
LAB_0DBF:
	MOVEM.L	(A7)+,D0-D3/A6
	BRA.W	PlayLineNote_X
LAB_0DC0:
	CLR.L	146(A0)
	CLR.L	150(A0)
	CLR.L	154(A0)
	BRA.S	LAB_0DBF
	CLR.B	1(A2)
	BRA.S	LAB_0DBF
sfdf:
	MOVE.B	1(A2),D3
	SUBQ.B	#5,D3
	MOVE.B	D3,8(A6)
LAB_0DC2:
	LEA	RTPOSTFILTERWET(PC),A6
	MOVEQ	#0,D3
	MOVE.B	2(A2),D3
	BSR.W	GetRealSystemFreq
	DC.W	$4c3c
	MOVE.W	D0,D0
	DC.W	$0000
	OR.L	-(A0),D6
	DC.W	$4c40
	MOVE.W	D3,D0
	CMPI.L	#$00000190,D3
	BLS.S	LAB_0DC3
	MOVE.W	#$0190,D3
LAB_0DC3:
	MOVE.L	D3,(A6)
	MOVEQ	#0,D3
	MOVE.B	3(A2),D3
	MOVE.L	D3,4(A6)
	TST.B	1(A2)
	BEQ.S	LAB_0DC5
	TST.B	2(A2)
	BEQ.S	LAB_0DC5
LAB_0DC4:
	MOVEM.L	(A7)+,D0-D3/A6
	BRA.W	PlayLineNote_X
LAB_0DC5:
	CLR.L	12(A0)
	CLR.L	16(A0)
	CLR.L	20(A0)
	BRA.S	LAB_0DC4
RTPOSTFILTERWET:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
RTResoFilterPostMix:
	CMPI.B	#$01,8(A0)
	BEQ.W	RTResoFilterPostMixLP
	CMPI.B	#$02,8(A0)
	BEQ.S	RTResoFilterPostMixHP
	CMPI.B	#$03,8(A0)
	BEQ.W	RTResoFilterPostMixBP
	RTS
RTResoFilterPostMixHP:
	MOVEM.L	D0-D7/A1-A2,-(A7)
	SUBQ.W	#1,D0
	MOVEM.L	12(A0),D2-D4
	MOVE.L	(A0),D7
	CMPI.L	#$000000f0,D7
	BLS.S	LAB_0DC9
	MOVE.L	#$000000f0,D7
LAB_0DC9:
	TST.L	4(A0)
	BEQ.S	LAB_0DCC
	CMPI.L	#$000000b9,4(A0)
	BLS.S	LAB_0DCA
	MOVE.L	#$000000b9,4(A0)
LAB_0DCA:
	MOVE.W	(A2),D1
	EXT.L	D1
	MOVE.L	D1,D4
	SUB.L	D2,D4
	MOVE.L	D7,D6
	DC.W	$4c04
	BVC.W	LAB_0C0C
	ADD.L	D6,D3
	MOVE.L	D7,D6
	DC.W	$4c03
	BVC.W	LAB_0CB4
	ADD.L	D6,D2
	MOVE.L	4(A0),D6
	DC.W	$4c02
	BVC.W	LAB_0CB5
	ADD.L	D6,D2
	ASR.L	#2,D2
	MOVE.L	D2,D1
	MOVE.W	D4,(A1)
	CLR.W	(A2)
	ADDQ.L	#4,A2
	ADDQ.L	#4,A1
	DBF	D0,LAB_0DCA
LAB_0DCB:
	MOVEM.L	D2-D4,12(A0)
	MOVEM.L	(A7)+,D0-D7/A1-A2
	RTS
LAB_0DCC:
	MOVE.W	(A2),D1
	EXT.L	D1
	MOVE.L	D1,D4
	SUB.L	D2,D4
	MOVE.L	D7,D6
	DC.W	$4c04
	BVC.W	LAB_0C15
	ADD.L	D6,D3
	MOVE.L	D7,D6
	DC.W	$4c03
	BVC.W	LAB_0CB7
	ADD.L	D6,D2
	ASR.L	#2,D2
	MOVE.L	D2,D1
	MOVE.W	D4,(A1)
	CLR.W	(A2)
	ADDQ.L	#4,A2
	ADDQ.L	#4,A1
	DBF	D0,LAB_0DCC
	BRA.S	LAB_0DCB
RTResoFilterPostMixBP:
	MOVEM.L	D0-D7/A1-A2,-(A7)
	SUBQ.W	#1,D0
	MOVEM.L	12(A0),D2-D4
	MOVE.L	(A0),D7
	CMPI.L	#$000000f0,D7
	BLS.S	LAB_0DCE
	MOVE.L	#$000000f0,D7
LAB_0DCE:
	TST.L	4(A0)
	BEQ.S	LAB_0DD1
	CMPI.L	#$000000b9,4(A0)
	BLS.S	LAB_0DCF
	MOVE.L	#$000000b9,4(A0)
LAB_0DCF:
	MOVE.W	(A2),D1
	EXT.L	D1
	MOVE.L	D1,D4
	SUB.L	D2,D4
	MOVE.L	D7,D6
	DC.W	$4c04
	BVC.W	LAB_0C17
	ADD.L	D6,D3
	MOVE.L	D7,D6
	DC.W	$4c03
	BVC.W	LAB_0CB9+2
	ADD.L	D6,D2
	MOVE.L	4(A0),D6
	DC.W	$4c02
	BVC.W	LAB_0CBC
	ADD.L	D6,D2
	ASR.L	#2,D2
	MOVE.L	D2,D1
	SUB.W	D4,(A2)
	SUB.W	D1,(A2)
	MOVE.W	(A2),(A1)
	CLR.W	(A2)
	ADDQ.L	#4,A2
	DBF	D0,LAB_0DCF
LAB_0DD0:
	MOVEM.L	D2-D4,12(A0)
	MOVEM.L	(A7)+,D0-D7/A1-A2
	RTS
LAB_0DD1:
	MOVE.W	(A2),D1
	EXT.L	D1
	MOVE.L	D1,D4
	SUB.L	D2,D4
	MOVE.L	D7,D6
	DC.W	$4c04
	BVC.W	ResoFilter_TXT
	ADD.L	D6,D3
	MOVE.L	D7,D6
	DC.W	$4c03
	BVC.W	LAB_0CC0
	ADD.L	D6,D2
	ASR.L	#2,D2
	MOVE.L	D2,D1
	SUB.W	D4,(A2)
	SUB.W	D1,(A2)
	MOVE.W	(A2),(A1)
	CLR.W	(A2)
	ADDQ.L	#4,A2
	DBF	D0,LAB_0DD1
	BRA.S	LAB_0DD0
	DC.W	$0000
RTResoFilterPostMixLP:
	MOVEM.L	D0-D7/A1-A2,-(A7)
	SUBQ.W	#1,D0
	MOVEM.L	12(A0),D2-D4
	MOVE.L	(A0),D7
	CMPI.L	#$000000f0,D7
	BLS.S	LAB_0DD3
	MOVE.L	#$000000f0,D7
LAB_0DD3:
	TST.L	4(A0)
	BEQ.S	LAB_0DD6
	CMPI.L	#$000000b9,4(A0)
	BLS.S	LAB_0DD4
	MOVE.L	#$000000b9,4(A0)
LAB_0DD4:
	MOVE.W	(A2),D1
	EXT.L	D1
	MOVE.L	D1,D4
	SUB.L	D2,D4
	MOVE.L	D7,D6
	DC.W	$4c04
	BVC.W	LAB_0C26+2
	ADD.L	D6,D3
	MOVE.L	D7,D6
	DC.W	$4c03
	BVC.W	LAB_0CC4+2
	ADD.L	D6,D2
	MOVE.L	4(A0),D6
	DC.W	$4c02
	BVC.W	LAB_0CC5+2
	ADD.L	D6,D2
	ASR.L	#2,D2
	MOVE.L	D2,D1
	ADD.W	D1,(A1)
	CLR.W	(A2)
	ADDQ.L	#4,A2
	DBF	D0,LAB_0DD4
LAB_0DD5:
	MOVEM.L	D2-D4,12(A0)
	MOVEM.L	(A7)+,D0-D7/A1-A2
	RTS
LAB_0DD6:
	MOVE.W	(A2),D1
	EXT.L	D1
	MOVE.L	D1,D4
	SUB.L	D2,D4
	MOVE.L	D7,D6
	DC.W	$4c04
	BVC.W	LAB_0C2E
	ADD.L	D6,D3
	MOVE.L	D7,D6
	DC.W	$4c03
	BVC.W	LAB_0CCA+2
	ADD.L	D6,D2
	ASR.L	#2,D2
	MOVE.L	D2,D1
	MOVE.W	D1,(A1)
	CLR.W	(A2)
	ADDQ.L	#4,A2
	DBF	D0,LAB_0DD6
	BRA.S	LAB_0DD5
	DC.W	$0000
ReplayFXSetFromAdd:
	MOVEM.L	D2-D3,-(A7)
	BSR.W	PlayNoteGetSample
	MOVEQ	#0,D3
	MOVE.B	2(A2),D3
	BEQ.S	SetFromAdd_Quick
	MOVE.L	12(A0),D2
	SUB.L	66(A0),D2
	DC.W	$4c03
	MOVE.L	D0,D0
	LSR.L	#8,D2
SetFromAdd_In:
	MOVE.L	D2,72(A0)
	MOVEM.L	(A7)+,D2-D3
	BRA.W	PlayLineNote_X
	DC.W	$0000
SetFromAdd_Quick:
	MOVEQ	#0,D2
	BRA.S	SetFromAdd_In
ReplayFXFromAdd:
	MOVEM.L	D2-D3,-(A7)
	BSR.W	PlayNoteGetSample
	MOVE.B	2(A2),D3
	DC.W	$49c3
	MOVE.L	12(A0),D2
	SUB.L	66(A0),D2
	DC.W	$4c03
	MOVE.L	D0,D4
	MOVEQ	#14,D3
	ASR.L	D3,D2
	ADD.L	D2,72(A0)
	MOVEM.L	(A7)+,D2-D3
	BRA.W	PlayLineNote_X
	DC.W	$0000
PlayLineNote_SetDsp:
	MOVEQ	#0,D0
	MOVE.B	3(A2),D0
	MOVE.L	D0,DSP_ECHO_LVL
	CLR.B	DSPREINITECHO+3
	MOVE.B	2(A2),D0
	TST.B	D0
	BEQ.S	PlayLineNote_SetDspErr
	CMP.L	MAXDSP_ECHO_LEN(PC),D0
	BHI.S	PlayLineNote_SetDspErr
	CMP.L	DSP_ECHO_LEN(PC),D0
	BEQ.S	PlayLineNote_PlayLNNoReEcho
	MOVE.B	#$ff,DSPREINITECHO+3
PlayLineNote_PlayLNNoReEcho:
	MOVE.L	D0,DSP_ECHO_LEN
	MOVE.B	1(A2),D0
	LEA	DSPFX_LIST(PC),A0
	DC.W	$2070
	DC.W	$0400
	MOVEQ	#1,D0
	MOVE.B	D0,DSPACTION_LIVE
	JSR	(A0)
	SWAP	D0
	MOVE.B	D0,DSPACTION_LIVE
	DC.W	$4a3a
	ADDQ.L	#7,A7
	BEQ.W	PlayLineNote_X
	BSR.W	InitCalcBufferInfo
	BRA.W	PlayLineNote_X
	DC.W	$0000
PlayLineNote_SetDspErr:
	BSR.W	WarnFlash
	BRA.W	PlayLineNote_X
PlayLineNote_SetDelay:
	MOVEQ	#0,D0
	MOVE.B	3(A2),D0
	MOVE.W	D0,LAB_118E
	MOVE.B	2(A2),D0
	MOVE.W	D0,DELAYINFO
	BSR.W	ValidateDelay
	MOVE.B	1(A2),D0
	LEA	DSPDELAY_LIST(PC),A0
	DC.W	$2070
	DC.W	$0400
	MOVEQ	#1,D0
	MOVE.B	D0,DSPACTION_LIVE
	JSR	(A0)
	SWAP	D0
	MOVE.B	D0,DSPACTION_LIVE
	BRA.W	PlayLineNote_X
Play_FxAddPitch:
	BSR.W	PlayNoteGetSample
	MOVE.B	2(A2),D3
	DC.W	$49c3
	MOVE.L	8(A0),D0
	MOVEQ	#10,D2
	LSR.L	D2,D0
	DC.W	$4c03
	DC.W	$0800
	ADD.L	D0,8(A0)
	BRA.W	PlayLineNote_X
	DC.W	$0000
PlayCV4:
	MOVE.B	2(A2),D3
	EXT.W	D3
	MOVEQ	#0,D4
	MOVE.B	3(A2),D4
	MULS	#$0100,D3
	BSR.W	PlayNoteGetSample
	MOVE.W	D3,128(A0)
	MOVE.W	D3,384(A0)
	CMPI.W	#$0080,D4
	BEQ.W	PlayLineNote_X
	CMPI.W	#$0080,D4
	BLT.S	LAB_0DE1
	MOVE.W	#$00ff,D5
	SUB.W	D4,D5
	MULS	D5,D3
	DIVS	#$0080,D3
	MOVE.W	D3,128(A0)
	BRA.W	PlayLineNote_X
LAB_0DE1:
	MULS	D4,D3
	DIVS	#$0080,D3
	MOVE.W	D3,384(A0)
	BRA.W	PlayLineNote_X
PNoteCV:
	MOVEQ	#0,D3
	MOVE.B	1(A2),D3
	CMPI.B	#$04,D3
	BHI.W	PlayLineNote_VError
	LEA	PlayCVList(PC),A0
	DC.W	$2070
	MOVE.W	D0,D2
	JMP	(A0)
PlayCV0:
	MOVE.B	2(A2),D3
	EXT.W	D3
	MULS	#$0100,D3
	BSR.W	PlayNoteGetSample
	MOVE.W	D3,128(A0)
	BRA.W	PlayLineNote_X
PlayCV1:
	BSR.W	WarnFlash
	BRA.W	PlayLineNote_X
PlayCV2:
	BSR.W	WarnFlash
	BRA.W	PlayLineNote_X
	DC.W	$0000
PNoteCVAdd:
	MOVEQ	#0,D3
	MOVE.B	1(A2),D3
	LSL.W	#4,D3
	MOVE.B	3(A2),D2
	OR.B	D2,D3
	LSL.W	#4,D3
	MOVE.B	2(A2),D2
	OR.B	D2,D3
	BRA.W	PlayLineNote_X
	DC.W	$0000
Play_FxAddHalvTone:
	MOVE.B	2(A2),D3
	BSR.W	PlayNoteGetSample
	LEA	48(A0),A2
	ADD.B	D3,1(A2)
	BSR.W	PlayNoteGetInstr
	BSR.W	PlayNotePitch
	BRA.W	PlayLineNote_X
Play_FxAddVol:
	BSR.W	PlayNoteGetSample
	MOVE.B	2(A2),D3
	EXT.W	D3
	ASL.W	#5,D3
	MOVE.W	20(A0),D0
	ADD.W	D3,D0
	CMPI.W	#$0100,D0
	BLT.S	PlayLNVAdd_MinVol
	CMPI.W	#$6400,D0
	BGT.W	PlayLineNote_X
	MOVE.W	D0,20(A0)
	BRA.W	PlayLineNote_X
PlayLNVAdd_MinVol:
	MOVE.W	#$0100,20(A0)
	BRA.W	PlayLineNote_X
	DC.W	$0000
PlayNotePSLIDETO:
	BSR.W	PlayNoteGetInstr
	BSR.W	PlayNoteGetSample
	MOVE.L	8(A0),D7
	BSR.W	PlayNotePitch
	MOVE.L	8(A0),98(A0)
	MOVE.L	D7,8(A0)
	MOVEQ	#0,D3
	MOVE.B	2(A2),D3
	MOVE.W	D3,102(A0)
	TST.W	D3
	BNE.W	PlayLineNote_X
	CLR.L	98(A0)
	BRA.W	PlayLineNote_X
	MOVE.L	8(A0),D0
	BSR.W	PlayNotePitch
	MOVE.L	8(A0),98(A0)
	LSR.L	#1,D0
	MOVE.L	D0,8(A0)
	MOVEQ	#0,D3
	MOVE.B	2(A2),D3
	MOVE.W	D3,102(A0)
	BRA.W	PlayLineNote_X
PlayNoteRETRIG:
	BSR.W	PlayNoteGetSample
	MOVEQ	#0,D3
	MOVE.B	3(A2),D3
	ADDQ.W	#1,D3
	MOVE.W	D3,112(A0)
	MOVE.W	D3,114(A0)
	MOVE.B	2(A2),D3
	ADDQ.W	#1,D3
	MOVE.W	D3,110(A0)
	BRA.W	PlayLineNote_X
	DC.W	$0000
PlayNoteShEmphasis:
	BSR.W	PlayNoteGetSample
	MOVE.B	2(A2),104(A0)
	MOVEQ	#0,D3
	MOVE.B	3(A2),D3
	MOVE.W	D3,106(A0)
	MOVE.B	1(A2),D3
	MOVE.W	D3,108(A0)
	BRA.W	PlayLineNote_X
ReplayFXStartPitch:
	BSR.W	PlayNoteGetInstr
	BSR.W	PlayNoteGetSample
	BSR.W	PlayNotePitch
	BSR.W	PlayNoteInstr
	MOVEQ	#0,D3
	MOVE.B	2(A2),D3
	BRA.S	LineNote_ReplayFrom
ReplayFXStartSample:
	BSR.W	PlayNoteGetInstr
	BSR.W	PlayNoteGetSample
	CMPI.B	#$ff,1(A2)
	BEQ.S	ReplayFXStartSample_NoI
	BSR.W	PlayNoteInstr
ReplayFXStartSample_NoI:
	MOVEQ	#0,D3
	MOVE.B	2(A2),D3
LineNote_ReplayFrom:
	TST.W	88(A0)
	BEQ.S	LineNote_ReplayFromNoVib
	MOVE.W	92(A0),D0
	MOVEA.L	SaVibratoTab_PTR+2(PC),A1
	LSR.W	#1,D0
	DC.W	$3031
	DC.W	$0200
	ADDI.W	#$007f,D0
	MULU	88(A0),D0
	LSR.L	#8,D0
	MULU	D3,D0
	LSR.L	#8,D0
	SUB.W	D0,D3
	BPL.S	LineNote_ReplayFromNoVib
	MOVEQ	#0,D3
LineNote_ReplayFromNoVib:
	MOVE.L	12(A0),D2
	MOVE.L	66(A0),D1
	SUB.L	D1,D2
	LSR.L	#8,D2
	MULU	D3,D2
	ADD.L	D2,D1
	BCLR	#0,D1
	MOVE.L	D1,(A0)
	MOVE.L	D1,116(A0)
	MOVE.L	72(A0),D4
	MOVE.L	12(A0),D2
	MOVE.L	66(A0),D1
	SUB.L	D1,D2
	LSR.L	#8,D2
	MULU	D3,D2
	ADD.L	D2,D4
	TST.L	D4
	BPL.S	LineNote_ReplayFrom_BGNOK
	MOVE.L	D2,D4
	NEG.L	D4
	MOVE.L	D4,72(A0)
	MOVEQ	#0,D4
LineNote_ReplayFrom_BGNOK:
	ADD.L	D4,D1
	BCLR	#0,D1
	MOVE.L	D1,(A0)
	MOVE.L	D1,116(A0)
	CLR.B	64(A0)
	MOVE.W	#$0001,16(A0)
	MOVE.B	#$ff,46(A0)
	CLR.L	4(A0)
	BRA.W	PlayLineNote_X
	DC.W	$0000
PlayLineNote_DspOn:
	BRA.W	PlayLineNote_X
PlayLineNote_DspOff:
	BRA.W	PlayLineNote_X
PlayLineNote_Vibrato:
	BSR.W	PlayNoteGetSample
	MOVE.B	2(A2),77(A0)
	MOVE.B	3(A2),79(A0)
	TST.W	2(A2)
	BNE.W	PlayLineNote_X
	CLR.W	80(A0)
	BRA.W	PlayLineNote_X
PlayLineNote_Tremolo:
	BSR.W	PlayNoteGetSample
	MOVE.B	2(A2),83(A0)
	MOVE.B	3(A2),85(A0)
	TST.W	2(A2)
	BNE.W	PlayLineNote_X
	CLR.W	86(A0)
	BRA.W	PlayLineNote_X
PlayLineNote_SampleVib:
	BSR.W	PlayNoteGetSample
	MOVE.B	2(A2),89(A0)
	MOVE.B	3(A2),91(A0)
	TST.W	2(A2)
	BNE.W	PlayLineNote_X
	CLR.W	92(A0)
	CLR.W	88(A0)
	BRA.W	PlayLineNote_X
InitSong:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	UpdateSongSeqPtr
	MOVE.L	Actual_FREQDEF(PC),28(A0)
	MOVE.W	#$0200,(A0)
	MOVEA.L	42(A0),A2
	MOVE.W	2(A2),2(A0)
	MOVE.W	14(A0),16(A0)
	MOVEA.L	4(A0),A1
	MOVE.W	18(A0),D2
	MULU	#$0004,D2
	MOVE.W	D2,34(A0)
	MOVE.W	8(A2),SequenzTune
	MOVE.W	(A2),D2
	MULU	#$0020,D2
	ADDA.L	D2,A1
	MOVE.L	A1,8(A0)
	MOVE.W	(A0),D7
	SUBQ.W	#1,D7
	MOVEA.L	4(A0),A5
	MOVE.W	14(A1),14(A0)
InitSong_L:
	MOVEA.L	A5,A0
	BSR.W	SetPatHeadPTR
	MOVEA.L	(A5),A3
	CLR.W	12(A3)
	MOVE.W	4(A5),6(A5)
	MOVEA.L	(A5),A4
	LEA	32(A5),A5
	DBF	D7,InitSong_L
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
GetPlayedPosSeq:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVEQ	#0,D7
	MOVEQ	#0,D6
	LEA	Test_SONG(PC),A1
	MOVE.W	46(A1),D6
	MOVE.L	D6,D0
	MULU	#$0010,D0
	MOVEA.L	38(A1),A0
	LEA	0(A0,D0.W),A0
	BRA.S	GetPlayedPos_L
GetPlayedPos:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVEQ	#0,D7
	MOVEQ	#0,D6
	LEA	Test_SONG(PC),A1
	MOVE.W	46(A1),D0
	MULU	#$0010,D0
	MOVEA.L	38(A1),A0
GetPlayedPos_L:
	TST.W	4(A0)
	BEQ.S	GetPlayedPos_Next
	CMPI.W	#$0001,6(A0)
	BEQ.S	GetPlayedPos_Next
	CMPI.W	#$ffff,6(A0)
	BEQ.S	GetPlayedPos_End
	TST.W	2(A0)
	BEQ.S	GetPlayedPos_Next
	MOVEQ	#0,D5
	MOVE.W	2(A0),D5
	ADD.L	D5,D7
GetPlayedPos_Next:
	LEA	16(A0),A0
	ADDQ.W	#1,D6
	CMPI.W	#$0040,D6
	BCS.S	GetPlayedPos_L
GetPlayedPos_End:
	MOVE.L	D7,D0
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
UpdateSongSeqPtr:
	MOVEM.L	D0/A0-A1,-(A7)
	LEA	Test_SONG(PC),A1
	MOVE.W	46(A1),D0
	MULU	#$0010,D0
	MOVEA.L	38(A1),A0
	LEA	0(A0,D0.W),A0
	MOVE.L	A0,42(A1)
	MOVE.W	8(A0),SequenzTune
	MOVEM.L	(A7)+,D0/A0-A1
	RTS
	DC.W	$0000
ReInitSong:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	UpdateSongSeqPtr
	MOVEA.L	42(A0),A2
	MOVE.W	2(A2),2(A0)
	MOVE.W	18(A0),D2
	MULU	#$0004,D2
	MOVE.W	D2,34(A0)
	MOVE.W	8(A2),SequenzTune
	MOVE.W	(A2),D2
	MULU	#$0020,D2
	MOVEA.L	4(A0),A1
	LEA	0(A1,D2.L),A1
	MOVE.L	A1,8(A0)
	MOVE.W	14(A1),14(A0)
	MOVE.W	14(A1),16(A0)
	MOVE.W	(A0),D7
	SUBQ.W	#1,D7
	MOVEA.L	4(A0),A5
	MOVE.L	#$000001ff,D7
ReInitSong_L:
	MOVEA.L	A5,A0
	BSR.W	SetPatHeadPTR
	MOVEA.L	(A5),A3
	CLR.W	12(A3)
	MOVE.W	4(A5),6(A5)
	MOVEA.L	(A5),A4
	LEA	32(A5),A5
	DBF	D7,ReInitSong_L
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ReInitSongSeq:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	UpdateSongSeqPtr
	MOVEA.L	42(A0),A2
	MOVE.W	2(A2),2(A0)
	MOVE.W	18(A0),D2
	MULU	#$0004,D2
	MOVE.W	D2,34(A0)
	MOVE.W	8(A2),SequenzTune
	MOVE.W	(A2),D2
	MULU	#$0020,D2
	MOVEA.L	4(A0),A1
	LEA	0(A1,D2.L),A1
	MOVE.L	A1,8(A0)
	MOVE.W	14(A1),14(A0)
	MOVE.W	14(A1),16(A0)
	MOVE.W	(A0),D7
	SUBQ.W	#1,D7
	MOVEA.L	4(A0),A5
	MOVE.L	#$000001ff,D7
ReInitSongSeq_L:
	MOVEA.L	A5,A0
	MOVEA.L	(A5),A3
	CLR.W	12(A3)
	MOVE.W	4(A5),6(A5)
	MOVEA.L	(A5),A4
	LEA	32(A5),A5
	DBF	D7,ReInitSongSeq_L
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PlayRendSong:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetPlayedPos
	TST.L	D0
	BEQ.S	PlayRendSong_X
	NOT.B	SOUNDRENDER+1
	BSR.S	PlayActualSong
	NOT.B	SOUNDRENDER+1
PlayRendSong_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
InitPSong:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_SONG(PC),A0
	JSR	MoveFirstPlayedSeq
	BSR.W	InitSong
	JSR	MoveFirstPosition
	BSR.W	SetUpdatePos
	BSR.W	ResetGotoNextLine
	JSR	ResetRelMasterTime
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PlayActualSong:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetPlayedPos
	TST.L	D0
	BEQ.S	LAB_0E08
	MOVE.L	#PlaySo_TXT+3,AssText_TXT
	JSR	PrintAssTextF
	JSR	BlockRangeOff
	BSR.W	ResetChannels
	LEA	Test_SONG(PC),A0
	JSR	MoveFirstPlayedSeq
	BSR.W	InitSong
	JSR	MoveFirstPosition
	BSR.W	SetUpdatePos
	BSR.W	ResetGotoNextLine
	JSR	ResetRelMasterTime
	DC.W	$4a3a
	DC.W	$0733
	BNE.S	PlayASRender
	MOVE.W	#$ffff,PLAYER_STATUS+2
	BSR.W	ShowSongInfo
	BSR.W	ShowSongInfo2
	JSR	DrawSequence
LAB_0E08:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PlayASRender:
	DC.W	$42b9
	DC.L	RIlastvalue+1
	JSR	GetAssistData
	JSR	NGRNrm1DrMd
	MOVE.L	#PlayRen_TXT,AssText_TXT
	JSR	PrintAssTextF
	LEA	Rend_MATCH+1(PC),A0
	BSR.W	SetFileRequestPat
	MOVEQ	#5,D0
	BSR.W	GetPathBuf
	LEA	Rend_TXT(PC),A0
	BSR.W	SimpleFileRequest
	BSR.W	SavePathBuf
	TST.W	D0
	BEQ.W	LAB_0E0F
	MOVEA.L	FinalFileNameRT_PTR(PC),A0
	MOVE.W	#$ffff,PLAYER_STATUS+2
	BSR.W	SetRenderMode
	CLR.L	RendLen
	MOVE.L	#$000003ee,D0
	BSR.W	EasyDOpenFFN
	TST.L	D0
	BEQ.W	LAB_0E11
	BSR.W	PrintRenderInfo
	CLR.B	Rend_EXIT
	CLR.L	RendLen
	JSR	ScrollAss
	BSR.W	WritePreRend
	CLR.B	Render_SILENCE+1
	MOVE.B	#$ff,EasyDWBuf_STATUS+2
	BSR.W	EasyDClrBLen
	MOVEM.L	A0,-(A7)
	LEA	RenderBgnStatus(PC),A0
	JSR	NGSetStatusText
	MOVEA.L	(A7)+,A0
LAB_0E0A:
	JSR	CheckResidentMem
	JSR	CheckBufferMem
	JSR	ProcessAllNGWinMsg
	DC.W	$4a3a
	ADDI.W	#$6656,(A0)+
	LEA	Test_SONG(PC),A0
	BSR.W	PlaySong
	BSR.W	CheckForcedUpdate
	BSR.W	ChangeBuffers
	BSR.W	CopyVoiceBuffer
	DC.W	$4a3a
	DC.W	$603d
	BEQ.S	LAB_0E0B
	MOVE.L	LAB_0E62(PC),D0
	MOVEA.L	RenderBuffer_PTR(PC),A0
	ADD.L	D0,RendLen
	BSR.W	EasyDWriteBuf
	TST.L	D0
	BEQ.W	LAB_0E11
LAB_0E0B:
	JSR	ProcessAutoUpdate
	MOVE.L	RendLen(PC),D0
	MOVE.B	#$ff,AssistScroll
	JSR	PrintRenderInfoSize
	CLR.B	AssistScroll
LAB_0E0C:
	BSR.W	LMButton
	BEQ.S	LAB_0E0A
	BSR.W	EasyDFlushBuf
LAB_0E0D:
	BSR.W	EasyDGetBLen
	JSR	WriteAssDecLong
	BSR.W	WritePostRend
LAB_0E0F:
	BSR.W	EasyDClose
	CLR.W	PLAYER_STATUS+2
	MOVEM.L	A0,-(A7)
	LEA	RenderEnd0(PC),A0
	JSR	NGSetStatusText
	MOVEA.L	(A7)+,A0
	BSR.W	Wait5Secs
	MOVE.L	#$00000001,OverSample3
LAB_0E10:
	JSR	DrawOS3Status
	MOVE.L	#RenderDone_TXT,AssText_TXT
	JSR	PrintAssTextF
	BSR.W	ResetChannels
	JSR	SetStereo14Mode
	JSR	SetResync
	MOVEM.L	A0,-(A7)
	LEA	RenderEnd1(PC),A0
	JSR	NGSetStatusText
	MOVEA.L	(A7)+,A0
	MOVE.L	#$53593443,D0
	MOVEQ	#0,D2
	JSR	NGSetPopGadID
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_0E11:
	MOVE.L	#RendERR_TXT,AssText_TXT
	JSR	PrintAssTextF
	BRA.W	LAB_0E0D
	DC.W	$0000
WritePreRend:
	MOVEQ	#0,D0
	MOVE.B	RenderF(PC),D0
	LEA	RenderPre_TAB(PC),A0
	BSR.W	ProcTabLongtoLong
	MOVEA.L	D0,A0
	TST.L	D0
	BMI.S	NoPreRend
	JSR	(A0)
NoPreRend:
	RTS
WritePostRend:
	MOVEA.L	PostRend_JSR(PC),A0
	JSR	(A0)
	RTS
PostRend_JSR:
LAB_0E15:
	DC.L	RendNil
RendWConv_JSR:
	DC.L	RendNil
RendConv_JSR:
	DC.L	RendNil
RenderPre_TAB:
	ORI.B	#$00,D0
	DC.L	RendPre0
	ORI.B	#$01,D0
	DC.L	RendPre1
	ORI.B	#$02,D0
	DC.L	RendPre2
	ORI.B	#$03,D0
	DC.L	RendPre3
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
RendNil:
	RTS
RendPre0:
LAB_0E1B:
	MOVE.L	#RendNil,PostRend_JSR
	MOVE.L	#RendNil,RendConv_JSR
	MOVE.L	#RendNil,RendWConv_JSR
	RTS
RendPre1:
LAB_0E1D:
	MOVE.L	#RendPost1,PostRend_JSR
	MOVE.L	#RendNil,RendWConv_JSR
	MOVE.L	#RendNil,RendConv_JSR
	LEA	LAB_1300(PC),A0
	BSR.W	GetSystemFreq
	MOVE.L	D0,20(A0)
	CLR.L	12(A0)
	DC.W	$0c3a
	DC.W	$0001
	SUBI.L	#$6708217c,D1
	ORI.B	#$00,D1
	DC.W	$000c
MaestroH_Stereo:
	LEA	RenderMaestroHead_ADR(PC),A0
	MOVE.L	(A0)+,D0
	BSR.W	EasyDWrite
	RTS
RendPre2:
LAB_0E20:
	MOVE.L	#RendPost2,PostRend_JSR
	MOVE.L	#RendNil,RendWConv_JSR
LAB_0E22:
	MOVE.L	#RendNil,RendConv_JSR
	LEA	LAB_12F6(PC),A0
LAB_0E23:
	BSR.W	GetSystemFreq
	MOVEQ	#0,D0
	MOVE.B	RenderMode(PC),D0
	MOVEQ	#1,D1
	CMPI.B	#$08,D0
	BEQ.S	RendP2_M1
	MOVEQ	#2,D1
RendP2_M1:
	MOVE.B	D0,34(A0)
	MOVE.W	#$0100,D0
	DC.W	$4a3a
	DC.W	$0429
	BEQ.S	RendP2_M2
	MOVE.W	#$0200,D0
	LSL.W	#1,D1
RendP2_M2:
	MOVE.W	D0,22(A0)
	MOVE.B	D1,32(A0)
	LEA	RenderWaveHead_ADR(PC),A0
	MOVE.L	(A0)+,D0
LAB_0E26:
	BSR.W	EasyDWrite
	RTS
RendPGetLen:
	BSR.W	EasyDGetBLen
	RTS
RendPost0:
	RTS
RendPost1:
	BSR.S	RendPGetLen
	MOVEQ	#0,D1
	MOVE.W	RendSampDivLn(PC),D1
	ADD.W	LAB_0E5A+2(PC),D1
	LSR.L	D1,D0
	MOVEQ	#16,D1
	BSR.W	EasyDWriteLong
	RTS
RendPost2:
	BSR.S	RendPGetLen
	MOVE.L	D0,D2
	BSR.W	LongSwapEndian
	MOVEQ	#40,D1
	BSR.W	EasyDWriteLong
	MOVE.L	D2,D0
	ADDI.L	#$00000024,D0
	BSR.W	LongSwapEndian
	MOVEQ	#4,D1
	BSR.W	EasyDWriteLong
	RTS
RendPre3:
	MOVE.L	#RendPost3,PostRend_JSR
	MOVE.L	#RendNil,RendWConv_JSR
	MOVE.L	#RendNil,RendConv_JSR
	LEA	RenderAiffHead_ADR(PC),A0
	MOVEQ	#46,D0
	BSR.W	EasyDWrite
	RTS
RendPost3:
	BSR.S	RendPGetLen
	MOVEQ	#42,D1
	BSR.W	EasyDWriteLong
	BSR.S	RendPGetLen
	LSR.L	#2,D0
	MOVEQ	#22,D1
	BSR.W	EasyDWriteLong
	BSR.S	RendPGetLen
	ADDI.L	#$00000026,D0
	MOVEQ	#4,D1
	BSR.W	EasyDWriteLong
	RTS
RenderAiffHead_ADR:
	DC.W	$464f
	ADDQ.W	#1,A5
	DC.W	$0006
	BLT.S	LAB_0E32+2
	DC.W	$4149
LAB_0E2E:
	NOT.W	D6
	DC.W	$434f
	DC.W	$4d4d
	ORI.B	#$12,D0
	ORI.B	#$06,D2
	MOVE.W	(A4)+,D7
	DC.W	$0010
	DC.W	$400e
	DC.W	$ac44
	ORI.B	#$00,D0
	DC.W	$0000
	SUBQ.W	#1,(A3)
	TRAP	#4
	DC.W	$0006
	BMI.S	LAB_0E2E
RenderAiffHead_ADRE:
	ORI.B	#$01,D0
PrintRenderInfo:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	RenderFormatDrawBools
	JSR	GetAssistData
	DC.W	$4a89
	BEQ.S	LAB_0E34
	JSR	DrawOS3Status
	MOVEQ	#0,D0
	MOVE.B	RenderF(PC),D0
	LEA	RenderF_TAB+2(PC),A0
	BSR.W	ProcTabLongtoLong
	MOVEA.L	D0,A0
	TST.L	D0
	BMI.S	LAB_0E31
	JSR	PrintAssText
LAB_0E31:
	MOVEQ	#0,D0
LAB_0E32:
	MOVE.W	RenderMode(PC),D0
	LEA	RendMdTxtList(PC),A0
	BSR.W	ProcTabLongtoLong
	MOVEA.L	D0,A0
	TST.L	D0
	BMI.S	LAB_0E34
	JSR	PrintAssText
	MOVEQ	#0,D1
	DC.W	$4a3a
	BTST	D1,D0
	BEQ.S	LAB_0E33
	MOVEQ	#-1,D1
	LEA	RendDos(PC),A0
	JSR	PrintAssText
LAB_0E33:
	MOVE.L	#$53593435,D0
	JSR	NGSetGadBool
LAB_0E34:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
RenderFormatDrawBools:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#0,D3
	MOVE.B	RenderF(PC),D3
	LEA	RendMdTypeList(PC),A0
LAB_0E36:
	MOVE.L	(A0)+,D2
	MOVE.L	(A0)+,D0
	MOVEQ	#0,D1
	CMP.B	D3,D2
	BNE.S	LAB_0E37
	MOVEQ	#-1,D1
LAB_0E37:
	JSR	NGSetGadBool
	TST.L	(A0)
	BPL.S	LAB_0E36
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
RenderCheckSilence:
	DC.W	$4a3a
	SGE	26370(A1)
	RTS
	MOVEM.L	D0/A1,-(A7)
	SUBQ.W	#1,D0
LAB_0E39:
	TST.L	(A1)+
	BNE.S	LAB_0E3B
	DBF	D0,LAB_0E39
LAB_0E3A:
	MOVEM.L	(A7)+,D0/A1
	RTS
LAB_0E3B:
	MOVE.B	#$ff,Render_SILENCE+1
	BRA.S	LAB_0E3A
CopyBackRender:
	BSR.W	DoOversample3
	MOVEM.L	A0,-(A7)
	MOVE.L	D0,LAB_0E62
	BSR.S	RenderCheckSilence
	DC.W	$0c3a
	DC.W	$0010
	DC.W	$0276
	BEQ.S	CopyBackRend16
	ANDI.L	#$0000ffff,D0
	DC.W	$0c3a
	DC.W	$0001
	ANDI.W	#$671c,8314(A1)
	DC.W	$5a3a
	SUBQ.W	#1,D0
	BSR.W	GetCopyBackShift
LAB_0E3D:
	MOVE.L	(A1)+,D5
	ASR.W	D7,D5
	BSR.W	ByteToDos
	MOVE.B	D5,(A0)+
	DBF	D0,LAB_0E3D
	MOVEA.L	(A7)+,A0
	RTS
CopyBackRendSte:
	MOVE.L	D0,D5
	LSL.L	#1,D5
	MOVE.L	D5,LAB_0E62
	MOVEA.L	RenderBuffer_PTR(PC),A0
	SUBQ.W	#1,D0
	BSR.W	GetCopyBackShift
LAB_0E3F:
	MOVE.L	(A1)+,D5
	ASR.W	D7,D5
	BSR.W	ByteToDos
	MOVE.B	D5,(A0)+
	SWAP	D5
	ASR.W	D7,D5
	BSR.W	ByteToDos
	MOVE.B	D5,(A0)+
	DBF	D0,LAB_0E3F
	MOVEA.L	(A7)+,A0
	RTS
CopyBackRend16:
	ANDI.L	#$0000ffff,D0
	MOVE.L	D0,D5
	LSL.L	#1,D5
	DC.W	$0c3a
	DC.W	$0001
	DC.W	$020b
	BEQ.S	CopyBackRend16Ste
	MOVE.L	D5,LAB_0E62
	MOVEA.L	RenderBuffer_PTR(PC),A0
	SUBQ.W	#1,D0
	MOVEM.L	D0/A0,-(A7)
LAB_0E41:
	MOVE.L	(A1)+,D5
	MOVE.L	D5,(A0)+
	DBF	D0,LAB_0E41
	MOVEM.L	(A7)+,D0/A0
	MOVEA.L	A0,A1
LAB_0E42:
	MOVE.L	(A1)+,D5
	BSR.S	WordToDos
	MOVE.W	D5,(A0)+
	DBF	D0,LAB_0E42
	MOVEA.L	(A7)+,A0
	RTS
	DC.W	$0000
CopyBackRend16Ste:
	LSL.L	#1,D5
	MOVE.L	D5,LAB_0E62
	MOVEA.L	RenderBuffer_PTR(PC),A0
	SUBQ.W	#1,D0
LAB_0E44:
	MOVE.L	(A1)+,D5
	BSR.S	WordToDos
	SWAP	D5
	BSR.S	WordToDos
	SWAP	D5
	MOVE.L	D5,(A0)+
	DBF	D0,LAB_0E44
	MOVEA.L	(A7)+,A0
	RTS
RendConvMaud16:
	RTS
RendConvMaud8:
	ADDI.B	#$80,D5
	RTS
WordSwapEndian:
	MOVEM.L	D1,-(A7)
	MOVE.B	D0,D1
	LSR.W	#8,D0
	LSL.W	#8,D1
	OR.W	D1,D0
	MOVEM.L	(A7)+,D1
	RTS
LongSwapEndian:
	BSR.S	WordSwapEndian
	SWAP	D0
	BSR.S	WordSwapEndian
	RTS
WordToDos:
	MOVEM.L	A0,-(A7)
	MOVEA.L	RendWConv_JSR(PC),A0
	JSR	(A0)
	MOVEA.L	(A7)+,A0
	DC.W	$4a3a
	MOVEP	D0,26114(A0)
	RTS
WordToDosDo:
	MOVE.W	D5,WordConv
	MOVE.B	LAB_0E4D+1(PC),D5
	LSL.W	#8,D5
	MOVE.B	WordConv(PC),D5
	RTS
	DC.W	$0000
ByteToDos:
	MOVEM.L	A0,-(A7)
	MOVEA.L	RendConv_JSR(PC),A0
	JSR	(A0)
	MOVEA.L	(A7)+,A0
	DC.W	$4a3a
	BCHG	D0,-(A0)
	BNE.S	ByteToDosDo
	RTS
ByteToDosDo:
	ADDI.B	#$80,D5
	RTS
WordConv:
LAB_0E4D:
	ORI.B	#$00,D0
	DC.W	$0000
RendFRaw:
	CLR.B	RenderF
	BSR.W	PrintRenderInfo
	RTS
RendFMaestro:
	MOVE.B	#$01,RenderF
	CLR.B	LAB_0E5E
	BSR.S	Rend16
	BSR.W	PrintRenderInfo
	RTS
RendFWave:
	MOVE.B	#$02,RenderF
	MOVE.B	#$ff,LAB_0E5E
	BSR.W	PrintRenderInfo
	RTS
RendFMaud:
	MOVE.B	#$03,RenderF
	CLR.B	LAB_0E5E
	BSR.W	PrintRenderInfo
	RTS
RendF:
	CLR.B	RenderF
	BSR.W	PrintRenderInfo
	RTS
InitRenderPrefs:
	BSR.S	Rend16
	BSR.W	RendSte
	BSR.S	RendFWave
	RTS
	DC.W	$0000
Rend16:
	MOVEM.L	D0,-(A7)
	MOVE.B	#$10,RenderMode
	MOVE.W	#$0001,RendSampDivLn
	BSR.W	PrintRenderInfo
	MOVE.L	#$53593432,D0
	JSR	NGSetGadBoolOn
	MOVE.L	#$53593431,D0
	JSR	NGSetGadBoolOff
	MOVEM.L	(A7)+,D0
	RTS
	DC.W	$0000
Rend8B:
	MOVEM.L	D0,-(A7)
	MOVE.B	#$08,RenderMode
	CLR.W	RendSampDivLn
	BSR.W	PrintRenderInfo
	MOVE.L	#$53593432,D0
	JSR	NGSetGadBoolOff
	MOVE.L	#$53593431,D0
	JSR	NGSetGadBoolOn
	MOVEM.L	(A7)+,D0
	RTS
RendMo:
	CLR.B	LAB_0E5C+1
	CLR.W	LAB_0E5A+2
	BSR.W	PrintRenderInfo
	MOVEM.L	D0,-(A7)
	MOVE.L	#$53593434,D0
	JSR	NGSetGadBoolOff
	MOVE.L	#$53593433,D0
	JSR	NGSetGadBoolOn
	MOVEM.L	(A7)+,D0
	RTS
	DC.W	$0000
RendSte:
	MOVE.B	#$01,LAB_0E5C+1
	MOVE.W	#$0001,LAB_0E5A+2
	BSR.W	PrintRenderInfo
	MOVEM.L	D0,-(A7)
	MOVE.L	#$53593434,D0
	JSR	NGSetGadBoolOn
	MOVE.L	#$53593433,D0
	JSR	NGSetGadBoolOff
	MOVEM.L	(A7)+,D0
	RTS
	RTS
RendMSDos:
	NOT.B	LAB_0E5E
	BSR.W	PrintRenderInfo
	RTS
RendSampDivLn:
LAB_0E5A:
	ORI.B	#$01,D0
RenderMode:
LAB_0E5C:
	MOVE.B	D1,D0
LAB_0E5E:
	DC.W	$0000
SetRenderMode:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.W	OverSamp_FLAG
	JSR	RecalcFreqSystem
	MOVE.L	#CopyBackRender,COPYBACK_JR
	MOVE.W	#$00ff,ADKCON
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SmoothNumb:
	ORI.B	#$00,D0
	ORI.B	#$01,D0
RendLen:
	ORI.B	#$00,D0
LAB_0E62:
	ORI.B	#$00,D0
Rend_EXIT:
SOUNDRENDER:
	ORI.B	#$00,D0
SmoothStSample:
	DC.W	$4aba
	DC.W	$ffea
	BNE.S	LAB_0E66
	RTS
LAB_0E66:
	MOVEM.L	D7,-(A7)
	MOVE.L	SmoothNumb(PC),D7
	SUBQ.L	#1,D7
LAB_0E67:
	MOVEM.L	A1,-(A7)
	BSR.S	LAB_0E68
	ADDQ.L	#2,A1
	BSR.S	LAB_0E68
	MOVEA.L	(A7)+,A1
	DBF	D7,LAB_0E67
	MOVEM.L	(A7)+,D7
	RTS
LAB_0E68:
	MOVEM.L	D0-D7/A0-A1,-(A7)
	SUBQ.W	#2,D0
LAB_0E69:
	ADDQ.L	#4,A1
	MOVE.W	(A1),D5
	CMP.W	4(A1),D5
	BEQ.S	LAB_0E6C
	DBF	D0,LAB_0E69
LAB_0E6A:
	MOVEM.L	(A7)+,D0-D7/A0-A1
	RTS
	DC.W	$0000
LAB_0E6B:
	TST.B	D0
	SUBQ.W	#1,D0
	BMI.S	LAB_0E6A
	BEQ.S	LAB_0E6A
	BRA.S	LAB_0E69
	DC.W	$0000
LAB_0E6C:
	MOVEA.L	A1,A0
LAB_0E6D:
	ADDQ.L	#4,A0
	CMP.W	(A0),D5
	DBNE	D0,LAB_0E6D
	MOVEQ	#0,D3
	MOVE.L	A0,D2
	SUB.L	A1,D2
	LSR.L	#2,D2
	TST.W	D0
	BEQ.S	LAB_0E6E
	CMPI.W	#$ffff,D0
	BEQ.S	LAB_0E6E
	MOVE.W	4(A0),D4
	SUB.W	D5,D4
	EXG	D4,D0
	BSR.W	MakeD0WPos
	EXG	D4,D0
	CMPI.W	#$0001,D4
	BLS.S	LAB_0E6E
	BSET	#1,D3
LAB_0E6E:
	MOVE.W	-4(A1),D4
	SUB.W	D5,D4
	EXG	D4,D0
	BSR.W	MakeD0WPos
	EXG	D4,D0
	CMPI.W	#$0001,D4
	BLS.S	LAB_0E6F
	BSET	#0,D3
LAB_0E6F:
	EXT.L	D5
	TST.B	D3
	BEQ.S	LAB_0E6B
	BTST	#0,D3
	BEQ.S	LAB_0E70
	MOVE.W	-4(A1),D4
	EXT.L	D4
	ADD.L	D5,D4
	ASR.L	#1,D4
	MOVE.W	D4,(A1)
LAB_0E70:
	BTST	#1,D3
	BEQ.S	LAB_0E6B
	MOVE.W	(A0),D4
	EXT.L	D4
	ADD.L	D5,D4
	ASR.L	#1,D4
	MOVE.W	D4,-4(A0)
	BRA.W	LAB_0E6B
	DC.W	$0000
ToogleSmooth:
	NOT.B	SmoothStatus
	RTS
PlayActualSeq:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetPlayedPosSeq
	TST.L	D0
	BEQ.S	PlayActualSeq_X
	MOVE.L	#PlaySe_TXT+1,AssText_TXT
	JSR	PrintAssTextF
	JSR	BlockRangeOff
	BSR.W	ResetChannels
	LEA	Test_SONG(PC),A0
	BSR.W	InitSong
	JSR	ResetRelTime
	JSR	ResetSequenz
	JSR	MoveFirstPosition
	BSR.W	SetUpdatePos
	BSR.W	ResetGotoNextLine
	MOVE.W	#$ffff,PLAYER_STATUS+2
PlayActualSeq_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
StopSong2:
	BSR.W	SpecEraseOldNote
	BSR.W	RedrawSpecFull
	JSR	ShowMainTitle
StopSong:
	DC.W	$4a3a
	DC.W	$fec1
	BNE.W	StopSongRender
	JSR	BlockRangeOn
LAB_0E76:
	MOVE.L	#Stop_TXT,AssText_TXT
	JSR	PrintAssTextF
LAB_0E77:
	JSR	CheckResidentMem
StopActualSong:
	CLR.W	PLAYER_STATUS+2
	BSR.W	StopAllChannels
	BSR.W	SpecEraseOldNote
	BSR.W	RedrawSpecFull
	RTS
StopSong3:
LAB_0E79:
	MOVE.L	#Stop_TXT,AssText_TXT
	JSR	PrintAssTextF
	JSR	CheckResidentMem
LAB_0E7B:
	CLR.W	PLAYER_STATUS+2
	BSR.W	SpecEraseOldNote
	BSR.W	RedrawSpecFull
	RTS
StopSong4:
	MOVE.L	#Stop2_TXT,AssText_TXT
	JSR	PrintAssTextF
	JSR	CheckResidentMem
	CLR.W	PLAYER_STATUS+2
LAB_0E7D:
	BSR.W	SpecEraseOldNote
	BSR.W	RedrawSpecFull
	RTS
RedrawSpectrum:
	BSR.W	SpecEraseOldNote
	BSR.W	RedrawSpec
	RTS
StopSongRender:
	MOVE.B	#$ff,Rend_EXIT
	RTS
	DC.W	$0000
PlayFromActualPos:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	BlockRangeOff
	BSR.W	StopAllChannels
	LEA	Test_SONG(PC),A0
	BSR.W	InitSong
LAB_0E81:
	JSR	ResetRelTime
	BSR.W	UpdatePatHeadPtrs
	LEA	Test_PATTED+2(PC),A2
	MOVE.W	114(A2),D0
	MOVEA.L	24(A2),A1
	MOVE.L	A1,8(A0)
	MOVE.W	14(A1),14(A0)
	MOVEA.L	42(A0),A2
	MOVE.W	2(A2),D1
	ADD.W	(A2),D1
	SUB.W	D0,D1
	BMI.S	LAB_0E82
	TST.W	D1
	BNE.S	LAB_0E84
LAB_0E82:
	MOVE.W	#$0200,D1
LAB_0E83:
	SUB.W	D0,D1
LAB_0E84:
	MOVE.W	D1,2(A0)
	BSR.W	SetUpdatePos
	BSR.W	ResetGotoNextLine
	MOVE.W	#$ffff,PLAYER_STATUS+2
	JSR	PatEdDrawTitle
	MOVEQ	#0,D0
	LEA	Test_PATTED+2(PC),A2
	MOVE.W	114(A2),D0
	MOVE.W	D0,D2
	LEA	DecWordSave,A0
	BSR.W	ConvertToDecWord
LAB_0E85:
	LEA	LAB_1566+1,A1
	LEA	LAB_0835+2,A0
	MOVE.B	(A0)+,(A1)+
	MOVE.B	(A0)+,(A1)+
	MOVE.B	(A0)+,(A1)+
	LEA	DecWordSave,A0
	MOVE.W	D1,D0
	BSR.W	ConvertToDecWord
	LEA	LAB_1568+1,A1
	LEA	LAB_0835+2,A0
	MOVE.B	(A0)+,(A1)+
	MOVE.B	(A0)+,(A1)+
	MOVE.B	(A0)+,(A1)+
	LEA	DecWordSave,A0
	MOVE.W	D1,D0
	ADD.W	D2,D0
LAB_0E86:
	SUBQ.W	#1,D0
	BSR.W	ConvertToDecWord
	LEA	LAB_1567,A1
	LEA	LAB_0835+2,A0
	MOVE.B	(A0)+,(A1)+
	MOVE.B	(A0)+,(A1)+
	MOVE.B	(A0)+,(A1)+
	MOVE.L	#PlayPo_TXT+1,AssText_TXT
	JSR	PrintAssTextF
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ForceAllTracksOff:
	MOVEM.L	D0/A0,-(A7)
	LEA	PlayTrackInfo+1,A0
	MOVE.W	CHANNEL_NUMB+2(PC),D0
	SUBQ.W	#1,D0
ForceAllTracksOff_L:
	CLR.B	(A0)+
	DBF	D0,ForceAllTracksOff_L
	MOVEM.L	(A7)+,D0/A0
	RTS
ForceAllTracksOn:
	MOVEM.L	D0/A0,-(A7)
	LEA	PlayTrackInfo+1,A0
	MOVE.W	CHANNEL_NUMB+2(PC),D0
	SUBQ.W	#1,D0
ForceAllTracksOn_L:
	MOVE.B	#$ff,(A0)+
	DBF	D0,ForceAllTracksOn_L
	MOVEM.L	(A7)+,D0/A0
	RTS
	DC.W	$0000
PlayActualPattern:
	MOVE.L	#PlayPa_TXT+1,AssText_TXT
	JSR	PrintAssTextF
	JSR	BlockRangeOff
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	SetUpdatePos
	BSR.W	ResetGotoNextLine
	LEA	Test_SONG(PC),A0
	JSR	ForcePlayOnePattern
	MOVE.W	#$ffff,PLAYER_STATUS+2
	JSR	PatEdDrawTitle
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ProcTabValuetoLong:
	MOVEM.L	D1-D2,-(A7)
ProcTabValuetoLong_L:
	MOVEM.L	(A0)+,D1-D2
	CMPI.L	#$ffffffff,D2
	BNE.S	ProcTabValuetoLong_N
	CMPI.L	#$ffffffff,D1
	BEQ.S	ProcTabValuetoLong_F
ProcTabValuetoLong_N:
	CMP.B	D1,D0
	BNE.S	ProcTabValuetoLong_L
ProcTabValuetoLong_F:
	MOVE.L	D2,D0
	MOVEM.L	(A7)+,D1-D2
	RTS
ProcTabLongtoLong:
	MOVEM.L	D1-D2,-(A7)
ProcTabLongtoLong_L:
	MOVEM.L	(A0)+,D1-D2
	CMPI.L	#$ffffffff,D2
	BNE.S	ProcTabLongtoLong_N
	CMPI.L	#$ffffffff,D1
	BEQ.S	ProcTabLongtoLong_F
ProcTabLongtoLong_N:
	CMP.L	D1,D0
	BNE.S	ProcTabLongtoLong_L
ProcTabLongtoLong_F:
	MOVE.L	D2,D0
	MOVEM.L	(A7)+,D1-D2
	RTS
ClearNote:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	CalcActNoteData
	MOVEA.L	8(A0),A1
	MOVE.B	#$ff,1(A1)
	CLR.B	3(A1)
	CLR.B	2(A1)
	CLR.B	(A1)
	JSR	PattEdMoveNextLine
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ToogleSoloMode:
LAB_0E95:
	NOT.B	SingleKeyboard
	RTS
SingleKeyboard:
	ORI.B	#$00,D0
ToogleSetNoteP:
	BCHG	#0,SetNote_PREFS
	RTS
ToogleSetNoteI:
	BCHG	#1,SetNote_PREFS
	RTS
ToogleSetNoteV:
	BCHG	#2,SetNote_PREFS
	RTS
	DC.W	$0000
SetNote:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.B	SetNote_PREFS,D7
	JSR	CalcActNoteData
	MOVEA.L	8(A0),A1
	BTST	#0,D7
	BNE.S	SetNote_NP
	MOVE.B	D0,1(A1)
SetNote_NP:
	BTST	#1,D7
	BNE.S	SetNote_NI
	MOVE.B	D1,3(A1)
SetNote_NI:
	BTST	#2,D7
	BNE.S	LAB_0EA0
LAB_0E9E:
	MOVE.W	KeyboardPunch,D2
	TST.W	D2
	BNE.S	LAB_0E9F
	MOVEQ	#100,D2
LAB_0E9F:
	MOVE.B	D2,2(A1)
LAB_0EA0:
	JSR	CopyLockedNotes
	JSR	PatEdDrawActLine
	DC.W	$0c7a
	DC.W	$ffff
	CHK.W	(A0)+,D6
	BNE.S	LAB_0EA1
	LEA	AutoUpdate_DrPos,A2
	CMPI.L	#$ffffffff,4(A2)
	BNE.S	LAB_0EA1
	LEA	AutoUpdate_NextLine,A2
	CMPI.L	#$ffffffff,4(A2)
	BEQ.S	SetNote_X
LAB_0EA1:
	JSR	PattEdMoveNextLines
SetNote_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
CheckNoteIsFX:
	MOVEQ	#0,D0
	CMPI.B	#$19,(A0)
	BHI.S	CheckNoteIsFX_X
	CMPI.B	#$01,(A0)
	BCS.S	CheckNoteIsFX_X
	MOVEQ	#-1,D0
CheckNoteIsFX_X:
	RTS
	DC.W	$0000
GetActNote:
	MOVEM.L	D0-D7/A1-A6,-(A7)
	JSR	GetActualPattEd
	JSR	CalcActNoteData
	MOVEA.L	8(A0),A0
	MOVEM.L	(A7)+,D0-D7/A1-A6
	RTS
	DC.W	$0000
PlayNote:
	MOVEM.L	D0/A0,-(A7)
	BSR.W	GetNoteFreq
	BSR.S	PlayFreq
	MOVEM.L	(A7)+,D0/A0
	RTS
PlayFreq:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_VOICEEXPANDER(PC),A5
	MOVEA.L	A0,A4
	BSR.W	GetFreeChannel
	DC.W	$4a3a
	DC.W	$ff0c
	BEQ.S	LAB_0EA9
	LEA	Test_VOICEEXPANDER(PC),A0
LAB_0EA8:
	MOVEA.L	6(A0),A0
LAB_0EA9:
	DC.W	$4a88
	BEQ.S	LAB_0EAB
	MOVEQ	#100,D3
	MOVE.W	KeyboardPunch,D3
	TST.W	D3
	BNE.S	LAB_0EAA
	MOVEQ	#1,D3
LAB_0EAA:
	BSR.W	StartSample
LAB_0EAB:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
TakeChannel:
	MOVEM.L	D1/A1,-(A7)
	LEA	Test_VOICEEXPANDER(PC),A1
	MOVE.W	2(A1),D1
	MULU	D0,D1
	MOVEA.L	6(A1),A0
	MOVEM.L	(A7)+,D1/A1
	RTS
StopAllChannels:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	CHANNEL_NUMB+2(PC),D7
	SUBQ.W	#1,D7
	LEA	Test_VOICEEXPANDER(PC),A2
	MOVEA.L	6(A2),A1
LAB_0EAE:
	CLR.W	16(A1)
	CLR.L	52(A1)
	CLR.W	60(A1)
	CLR.W	62(A1)
	MOVE.W	#$6400,20(A1)
	CLR.B	46(A1)
	CLR.W	76(A1)
	CLR.W	80(A1)
	CLR.W	82(A1)
	CLR.W	86(A1)
	CLR.W	88(A1)
	CLR.W	92(A1)
	CLR.L	98(A1)
	CLR.L	30(A1)
	CLR.B	104(A1)
	MOVE.W	#$6400,128(A1)
	CLR.W	130(A1)
	CLR.W	134(A1)
	CLR.W	132(A1)
	CLR.L	140(A1)
	CLR.L	146(A1)
	CLR.W	144(A1)
	MOVE.B	#$ff,64(A1)
	LEA	256(A1),A1
	DBF	D7,LAB_0EAE
	BSR.W	ClearSaPoPtrs
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ResetChannels:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	CHANNEL_NUMB+2(PC),D7
	SUBQ.W	#1,D7
	LEA	Test_VOICEEXPANDER(PC),A2
	MOVEA.L	6(A2),A1
LAB_0EB0:
	CLR.W	16(A1)
	CLR.L	52(A1)
	CLR.W	60(A1)
	CLR.W	62(A1)
	MOVE.W	#$6400,20(A1)
	CLR.B	46(A1)
	CLR.L	72(A1)
	CLR.W	76(A1)
	CLR.W	80(A1)
	CLR.W	86(A1)
	CLR.W	82(A1)
	CLR.W	88(A1)
	CLR.W	92(A1)
	CLR.L	98(A1)
	CLR.B	104(A1)
	CLR.L	30(A1)
	MOVE.W	#$6400,128(A1)
	CLR.W	130(A1)
	CLR.W	134(A1)
LAB_0EB1:
	CLR.W	132(A1)
	MOVE.B	#$ff,64(A1)
	LEA	256(A1),A1
	DBF	D7,LAB_0EB0
	BSR.S	ClearSaPoPtrs
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ClearSaPoPtrs:
	MOVEM.L	D0/A0,-(A7)
	MOVEA.L	FirstEntry_INSTR(PC),A0
	MOVE.L	#$000000ff,D0
LAB_0EB3:
	CLR.L	60(A0)
	LEA	64(A0),A0
	DBF	D0,LAB_0EB3
	MOVEM.L	(A7)+,D0/A0
	RTS
GetFreeChannel:
	MOVEM.L	D6-D7/A1-A2,-(A7)
	MOVE.W	CHANNEL_NUMB+2(PC),D7
	SUBQ.W	#2,D7
	LEA	Test_VOICEEXPANDER(PC),A2
	MOVEA.L	6(A2),A1
	MOVE.W	2(A5),D6
LAB_0EB5:
	TST.W	16(A1)
	BEQ.S	LAB_0EB7
	LEA	0(A1,D6.W),A1
	DBF	D7,LAB_0EB5
	SUBA.L	A0,A0
LAB_0EB6:
	MOVEM.L	(A7)+,D6-D7/A1-A2
	RTS
LAB_0EB7:
	MOVEA.L	A1,A0
	BRA.S	LAB_0EB6
SetNrmFreqBase:
	MOVE.L	#Normal_FREQDEF,Actual_FREQDEF
	BSR.S	BuildFreqList
	RTS
	DC.W	$0000
SetFreq1:
	MOVE.L	#Math_FREQDEF,Actual_FREQDEF
	BSR.S	BuildFreqList
	RTS
	DC.W	$0000
SetFreq2:
	MOVE.L	#Math_FREQDEF2,Actual_FREQDEF
	BSR.S	BuildFreqList
	RTS
	DC.W	$0000
GetNoteFreq:
	MOVEM.L	A0,-(A7)
	ANDI.L	#$0000ffff,D0
	CMPI.W	#$0054,D0
	BLS.S	LAB_0EBC
	MOVEQ	#84,D0
LAB_0EBC:
	MOVEA.L	Actual_FREQDEF(PC),A0
	ADD.W	2(A0),D0
	MOVEA.L	8(A0),A0
	MOVEA.L	(A0),A0
	DC.W	$2030
	DC.W	$0c00
	MOVEA.L	(A7)+,A0
	RTS
BuildFreqList:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	Actual_FREQDEF(PC),A1
	MOVE.W	6(A1),LAB_119F
	MOVEA.L	8(A1),A2
	MOVEA.L	(A2),A2
	MOVE.L	System_FreqBase(PC),D0
	MOVEQ	#-2,D3
	MOVE.W	4(A1),D6
	SUBQ.W	#1,D6
BuildFreqList_L1:
	MOVEA.L	12(A1),A0
	MOVE.W	6(A1),D7
	SUBQ.W	#1,D7
BuildFreqList_L2:
	MOVEQ	#0,D2
	MOVE.W	(A0)+,D2
	DC.W	$4c00
	MOVE.L	D1,D2
	DC.W	$4c7c
	MOVE.L	D1,D2
	DC.W	$0000
	BCLR	D6,19011(A4)
	BEQ.S	BuildFreqList_O0
	BMI.S	BuildFreqList_ONEG
	LSL.L	D3,D2
	BRA.S	BuildFreqList_O0
BuildFreqList_ONEG:
	NEG.W	D3
	LSR.L	D3,D2
	NEG.W	D3
BuildFreqList_O0:
	MOVE.L	D2,(A2)+
	DBF	D7,BuildFreqList_L2
	ADDQ.W	#1,D3
	DBF	D6,BuildFreqList_L1
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
GetVoiceExpander:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	LEA	ResoFilter_PTR(PC),A0
	BSR.W	GetMem
	TST.W	D0
	BEQ.W	GetVoiceEx_ERRNOPOSTMEMb
	LEA	DryDspBuffer_PTR(PC),A0
	BSR.W	GetMem
	TST.W	D0
	BEQ.W	GetVoiceEx_ERRNOPOSTMEMb
	LEA	RenderBuffer_PTR(PC),A0
	BSR.W	GetMem
	TST.W	D0
	BEQ.W	GetVoiceEx_ERRNOPOSTMEMb
	LEA	BufferMem0_PTR+2(PC),A0
	MOVE.L	#$00010003,D0
	MOVE.L	D0,8(A0)
	MOVE.L	D0,20(A0)
	MOVE.L	D0,32(A0)
	MOVE.L	D0,44(A0)
	LEA	Test_VOICEEXPANDER(PC),A2
	CLR.W	32(A2)
	MOVEQ	#0,D0
	MOVE.W	(A2),D0
	MOVE.W	10(A2),D1
	TST.W	D1
	BEQ.S	GetVoiceExpander_X
	DIVU	D1,D0
	MOVE.W	D0,12(A2)
	MOVE.W	18(A2),D0
	MOVE.W	20(A2),D1
	MULU	D1,D0
	MOVE.W	D0,22(A2)
	MOVE.W	10(A2),D7
	SUBQ.W	#1,D7
	BMI.S	GetVoiceExpander_X
	MOVEQ	#0,D6
	MOVEA.L	26(A2),A3
	MOVE.W	30(A2),D5
LAB_0EC3:
	MOVE.W	D6,D0
	MOVEA.L	A2,A0
	MOVEA.L	A3,A1
	BSR.W	InitBuffer
	CMPI.W	#$ffff,D0
	BNE.S	GetVoiceExpander_X
	ADDQ.W	#1,D6
	LEA	0(A3,D5.W),A3
	DBF	D7,LAB_0EC3
	LEA	CopyBuffer_PTR(PC),A0
	BSR.W	GetMem
	TST.W	D0
	BEQ.S	GetVoiceExpander_ERR
	BSR.W	InitCalcBufferInfo
	LEA	PostDspBuffer_PTR(PC),A0
	BSR.W	GetMem
	TST.W	D0
	BEQ.S	GetVoiceEx_ERRNOPOSTMEM
	BSR.W	InitPostDspBufferInfo
	MOVE.W	#$ffff,32(A2)
GetVoiceExpander_X:
	MOVEQ	#0,D0
	MOVE.W	32(A2),D0
	BSR.W	HLPFilterOff
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
GetVoiceEx_ERRNOPOSTMEMb:
	BSR.S	FreeRenderBuf
	BSR.S	FreeDryDspBuf
	BSR.S	FreeResoFilter
GetVoiceEx_ERRNOPOSTMEM:
	LEA	CopyBuffer_PTR(PC),A0
	MOVE.L	#$00010016,MEM_DEBUG_INFO
	CLR.L	LAB_109F
	BSR.W	FreeMem
	CLR.L	(A0)
GetVoiceExpander_ERR:
	CLR.W	32(A2)
	BSR.W	WarnFlash
	BRA.S	GetVoiceExpander_X
FreeResoFilter:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	ResoFilter_PTR(PC),A0
	MOVE.L	#$00010016,MEM_DEBUG_INFO
	MOVE.L	#$00000005,LAB_109F
	BSR.W	FreeMem
	CLR.L	(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
FreeDryDspBuf:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	DryDspBuffer_PTR(PC),A0
	MOVE.L	#$00010016,MEM_DEBUG_INFO
	MOVE.L	#$00000003,LAB_109F
	BSR.W	FreeMem
	CLR.L	(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
FreeRenderBuf:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	RenderBuffer_PTR(PC),A0
	MOVE.L	#$00010016,MEM_DEBUG_INFO
	MOVE.L	#$00000004,LAB_109F
	BSR.W	FreeMem
	CLR.L	(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
FreeVoiceExpander:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	HLPFilterOn
	LEA	Test_VOICEEXPANDER(PC),A2
	MOVEA.L	26(A2),A3
	MOVEA.L	26(A2),A0
	MOVE.W	30(A2),D0
	MOVE.W	10(A2),D7
	SUBQ.W	#1,D7
LAB_0ECC:
	BSR.W	FreeBuffer
	LEA	0(A0,D0.W),A0
	DBF	D7,LAB_0ECC
	LEA	CopyBuffer_PTR(PC),A0
	MOVE.L	#$00010016,MEM_DEBUG_INFO
	MOVE.L	#$00000001,LAB_109F
	BSR.W	FreeMem
	CLR.L	(A0)
	LEA	PostDspBuffer_PTR(PC),A0
	MOVE.L	#$00010016,MEM_DEBUG_INFO
	MOVE.L	#$00000002,LAB_109F
	BSR.W	FreeMem
	CLR.L	(A0)
	BSR.W	FreeRenderBuf
	BSR.W	FreeDryDspBuf
	BSR.W	FreeResoFilter
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ToogleLPFilter:
	BCHG	#1,CIAA_PRA
	RTS
	DC.W	$0000
HLPFilterOff:
	BSET	#1,CIAA_PRA
	RTS
HLPFilterOn:
	BCLR	#1,CIAA_PRA
	RTS
CheckForcedUpdate:
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$48ba
	BEQ.S	LAB_0ED1
	DC.W	$4a3a
	DC.W	$4832
	BEQ.S	LAB_0ED1
	JSR	SignalAutoUpdate
LAB_0ED1:
	RTS
	DC.W	$0000
InitBuffer:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVEA.L	A1,A4
	MOVEA.L	A0,A5
	MOVE.W	18(A5),(A4)
	MOVE.W	(A4),2(A4)
	MOVE.W	20(A5),4(A4)
	MOVE.W	24(A5),6(A4)
	MOVE.W	22(A5),18(A4)
	MOVE.W	16(A5),D1
	MULU	D0,D1
	ADD.W	14(A5),D1
	MOVE.W	D1,26(A4)
	MOVE.W	22(A5),D0
	MOVEA.L	8(A4),A3
	ANDI.L	#$0001ffff,D0
	MOVE.L	D0,4(A3)
	MOVEA.L	A3,A0
	BSR.W	GetMem
	TST.L	D0
	BNE.S	LAB_0ED3
	BSR.W	WarnFlash
	MOVE.L	#ERRNoBufferMem_TXT+1,ErrorText_TXT+2
	BSR.W	PrintErrorMsg
	MOVEQ	#0,D0
	CLR.L	(A3)
	CLR.W	16(A4)
	BRA.S	LAB_0ED4
LAB_0ED3:
	MOVE.L	(A3),BUFFERPTR
	MOVE.L	(A3),12(A4)
	MOVE.L	(A3),22(A4)
	MOVE.W	#$ffff,16(A4)
	MOVEQ	#-1,D0
LAB_0ED4:
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
FreeBuffer:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	8(A0),A0
	TST.L	(A0)
	BEQ.S	LAB_0ED6
	MOVE.L	#$00010016,MEM_DEBUG_INFO
	MOVE.L	#$00000003,LAB_109F
	BSR.W	FreeMem
LAB_0ED6:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
GetAudioDevice:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.B	AUDIODEV_TAKEN+1
	MOVE.B	#$ff,sigbitnum
	MOVEQ	#0,D2
	MOVEA.L	EXECBASE+2,A6
	ADDQ.L	#1,D2
	MOVEQ	#-1,D0
	JSR	-330(A6)
	TST.B	D0
	BMI.S	GetAudDevERR_NODEV
	MOVE.B	D0,sigbitnum
	LEA	allocport(PC),A1
	MOVE.B	D0,15(A1)
	MOVE.L	A1,-(A7)
	SUBA.L	A1,A1
	JSR	-294(A6)
	MOVEA.L	(A7)+,A1
	MOVE.L	D0,16(A1)
	LEA	reqlist(PC),A0
	MOVE.L	A0,(A0)
	ADDQ.L	#4,(A0)
	CLR.L	4(A0)
	MOVE.L	A0,8(A0)
	ADDQ.L	#1,D2
	LEA	allocreq(PC),A1
	LEA	audiodevname(PC),A0
	MOVEQ	#0,D0
	MOVEQ	#0,D1
	JSR	-444(A6)
	TST.B	D0
	BNE.S	GetAudDevERR_NODEV
	MOVE.B	#$ff,AUDIODEV_TAKEN+1
GetAudDev_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
GetAudDevERR_NODEV:
	BSR.W	WarnFlash
	MOVE.L	#ENoAudioDev+1,ErrorText_TXT+2
	BSR.W	PrintErrorMsg
	BRA.S	GetAudDev_X
FreeAudioDevice:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$0c3a
	DC.W	$00ff
	DC.W	$488f
	BNE.S	FreeADev_NoDev
	MOVEA.L	EXECBASE+2,A6
	LEA	allocreq(PC),A1
	JSR	-450(A6)
FreeADev_NoDev:
	CLR.B	AUDIODEV_TAKEN+1
	MOVEQ	#0,D0
	MOVE.B	sigbitnum(PC),D0
	BMI.S	FreeADev_NoSig
	JSR	-336(A6)
	MOVE.B	#$ff,sigbitnum
FreeADev_NoSig:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetAudioIRQ:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	#$0780,INTENA
	MOVE.W	#$0780,INTREQ
	MOVEA.L	ABSEXECBASE.W,A6
	MOVEQ	#7,D0
	LEA	audiointerrupt(PC),A1
	JSR	-162(A6)
	MOVE.L	D0,OldIntVector
	MOVE.W	#$8080,INTENA
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
RemoveAudioIRQ:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	ABSEXECBASE.W,A6
	MOVEQ	#7,D0
	MOVEA.L	OldIntVector(PC),A1
	JSR	-162(A6)
	MOVE.W	#$0780,INTENA
	MOVE.W	#$0780,INTREQ
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SymphonieAudioInterrrupt:
	BSR.S	CauseSoftIRQ
	MOVE.W	#$ffff,AudioIRQ_STATUS+2
	MOVE.W	#$0780,INTREQ
	MOVEQ	#-1,D0
	RTS
	DC.W	$0000
CauseSoftIRQ:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	LMButton
	TST.W	D0
	BNE.S	CauseStop
	DC.W	$4a3a
	LEA	(A5),A3
	BNE.S	CauseStop2
	BSR.S	DoSoftIRQ
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
DoSoftIRQ:
	MOVEA.L	SoftInt(PC),A1
	MOVE.B	#$02,8(A1)
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-180(A6)
	MOVE.L	SoftInt(PC),D0
	MOVE.L	LAB_11F7(PC),SoftInt
	MOVE.L	D0,LAB_11F7
	RTS
	DC.W	$0000
CauseStop:
	CLR.W	PLAYER_STATUS+2
	BSR.W	StopAllChannels
	MOVE.L	#StopSong3,CheckQJMsg_JMP
	MOVEM.L	(A7)+,D0-D7/A0-A6
	CLR.B	LowCPUWarn+1
	RTS
CauseStop2:
	CLR.W	PLAYER_STATUS+2
	BSR.W	StopAllChannels
	MOVE.L	#StopSong4,CheckQJMsg_JMP
	MOVEM.L	(A7)+,D0-D7/A0-A6
	CLR.B	LowCPUWarn+1
	RTS
SymphonieSoftIRQ:
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$4634
	BNE.S	LAB_0EE5
	BSR.S	NewChangeSyncBuf
LAB_0EE5:
	MOVEQ	#0,D0
	RTS
	DC.W	$0000
ChangeBuffers:
	MOVEM.L	D0/D4/D7/A0/A4-A5,-(A7)
	LEA	Test_VOICEEXPANDER(PC),A5
	MOVEA.L	26(A5),A4
	MOVE.W	30(A5),D4
	MOVE.W	10(A5),D7
	SUBQ.W	#1,D7
	SUBQ.W	#1,2(A4)
	BEQ.S	LAB_0EE9
	MOVEQ	#0,D0
LAB_0EE7:
	MOVEA.L	12(A4),A0
	MOVE.W	4(A4),D0
	DC.W	$4c79
	DC.W	$0000
	DC.L	OverSample3
	LEA	0(A0,D0.W),A0
	MOVE.L	A0,12(A4)
	LEA	0(A4,D4.W),A4
	DBF	D7,LAB_0EE7
LAB_0EE8:
	MOVEM.L	(A7)+,D0/D4/D7/A0/A4-A5
	RTS
LAB_0EE9:
	MOVE.W	(A4),2(A4)
	MOVE.L	22(A4),12(A4)
	LEA	0(A4,D4.W),A4
	DBF	D7,LAB_0EE9
	BRA.S	LAB_0EE8
NewChangeSyncBuf:
	MOVEM.L	D0/D7/A0,-(A7)
	ADDQ.B	#1,LowCPUWarn+1
	MOVE.L	VexSyncBufNumb(PC),D7
	ADD.L	D7,StreamCount
	DC.W	$4a3a
	DC.W	$f3f7
	BNE.S	LAB_0EEC
	SUBQ.W	#1,D7
	BMI.S	LAB_0EEC
LAB_0EEB:
	BSR.S	LMButton
	TST.B	D0
	BNE.S	LAB_0EED
	LEA	Test_SONG(PC),A0
	BSR.W	PlaySong
	BSR.W	ChangeBuffers
	BSR.W	CopyVoiceBuffer
	BSR.W	CheckForcedUpdate
	DBF	D7,LAB_0EEB
LAB_0EEC:
	MOVEA.L	BufferSet(PC),A0
	JSR	(A0)
	BSR.W	SwapSyncBuffer
	MOVEM.L	(A7)+,D0/D7/A0
	SUBQ.B	#1,LowCPUWarn+1
	RTS
LAB_0EED:
	LEA	Test_SONG(PC),A0
	BSR.W	ChangeBuffers
	BSR.W	CopyVoiceBuffer
	DBF	D7,LAB_0EED
	CLR.W	PLAYER_STATUS+2
	BSR.W	StopAllChannels
	MOVE.L	#StopSong,CheckQJMsg_JMP
	BRA.S	LAB_0EEC
LAB_0EEE:
	LEA	Test_SONG(PC),A0
	BSR.W	ChangeBuffers
	BSR.W	CopyVoiceBuffer
	DBF	D7,LAB_0EEE
	BRA.S	LAB_0EEC
	DC.W	$0000
LMButton:
	MOVE.W	POTGOR,D0
	BTST	#10,D0
	BEQ.S	LAB_0EF0
	MOVEQ	#0,D0
	RTS
LAB_0EF0:
	BTST	#6,CIAA_PRA
	BEQ.S	LAB_0EF1
	MOVEQ	#0,D0
	RTS
LAB_0EF1:
	MOVEQ	#-1,D0
	RTS
	DC.W	$0000
ClearDryRoom:
	DC.W	$4a7a
	CLR.L	D0
	BNE.S	LAB_0EF3
	RTS
LAB_0EF3:
	DC.W	$303a
	CLR.B	(A7)+
	MOVEQ	#0,D1
	MOVEA.L	DryDspBuffer_PTR(PC),A0
LAB_0EF4:
	MOVE.L	D1,(A0)+
	DBF	D0,LAB_0EF4
	CLR.W	Dry_COUNT+2
	RTS
ResoFilterPreMix:
	TST.B	144(A0)
	BNE.S	LAB_0EF6
	RTS
LAB_0EF6:
	MOVE.L	A1,ResoFilter_OLDPTR
	MOVEM.L	D2,-(A7)
	MOVEQ	#0,D2
	MOVE.W	140(A0),D2
	MOVE.L	D2,RTResoFilter_FREQ
	MOVE.W	142(A0),D2
	MOVE.L	D2,RTResoFilter_RESO
	MOVEM.L	(A7)+,D2
	MOVE.W	D0,ResoFilter_LEN
	MOVEA.L	ResoFilter_PTR(PC),A1
	RTS
ResoFilterPostMix:
	CMPI.B	#$01,144(A0)
	BEQ.W	ResoFilterPostMixLP
	CMPI.B	#$02,144(A0)
	BEQ.S	ResoFilterPostMixHP
	CMPI.B	#$03,144(A0)
	BEQ.W	ResoFilterPostMixBP
	RTS
ResoFilterPostMixHP:
	MOVEA.L	ResoFilter_OLDPTR(PC),A1
	MOVEM.L	D0-D7/A1-A2,-(A7)
	MOVEA.L	ResoFilter_PTR(PC),A2
	MOVE.W	ResoFilter_LEN(PC),D0
	SUBQ.W	#1,D0
	MOVEM.L	146(A0),D2-D4
	MOVE.L	RTResoFilter_FREQ(PC),D7
	CMPI.L	#$000000f0,D7
	BLS.S	LAB_0EF9
	MOVE.L	#$000000f0,D7
LAB_0EF9:
	DC.W	$4aba
	DC.W	$0204
	BEQ.S	LAB_0EFC
	DC.W	$0cba
	ORI.B	#$b9,D0
	DC.W	$01fa
	BLS.S	LAB_0EFA
	MOVE.L	#$000000b9,RTResoFilter_RESO
LAB_0EFA:
	MOVE.W	(A2),D1
	EXT.L	D1
	MOVE.L	D1,D4
	SUB.L	D2,D4
	MOVE.L	D7,D6
	DC.W	$4c04
	BVC.W	LAB_0DA3
	ADD.L	D6,D3
	MOVE.L	D7,D6
	DC.W	$4c03
	BVC.W	LAB_0E0C
	ADD.L	D6,D2
	MOVE.L	RTResoFilter_RESO(PC),D6
	DC.W	$4c02
	BVC.W	LAB_0E0D+2
	ADD.L	D6,D2
	ASR.L	#2,D2
	MOVE.L	D2,D1
	MOVE.W	D4,(A1)
	CLR.W	(A2)
	ADDQ.L	#4,A2
	ADDQ.L	#4,A1
	DBF	D0,LAB_0EFA
LAB_0EFB:
	MOVEM.L	D2-D4,146(A0)
	MOVEM.L	(A7)+,D0-D7/A1-A2
	RTS
LAB_0EFC:
	MOVE.W	(A2),D1
	EXT.L	D1
	MOVE.L	D1,D4
	SUB.L	D2,D4
	MOVE.L	D7,D6
	DC.W	$4c04
	BVC.W	LAB_0DA9+2
	ADD.L	D6,D3
	MOVE.L	D7,D6
	DC.W	$4c03
	BVC.W	LAB_0E10+4
	ADD.L	D6,D2
	ASR.L	#2,D2
	MOVE.L	D2,D1
	MOVE.W	D4,(A1)
	CLR.W	(A2)
	ADDQ.L	#4,A2
	ADDQ.L	#4,A1
	DBF	D0,LAB_0EFC
	BRA.S	LAB_0EFB
ResoFilterPostMixBP:
	MOVEA.L	ResoFilter_OLDPTR(PC),A1
	MOVEM.L	D0-D7/A1-A2,-(A7)
	MOVEA.L	ResoFilter_PTR(PC),A2
	MOVE.W	ResoFilter_LEN(PC),D0
	SUBQ.W	#1,D0
	MOVEM.L	146(A0),D2-D4
	MOVE.L	RTResoFilter_FREQ(PC),D7
	CMPI.L	#$000000f0,D7
	BLS.S	LAB_0EFE
	MOVE.L	#$000000f0,D7
LAB_0EFE:
	DC.W	$4aba
	MOVEP.L	26460(A6),D0
	DC.W	$0cba
	ORI.B	#$b9,D0
	BCHG	D0,D4
	BLS.S	LAB_0EFF
	MOVE.L	#$000000b9,RTResoFilter_RESO
LAB_0EFF:
	MOVE.W	(A2),D1
	EXT.L	D1
	MOVE.L	D1,D4
	SUB.L	D2,D4
	MOVE.L	D7,D6
	DC.W	$4c04
	BVC.W	LAB_0DB1+2
	ADD.L	D6,D3
	MOVE.L	D7,D6
	DC.W	$4c03
	BVC.W	NoPreRend
	ADD.L	D6,D2
	MOVE.L	RTResoFilter_RESO(PC),D6
	DC.W	$4c02
	BVC.W	LAB_0E15+2
	ADD.L	D6,D2
	ASR.L	#2,D2
	MOVE.L	D2,D1
	SUB.W	D4,(A2)
	SUB.W	D1,(A2)
	MOVE.W	(A2),(A1)
	CLR.W	(A2)
	ADDQ.L	#4,A2
	ADDQ.L	#4,A1
	DBF	D0,LAB_0EFF
LAB_0F00:
	MOVEM.L	D2-D4,146(A0)
	MOVEM.L	(A7)+,D0-D7/A1-A2
	RTS
LAB_0F01:
	MOVE.W	(A2),D1
	EXT.L	D1
	MOVE.L	D1,D4
	SUB.L	D2,D4
	MOVE.L	D7,D6
	DC.W	$4c04
	BVC.W	LAB_0DB7
	ADD.L	D6,D3
	MOVE.L	D7,D6
	DC.W	$4c03
	BVC.W	LAB_0E1B+8
	ADD.L	D6,D2
	ASR.L	#2,D2
	MOVE.L	D2,D1
	SUB.W	D4,(A2)
	SUB.W	D1,(A2)
	MOVE.W	(A2),(A1)
	CLR.W	(A2)
	ADDQ.L	#4,A2
	ADDQ.L	#4,A1
	DBF	D0,LAB_0F01
	BRA.S	LAB_0F00
	DC.W	$0000
ResoFilterPostMixLP:
	MOVEA.L	ResoFilter_OLDPTR(PC),A1
	MOVEM.L	D0-D7/A1-A2,-(A7)
	MOVEA.L	ResoFilter_PTR(PC),A2
	MOVE.W	ResoFilter_LEN(PC),D0
	SUBQ.W	#1,D0
	MOVEM.L	146(A0),D2-D4
	MOVE.L	RTResoFilter_FREQ(PC),D7
	CMPI.L	#$000000f0,D7
	BLS.S	LAB_0F03
	MOVE.L	#$000000f0,D7
LAB_0F03:
	DC.W	$4aba
	DC.W	$008e
	BEQ.S	LAB_0F06
	DC.W	$0cba
	ORI.B	#$b9,D0
	ORI.L	#$630a23fc,D4
	ORI.B	#$b9,D0
	DC.L	RTResoFilter_RESO
LAB_0F04:
	MOVE.W	(A2),D1
	EXT.L	D1
	MOVE.L	D1,D4
	SUB.L	D2,D4
	MOVE.L	D7,D6
	DC.W	$4c04
	BVC.W	LAB_0DBD+2
	ADD.L	D6,D3
	MOVE.L	D7,D6
	DC.W	$4c03
	BVC.W	LAB_0E22+2
	ADD.L	D6,D2
	MOVE.L	RTResoFilter_RESO(PC),D6
	DC.W	$4c02
	BVC.W	LAB_0E23
	ADD.L	D6,D2
	ASR.L	#2,D2
	MOVE.L	D2,D1
	ADD.W	D1,(A1)
	CLR.W	(A2)
	ADDQ.L	#4,A2
	ADDQ.L	#4,A1
	DBF	D0,LAB_0F04
LAB_0F05:
	MOVEM.L	D2-D4,146(A0)
	MOVEM.L	(A7)+,D0-D7/A1-A2
	RTS
LAB_0F06:
	MOVE.W	(A2),D1
	EXT.L	D1
	MOVE.L	D1,D4
	SUB.L	D2,D4
	MOVE.L	D7,D6
	DC.W	$4c04
	BVC.W	LAB_0DC2
	ADD.L	D6,D3
	MOVE.L	D7,D6
	DC.W	$4c03
	BVC.W	LAB_0E26+2
	ADD.L	D6,D2
	ASR.L	#2,D2
	MOVE.L	D2,D1
	MOVE.W	D1,(A1)
	CLR.W	(A2)
	ADDQ.L	#4,A2
	ADDQ.L	#4,A1
	DBF	D0,LAB_0F06
	BRA.S	LAB_0F05
RTResoFilter_FREQ:
	ORI.B	#$00,D0
RTResoFilter_RESO:
	ORI.B	#$00,D0
ResoFilter_LEN:
ResoFilter_COUNT:
	ORI.B	#$00,D0
ResoFilter_OLDPTR:
	ORI.B	#$00,D0
	DC.W	$0000
PostMixDryWet:
	DC.W	$4a7a
	DC.W	$3fcc
	BNE.S	LAB_0F0D
	RTS
LAB_0F0D:
	MOVEM.L	D0-D2/A2,-(A7)
	MOVEA.L	DryDspBuffer_PTR(PC),A2
	SUBQ.W	#1,D0
	DC.W	$33c0
	DC.L	DrySamples+1
LAB_0F0E:
	MOVE.L	(A1)+,D1
	MOVE.L	(A2),D2
	ADD.W	D1,D2
	SWAP	D1
	SWAP	D2
	ADD.W	D1,D2
	SWAP	D2
	MOVE.L	D2,(A2)+
	DBF	D0,LAB_0F0E
	MOVEA.L	DryDspBuffer_PTR(PC),A1
	MOVEM.L	(A7)+,D0-D2/A2
	RTS
	DC.W	$0000
CopyVoiceBuffer:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	ClearDryRoom
	LEA	Test_VOICEEXPANDER(PC),A0
	MOVEA.L	26(A0),A1
	MOVE.W	30(A0),D0
	MOVE.W	(A0),D7
	MOVEA.L	6(A0),A0
	LEA	0(A1,D0.W),A2
	LEA	0(A2,D0.W),A3
	LEA	0(A3,D0.W),A4
	LSR.W	#1,D7
	SUBQ.W	#1,D7
	MOVE.W	4(A1),D0
	DC.W	$4a7a
	MOVEA.W	26372(A2),A3
	MOVE.W	D0,D3
	LSR.W	#1,D0
	MOVEA.L	12(A1),A5
	MOVEA.L	12(A2),A2
	DC.W	$4a7a
	MOVEA.W	A2,A3
	BNE.W	CopyVoiceBuffer_DSP
	MOVEA.L	CopyBuffer_PTR(PC),A1
	BSR.W	ClearSample
CopyVoiceBuffer_DSPIN:
	CLR.L	SAMPLE_IPTR+2
	MOVEA.L	A1,A6
	CLR.W	DryDspBuffer_OFF
	MOVE.W	#$0100,D1
	MOVEQ	#1,D5
	MOVE.W	D7,D6
	CLR.W	SEPERATECHANNELS+2
	DC.W	$0cba
	DC.W	$0001
	ADDQ.L	#3,-(A2)
	MOVE.W	LAB_131D(PC),(A7)+
	DC.W	$00bc
	DC.W	$0cba
	DC.W	$0001
	SNE	(A4)
	MOVE.W	26368(A6),(A7)+
CopyVoiceBuffer_go:
	ORI.L	#$48e70038,-(A4)
LAB_0F12:
	DC.W	$4a7a
	DC.W	$4122
	BMI.S	LAB_0F13
	BSR.W	ResoFilterPreMix
	BSR.W	CopySample
	BSR.W	ResoFilterPostMix
LAB_0F13:
	MOVEA.L	30(A0),A2
	LEA	0(A0,D1.W),A0
	MOVE.W	#$0002,DryDspBuffer_OFF
	DC.W	$4a8a
	BEQ.S	LAB_0F14
	BTST	#2,46(A2)
	BNE.S	LAB_0F15
	DC.W	$0c7a
	DC.W	$0001
	DC.W	$40f2
	BEQ.S	LAB_0F15
LAB_0F14:
	ADDQ.L	#2,A1
	CLR.B	FASTPOSSIBLE
	BSR.W	ResoFilterPreMix
	BSR.W	CopySample
	BSR.W	ResoFilterPostMix
	MOVE.B	#$ff,FASTPOSSIBLE
	SUBQ.L	#2,A1
LAB_0F15:
	LEA	0(A0,D1.W),A0
	CLR.W	DryDspBuffer_OFF
	DBF	D7,LAB_0F12
Enf_ERRb:
	MOVEM.L	(A7)+,A2-A4
	MOVEA.L	A6,A1
	MOVE.L	POSTDSP(PC),D7
	BNE.S	CopyVoice_PostGo
CopyVoiceB_NoPOSTDsp:
	MOVEA.L	12(A3),A3
	MOVEA.L	12(A4),A4
	MOVE.W	D0,SCOPE_LEN
	BSR.W	PostMixDryWet
	MOVE.L	A1,SCOPE_16BITPOS+2
	BSR.W	ProcMVol
	MOVEA.L	COPYBACK_JR(PC),A0
	JSR	(A0)
CopyVoiceBuffer_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	RTS
CopyVoice_PostGo:
	MOVEA.L	D7,A6
	JSR	(A6)
	BRA.S	CopyVoiceB_NoPOSTDsp
CopyVoicePreR:
	MOVE.W	#$0001,SEPERATECHANNELS+2
	BRA.W	CopyVoiceBuffer_go+2
CopyVoicePreL:
	MOVE.W	#$ffff,SEPERATECHANNELS+2
	BRA.W	CopyVoiceBuffer_go+2
Enf_ERR:
	BRA.S	Enf_ERRb
	SUBQ.W	#1,D0
	BSR.W	GetCopyBackShift
LAB_0F1D:
	MOVE.L	(A1)+,D5
	ASR.W	D7,D5
	MOVE.B	D5,(A2)+
	MOVE.B	D5,(A3)+
	SWAP	D5
	ASR.W	D7,D5
	MOVE.B	D5,(A5)+
	MOVE.B	D5,(A4)+
	DBF	D0,LAB_0F1D
	RTS
DoOversample3:
	CMPI.L	#$00000001,OverSample3
	BNE.S	LAB_0F1F
	RTS
LAB_0F1F:
	CMPI.L	#$00000004,OverSample3
	BEQ.S	LAB_0F21
	CMPI.L	#$00000008,OverSample3
	BEQ.W	LAB_0F24
	MOVEM.L	D0-D5/A0,-(A7)
	SUBQ.L	#1,D0
	MOVEA.L	A1,A0
	MOVEA.L	OverSample3_PTR,A1
LAB_0F20:
	MOVE.L	(A0)+,D4
	MOVE.L	(A0)+,D5
	MOVE.L	D4,D2
	MOVE.L	D5,D3
	EXT.L	D4
	EXT.L	D5
	SWAP	D2
	SWAP	D3
	EXT.L	D2
	EXT.L	D3
	ADD.L	D4,D5
	ASR.L	#1,D5
	ADD.L	D2,D3
	ASR.L	#1,D3
	SWAP	D5
	MOVE.W	D3,D5
	SWAP	D5
	MOVE.L	D5,(A1)+
	DBF	D0,LAB_0F20
	MOVEM.L	(A7)+,D0-D5/A0
	MOVEA.L	OverSample3_PTR,A1
	LSR.L	#1,D0
	RTS
LAB_0F21:
	MOVEM.L	D0-D6/A0,-(A7)
	SUBQ.L	#1,D0
	MOVEA.L	A1,A0
	MOVEA.L	OverSample3_PTR,A1
LAB_0F22:
	MOVE.W	(A0)+,D4
	EXT.L	D4
	MOVE.W	(A0)+,D2
	EXT.L	D2
	MOVEQ	#2,D6
LAB_0F23:
	MOVE.W	(A0)+,D5
	EXT.L	D5
	ADD.L	D5,D4
	MOVE.W	(A0)+,D3
	EXT.L	D3
	ADD.L	D3,D2
	DBF	D6,LAB_0F23
	LSR.L	#2,D2
	LSR.L	#2,D4
	SWAP	D4
	MOVE.W	D2,D4
	MOVE.L	D4,(A1)+
	DBF	D0,LAB_0F22
	MOVEM.L	(A7)+,D0-D6/A0
	MOVEA.L	OverSample3_PTR,A1
	LSR.L	#2,D0
	RTS
LAB_0F24:
	MOVEM.L	D0-D6/A0,-(A7)
	SUBQ.L	#1,D0
	MOVEA.L	A1,A0
	MOVEA.L	OverSample3_PTR,A1
LAB_0F25:
	MOVE.W	(A0)+,D4
	EXT.L	D4
	MOVE.W	(A0)+,D2
	EXT.L	D2
	MOVEQ	#6,D6
LAB_0F26:
	MOVE.W	(A0)+,D5
	EXT.L	D5
	ADD.L	D5,D4
	MOVE.W	(A0)+,D3
	EXT.L	D3
	ADD.L	D3,D2
	DBF	D6,LAB_0F26
	LSR.L	#3,D2
	LSR.L	#3,D4
	SWAP	D4
	MOVE.W	D2,D4
	MOVE.L	D4,(A1)+
	DBF	D0,LAB_0F25
	MOVEM.L	(A7)+,D0-D6/A0
	MOVEA.L	OverSample3_PTR,A1
	LSR.L	#2,D0
	RTS
CopyBackStream14Bit_Stereo:
	MOVEM.L	D6/A6,-(A7)
	MOVE.L	A1,LAB_063B
	BSR.W	DoOversample3
	SUBQ.W	#1,D0
	MOVEA.L	Bit14Tab_PTR+2(PC),A6
	MOVE.L	#$00010000,D6
	LEA	0(A6,D6.L),A6
LAB_0F28:
	MOVE.L	(A1)+,D5
	DC.W	$3c36
	ADDQ.B	#1,D0
	MOVE.B	D6,(A2)+
	LSR.W	#8,D6
	MOVE.B	D6,(A3)+
	SWAP	D5
	DC.W	$3c36
	ADDQ.B	#1,D0
	MOVE.B	D6,(A5)+
	LSR.W	#8,D6
	MOVE.B	D6,(A4)+
	DBF	D0,LAB_0F28
	MOVEM.L	(A7)+,D6/A6
	RTS
CopyBackStream14Bit_Mono:
	MOVEM.L	D6/A6,-(A7)
	BSR.W	DoOversample3
	SUBQ.W	#1,D0
	MOVEA.L	Bit14Tab_PTR+2(PC),A6
	MOVE.L	#$00010000,D6
	LEA	0(A6,D6.L),A6
LAB_0F2A:
	MOVE.L	(A1)+,D5
	MOVE.L	D5,D4
	SWAP	D4
	EXT.L	D5
	EXT.L	D4
	ADD.L	D4,D5
	ADDQ.L	#1,D5
	ASR.L	#1,D5
	DC.W	$3c36
	ADDQ.B	#1,D0
	MOVE.B	D6,D5
	MOVE.B	D6,(A2)+
	LSR.W	#8,D6
	MOVE.B	D6,(A3)+
	MOVE.B	D5,(A5)+
	MOVE.B	D6,(A4)+
	DBF	D0,LAB_0F2A
	MOVEM.L	(A7)+,D6/A6
	RTS
CopyBackStream14Bit_Surround:
	MOVEM.L	D4/D6/A6,-(A7)
	SUBQ.W	#1,D0
	MOVEA.L	Bit14Tab_PTR+2(PC),A6
	MOVE.L	#$00010000,D6
	LEA	0(A6,D6.L),A6
LAB_0F2C:
	MOVE.L	(A1)+,D5
	MOVE.L	D5,D4
	SWAP	D4
	EXT.L	D5
	EXT.L	D4
	ADD.L	D4,D5
	ADDQ.L	#1,D5
	ASR.L	#1,D5
	DC.W	$3c36
	ADDQ.B	#1,D0
	MOVE.L	D6,D4
	MOVE.B	D6,(A2)+
	LSR.W	#8,D6
	MOVE.B	D6,(A3)+
	NEG.B	D4
	MOVE.B	D4,(A5)+
	LSR.W	#8,D4
	NEG.B	D4
	MOVE.B	D4,(A4)+
	DBF	D0,LAB_0F2C
	MOVEM.L	(A7)+,D4/D6/A6
	RTS
CopyBackStream14Bit_Left:
	MOVEM.L	D6/A6,-(A7)
	BSR.W	DoOversample3
	SUBQ.W	#1,D0
	MOVEA.L	Bit14Tab_PTR+2(PC),A6
	MOVE.L	#$00010000,D6
	LEA	0(A6,D6.L),A6
LAB_0F2E:
	MOVE.L	(A1)+,D5
	DC.W	$3c36
	ADDQ.B	#1,D0
	MOVE.B	D6,(A2)+
	MOVE.B	D6,(A5)+
	LSR.W	#8,D6
	MOVE.B	D6,(A3)+
	MOVE.B	D6,(A4)+
	DBF	D0,LAB_0F2E
	MOVEM.L	(A7)+,D6/A6
	RTS
CopyBackStream14Bit_Right:
	MOVEM.L	D6/A6,-(A7)
	BSR.W	DoOversample3
	SUBQ.W	#1,D0
	MOVEA.L	Bit14Tab_PTR+2(PC),A6
	MOVE.L	#$00010000,D6
	LEA	0(A6,D6.L),A6
LAB_0F30:
	MOVE.L	(A1)+,D5
	SWAP	D5
	DC.W	$3c36
	ADDQ.B	#1,D0
	MOVE.B	D6,(A2)+
	MOVE.B	D6,(A5)+
	LSR.W	#8,D6
	MOVE.B	D6,(A3)+
	MOVE.B	D6,(A4)+
	DBF	D0,LAB_0F30
	MOVEM.L	(A7)+,D6/A6
	RTS
GetCopyBackShift:
	MOVEQ	#8,D7
	RTS
CopyBackStream9Bit_Stereo:
	BSR.W	DoOversample3
	SUBQ.W	#1,D0
	BSR.S	GetCopyBackShift
	SUBQ.W	#1,D7
	MOVEA.L	Stream9BitTAB_PTR(PC),A0
	LEA	1024(A0),A0
LAB_0F33:
	MOVE.L	(A1)+,D5
	ASR.W	D7,D5
	DC.W	$2830
	ADDQ.B	#2,D0
	MOVE.B	D4,(A2)+
	SWAP	D4
	MOVE.B	D4,(A3)+
	SWAP	D5
	ASR.W	D7,D5
	DC.W	$2830
	ADDQ.B	#2,D0
	MOVE.B	D4,(A5)+
	SWAP	D4
	MOVE.B	D4,(A4)+
	DBF	D0,LAB_0F33
	RTS
CopyOS_LASTLONG:
	ORI.B	#$00,D0
CopyBackStreamOS9Bit_Stereo:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	DoOversample3
	MOVEA.L	Stream9BitTAB_PTR(PC),A0
	LEA	1024(A0),A0
	SUBQ.W	#1,D0
	BSR.S	GetCopyBackShift
	SUBQ.W	#1,D7
	MOVE.L	CopyOS_LASTLONG(PC),D5
LAB_0F36:
	MOVE.L	D5,D6
	MOVE.L	(A1)+,D5
	ASR.W	D7,D5
	ADD.W	D5,D6
	ASR.W	#1,D6
	DC.W	$2830
	BCC.W	LAB_1006
	SWAP	D4
	MOVE.B	D4,(A3)+
	SWAP	D6
	DC.W	$2830
	ADDQ.B	#2,D0
	MOVE.B	D4,(A2)+
	SWAP	D4
	MOVE.B	D4,(A3)+
	SWAP	D5
	ASR.W	D7,D5
	ADD.W	D5,D6
	ASR.W	#1,D6
	DC.W	$2830
	BCC.W	LAB_105A
	SWAP	D4
	MOVE.B	D4,(A4)+
	DC.W	$2830
	ADDQ.B	#2,D0
	MOVE.B	D4,(A5)+
	SWAP	D4
	MOVE.B	D4,(A4)+
	SWAP	D5
	DBF	D0,LAB_0F36
	MOVE.L	D5,CopyOS_LASTLONG
	BTST	#0,D3
	BEQ.S	LAB_0F37
	DC.W	$2830
	ADDQ.B	#2,D0
	MOVE.B	D4,(A2)+
	SWAP	D4
	MOVE.B	D4,(A3)+
	SWAP	D5
	DC.W	$2830
	ADDQ.B	#2,D0
	MOVE.B	D4,(A5)+
	SWAP	D4
	MOVE.B	D4,(A4)+
LAB_0F37:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
CopyBackStreamOS14Bit_Stereo:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	DoOversample3
	MOVEA.L	Bit14Tab_PTR+2(PC),A0
	MOVE.L	#$00010000,D4
	LEA	0(A0,D4.L),A0
	MOVE.L	CopyOS_LASTLONG(PC),D5
	SUBQ.W	#1,D0
LAB_0F39:
	MOVE.L	D5,D6
	MOVE.L	(A1)+,D5
	ASR.W	#1,D5
	ADD.W	D5,D6
	DC.W	$3830
	BHI.W	LAB_100E
	LSR.W	#8,D4
	MOVE.B	D4,(A3)+
	DC.W	$3830
	ADDQ.B	#1,D0
	MOVE.B	D4,(A2)+
	LSR.W	#8,D4
	MOVE.B	D4,(A3)+
	SWAP	D6
	SWAP	D5
	ASR.W	#1,D5
	ADD.W	D5,D6
	DC.W	$3830
	BHI.W	LAB_1062
	LSR.W	#8,D4
	MOVE.B	D4,(A4)+
	DC.W	$3830
	ADDQ.B	#1,D0
	MOVE.B	D4,(A5)+
	LSR.W	#8,D4
	MOVE.B	D4,(A4)+
	SWAP	D5
	DBF	D0,LAB_0F39
	MOVE.L	D5,CopyOS_LASTLONG
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ClearSample:
	MOVEM.L	D0-D1/A1,-(A7)
	SUBQ.W	#1,D0
	BMI.S	LAB_0F3C
	MOVEQ	#0,D1
LAB_0F3B:
	MOVE.L	D1,(A1)+
	DBF	D0,LAB_0F3B
LAB_0F3C:
	MOVEM.L	(A7)+,D0-D1/A1
	RTS
	DC.W	$0000
ProcMVol:
	DC.W	$4a3a
	DC.W	$3cf1
	BEQ.S	LAB_0F3E
	JSR	ProcDSPPlugIn
LAB_0F3E:
	DC.W	$4a3a
	MOVEQ	#92,D7
	BNE.S	LAB_0F3F
	DC.W	$4a3a
	MOVEQ	#84,D7
	BEQ.S	LAB_0F45
LAB_0F3F:
	MOVEM.L	D0-D5/A1,-(A7)
	SUBQ.W	#1,D0
	BMI.S	LAB_0F44
	MOVEQ	#0,D2
	MOVE.W	SYSVOL(PC),D2
	CMP.W	SYSVOLOLD(PC),D2
	BNE.S	LAB_0F46
	MOVE.W	SYSVOL(PC),SYSVOLOLD
LAB_0F40:
	CMPI.W	#$6400,D2
	BNE.S	LAB_0F41
	DC.W	$0c3a
	DC.W	$0032
	MOVEQ	#46,D7
	BEQ.S	LAB_0F44
LAB_0F41:
	MULU	#$007f,D2
	DIVU	#$0064,D2
	MOVE.W	D2,D3
	MOVEQ	#0,D5
	MOVE.B	LAB_13FC+2(PC),D5
	CMPI.B	#$32,D5
	BEQ.S	LAB_0F43
	CMPI.B	#$32,D5
	BHI.S	LAB_0F42
	MOVEQ	#100,D1
	SUB.B	D5,D1
	MULU	D5,D2
	DIVU	D1,D2
	BRA.S	LAB_0F43
LAB_0F42:
	MOVEQ	#100,D1
	SUB.B	D5,D1
	MULU	D1,D3
	DIVU	D5,D3
LAB_0F43:
	MOVE.L	(A1),D1
	MOVE.W	D1,D4
	MULS	D2,D4
	ADD.L	D4,D4
	SWAP	D4
	MOVE.W	D4,D1
	SWAP	D1
	MOVE.W	D1,D4
	MULS	D3,D4
	ADD.L	D4,D4
	SWAP	D4
	MOVE.W	D4,D1
	SWAP	D1
	MOVE.L	D1,(A1)+
	DBF	D0,LAB_0F43
LAB_0F44:
	MOVEM.L	(A7)+,D0-D5/A1
	RTS
LAB_0F45:
	CLR.W	SYSVOLOLD
	BRA.W	ClearSample
LAB_0F46:
	CMPI.W	#$0022,D0
	BCS.S	LAB_0F40
	MOVEM.L	D0-D7,-(A7)
	MOVEQ	#0,D4
	MOVEQ	#31,D5
	MOVE.W	SYSVOL(PC),D6
	MOVEQ	#30,D7
LAB_0F47:
	MOVE.W	D6,D2
	MOVE.W	SYSVOLOLD(PC),D3
	MULU	D4,D2
	MULU	D5,D3
	ADD.L	D2,D3
	LSR.L	#5,D3
	MOVE.W	D3,SYSVOL
	BSR.S	ProcessMVolSample
	ADDQ.W	#1,D4
	SUBQ.W	#1,D5
	DBF	D7,LAB_0F47
	MOVE.W	D6,SYSVOL
	MOVE.W	D6,SYSVOLOLD
	MOVEM.L	(A7)+,D0-D7
	SUBI.W	#$001f,D0
	BRA.W	LAB_0F40
ProcessMVolSample:
	MOVEM.L	D1-D5,-(A7)
	MOVEQ	#0,D2
	MOVE.W	SYSVOL(PC),D2
	CMPI.W	#$6400,D2
	BNE.S	LAB_0F49
	DC.W	$0c3a
	DC.W	$0032
	DC.W	$7d6e
	BEQ.S	LAB_0F4C
LAB_0F49:
	MULU	#$007f,D2
	DIVU	#$0064,D2
	MOVE.W	D2,D3
	MOVEQ	#0,D5
	MOVE.B	LAB_13FC+2(PC),D5
	CMPI.B	#$32,D5
	BEQ.S	LAB_0F4B
	CMPI.B	#$32,D5
	BHI.S	LAB_0F4A
	MOVEQ	#100,D1
	SUB.B	D5,D1
	MULU	D5,D2
	DIVU	D1,D2
	BRA.S	LAB_0F4B
LAB_0F4A:
	MOVEQ	#100,D1
	SUB.B	D5,D1
	MULU	D1,D3
	DIVU	D5,D3
LAB_0F4B:
	MOVE.L	(A1),D1
	MOVE.W	D1,D4
	MULS	D2,D4
	ADD.L	D4,D4
	SWAP	D4
	MOVE.W	D4,D1
	SWAP	D1
	MOVE.W	D1,D4
	MULS	D3,D4
	ADD.L	D4,D4
	SWAP	D4
	MOVE.W	D4,D1
	SWAP	D1
	MOVE.L	D1,(A1)+
LAB_0F4C:
	MOVEM.L	(A7)+,D1-D5
	RTS
	DC.W	$0000
CopyVoiceBuffer_DSP:
	BSR.W	GetCalcBuffer
	MOVEM.L	A6,-(A7)
	MOVEA.L	PREDSP(PC),A6
	JSR	(A6)
	MOVEA.L	(A7)+,A6
	BRA.W	CopyVoiceBuffer_DSPIN
PostDSPFilter:
	BTST	#2,POSTDSP_FLAG+2(PC)
	BNE.S	CopyDSP_FiltDo
	RTS
	DC.W	$0000
PreDSPFilter:
	DC.W	$4a3a
	DC.W	$3be2
	BNE.S	CopyDSP_FiltDo
	RTS
CopyDSP_FiltDo:
	MOVEM.L	D0-D3/A1,-(A7)
	SUBQ.W	#1,D0
	MOVEQ	#1,D2
	BRA.S	PreDspHPFilt
	SUBQ.W	#1,D0
PreDspFilt_L:
	MOVE.W	4(A1),D1
	ADDQ.W	#1,D1
	SUB.W	(A1),D1
	ASR.W	D2,D1
	SUB.W	D1,4(A1)
	ADDQ.L	#2,A1
	MOVE.W	4(A1),D1
	ADDQ.W	#1,D1
	SUB.W	(A1),D1
	ASR.W	D2,D1
	SUB.W	D1,4(A1)
	ADDQ.L	#2,A1
	DBF	D0,PreDspFilt_L
	MOVEM.L	(A7)+,D0-D3/A1
	RTS
	DC.W	$0000
PreDspHPFilt:
	MOVE.W	D2,D3
	MOVE.L	DspHPFilt_LASTSAMPLE(PC),D2
	MOVEM.L	D4-D5,-(A7)
PreDspHPFilt_L:
	MOVE.L	(A1),D1
	MOVE.L	D1,D4
	SUB.W	D2,D1
	ASR.W	D3,D1
	SUB.W	D1,D4
	SWAP	D1
	SWAP	D4
	SWAP	D2
	SUB.W	D2,D1
	ASR.W	D3,D1
	SUB.W	D1,D4
	SWAP	D4
	MOVE.L	D4,(A1)+
	MOVE.L	D4,D2
	DBF	D0,PreDspHPFilt_L
	MOVE.L	D4,DspHPFilt_LASTSAMPLE
	MOVEM.L	(A7)+,D4-D5
	MOVEM.L	(A7)+,D0-D3/A1
	RTS
	DC.W	$0000
CopyDSP_Echo:
	BSR.S	PreDSPFilter
	MOVEM.L	D0-D2/A1,-(A7)
	MOVE.L	DSP_ECHO_LVL(PC),D2
	SUBQ.W	#1,D0
PreDspSample_L:
	MOVE.L	(A1),D1
	ADDQ.W	#1,D1
	ASR.W	D2,D1
	SWAP	D1
	ADDQ.W	#1,D1
	ASR.W	D2,D1
	SWAP	D1
	MOVE.L	D1,(A1)+
	DBF	D0,PreDspSample_L
PreDspSample_X:
	MOVEM.L	(A7)+,D0-D2/A1
	RTS
	DC.W	$0000
CopyDSP_CrossEcho:
	BSR.W	PreDSPFilter
	MOVEM.L	D0-D3/A1,-(A7)
	MOVE.L	DSP_ECHO_LVL(PC),D2
	SUBQ.W	#1,D0
CopyDSP_CrossEcho_L:
	MOVE.L	(A1),D1
	ADDQ.W	#1,D1
	ASR.W	D2,D1
	SWAP	D1
	ADDQ.W	#1,D1
	ASR.W	D2,D1
	MOVE.L	D1,(A1)+
	DBF	D0,CopyDSP_CrossEcho_L
	MOVEM.L	(A7)+,D0-D3/A1
	RTS
	DC.W	$0000
CopyDSP_HallCrEcho:
	MOVEM.L	D0-D3/A1,-(A7)
	MOVEQ	#0,D2
	MOVE.W	LAB_1190+2(PC),D2
	SUBQ.W	#1,D0
	ADDQ.W	#1,D2
	BRA.S	CopyDSP_CrossEcho_L2
CopyDSP_CrossEcho2:
	BSR.W	PreDSPFilter
	MOVEM.L	D0-D3/A1,-(A7)
	MOVE.L	DSP_ECHO_LVL(PC),D2
	SUBQ.W	#1,D0
	ADDQ.W	#1,D2
CopyDSP_CrossEcho_L2:
	MOVE.L	(A1),D1
	MOVE.L	D1,D3
	ASR.W	D2,D1
	SUB.W	D1,D3
	SWAP	D1
	SWAP	D3
	ASR.W	D2,D1
	SUB.W	D1,D3
	MOVE.L	D3,(A1)+
	DBF	D0,CopyDSP_CrossEcho_L2
	MOVEM.L	(A7)+,D0-D3/A1
	RTS
CopyDSP_HallEcho:
	MOVEM.L	D0-D3/A1,-(A7)
	MOVEQ	#0,D2
	MOVE.W	LAB_1190+2(PC),D2
	SUBQ.W	#1,D0
	ADDQ.W	#1,D2
	BRA.S	CopyDSP_Echo_L2
CopyDSP_Echo2:
	BSR.W	PreDSPFilter
	MOVEM.L	D0-D3/A1,-(A7)
	MOVE.L	DSP_ECHO_LVL(PC),D2
	SUBQ.W	#1,D0
	ADDQ.W	#1,D2
CopyDSP_Echo_L2:
	MOVE.L	(A1),D1
	MOVE.L	D1,D3
	ADDQ.W	#1,D1
	ASR.W	D2,D1
	SUB.W	D1,D3
	SWAP	D1
	SWAP	D3
	ADDQ.W	#1,D1
	ASR.W	D2,D1
	SUB.W	D1,D3
	SWAP	D3
	MOVE.L	D3,(A1)+
	DBF	D0,CopyDSP_Echo_L2
	MOVEM.L	(A7)+,D0-D3/A1
	RTS
	DC.W	$0000
CopyDSP_CenterEcho:
	DC.W	$4aba
	MOVEA.W	(A2)+,A5
	BEQ.W	ClearSample
	BSR.W	PreDSPFilter
	MOVEM.L	D0-D4/A1,-(A7)
	MOVE.L	DSP_ECHO_LVL(PC),D2
	SUBQ.W	#1,D0
LAB_0F60:
	MOVE.L	(A1),D1
	ADDQ.W	#1,D1
	ASR.W	D2,D1
	MOVE.W	D1,D4
	ADDQ.W	#1,D4
	ASR.W	#1,D4
	ASR.W	#1,D4
	SWAP	D4
	SWAP	D1
	ADDQ.W	#1,D1
	ASR.W	D2,D1
	MOVE.W	D1,D4
	ADDQ.W	#1,D4
	ASR.W	#1,D4
	ASR.W	#1,D4
	SWAP	D4
	ADD.W	D4,D1
	SWAP	D4
	SWAP	D1
	ADD.W	D4,D1
	SWAP	D1
	MOVE.L	D1,(A1)+
	DBF	D0,LAB_0F60
	MOVEM.L	(A7)+,D0-D4/A1
	RTS
GetCalcBuffer:
	MOVEM.L	D0/A0,-(A7)
	LEA	CALCBUF_INFO(PC),A0
	SUBQ.W	#1,12(A0)
	BEQ.S	LAB_0F63
	MOVEM.L	(A0),D0/A1
LAB_0F62:
	ADD.L	D0,4(A0)
	MOVEM.L	(A7)+,D0/A0
	RTS
LAB_0F63:
	MOVE.W	14(A0),12(A0)
	MOVEA.L	8(A0),A1
	MOVE.L	(A0),D0
	MOVE.L	A1,4(A0)
	BRA.S	LAB_0F62
	DC.W	$0000
InitCalcBufferInfo:
	MOVEM.L	D0/A0-A1,-(A7)
	LEA	CALCBUF_INFO(PC),A1
	MOVEA.L	CopyBuffer_PTR(PC),A0
	MOVE.L	A0,4(A1)
	MOVE.L	A0,8(A1)
	MOVE.L	DSP_ECHO_LEN(PC),D0
	MOVE.W	D0,12(A1)
	MOVE.W	D0,14(A1)
	MOVEM.L	(A7)+,D0/A0-A1
	RTS
	DC.W	$0000
GetPostDspBuffer:
	MOVEM.L	D0/A0,-(A7)
	LEA	PostDspBUF_INFO(PC),A0
	SUBQ.W	#1,12(A0)
	BEQ.S	GetPostDspBuffer_RESET
	MOVEM.L	(A0),D0/A1
GetPostDspBuffer_X:
	ADD.L	D0,4(A0)
	MOVEM.L	(A7)+,D0/A0
	RTS
GetPostDspBuffer_RESET:
	MOVE.L	4(A0),LAB_0F68+2
	MOVE.W	14(A0),12(A0)
	MOVEA.L	8(A0),A1
	MOVE.L	(A0),D0
	MOVE.L	A1,4(A0)
	MOVE.W	#$ffff,Chorus_Case
	BRA.S	GetPostDspBuffer_X
Chorus_Case:
LAB_0F68:
	ORI.B	#$00,D0
	DC.W	$0000
InitPostDspBufferInfo:
	MOVEM.L	D0/A0-A1,-(A7)
	LEA	PostDspBUF_INFO(PC),A1
	MOVEA.L	PostDspBuffer_PTR(PC),A0
	MOVE.L	A0,4(A1)
	MOVE.L	A0,8(A1)
	MOVE.W	HallInfo(PC),D0
	MOVE.W	D0,12(A1)
	MOVE.W	D0,14(A1)
	MOVEM.L	(A7)+,D0/A0-A1
	RTS
	DC.W	$0000
PrepPostDsp:
	MOVEM.L	D0-D4/A0-A2,-(A7)
	MOVEA.L	A1,A0
	BSR.S	GetPostDspBuffer
	BTST	#0,POSTDSP_FLAG+2(PC)
	BEQ.S	NoPostDelay
	BSR.W	PostDSPFilter
	BSR.S	DelayCopy
	MOVEM.L	D0-D4/A0-A2,-(A7)
	SUBQ.W	#1,D0
	LEA	PostDspBUF_INFO(PC),A2
	MOVE.L	(A2),D4
	MOVE.L	D4,D3
	MULU	DELAYINFO(PC),D3
	SUBA.L	D3,A1
	CMPA.L	8(A2),A1
	BCC.S	DelaySrc_OK
	MOVE.L	D4,D3
	MULU	14(A2),D3
	ADDA.L	D3,A1
DelaySrc_OK:
	MOVEQ	#0,D3
	MOVE.W	LAB_118E(PC),D3
LAB_0F6D:
	MOVE.L	(A1)+,D1
	MOVE.L	(A0),D2
	ADDQ.W	#1,D1
	ASR.W	D3,D1
	ADD.W	D1,D2
	SWAP	D1
	SWAP	D2
	ADDQ.W	#1,D1
	ASR.W	D3,D1
	ADD.W	D1,D2
	SWAP	D2
	MOVE.L	D2,(A0)+
	DBF	D0,LAB_0F6D
	MOVEM.L	(A7)+,D0-D4/A0-A2
NoPostDelay:
	MOVEM.L	(A7)+,D0-D4/A0-A2
	RTS
DelayCopy:
	DC.W	$4a3a
	MOVEA.W	A5,A3
	BNE.S	LAB_0F70
	RTS
LAB_0F70:
	MOVEM.L	A6,-(A7)
	DC.W	$2c7a
	MOVEA.W	D3,A3
	JSR	(A6)
	MOVEA.L	(A7)+,A6
	RTS
	DC.W	$0000
DelayCopyNrm:
	MOVEM.L	D0/A0-A1,-(A7)
	SUBQ.W	#1,D0
LAB_0F72:
	MOVE.L	(A0)+,(A1)+
	DBF	D0,LAB_0F72
	MOVEM.L	(A7)+,D0/A0-A1
	RTS
	DC.W	$0000
DelayCopyCross:
	MOVEM.L	D0/A0-A1,-(A7)
	SUBQ.W	#1,D0
LAB_0F74:
	MOVE.L	(A0)+,D1
	SWAP	D1
	MOVE.L	D1,(A1)+
	DBF	D0,LAB_0F74
	MOVEM.L	(A7)+,D0/A0-A1
	RTS
	DC.W	$0000
DelayCopyHall:
	MOVEM.L	D0/A0-A1,-(A7)
	BSR.W	CopyDSP_HallEcho
	SUBQ.W	#1,D0
LAB_0F76:
	MOVE.L	(A0)+,D1
	MOVE.L	(A1),D2
	ADD.W	D1,D2
	SWAP	D1
	SWAP	D2
	ADD.W	D1,D2
	SWAP	D2
	MOVE.L	D2,(A1)+
	DBF	D0,LAB_0F76
	MOVEM.L	(A7)+,D0/A0-A1
	RTS
DelayCopyCrHall:
	MOVEM.L	D0/A0-A1,-(A7)
	BSR.W	CopyDSP_HallCrEcho
	SUBQ.W	#1,D0
LAB_0F78:
	MOVE.L	(A0)+,D1
	MOVE.L	(A1),D2
	ADD.W	D1,D2
	SWAP	D1
	SWAP	D2
	ADD.W	D1,D2
	SWAP	D2
	MOVE.L	D2,(A1)+
	DBF	D0,LAB_0F78
	MOVEM.L	(A7)+,D0/A0-A1
	RTS
ValidateHall:
	MOVEM.L	D0,-(A7)
	MOVE.L	PostDspBUFFERNUMB(PC),D0
	CMP.W	HallInfo(PC),D0
	BCC.S	ValidateHall_X
	MOVE.W	D0,HallInfo
	BSR.W	WarnFlash
ValidateHall_X:
	MOVEM.L	(A7)+,D0
	RTS
ValidateDelay:
	MOVEM.L	D0,-(A7)
	MOVE.L	PostDspBUFFERNUMB(PC),D0
	SUBQ.L	#1,D0
	CMP.W	DELAYINFO(PC),D0
	BCC.S	ValDelay_1
	MOVE.W	D0,DELAYINFO
ValDelay_1:
	MOVEM.L	(A7)+,D0
	RTS
EmulateDSPFilter:
	MOVEM.L	D0-D1/A0-A1,-(A7)
	SUBQ.W	#1,D0
EmulateDSPFilter_L:
	MOVE.B	(A1)+,D1
	SUB.B	-1(A1),D1
	ASR.B	#2,D1
	SUB.B	D1,(A1)
	DBF	D0,EmulateDSPFilter_L
	MOVEM.L	(A7)+,D0-D1/A0-A1
	RTS
ProcessMuteDSP:
	MOVEA.L	30(A0),A6
	DC.W	$4a8e
	BEQ.S	LAB_0F80
	MOVE.L	A2,60(A6)
	BTST	#1,46(A6)
	BEQ.S	LAB_0F80
	MOVE.W	DryDspBuffer_OFF(PC),D7
	MOVEA.L	DryDspBuffer_PTR(PC),A1
	LEA	0(A1,D7.W),A1
	ADDQ.W	#1,Dry_COUNT+2
LAB_0F80:
	RTS
CopySample_VFade:
	MOVEM.L	D4-D6,-(A7)
	MOVE.L	12(A0),D4
	MOVE.L	D4,D5
	SUB.L	66(A0),D4
	BEQ.S	CopySample_VFadeX
	SUB.L	A2,D5
	MOVE.W	108(A0),D6
	SUB.W	106(A0),D6
	DC.W	$49c6
	DC.W	$4c06
	ADDQ.B	#4,D0
	DC.W	$4c44
	ADDQ.B	#4,D5
	ADDQ.L	#1,D5
	CMPI.B	#$01,104(A0)
	BEQ.S	CopySample_VFadeNo3
	CMPI.B	#$02,104(A0)
	BNE.S	CopySample_VFadeNo2
	BSR.W	WarnFlash
	NEG.B	D5
	ADDI.B	#$64,D5
	BRA.S	CopySample_VFadeNo3
CopySample_VFadeNo2:
	CMPI.B	#$03,104(A0)
	BNE.S	CopySample_VFadeNo3
	BSR.W	WarnFlash
	CMPI.B	#$32,D5
	BLS.S	CSVFadeNo3a
	ADD.B	D5,D5
	NEG.B	D5
	ADDI.B	#$c8,D5
	BRA.S	CopySample_VFadeNo3
CSVFadeNo3a:
	ADD.B	D5,D5
CopySample_VFadeNo3:
	ASL.L	#8,D5
	MOVE.L	D5,D3
	MOVE.W	106(A0),D6
	LSL.W	#8,D6
	ADD.W	D6,D3
	CMPI.W	#$6400,D3
	BLS.S	CopySample_VFadeX
	MOVE.W	#$6400,D3
CopySample_VFadeX:
	MOVEM.L	(A7)+,D4-D6
	BRA.W	CopySample_NOVOLSLIDE
	DC.W	$0000
CopySample_DoVibrato:
	MOVEM.L	D0-D2/D4/A1,-(A7)
	MOVE.W	80(A0),D0
	ADD.W	78(A0),D0
	ANDI.W	#$01ff,D0
	MOVE.W	D0,80(A0)
	MOVEA.L	VibratoTab_PTR(PC),A1
	LSR.W	#1,D0
	DC.W	$3031
	DC.W	$0200
	MOVE.W	D3,D1
	MULS	D0,D1
	DIVS	#$007f,D1
	MOVE.W	76(A0),D2
	LSR.W	#1,D2
	ADDQ.W	#1,D2
	MOVE.W	#$00ff,D4
	SUB.W	D2,D4
	MULU	D4,D3
	MOVEQ	#8,D4
	LSR.L	D4,D3
	MULS	D1,D2
	ASR.L	D4,D2
	ADD.W	D2,D3
	CMPI.W	#$6400,D3
	BGT.S	Vibrato_OV
Vibrato_X:
	MOVEM.L	(A7)+,D0-D2/D4/A1
	BRA.W	Vibrato_IN
Vibrato_OV:
	MOVE.W	#$6400,D3
	BRA.S	Vibrato_X
CopySample_DoTremolo:
	MOVEM.L	D0-D1/D3-D4/A1,-(A7)
	MOVE.W	86(A0),D0
	ADD.W	84(A0),D0
	ANDI.W	#$01ff,D0
	MOVE.W	D0,86(A0)
	MOVEA.L	TremoloTab_PTR+2(PC),A1
	LSR.W	#1,D0
	DC.W	$3031
	DC.W	$0200
	EXT.L	D0
	MOVE.L	D2,D4
	LSR.L	#1,D4
	DC.W	$4c00
	DC.W	$4c03
	DC.W	$4c7c
	DC.W	$4c03
	ORI.B	#$80,D0
	MOVEQ	#0,D0
	MOVE.W	82(A0),D0
	DC.W	$4c00
	DC.W	$4c03
	DC.W	$4c7c
	DC.W	$4c03
	ORI.B	#$64,D0
	ADD.L	D4,D2
	MOVEM.L	(A7)+,D0-D1/D3-D4/A1
	BRA.W	Tremolo_IN
CopySample_DoSampleVib:
	MOVEM.L	D0-D3/A1,-(A7)
	MOVE.W	92(A0),D0
	ADD.W	90(A0),D0
	ANDI.W	#$03ff,D0
	MOVE.W	D0,92(A0)
	MOVEM.L	(A7)+,D0-D3/A1
	BRA.W	SampleVib_IN
CopySample:
	TST.W	110(A0)
	BEQ.S	CopySample_NoRetrig
	SUBQ.W	#1,114(A0)
	BNE.S	CopySample_NoRetrig
	SUBQ.W	#1,110(A0)
	BEQ.S	CopySample_NoRetrig
CopySampleRetrig:
	MOVE.W	112(A0),114(A0)
	MOVE.L	116(A0),(A0)
	MOVE.L	116(A0),retrigtest
	CLR.B	64(A0)
	MOVE.W	#$0001,16(A0)
	CLR.B	46(A0)
	CLR.L	4(A0)
CopySample_NoRetrig:
	CMPI.B	#$ff,64(A0)
	BNE.S	CopySample_DoDo
	RTS
CopySample_DoDo:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	ProcessMuteDSP
	MOVE.W	D0,D7
	SUBQ.W	#1,D7
	TST.W	16(A0)
	BNE.S	CopySample_Do
	TST.B	47(A0)
	BEQ.S	LAB_0F91
	CLR.B	47(A0)
	MOVE.W	52(A0),D0
	BEQ.S	LAB_0F91
	CLR.W	52(A0)
	MOVE.W	FADETOSTEPSm(PC),D6
	CMP.W	D0,D6
	BCS.S	LAB_0F8F
	MOVE.W	D0,D6
LAB_0F8F:
	MOVE.W	D6,D4
	MOVE.W	D4,D7
	SUBQ.W	#1,D7
LAB_0F90:
	MOVE.W	D0,D5
	MULS	D4,D5
	DIVS	D6,D5
	SUBQ.W	#1,D4
	ADD.W	D5,(A1)
	ADDQ.L	#4,A1
	DBF	D7,LAB_0F90
LAB_0F91:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
CopySample_Do:
	MOVEA.L	(A0),A2
	MOVEA.L	30(A0),A6
	DC.W	$4a8e
	BEQ.W	CopySample_X
	MOVE.L	A2,60(A6)
	MOVE.L	4(A0),D1
	MOVE.L	8(A0),D2
	MOVE.L	12(A0),D6
	MOVEQ	#0,D3
	MOVE.W	20(A0),D3
	TST.B	104(A0)
	BNE.W	CopySample_VFade
	TST.W	60(A0)
	BEQ.S	CopySample_NOVOLSLIDE
	ADD.W	60(A0),D3
	BMI.S	CopySample_SETMINVOL
	CMPI.W	#$6500,D3
	BCS.S	CopySample_NEWVOL
	MOVE.W	#$6400,D3
	CLR.W	60(A0)
	BRA.S	CopySample_NEWVOL
CopySample_SETMINVOL:
	MOVEQ	#0,D3
	MOVE.W	D3,60(A0)
CopySample_NEWVOL:
	MOVE.W	D3,20(A0)
CopySample_NOVOLSLIDE:
	TST.W	76(A0)
	BNE.W	CopySample_DoVibrato
Vibrato_IN:
	LSR.W	#8,D3
	TST.W	62(A0)
	BEQ.S	CopySample_NOPITCHSLIDE
	MOVEM.L	D3,-(A7)
	MOVE.L	D2,D3
	LSR.L	#8,D3
	MOVE.W	62(A0),D0
	EXT.L	D0
	DC.W	$4c03
	DC.W	$0800
	ASR.L	#5,D0
	SUB.L	D0,D2
	MOVEM.L	(A7)+,D3
CopySample_NOPITCHSLIDE:
	TST.L	98(A0)
	BEQ.S	CopySample_NOPSLIDETO
	MOVEM.L	D6-D7,-(A7)
	MOVE.L	98(A0),D7
	SUB.L	D2,D7
	BNE.S	CopySample_PSLIDETO
	CLR.L	98(A0)
CopySample_PSLIDETO:
	MOVEQ	#0,D6
	MOVE.W	102(A0),D6
	ADDQ.L	#1,D7
	DC.W	$4c46
	MOVEQ	#7,D4
	ADD.L	D7,D2
	MOVEM.L	(A7)+,D6-D7
CopySample_NOPSLIDETO:
	MOVE.L	D2,8(A0)
	TST.W	82(A0)
	BNE.W	CopySample_DoTremolo
Tremolo_IN:
	TST.W	88(A0)
	BNE.W	CopySample_DoSampleVib
SampleVib_IN:
	MOVEA.L	A2,A4
	CMPI.B	#$c8,D3
	BHI.W	CopySample_ERR
	BSR.W	ProcessCV
	MOVE.B	D3,136(A0)
	SUBQ.L	#2,D6
	TST.W	D3
	BEQ.W	CopySampleZero
	CMPI.B	#$64,D3
	BGT.S	CopySampleSlow
	CMPI.B	#$9c,D3
	BLT.S	CopySampleSlow
	CMP.B	LAB_11DA+3(PC),D3
	BGT.W	CopySampleMV
CopySampleSlow:
	DC.W	$4a3a
	MOVE.W	A0,-(A2)
	BEQ.S	LAB_0F9D
	MOVEA.L	30(A0),A6
	BTST	#2,46(A6)
	BNE.W	CopySampleSlowSF
LAB_0F9D:
	MOVEQ	#0,D4
	MOVE.B	D3,D4
	EXT.W	D4
	MULS	#$0100,D4
	DIVS	#$0064,D4
	MOVEQ	#0,D0
	MOVE.L	#CopySample_L,SampleRun
	TST.B	46(A0)
	BEQ.S	CopySample_L
	CLR.B	46(A0)
	MOVE.W	52(A0),D3
	CMP.W	FADETOSTEPS+2(PC),D7
	BCS.S	CopySample_L
	SUB.W	FADETOSTEPS+2(PC),D7
	MOVEM.L	D7,-(A7)
	MOVE.W	FADETOSTEPSm(PC),D7
	SWAP	D7
	MOVE.W	D4,D7
	SWAP	D7
	MOVEQ	#1,D4
	SWAP	D4
	MOVE.W	FADETOSTEPS+2(PC),D4
CopySample_FadeL:
	MOVE.W	D3,D5
	MULS	D4,D5
	DIVS	FADETOSTEPS+2(PC),D5
	SUBQ.W	#1,D4
	MOVE.W	(A4),D0
	SWAP	D7
	MULS	D7,D0
	ASR.L	#8,D0
	SWAP	D7
	SWAP	D4
	MULS	D4,D0
	DIVS	FADETOSTEPS+2(PC),D0
	ADDQ.W	#1,D4
	SWAP	D4
	ADD.W	D5,D0
	SWAP	D1
	DC.W	$49f2
	MOVE.B	D0,D1
	SWAP	D1
	ADD.L	D2,D1
	ADD.W	D0,(A1)
	ADDQ.L	#4,A1
	CMP.L	A4,D6
	DBLS	D7,CopySample_FadeL
	SWAP	D7
	MOVE.W	D7,D4
	MOVEM.L	(A7)+,D7
	CMP.L	A4,D6
	BLS.S	CopySample_M1
CopySample_L:
	MOVE.W	(A4),D0
	SWAP	D1
	DC.W	$49f2
	MOVE.B	D0,D1
	SWAP	D1
	MULS	D4,D0
	ASR.L	#8,D0
CopySample_L_IN:
	ADD.L	D2,D1
	ADD.W	D0,(A1)
	ADDQ.L	#4,A1
	CMP.L	A4,D6
	DBLS	D7,CopySample_L
CopySample_M1:
	CMPI.L	#$7fffffff,D1
	BCC.W	CopySample_WASLAST2
	MOVE.W	D0,52(A0)
	MOVE.L	A4,(A0)
	ANDI.L	#$0000ffff,D1
	MOVE.L	D1,4(A0)
	CMP.L	A4,D6
	BLS.S	CopySample_WASLAST
CopySample_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SampleRun:
	DC.L	CopySample_L
CopySample_dL:
	MOVEA.L	SampleRun(PC),A6
	JMP	(A6)
	DC.W	$0000
CopySample_WASLAST:
	TST.W	34(A0)
	BEQ.S	CopySample_WASLAST2
	CMPI.W	#$0008,34(A0)
	BEQ.S	CopySample_Sustained
	MOVEA.L	22(A0),A2
	MOVE.L	26(A0),D6
	MOVE.L	A2,(A0)
	MOVE.L	D6,12(A0)
	MOVEA.L	A2,A4
	SUBQ.L	#2,D6
	SUBQ.W	#1,D7
	BMI.S	CopySample_X
	MOVEQ	#0,D1
	BRA.S	CopySample_dL
CopySample_Sustained:
	TST.W	44(A0)
	BMI.S	CopySample_WASLAST2
	SUBQ.W	#1,44(A0)
	BMI.S	CopySample_DoSustain
	MOVEA.L	22(A0),A2
	MOVE.L	26(A0),D6
	MOVE.L	A2,(A0)
	MOVE.L	D6,12(A0)
	SUBQ.L	#2,D6
	MOVEA.L	A2,A4
	SUBQ.W	#1,D7
	BMI.S	CopySample_X
	MOVEQ	#0,D1
	BRA.S	CopySample_dL
	DC.W	$0000
CopySample_DoSustain:
	MOVEA.L	36(A0),A2
	MOVE.L	40(A0),D6
	MOVE.L	A2,(A0)
	MOVE.L	D6,12(A0)
	SUBQ.L	#2,D6
	MOVEA.L	A2,A4
	SUBQ.W	#1,D7
	BMI.S	CopySample_X
	MOVEQ	#0,D1
	BRA.S	CopySample_dL
	DC.W	$0000
CopySample_ERR:
	BSR.W	WarnFlash
CopySample_WASLAST2:
	CLR.B	46(A0)
	CLR.W	16(A0)
	MOVE.B	#$ff,64(A0)
	MOVEA.L	30(A0),A6
	CLR.L	60(A6)
	BRA.W	CopySample_X
	DC.W	$0000
ProcessCV:
	MOVEM.L	D4-D7,-(A7)
	MOVE.W	130(A0),D4
	MOVE.W	128(A0),D5
	MOVE.W	D5,D6
	ADD.W	D4,D5
	TST.W	134(A0)
	BNE.S	ProcessCV_Complex
	CMPI.W	#$9c00,D5
	BLT.S	ProcessCV_Out
	CMPI.W	#$6400,D5
	BGT.S	ProcessCV_Out
	MOVE.W	D5,128(A0)
ProcessCV_Out:
	MOVE.W	128(A0),D4
	CMPI.W	#$6400,D4
	BGT.S	ProcessCV_Fast
	EXT.W	D3
	MULS	D4,D3
	DIVS	#$6400,D3
	ANDI.W	#$00ff,D3
ProcessCV_Fast:
	MOVEM.L	(A7)+,D4-D7
	RTS
	DC.W	$0000
ProcessCV_Complex:
	MOVE.W	132(A0),D7
	SUB.W	D6,D7
	BPL.S	ProcessCV_C2
	MOVE.W	132(A0),D6
	SUB.W	D5,D6
	BMI.S	ProcessCV_Out
	BRA.S	ProcessCV_Reach
ProcessCV_C2:
	MOVE.W	132(A0),D6
	SUB.W	D5,D6
	BPL.S	ProcessCV_Out
ProcessCV_Reach:
	CLR.W	134(A0)
	CLR.W	130(A0)
	MOVE.W	132(A0),128(A0)
	BRA.S	ProcessCV_Out
	DC.W	$0000
CopySampleMV:
	CMPI.B	#$c8,D3
	BHI.W	CopySample_ERR
	DC.W	$4a3a
	MOVE.W	(A4)+,-(A1)
	BEQ.S	LAB_0FB1
	MOVEA.L	30(A0),A6
	BTST	#2,46(A6)
	BNE.W	CopySampleSF
LAB_0FB1:
	MOVE.L	#CopySampleMV_L,SampleRun
	MOVEQ	#0,D0
	TST.B	46(A0)
	BEQ.S	CopySampleMV_L
	CLR.B	46(A0)
	MOVE.W	52(A0),D3
	CMP.W	FADETOSTEPS+2(PC),D7
	BCS.S	CopySampleMV_L
	MOVEQ	#1,D4
	SWAP	D4
	MOVE.W	FADETOSTEPS+2(PC),D4
	SUB.W	FADETOSTEPS+2(PC),D7
	MOVEM.L	D7,-(A7)
	MOVE.W	FADETOSTEPSm(PC),D7
LAB_0FB2:
	MOVE.W	D3,D5
	MULS	D4,D5
	DIVS	FADETOSTEPS+2(PC),D5
	SUBQ.W	#1,D4
	MOVE.W	(A4),D0
	SWAP	D4
	MULS	D4,D0
	DIVS	FADETOSTEPS+2(PC),D0
	ADDQ.W	#1,D4
	SWAP	D4
	ADD.W	D5,D0
	SWAP	D1
	DC.W	$49f2
	MOVE.B	D0,D1
	SWAP	D1
	ADD.L	D2,D1
	ADD.W	D0,(A1)
	ADDQ.L	#4,A1
	CMP.L	A4,D6
	DBLS	D7,LAB_0FB2
	MOVEM.L	(A7)+,D7
	CMP.L	A4,D6
	BLS.S	CopySampleMV_M1
CopySampleMV_L:
	MOVE.W	(A4),D0
	SWAP	D1
	DC.W	$49f2
	MOVE.B	D0,D1
	SWAP	D1
	ADD.L	D2,D1
	ADD.W	D0,(A1)
	ADDQ.L	#4,A1
	CMP.L	A4,D6
	DBLS	D7,CopySampleMV_L
CopySampleMV_M1:
	CMPI.L	#$7fffffff,D1
	BCC.W	CopySample_WASLAST2
	MOVE.W	D0,52(A0)
	MOVE.L	A4,(A0)
	ANDI.L	#$0000ffff,D1
	MOVE.L	D1,4(A0)
	CMP.L	A4,D6
	BLS.W	CopySample_WASLAST
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
CopySampleSlowSF:
	CLR.L	CopySampleSF_OFFSET
	CMPI.W	#$0001,38(A6)
	BNE.S	LAB_0FB6
	MOVE.L	72(A6),D0
	SUB.L	8(A6),D0
	MOVE.L	D0,CopySampleSF_OFFSET
LAB_0FB6:
	MOVEQ	#0,D4
	MOVE.B	D3,D4
	EXT.W	D4
	MULS	#$0100,D4
	DIVS	#$0064,D4
	MOVEQ	#0,D0
	MOVE.L	#CopySampleSlowSF_L,SampleRun
	TST.B	46(A0)
	BEQ.S	CopySampleSlowSF_go
	CLR.B	46(A0)
	MOVE.W	52(A0),D3
	CMP.W	FADETOSTEPS+2(PC),D7
	BCS.S	CopySampleSlowSF_go
	SUB.W	FADETOSTEPS+2(PC),D7
	MOVEM.L	D7,-(A7)
	MOVE.W	FADETOSTEPSm(PC),D7
	SWAP	D7
	MOVE.W	D4,D7
	SWAP	D7
	MOVEQ	#1,D4
	SWAP	D4
	MOVE.W	FADETOSTEPS+2(PC),D4
CopySampleSlowSFFade_L:
	MOVE.W	D3,D5
	MULS	D4,D5
	DIVS	FADETOSTEPS+2(PC),D5
	SUBQ.W	#1,D4
	MOVE.W	(A4),D0
	SWAP	D7
	MULS	D7,D0
	ASR.L	#8,D0
	SWAP	D7
	SWAP	D4
	MULS	D4,D0
	DIVS	FADETOSTEPS+2(PC),D0
	ADDQ.W	#1,D4
	SWAP	D4
	ADD.W	D5,D0
	SWAP	D1
	DC.W	$49f2
	MOVE.B	D0,D1
	SWAP	D1
	ADD.L	D2,D1
	ADD.W	D0,(A1)
	ADD.W	D0,2(A1)
	ADDQ.L	#4,A1
	CMP.L	A4,D6
	DBLS	D7,CopySampleSlowSFFade_L
	SWAP	D7
	MOVE.W	D7,D4
	MOVEM.L	(A7)+,D7
	CMP.L	A4,D6
	BLS.S	CopySampleSlowSF_M1
CopySampleSlowSF_go:
	MOVE.L	CopySampleSF_OFFSET(PC),D5
	TST.L	D5
	BEQ.S	CopySampleSlowSFmono_go
CopySampleSlowSF_L:
	MOVE.W	(A4),D0
	MOVE.W	0(A4,D5.L),D3
	SWAP	D1
	DC.W	$49f2
	MOVE.B	D0,D1
	SWAP	D1
	MULS	D4,D0
	ASR.L	#8,D0
	MULS	D4,D3
	ASR.L	#8,D3
CopySampleSlowSF_L_IN:
	ADD.W	D0,(A1)+
	ADD.L	D2,D1
	ADD.W	D3,(A1)+
	CMP.L	A4,D6
	DBLS	D7,CopySampleSlowSF_L
CopySampleSlowSF_M1:
	CMPI.L	#$7fffffff,D1
	BCC.W	CopySample_WASLAST2
	MOVE.W	D0,52(A0)
	MOVE.L	A4,(A0)
	ANDI.L	#$0000ffff,D1
	MOVE.L	D1,4(A0)
	CMP.L	A4,D6
	BLS.W	CopySample_WASLAST
CopySampleSlowSF_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
CopySampleSlowSFmono_go:
	MOVE.L	#CopySampleSlowSFmono_L,SampleRun
CopySampleSlowSFmono_L:
	MOVE.W	(A4),D0
	SWAP	D1
	DC.W	$49f2
	MOVE.B	D0,D1
	SWAP	D1
	MULS	D4,D0
	ASR.L	#8,D0
	ADD.W	D0,(A1)+
	ADD.L	D2,D1
	ADD.W	D0,(A1)+
	CMP.L	A4,D6
	DBLS	D7,CopySampleSlowSFmono_L
	MOVE.W	D0,52(A0)
	MOVE.L	A4,(A0)
	ANDI.L	#$0000ffff,D1
	MOVE.L	D1,4(A0)
	CMP.L	A4,D6
	BLS.W	CopySample_WASLAST
CopySampleSlowSFmono_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
CopySampleSF:
	CMPI.B	#$c8,D3
	BHI.W	CopySample_ERR
	CLR.L	CopySampleSF_OFFSET
	CMPI.W	#$0001,38(A6)
	BNE.S	LAB_0FC1
	MOVE.L	72(A6),D0
	SUB.L	8(A6),D0
	MOVE.L	D0,CopySampleSF_OFFSET
LAB_0FC1:
	MOVE.L	#CopySampleSF_L,SampleRun
	MOVEQ	#0,D0
	TST.B	46(A0)
	BEQ.S	CopySampleSF_go
	CLR.B	46(A0)
	MOVE.W	52(A0),D3
	CMP.W	FADETOSTEPS+2(PC),D7
	BEQ.S	CopySampleSF_go
	MOVEQ	#1,D4
	SWAP	D4
	MOVE.W	FADETOSTEPS+2(PC),D4
	SUB.W	FADETOSTEPS+2(PC),D7
	MOVEM.L	D7,-(A7)
	MOVE.W	FADETOSTEPSm(PC),D7
LAB_0FC2:
	MOVE.W	D3,D5
	MULS	D4,D5
	DIVS	FADETOSTEPS+2(PC),D5
	SUBQ.W	#1,D4
	MOVE.W	(A4),D0
	SWAP	D4
	MULS	D4,D0
	DIVS	FADETOSTEPS+2(PC),D0
	ADDQ.W	#1,D4
	SWAP	D4
	ADD.W	D5,D0
	SWAP	D1
	DC.W	$49f2
	MOVE.B	D0,D1
	SWAP	D1
	ADD.L	D2,D1
	ADD.W	D0,(A1)
	ADD.W	D0,2(A1)
	ADDQ.L	#4,A1
	CMP.L	A4,D6
	DBLS	D7,LAB_0FC2
	MOVEM.L	(A7)+,D7
	CMP.L	A4,D6
	BLS.S	CopySampleSF_M1
CopySampleSF_go:
	MOVE.L	CopySampleSF_OFFSET(PC),D5
	TST.L	D5
	BEQ.S	CopySampleSFmono_go
CopySampleSF_L:
	MOVE.W	(A4),D0
	SWAP	D1
	MOVE.W	0(A4,D5.L),D3
	DC.W	$49f2
	MOVE.B	D0,D1
	SWAP	D1
	ADD.W	D0,(A1)+
	ADD.L	D2,D1
	ADD.W	D3,(A1)+
	CMP.L	A4,D6
	DBLS	D7,CopySampleSF_L
CopySampleSF_M1:
	MOVE.L	CopySampleSF_OFFSET(PC),D5
	CMPI.L	#$7fffffff,D1
	BCC.W	CopySample_WASLAST2
	MOVE.W	D0,52(A0)
	MOVE.L	A4,(A0)
	ANDI.L	#$0000ffff,D1
	MOVE.L	D1,4(A0)
	CMP.L	A4,D6
	BLS.W	CopySample_WASLAST
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
CopySampleSFmono_go:
	MOVE.L	#CopySampleSFmono_L,SampleRun
CopySampleSFmono_L:
	MOVE.W	(A4),D0
	SWAP	D1
	DC.W	$49f2
	MOVE.B	D0,D1
	SWAP	D1
	ADD.W	D0,(A1)+
	ADD.L	D2,D1
	ADD.W	D0,(A1)+
	CMP.L	A4,D6
	DBLS	D7,CopySampleSFmono_L
	MOVE.L	CopySampleSF_OFFSET(PC),D5
	CMPI.L	#$7fffffff,D1
	BCC.W	CopySample_WASLAST2
	MOVE.W	D0,52(A0)
	MOVE.L	A4,(A0)
	ANDI.L	#$0000ffff,D1
	MOVE.L	D1,4(A0)
	CMP.L	A4,D6
	BLS.W	CopySample_WASLAST
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
CopySampleZero:
	MOVE.L	#CopySampleZero_L,SampleRun
CopySampleZero_L:
	SWAP	D1
	DC.W	$49f2
	MOVE.B	D0,D1
	SWAP	D1
	ADD.L	D2,D1
	ADDQ.L	#4,A1
	CMP.L	A4,D6
	DBLS	D7,CopySampleZero_L
	CMPI.L	#$7fffffff,D1
	BCC.W	CopySample_WASLAST2
	CLR.W	52(A0)
	MOVE.L	A4,(A0)
	ANDI.L	#$0000ffff,D1
	MOVE.L	D1,4(A0)
	CMP.L	A4,D6
	BLS.W	CopySample_WASLAST
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
InitVolumeList:
	RTS
	DC.W	$0000
StopVoices:
	BRA.W	AudioDMAOff
StartVoices:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.W	AudioIRQ_STATUS+2
	LEA	Test_VOICEEXPANDER(PC),A5
	MOVEA.L	26(A5),A4
	MOVE.W	18(A5),D0
	SUBQ.W	#2,D0
	CMP.W	2(A4),D0
	BNE.S	StartVoices_X
	LEA	HARDBASE,A5
	BSR.W	AudioDMAOn
StartVoices_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
SetAudioPeriod:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_VOICEEXPANDER(PC),A3
	MOVEA.L	26(A3),A4
	MOVE.W	30(A3),D4
	MOVE.W	10(A3),D7
	MOVE.W	26(A4),D1
	LEA	HARDBASE,A5
	LEA	0(A5,D1.W),A5
	MOVEQ	#0,D0
	MOVE.W	6(A4),D0
	MOVE.W	MTune(PC),D1
	ADDI.W	#$0032,D1
	MULU	D1,D0
	DIVU	#$0064,D0
	MOVE.W	D0,6(A5)
	MOVE.W	D0,22(A5)
	MOVE.W	D0,38(A5)
	MOVE.W	D0,54(A5)
	MOVE.W	D0,StreamPeriod
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
MTune:
	DC.W	$0032
SetAudioRegisters:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Test_VOICEEXPANDER(PC),A3
	MOVEA.L	26(A3),A4
	MOVE.W	30(A3),D4
	MOVE.W	10(A3),D7
	SUBQ.W	#1,D7
LAB_0FD1:
	MOVE.W	26(A4),D1
	LEA	HARDBASE,A5
	LEA	0(A5,D1.W),A5
	MOVE.W	6(A4),6(A5)
	MOVE.W	20(A4),8(A5)
	MOVE.W	6(A4),StreamPeriod
	MOVE.W	18(A4),D0
	ANDI.L	#$0000ffff,D0
	DC.W	$4c79
	DC.W	$0000
	DC.L	OverSample3
	LSR.W	#1,D0
	LSR.W	#1,D0
	MOVE.W	D0,4(A5)
	MOVE.L	22(A4),(A5)
	LEA	0(A4,D4.W),A4
	DBF	D7,LAB_0FD1
	BSR.W	SetAudioPeriod
	JSR	AdjustAudioRegs
	CLR.W	BufferSyncFlag
	LEA	SetBufferA(PC),A5
	MOVE.L	A5,BufferSet
	LEA	SetBufferB(PC),A5
	MOVE.L	A5,LAB_11D4
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
CheckQJMsg:
	DC.W	$4aba
	MOVE.L	A2,-(A7)
	BNE.S	LAB_0FD3
	RTS
LAB_0FD3:
	MOVEM.L	A0,-(A7)
	MOVEA.L	CheckQJMsg_JMP(PC),A0
	JSR	(A0)
	CLR.L	CheckQJMsg_JMP
	MOVEA.L	(A7)+,A0
	RTS
JumpSetBuffer:
	MOVEM.L	A0,-(A7)
	MOVEA.L	BufferSet(PC),A0
	JSR	(A0)
	MOVEA.L	(A7)+,A0
	RTS
	DC.W	$0000
SetBufferA:
	MOVEM.L	D0-D1/D4/D7/A2-A5,-(A7)
	LEA	Test_VOICEEXPANDER(PC),A3
	MOVEA.L	26(A3),A4
	MOVE.W	30(A3),D4
	MOVE.W	10(A3),D7
	SUBQ.W	#1,D7
LAB_0FD6:
	MOVE.W	26(A4),D1
	LEA	HARDBASE,A5
	LEA	0(A5,D1.W),A5
	MOVE.W	18(A4),D0
	ANDI.L	#$0000ffff,D0
	DC.W	$4c79
	DC.W	$0000
	DC.L	OverSample3
	LSR.W	#1,D0
	LSR.W	#1,D0
	MOVE.W	D0,4(A5)
	MOVE.L	22(A4),(A5)
	LEA	0(A4,D4.W),A4
	DBF	D7,LAB_0FD6
	CLR.W	BufferSyncFlag
	MOVEM.L	(A7)+,D0-D1/D4/D7/A2-A5
	RTS
	DC.W	$0000
SetBufferB:
	MOVEM.L	D0-D1/D4/D7/A2-A5,-(A7)
	LEA	Test_VOICEEXPANDER(PC),A3
	MOVEA.L	26(A3),A4
	MOVE.W	30(A3),D4
	MOVE.W	10(A3),D7
	SUBQ.W	#1,D7
LAB_0FD8:
	MOVE.W	26(A4),D1
	LEA	HARDBASE,A5
	LEA	0(A5,D1.W),A5
	MOVE.W	18(A4),D0
	ANDI.L	#$0000ffff,D0
	DC.W	$4c79
	DC.W	$0000
	DC.L	OverSample3
	LSR.W	#1,D0
	LSR.W	#1,D0
	MOVE.W	D0,4(A5)
	MOVEA.L	22(A4),A2
	DC.W	$45f2
	DC.W	$0200
	MOVE.L	A2,(A5)
	LEA	0(A4,D4.W),A4
	DBF	D7,LAB_0FD8
	MOVE.W	#$ffff,BufferSyncFlag
	MOVEM.L	(A7)+,D0-D1/D4/D7/A2-A5
	RTS
	DC.W	$0000
SwapSyncBuffer:
	MOVEM.L	D0,-(A7)
	MOVE.L	BufferSet(PC),D0
	MOVE.L	LAB_11D4(PC),BufferSet
	MOVE.L	D0,LAB_11D4
	MOVEM.L	(A7)+,D0
	RTS
PlayNoteGetInstr:
	MOVEM.L	D0-D1,-(A7)
	MOVEQ	#0,D0
	MOVE.B	3(A2),D0
	LEA	Test_INSTRMAN(PC),A1
	MOVEQ	#0,D1
	MOVE.W	8(A1),D1
	DC.W	$4c01
	DC.W	$0000
	MOVEA.L	4(A1),A1
	MOVEA.L	0(A1,D0.L),A1
	MOVEM.L	(A7)+,D0-D1
	RTS
	DC.W	$0000
PlayNoteGetSample:
	MOVEM.L	D1,-(A7)
	LEA	Test_VOICEEXPANDER(PC),A5
	MULU	2(A5),D1
	MOVEA.L	6(A5),A0
	LEA	0(A0,D1.W),A0
	MOVEM.L	(A7)+,D1
	RTS
	DC.W	$0000
PlayNoteInstr:
	BSR.W	ClearInstrSaPos
	MOVEM.L	D1,-(A7)
	MOVE.W	(A1),D1
	BMI.S	PlayNoteInstr_Simple
	MOVE.L	A1,30(A0)
	MOVE.W	D1,34(A0)
	MOVE.L	8(A1),D0
	MOVE.L	D0,(A0)
	MOVE.L	D0,66(A0)
	ADD.L	12(A1),D0
	MOVE.L	D0,12(A0)
	CLR.B	64(A0)
	CLR.B	46(A0)
	CMPI.W	#$0001,16(A0)
	BNE.S	PlayNoteInstr_FadeOff
	MOVE.B	#$ff,46(A0)
PlayNoteInstr_FadeOff:
	CLR.L	4(A0)
	TST.W	D1
	BEQ.S	PlayNoteInstr_Simple
	CMPI.W	#$0008,D1
	BHI.S	PlayNoteInstr_Simple
	MOVE.L	20(A1),22(A0)
	MOVE.L	24(A1),26(A0)
	CMPI.W	#$0008,D1
	BNE.S	PlayNoteInstr_Simple
	MOVE.L	30(A1),36(A0)
	MOVE.L	34(A1),40(A0)
	MOVE.W	28(A1),44(A0)
PlayNoteInstr_Simple:
	MOVEM.L	(A7)+,D1
	RTS
PlayNotePitch:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#0,D0
	MOVE.B	1(A2),D0
	MOVE.B	D0,49(A0)
	ADD.W	44(A1),D0
	DC.W	$4a7a
	AND.W	(A6)+,D4
	BEQ.S	PlayNotePitch_NoPosTune
	BTST	#0,46(A1)
	BNE.S	PlayNotePitch_NoPosTune
	ADD.W	PatternTune(PC),D0
PlayNotePitch_NoPosTune:
	BSR.W	GetNoteFreq
	MOVEQ	#0,D5
	MOVE.W	42(A1),D5
	BEQ.S	PlayNotePitch_NoFineTune
	BMI.S	PlayNotePitch_SubFineTune
	DC.W	$4c00
	ADDQ.B	#2,D4
	DC.W	$4c7c
	ADDQ.B	#2,D4
	DC.W	$0000
	DC.W	$0800
	ADD.L	D5,D0
	BRA.S	PlayNotePitch_NoFineTune
PlayNotePitch_SubFineTune:
	NEG.W	D5
	DC.W	$4c00
	ADDQ.B	#2,D4
	DC.W	$4c7c
	ADDQ.B	#2,D4
	DC.W	$0000
	DC.W	$0800
	SUB.L	D5,D0
PlayNotePitch_NoFineTune:
	MOVE.L	D0,8(A0)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
StartSample:
	TST.W	(A4)
	BMI.W	StartSample_FASTX
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEQ	#0,D5
	MOVE.W	42(A4),D5
	BEQ.S	StartSample_NoFineTune
	BMI.S	StartSample_SubFineTune
	DC.W	$4c00
	ADDQ.B	#2,D4
	DC.W	$4c7c
	ADDQ.B	#2,D4
	DC.W	$0000
	DC.W	$0800
	ADD.L	D5,D0
	BRA.S	StartSample_NoFineTune
StartSample_SubFineTune:
	NEG.W	D5
	DC.W	$4c00
	ADDQ.B	#2,D4
	DC.W	$4c7c
	ADDQ.B	#2,D4
	DC.W	$0000
	DC.W	$0800
	SUB.L	D5,D0
StartSample_NoFineTune:
	CMPI.B	#$f8,D3
	BEQ.W	StartSampleSetFreqOnly
	CMPI.B	#$f7,D3
	BHI.S	StartSampleSet_MM
	CMPI.B	#$f6,D3
	BCC.W	StartSampleFreqFX
StartSampleSet_MM:
	MOVE.L	A4,30(A0)
	MOVE.W	(A4),34(A0)
	DC.W	$4a3a
	MOVE.L	(A4),(A6)+
	BNE.W	StartSampleSet_DIFFSTART
	MOVE.L	8(A4),D4
	MOVE.L	D4,(A0)
	MOVE.L	D4,116(A0)
	MOVE.L	D4,66(A0)
	ADD.L	12(A4),D4
	MOVE.L	D4,12(A0)
BAK_DIFFSTART:
	CLR.B	64(A0)
	CLR.B	46(A0)
	CMPI.W	#$0001,16(A0)
	BNE.S	StartSampleSet_NoFade
	MOVE.B	#$ff,46(A0)
StartSampleSet_NoFade:
	DC.W	$4a3a
	MOVE.L	-(A0),(A6)
	BNE.W	StartSampleSet_DIFFPITCH
BAK_DIFFPITCH:
	CLR.W	60(A0)
	CLR.W	62(A0)
	CLR.L	4(A0)
	MOVE.L	D0,8(A0)
	LSL.W	#8,D3
	MOVE.W	D3,20(A0)
	MOVE.W	#$0001,16(A0)
	TST.W	(A4)
	BEQ.S	StartSample_X
	CMPI.W	#$0004,(A4)
	BNE.S	StartSample_NOTLOOPED
	MOVE.L	20(A4),22(A0)
	MOVE.L	24(A4),26(A0)
	MOVE.L	26(A0),12(A0)
	BRA.S	StartSample_X
StartSample_NOTLOOPED:
	CMPI.W	#$0008,(A4)
	BNE.S	StartSample_X
	MOVE.L	20(A4),22(A0)
	MOVE.L	24(A4),26(A0)
	MOVE.L	30(A4),36(A0)
	MOVE.L	34(A4),40(A0)
	MOVE.W	28(A4),44(A0)
	MOVE.L	26(A0),12(A0)
StartSample_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
StartSample_FASTX:
	RTS
	DC.W	$0000
StartSampleSetFreqOnly:
	CLR.W	62(A0)
	MOVE.L	D0,8(A0)
	BRA.S	StartSample_X
StartSampleFreqFX:
	CMPI.B	#$f7,D3
	BEQ.S	StartSamplePitchUp
	CMPI.B	#$f6,D3
	BEQ.S	StartSamplePitchDown
	MOVEQ	#100,D3
	BRA.W	StartSampleSet_MM
StartSamplePitchUp:
	MOVE.L	8(A0),D0
	LSR.L	#7,D0
	ADD.L	D0,8(A0)
	MOVEQ	#100,D3
	BRA.W	StartSampleSet_MM
StartSamplePitchDown:
	MOVE.L	8(A0),D0
	LSR.L	#7,D0
	SUB.L	D0,8(A0)
	MOVEQ	#100,D3
	BRA.W	StartSampleSet_MM
StartSampleSet_DIFFSTART:
	MOVEM.L	D3,-(A7)
	MOVE.L	SAMPLEDIFF+2(PC),D3
	ADD.L	D3,D3
	MOVE.L	8(A4),D4
	ADD.L	D3,D4
	MOVE.L	D4,(A0)
	MOVE.L	D4,66(A0)
	MOVE.L	D4,116(A0)
	ADD.L	12(A4),D4
	SUB.L	D3,D4
	BMI.S	BAK_DIFFSTARTERR
	MOVE.L	D4,12(A0)
	MOVEM.L	(A7)+,D3
	BRA.W	BAK_DIFFSTART
BAK_DIFFSTARTERR:
	MOVE.L	8(A4),D4
	MOVE.L	D4,(A0)
	MOVE.L	D4,66(A0)
	MOVE.L	D4,116(A0)
	ADD.L	12(A4),D4
	MOVE.L	D4,12(A0)
	MOVEM.L	(A7)+,D3
	BRA.W	BAK_DIFFSTART
StartSampleSet_DIFFPITCH:
	DC.W	$4aba
	DC.W	$2ba8
	BEQ.W	BAK_DIFFPITCH
	MOVEM.L	D2-D4,-(A7)
	MOVE.L	PITCHDIFF+2(PC),D4
	MOVE.L	D0,D2
	MOVEQ	#12,D3
	LSR.L	D3,D2
	DC.W	$4c04
	MOVE.L	D0,D0
	ADDQ.B	#1,PITCHDIFF_COUNTER+1
	BTST	#1,PITCHDIFF_COUNTER+1(PC)
	BNE.S	LAB_0FF4
	ADD.L	D2,D0
	BRA.S	LAB_0FF5
LAB_0FF4:
	SUB.L	D2,D0
LAB_0FF5:
	MOVEM.L	(A7)+,D2-D4
	BRA.W	BAK_DIFFPITCH
	DC.W	$0000
QuitActualProject:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Quit_CTXT(PC),A0
	BSR.W	MulitChoiceRequest
	TST.W	D0
	BEQ.S	LAB_0FF8
	CMPI.W	#$0001,D0
	BEQ.S	LAB_0FF7
	JSR	SaveActualProjectAs
LAB_0FF7:
	BSR.W	MAINEXIT
LAB_0FF8:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
KillActualProject:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	Kill_CTXT+1(PC),A0
	BSR.W	MulitChoiceRequest
	TST.W	D0
	BEQ.S	LAB_0FFB
	CMPI.W	#$0001,D0
	BEQ.S	LAB_0FFA
	JSR	SaveActualProjectAs
LAB_0FFA:
	JSR	DoRestart
LAB_0FFB:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SetCPatNumb:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$00000400,D2
	MOVEQ	#1,D1
	LEA	VEX_PattNumb(PC),A0
	LEA	CustomPatternL_TXT+1(PC),A1
	JSR	ReqMinMaxLong
	TST.W	D0
	BEQ.S	LAB_0FFD
	JSR	DoRestart
LAB_0FFD:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
SetCPatLen:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	#$00000400,D2
	MOVEQ	#1,D1
	LEA	VEX_LinesPerPattern(PC),A0
	LEA	CustomPatternN_TXT(PC),A1
	JSR	ReqMinMaxLong
	TST.W	D0
	BEQ.S	LAB_0FFF
	JSR	DoRestart
LAB_0FFF:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	RTS
BuildMainTitle:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	MainScreen_TXT+1(PC),A0
	MOVEA.L	ScreenTitle_PTR+2(PC),A1
	MOVEA.L	A1,A2
	BSR.W	CopyString
	LEA	Audio0+1(PC),A0
	DC.W	$0cba
	DC.W	$0001
	DBEQ	D0,COPYBACK_JR
	BEQ.S	BuildMainTitle_Main
	LEA	Audio2(PC),A0
	DC.W	$0cba
	DC.W	$0001
	DC.W	$570c
	DC.W	$27be
	BEQ.S	BuildMainTitle_Main
	LEA	Audio3(PC),A0
	DC.W	$0cba
	DC.W	$0001
	ADDQ.B	#3,(A4)+
	DC.W	$27b0
	BEQ.S	BuildMainTitle_Main
	LEA	Audio4+1(PC),A0
	DC.W	$0cba
	DC.W	$0001
	ADDQ.W	#3,(A6)+
	DC.W	$27a2
	BEQ.S	BuildMainTitle_Main
	LEA	Audio5+1(PC),A0
	DC.W	$0cba
	DC.W	$0001
	ADDQ.L	#3,-(A2)
	DC.W	$2794
	BEQ.S	BuildMainTitle_Main
	LEA	Audio6+1(PC),A0
	DC.W	$0cba
	DC.W	$0001
	SNE	(A4)
	DC.W	$2786
	BEQ.S	BuildMainTitle_Main
	LEA	Audio8+1(PC),A0
	DC.W	$0cba
	DC.W	$0001
	SUBQ.W	#3,D4
	MOVE.L	EXT_001a.W,16890(A3)
	MOVEQ	#-60,D3
	DC.W	$0cba
	DC.W	$0001
	SCS	(A4)+
	MOVE.L	26370(A2),0(A3)
BuildMainTitle_Main:
	MOVEA.L	A2,A1
	BSR.W	AddString
	LEA	MainScreenVoc2_TXT(PC),A0
	BSR.W	AddString
	MOVEQ	#1,D6
	LEA	DSP_TXT+1(PC),A0
	DC.W	$4a3a
	DC.W	$29f4
	BNE.S	BuildDspTit
	DC.W	$4a7a
	DC.W	$1e68
	BEQ.W	BuildMainTitle_NoDSP
	DC.W	$0000
BuildDspTit:
	MOVEQ	#1,D7
	BSR.W	AddString
	DC.W	$4a7a
	DC.W	$1e58
	BEQ.S	BuildMainTitle_DSP1
	MOVEQ	#0,D7
	BSR.W	BuildMainTitLPF
	LEA	DSPEcho_TXT(PC),A0
	DC.W	$0cba
	DC.W	$0001
	ADDQ.B	#5,EXT_0011.W
	BEQ.S	BuildMainTitle_DSP1b
	LEA	DSPCrossEcho_TXT(PC),A0
	DC.W	$0cba
	DC.W	$0001
	ADDQ.W	#5,-(A0)
	DC.W	$2932
	BEQ.S	BuildMainTitle_DSP1b
	LEA	DSPCrossEcho2_TXT(PC),A0
	DC.W	$0cba
	DC.W	$0001
	ADDQ.L	#5,(A0)+
	MOVE.L	-(A4),-(A4)
	BEQ.S	BuildMainTitle_DSP1b
	LEA	DSPCenterEcho_TXT+1(PC),A0
	DC.W	$0cba
	DC.W	$0001
	DC.W	$5b08
	MOVE.L	(A6),-(A4)
	BEQ.S	BuildMainTitle_DSP1b
	LEA	DSPunknown_TXT+1(PC),A0
BuildMainTitle_DSP1b:
	BSR.W	AddString
	MOVEQ	#0,D6
BuildMainTitle_DSP1:
	DC.W	$4a3a
	DC.W	$2990
	BEQ.S	BuildMainTitle_NoDSP
	BSR.S	BuildMainTitLPF2
	BTST	#0,POSTDSP_FLAG+2(PC)
	BEQ.S	BuildMainTitle_NoDel
	LEA	DSPDelay_TXT(PC),A0
	LEA	0(A0,D7.W),A0
	BSR.W	AddString
	MOVEQ	#0,D6
BuildMainTitle_NoDel:
	BTST	#1,POSTDSP_FLAG+2(PC)
LAB_1006:
	BEQ.S	BuildMainTitle_NoDSP
	LEA	DSPChor_TXT(PC),A0
	LEA	0(A0,D6.W),A0
	BSR.W	AddString
BuildMainTitle_NoDSP:
	DC.W	$0c7a
	DC.W	$ffff
	ANDI.W	#$6608,(A6)
	LEA	MACROrecord_TXT+1(PC),A0
	BSR.W	AddString
	DC.W	$4a7a
	DC.W	$bbb2
	BEQ.S	LAB_1008
	LEA	Editrecord_TXT+1(PC),A0
	BSR.W	AddString
LAB_1008:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
BuildMainTitLPF:
	MOVEM.L	D0,-(A7)
	MOVEQ	#32,D0
	DC.W	$4a3a
	DC.W	$2934
	BEQ.S	TitLPFOk
	MOVEQ	#70,D0
TitLPFOk:
	MOVE.B	D0,DSPEcho_TXT
	MOVE.B	D0,DSPCrossEcho_TXT
	MOVE.B	D0,DSPCrossEcho2_TXT
	MOVE.B	D0,DSPCenterEcho_TXT+1
	MOVEM.L	(A7)+,D0
	RTS
BuildMainTitLPF2:
	MOVEM.L	D0,-(A7)
	MOVEQ	#32,D0
	BTST	#2,POSTDSP_FLAG+2(PC)
	BEQ.S	TitLPFOk2
	MOVEQ	#70,D0
TitLPFOk2:
	MOVE.B	D0,LAB_15BB+1
	MOVEM.L	(A7)+,D0
	RTS
InitWinFontDim:
	MOVEM.L	A1,-(A7)
	BSR.W	GetWindowRP
LAB_100E:
	DC.W	$4a89
	BEQ.S	LAB_100F
	JSR	InitFontDim
LAB_100F:
	MOVEA.L	(A7)+,A1
	RTS
	DC.W	$0000
AudioDMAOn:
	MOVE.W	#$800f,DMACON
	RTS
	DC.W	$0000
AudioDMAOff:
	MOVE.W	#$000f,DMACON
	RTS
CSUM:
	MOVE.B	(A0),(A0)
	MOVE.B	D4,(A0)+
ERROR_FLAG:
	ORI.B	#$00,D0
MAINEXIT_FLAG:
	DC.W	$0000
Main_AUTOMEM:
	DC.L	First_PATHEAD+2
	DC.L	TrackBuffer_PTR+2
	DC.L	ActualBlock_PTR
	DC.L	UndoBuffer_PTR
	DC.L	LockBuffer_PTR+2
	DC.L	TabulatorMem_PTR+2
	DC.L	SequenceMem_PTR+2
	DC.L	TestSongData_PTR
	DC.L	NoteMem_PTR+2
	DC.W	$ffff
	DC.W	$ffff
MakeScreenPublic:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.B	PubScreen_PUBLIC
	MOVEA.L	MainScreen_PTR+2(PC),A0
	MOVEQ	#0,D0
	MOVE.L	A0,LAB_120A
	MOVE.L	D0,LAB_120B
	MOVEA.L	_IntuitionBase,A6
	JSR	-552(A6)
	MOVE.L	D0,PSDEBUG
	BTST	#0,D0
	BEQ.S	LAB_1017
	MOVE.B	#$ff,PubScreen_PUBLIC
LAB_1017:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
MakeScreenPrivate:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.B	PubScreen_PUBLIC
	MOVEA.L	MainScreen_PTR+2(PC),A0
	MOVEQ	#0,D0
	BSET	#1,D0
	MOVE.L	A0,LAB_120A
	MOVE.L	D0,LAB_120B
LAB_1019:
	MOVEA.L	_IntuitionBase,A6
	JSR	-552(A6)
	MOVE.L	D0,PSDEBUG
	BTST	#1,D0
	BNE.S	LAB_101A
	MOVE.B	#$ff,PubScreen_PUBLIC
LAB_101A:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
PSCheckVisitors:
	BSR.S	MakeScreenPrivate
LAB_101C:
	MOVE.B	PubScreen_PUBLIC(PC),D0
	DC.W	$49c0
	BSR.W	MakeScreenPublic
	RTS
CheckPS:
	BSR.S	PSCdo
	RTS
	DC.W	$0000
PSCdo:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
Init9BitStream:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	Stream9BitTAB_PTR(PC),A0
	MOVEQ	#1,D1
	MOVEQ	#-128,D2
	MOVEQ	#-128,D3
LAB_1020:
	MOVE.W	#$00ff,D0
LAB_1021:
	MOVE.W	D2,D4
	SWAP	D4
	MOVE.W	D3,D4
	MOVE.L	D4,(A0)+
	ADDQ.W	#1,D3
	MOVE.W	D2,D4
	SWAP	D4
	MOVE.W	D3,D4
	MOVE.L	D4,(A0)+
	ADDQ.W	#1,D2
	DBF	D0,LAB_1021
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
GetWindowUP:
	DC.W	$4a88
	BNE.S	LAB_1023
	RTS
LAB_1023:
	MOVEA.L	86(A0),A0
	RTS
GetWindowRP:
	DC.W	$4a88
	BEQ.S	LAB_1025
	MOVEA.L	50(A0),A1
	RTS
LAB_1025:
	SUBA.L	A1,A1
	RTS
	DC.W	$0000
GetWinStruct:
	MOVE.L	46(A0),(A1)
	MOVE.L	50(A0),4(A1)
	MOVE.L	86(A0),8(A1)
	RTS
	DC.W	$0000
AnalyzeMsg:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	GetMsgShift
LAB_1028:
	MOVEA.L	A2,A3
	MOVE.L	(A1)+,D0
	CMPI.L	#$ffffffff,D0
	BEQ.S	LAB_102C
	MOVE.L	(A1)+,D1
	MOVE.L	(A1)+,D2
	MOVE.L	(A1)+,D3
	MOVEA.L	(A1)+,A4
	MOVE.L	(A1)+,MESSAGE_PARAM
	CMP.L	20(A0),D0
	BEQ.S	LAB_1029
	BRA.S	LAB_1028
LAB_1029:
	MOVEA.L	D1,A1
LAB_102A:
	MOVE.L	(A1)+,D0
	MOVE.L	0(A0,D2.W),D4
	AND.L	D3,D4
	CMPI.L	#$ffffffff,D0
	BEQ.S	LAB_102B
	MOVEA.L	(A1)+,A2
	CMP.L	D4,D0
	BNE.S	LAB_102A
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	(A2)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	BRA.S	LAB_102D
LAB_102B:
	DC.W	$4a8c
	BEQ.S	LAB_102C
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	(A4)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	BRA.S	LAB_102D
LAB_102C:
	DC.W	$4a8b
	BEQ.S	LAB_102D
	MOVEM.L	D0-D7/A0-A6,-(A7)
	JSR	(A3)
	MOVEM.L	(A7)+,D0-D7/A0-A6
LAB_102D:
	BSR.S	SendBackIMsg
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
SendBackIMsg:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A0,A1
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-378(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
AnalyzeMsgRECORD_FLAG:
LAB_102F:
	ORI.B	#$00,D0
AnalyzeMsgRecAct_PTR:
	ORI.B	#$00,D0
AnalyzeMsgRec_PTR:
	ORI.B	#$00,D0
AnalyzeMsgRecMem_PTR:
	ORI.B	#$00,D0
LAB_1034:
	DC.W	$0000
	MOVE.B	D0,D4
	ORI.B	#$00,D1
RedrawRecGad:
	MOVEM.L	D0-D1,-(A7)
	MOVE.W	AnalyzeMsgRECORD_FLAG(PC),D1
	MOVE.L	#$50453149,D0
	JSR	NGSetGadBool
	MOVEM.L	(A7)+,D0-D1
	RTS
	DC.W	$0000
RecordMsg:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$0c3a
	DC.W	$00ff
	MOVEP.W	26440(A0),D1
	DC.W	$0c7a
	DC.W	$ffff
	DC.W	$ffbc
	BNE.S	LAB_1037
	DC.W	$4aba
	DC.W	$ffbe
	BEQ.S	LAB_1037
	DC.W	$4aba
	DC.W	$ffb4
	BEQ.S	LAB_1037
	DC.W	$0c7a
	DC.W	$00ff
	DC.W	$ffaa
	BCC.S	LAB_1038
	ADDQ.W	#1,LAB_102F+2
	MOVEA.L	AnalyzeMsgRecAct_PTR(PC),A5
	MOVE.W	Shift_KEY+2(PC),8(A5)
	MOVE.W	RECORD_STATUS(PC),12(A5)
	MOVE.L	D0,(A5)
	MOVE.L	D1,4(A5)
	MOVE.W	D2,16(A5)
	LEA	20(A5),A5
	MOVE.L	A5,AnalyzeMsgRecAct_PTR
	BSR.S	RedrawRecGad
LAB_1037:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_1038:
	BSR.S	ForceStopRecordMsg
	BRA.S	LAB_1037
	DC.W	$0000
ForceStopRecordMsg:
	CLR.W	AnalyzeMsgRECORD_FLAG
	BSR.W	RedrawRecGad
	RTS
ToogleRecordMsg:
	NOT.W	AnalyzeMsgRECORD_FLAG
	BSR.W	RedrawRecGad
	RTS
AnalyzeMsgInitRecord:
	CLR.W	LAB_102F+2
	MOVE.L	AnalyzeMsgRec_PTR(PC),AnalyzeMsgRecAct_PTR
	RTS
LoadAndRunMacro:
	BSR.S	LoadMacro
	DC.W	$4a7a
	DC.W	$ff42
	BEQ.S	LAB_103D
	JSR	ReplayMacro
LAB_103D:
	RTS
LoadMacro:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	ForceStopRecordMsg
	LEA	Macro_MATCH+1(PC),A0
	BSR.W	SetFileRequestPat
	LEA	MacroDir_TXT+3(PC),A0
	BSR.W	SetFileRequestPath
	LEA	MacroLoad_TXT(PC),A0
	BSR.W	SimpleFileRequest
	TST.W	D0
	BEQ.S	LAB_1040
	MOVEA.L	FinalFileNameRT_PTR(PC),A0
	BSR.W	FileLength
	CMP.L	LAB_1034(PC),D0
	BHI.S	LAB_1040
	MOVE.L	D0,D6
	MOVE.L	#$000003ed,D0
	JSR	EasyDOpenFFN
	TST.L	D0
	BEQ.S	LAB_1040
	MOVEA.L	AnalyzeMsgRecMem_PTR(PC),A0
	MOVE.L	D6,D0
	JSR	EasyDRead
	TST.L	D0
	BEQ.S	LAB_1041
	CMPI.L	#$53796d4d,(A0)
	BNE.S	LAB_1041
	CMPI.L	#$4d43524f,4(A0)
	BNE.S	LAB_1041
	CMPI.L	#$00000040,8(A0)
	BNE.S	LAB_1041
	CMPI.L	#$00000014,12(A0)
	BNE.S	LAB_1041
	CMPI.W	#$0001,20(A0)
	BNE.S	LAB_1041
	TST.W	22(A0)
	BNE.S	LAB_1041
	MOVE.L	16(A0),D7
	MOVE.W	D7,LAB_102F+2
LAB_103F:
	JSR	EasyDClose
	JSR	CheckResidentMem
LAB_1040:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_1041:
	MOVE.L	#NoMacroFile_TXT+1,AssText_TXT
	JSR	PrintAssTextF
	BRA.S	LAB_103F
SaveMacro:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.W	ForceStopRecordMsg
	DC.W	$4a7a
	DC.W	$fe78
	BEQ.W	LAB_1043
	LEA	Macro_MATCH+1(PC),A0
	BSR.W	SetFileRequestPat
	LEA	MacroDir_TXT+3(PC),A0
	BSR.W	SetFileRequestPath
	LEA	MacroSaveAs_TXT+1(PC),A0
	BSR.W	SimpleFileRequest
	TST.W	D0
	BEQ.S	LAB_1043
	MOVEA.L	FinalFileNameRT_PTR(PC),A0
	BSR.W	ClipExtension
	LEA	LAB_13C4+1(PC),A1
	BSR.W	AddExtention
	MOVE.L	#$000003ee,D0
	JSR	EasyDOpenFFN
	TST.L	D0
	BEQ.S	LAB_1043
	MOVEA.L	AnalyzeMsgRecMem_PTR(PC),A0
	MOVE.L	#$53796d4d,(A0)
	MOVE.L	#$4d43524f,4(A0)
	MOVE.L	#$00000040,8(A0)
	MOVE.L	#$00000014,12(A0)
	MOVEQ	#0,D7
	MOVE.W	LAB_102F+2(PC),D7
	MOVE.L	D7,16(A0)
	MOVE.W	#$0001,20(A0)
	CLR.W	22(A0)
	MOVEQ	#64,D0
	MULU	#$0014,D7
	ADD.L	D7,D0
	JSR	EasyDWrite
	JSR	EasyDClose
LAB_1043:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
InitMacroMem:
	MOVEM.L	D0,-(A7)
	MOVE.L	AnalyzeMsgRecMem_PTR(PC),D0
	ADDI.L	#$00000040,D0
	MOVE.L	D0,AnalyzeMsgRec_PTR
	MOVEM.L	(A7)+,D0
	RTS
	DC.W	$0000
ReplayRecordedMsg:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CLR.W	AnalyzeMsgRECORD_FLAG
	DC.W	$4aba
	DC.W	$fdc4
	BEQ.S	LAB_1047
	MOVE.W	LAB_102F+2(PC),D7
	SUBQ.W	#1,D7
	BMI.S	LAB_1047
	MOVEA.L	AnalyzeMsgRec_PTR(PC),A5
	MOVE.W	Shift_KEY+2(PC),D6
	MOVE.W	RECORD_STATUS(PC),D5
LAB_1046:
	CLR.W	AnalyzeMsgRECORD_FLAG
	MOVE.B	#$ff,VIRTUEL_MSG
	MOVE.B	#$ff,MACROPROCESS+2
	MOVE.W	8(A5),Shift_KEY+2
	MOVE.W	12(A5),RECORD_STATUS
	MOVE.L	(A5),D0
	MOVE.L	4(A5),D1
	MOVE.W	16(A5),D2
	LEA	20(A5),A5
	BSR.S	LAB_1048
	DBF	D7,LAB_1046
	MOVE.W	D5,RECORD_STATUS
	MOVE.W	D6,Shift_KEY+2
LAB_1047:
	CLR.W	AnalyzeMsgRECORD_FLAG
	CLR.B	VIRTUEL_MSG
	CLR.B	MACROPROCESS+2
	BSR.W	RedrawRecGad
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_1048:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CMPI.W	#$0001,D2
	BEQ.S	LAB_1049
	BRA.S	LAB_104A
LAB_1049:
	JSR	NGGadDoAction
LAB_104A:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
XXCutActualBlock:
	MOVE.L	#$586d5842,XXMsg
	JSR	NGRecordXXMsg
	DC.W	$60ff
	DC.W	$fffe
	DC.W	$bcb4
XXCopyActualBlock:
	MOVE.L	#$586d4342,XXMsg
	JSR	NGRecordXXMsg
	DC.W	$60ff
	DC.W	$fffe
	EOR.W	D5,D6
XXPasteActualBlock:
	MOVE.L	#$586d5642,XXMsg
	JSR	NGRecordXXMsg
	DC.W	$60ff
	DC.W	$fffe
	EOR.L	D6,-(A0)
XXAddActualBlock:
	MOVE.L	#$586d4242,XXMsg
	JSR	NGRecordXXMsg
	DC.W	$60ff
	DC.W	$fffe
XXSwapActualBlock:
	CMP.B	AudioIRQ_STATUS+2(PC),D7
	ADDQ.W	#4,17730(A5)
	DC.L	XXMsg
	JSR	NGRecordXXMsg
	DC.W	$60ff
	DC.W	$fffe
	CMP.W	(A0),D7
VIRTUEL_MSG:
	ORI.B	#$00,D0
Build14BitTab:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	Bit14Tab_PTR+2(PC),A0
	MOVEQ	#-128,D0
	MOVEQ	#-32,D1
	MOVE.L	#$000000ff,D5
LAB_1052:
	MOVEQ	#-32,D1
	MOVEQ	#63,D6
LAB_1053:
	MOVEQ	#3,D7
LAB_1054:
	MOVE.B	D1,(A0)+
	MOVE.B	D0,(A0)+
	DBF	D7,LAB_1054
	ADDQ.B	#1,D1
	DBF	D6,LAB_1053
	ADDQ.B	#1,D0
	DBF	D5,LAB_1052
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
AboutRequest:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	About_TXT(PC),A0
	BSR.W	InfoRequest
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
MoveEOFString:
	TST.B	(A0)+
	BNE.S	MoveEOFString
	SUBQ.L	#1,A0
	RTS
SetWBScreen:
LAB_1057:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	SUBA.L	A0,A0
	BSR.S	SetRequesterScreen
	MOVEA.L	_IntuitionBase,A6
LAB_1059:
	JSR	-210(A6)
	MOVE.L	D0,MainScreen_PTR+2
	MOVE.L	D0,LAB_0073+2
LAB_105A:
	MOVE.L	D0,LAB_03D0+2
	MOVE.B	#$ff,OnWBScreen
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
OnWBScreen:
	DC.W	$0000
SetRequesterScreen:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	A0,LAB_1062+2
	MOVE.L	A0,LAB_1071+2
	MOVE.L	A0,LAB_1082+2
	MOVE.L	A0,RequesterScreen_PTR
	MOVE.L	A0,LAB_03D0+2
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
CalcScreenDepth:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	MainScreen_PTR+2(PC),A0
	MOVEA.L	88(A0),A0
	MOVE.B	5(A0),ScreenDepth
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ScreenDepth:
	DC.W	$0000
InfoRequest:
	DC.W	$4a88
	BNE.S	LAB_1060
	RTS
LAB_1060:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A0,A1
	LEA	InfoOK_TXT(PC),A2
	SUBA.L	A3,A3
	SUBA.L	A4,A4
	LEA	InfoRequest_TAGS(PC),A0
	MOVEA.L	_ReqToolsBase+2(PC),A6
	JSR	-66(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
InfoRequest_TAGS:
	OR.B	D0,D0
LAB_1062:
	ORI.B	#$00,D7
	ORI.B	#$00,D0
	ORI.B	#$00,D0
SplitDblString:
	MOVEA.L	A0,A1
	BSR.W	MoveNextString
	EXG	A0,A1
	RTS
	DC.W	$0000
MulitChoiceRequest:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	BSR.S	SplitDblString
	MOVEA.L	A1,A2
	MOVEA.L	A0,A1
	SUBA.L	A3,A3
LAB_1066:
	SUBA.L	A4,A4
	LEA	InfoRequest_TAGS(PC),A0
	MOVEA.L	_ReqToolsBase+2(PC),A6
	JSR	-66(A6)
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
GetReqPath:
	MOVEA.L	RQReqStruct_PTR(PC),A0
	LEA	16(A0),A0
	MOVEA.L	(A0),A0
	RTS
SetSamplenamePath:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	All_MATCH+1(PC),A0
	BSR.W	SetFileRequestPat
	LEA	AdjustPath_TXT+3(PC),A0
	MOVEQ	#0,D0
	BSR.W	GetPathBuf
	BSR.W	SimpleFileRequest
	BSR.W	SavePathBuf
	MOVEA.L	RQReqStruct_PTR(PC),A2
	LEA	16(A2),A0
	MOVEA.L	(A0),A0
	MOVEA.L	FinalFileNameRT_PTR(PC),A1
	BSR.W	CopyString
	TST.W	D0
	BEQ.S	SetSampNamePath_X
	MOVEA.L	SampleNames_PTR+2(PC),A4
	MOVE.L	#$000000ff,D7
SetSampNamePath_L:
	MOVEA.L	RQReqStruct_PTR(PC),A2
	LEA	16(A2),A0
	MOVEA.L	(A0),A0
	MOVEA.L	FinalFileNameRT_PTR(PC),A1
	BSR.W	CopyString
	MOVEA.L	A4,A0
	TST.B	(A0)
	BEQ.S	SetSampNamePath_Empty
	CMPI.B	#$fc,128(A0)
	BEQ.S	SetSampNamePath_Empty
	CMPI.B	#$03,132(A0)
	BEQ.S	SetSampNamePath_Empty
	CMPI.B	#$02,132(A0)
	BEQ.S	SetSampNamePath_Empty
	BSR.S	SetFileNamePath
	MOVEA.L	FinalFileNameRT_PTR(PC),A1
	EXG	A0,A1
	BSR.W	CopyString
SetSampNamePath_Empty:
	LEA	256(A4),A4
	DBF	D7,SetSampNamePath_L
SetSampNamePath_X:
	MOVE.L	#Done_TXT+1,AssText_TXT
	JSR	PrintAssTextF
	JSR	DrawInstrument
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
SetFileNamePath:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A0,A4
	MOVEA.L	A1,A5
	MOVE.L	A0,D1
	MOVEA.L	_DosBase,A6
	JSR	-870(A6)
	MOVE.L	A5,D1
	MOVE.L	D0,D2
	MOVE.L	#$00000080,D3
	MOVEA.L	_DosBase,A6
	JSR	-882(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
SimpleFileRequest:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	JSR	SetOldCList
	MOVEA.L	A0,A3
	MOVEA.L	FinalFileNameRT_PTR(PC),A0
	BSR.W	ClrFileName
	DC.W	$4a8b
	BNE.S	SimpleFileRequest_HasHead
	LEA	FileAccess_TXT+1(PC),A3
SimpleFileRequest_HasHead:
	MOVE.L	FileNameRT_PTR(PC),FileNameRT_ACT
SimpleFileRequest_M1:
	MOVEA.L	RQReqStruct_PTR(PC),A1
	MOVEA.L	FileNameRT_ACT(PC),A2
	LEA	FileREQ_TAG(PC),A0
	MOVEA.L	_ReqToolsBase+2(PC),A6
	JSR	-54(A6)
	BSR.S	BuildFileNameRT
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
FileREQ_TAG:
	OR.B	D0,D0
LAB_1071:
	ORI.B	#$00,D7
	DC.W	$0000
	OR.B	D0,D0
	ORI.B	#$00,16(A0)
	ORI.B	#$00,D0
BuildFileNameRT:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	RQReqStruct_PTR(PC),A2
	LEA	16(A2),A0
	MOVEA.L	(A0),A0
	MOVEA.L	FinalFileNameRT_PTR(PC),A1
	BSR.W	CopyString
	MOVE.L	FinalFileNameRT_PTR(PC),D1
	MOVE.L	FileNameRT_ACT(PC),D2
	MOVE.L	LAB_1076(PC),D3
	MOVEA.L	_DosBase,A6
	JSR	-882(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
FileNameRT_ACT:
	ORI.B	#$00,D0
FileNameRT_PTR:
	ORI.B	#$00,D0
	DC.W	$0000
	BTST	D1,-(A0)
	ORI.B	#$00,D1
FinalFileNameRT_PTR:
	ORI.B	#$00,D0
LAB_1076:
	DC.W	$0000
	ANDI.B	#$01,D0
	ORI.B	#$00,D0
NaturalLongRequest:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVE.L	(A0),D7
NaturalLongRequest_ILL:
	BSR.S	LongRequest
	TST.W	D0
	BEQ.S	NaturalLongRequest_C
	TST.L	(A0)
	BEQ.S	NaturalLongRequest_ILL
	BMI.S	NaturalLongRequest_ILL
	CMP.L	(A0),D1
	BCS.S	NaturalLongRequest_ILL
NaturalLongRequest_X:
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
NaturalLongRequest_C:
	MOVE.L	D7,(A0)
	BRA.S	NaturalLongRequest_X
NaturalLongRequestZ:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVE.L	(A0),D7
NatLongReqZ_ILL:
	BSR.S	LongRequest
	TST.W	D0
	BEQ.S	NatLongReqZ_C
	BMI.S	NatLongReqZ_ILL
	CMP.L	(A0),D1
	BCS.S	NatLongReqZ_ILL
NatLongReqZ_X:
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
NatLongReqZ_C:
	MOVE.L	D7,(A0)
	BRA.S	NatLongReqZ_X
LongRequest:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVEQ	#100,D0
	MOVEA.L	A1,A2
	MOVEA.L	A0,A1
	LEA	StringREQ_TAG(PC),A0
	SUBA.L	A3,A3
	MOVEA.L	_ReqToolsBase+2(PC),A6
	JSR	-78(A6)
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
	DC.W	$0000
StringRequest:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVEA.L	A1,A2
	MOVEA.L	A0,A1
	LEA	StringREQ_TAG(PC),A0
	SUBA.L	A3,A3
	MOVEA.L	_ReqToolsBase+2(PC),A6
	JSR	-72(A6)
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
StringREQ_TAG:
	OR.B	D0,D0
LAB_1082:
	ORI.B	#$00,D7
	ORI.B	#$00,D0
	DC.W	$0000
SetFileRequestPat:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	FileREQ_ExtTags(PC),A2
	MOVE.L	A0,4(A2)
	MOVE.L	#$80000033,(A2)
SetFileRequestAttr:
	MOVEA.L	_ReqToolsBase+2(PC),A6
	MOVEA.L	RQReqStruct_PTR(PC),A1
	MOVEA.L	A2,A0
	MOVEA.L	_ReqToolsBase+2(PC),A6
	JSR	-48(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
FileREQ_ExtTags:
	OR.B	D0,D0
	ORI.B	#$00,0(A3,D0.W)
	ORI.B	#$00,D0
	DC.W	$0000
SetFileRequestPath:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	CMPA.L	FileRequestPath_OLD(PC),A0
	BEQ.S	SetFileRequestPath_X
	MOVE.L	A0,FileRequestPath_OLD
	LEA	FileREQ_ExtTags(PC),A2
	MOVE.L	A0,4(A2)
	MOVE.L	#$80000032,(A2)
	BRA.S	SetFileRequestAttr
SetFileRequestPath_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
FileRequestPath_OLD:
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$0000
PrintErrorMsg:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$4aba
	MOVE.L	(A6)+,D1
	BEQ.W	PrintErrorMsg_X
	DC.W	$4aba
	MOVE.L	D2,(A3)
	BEQ.S	PrintErrorMsg_NoRequester
	MOVEA.L	ErrorText_TXT+2(PC),A0
	BSR.W	InfoRequest
	CLR.L	ErrorText_TXT+2
	BRA.S	PrintErrorMsg_X
PrintErrorMsg_NoRequester:
	LEA	LAB_126E(PC),A1
	MOVEA.L	EXECBASE+2,A6
	MOVEQ	#0,D0
	JSR	-552(A6)
	TST.L	D0
	BEQ.S	PrintErrorMsg_X
	MOVE.L	D0,ERRTXT_AUTOLIBLIST+2
	MOVE.L	#ErrName,D1
	MOVE.L	#$000003ed,D2
	MOVEA.L	ERRTXT_AUTOLIBLIST+2(PC),A6
	JSR	-30(A6)
	MOVEA.L	D0,A5
	TST.L	D0
	BEQ.S	PrintErrorMsg_X
	MOVEA.L	ErrorText_TXT+2(PC),A0
	BSR.W	GetLen
	MOVE.L	A5,D1
	MOVE.L	A0,D2
	MOVE.L	D0,D3
	MOVEA.L	ERRTXT_AUTOLIBLIST+2(PC),A6
	JSR	-48(A6)
	MOVE.L	#$000000fa,D1
	MOVEA.L	ERRTXT_AUTOLIBLIST+2(PC),A6
	JSR	-198(A6)
	MOVE.L	A5,D1
	MOVEA.L	ERRTXT_AUTOLIBLIST+2(PC),A6
	JSR	-36(A6)
	MOVEA.L	ERRTXT_AUTOLIBLIST+2(PC),A1
	MOVEA.L	EXECBASE+2,A6
	JSR	-414(A6)
	CLR.L	ErrorText_TXT+2
PrintErrorMsg_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
SendBackMsg:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A0,A1
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-378(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
WarnFlash:
	RTS
Warn_Counter:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.W	$0000
MultiTaskingOff:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-132(A6)
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-120(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
MultiTaskingOn:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-126(A6)
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-138(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
MakeA0Even:
	MOVE.L	D0,-(A7)
	MOVE.L	A0,D0
	ADDQ.L	#1,D0
	BCLR	#0,D0
	MOVEA.L	D0,A0
	MOVE.L	(A7)+,D0
	RTS
mulu10:
	MOVE.L	D1,-(A7)
	LSL.L	#1,D0
	MOVE.L	D0,D1
	LSL.L	#2,D0
	ADD.L	D1,D0
	MOVE.L	(A7)+,D1
	RTS
	DC.W	$0000
DrawDebugInfo:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	MEM_DEBUG_INFO(PC),A2
	MOVE.L	12(A2),D0
	MOVE.L	16(A2),D1
	JSR	PrintDblAssHex
	MOVE.L	(A2),D0
	MOVE.L	4(A2),D1
	JSR	PrintDblAssHex
	MOVE.L	#MemFail_ERR,AssText_TXT
	JSR	PrintAssTextF
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
BuildSinusTab:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	SinusTab(PC),A1
	MOVE.W	#$0168,D7
	MOVE.L	#$00020000,D0
	MOVE.W	#$00ff,D1
	MOVEA.L	VibratoTab_PTR(PC),A1
	MOVE.W	#$0100,D7
	MOVE.L	#$0002d000,D0
	MOVE.W	#$007f,D1
	BSR.S	TransformSinus
	MOVE.W	#$0040,D0
	BSR.S	RotLTable
	MOVEA.L	SaVibratoTab_PTR+2(PC),A1
	MOVE.W	#$0200,D7
	MOVE.L	#$00016800,D0
	MOVE.W	#$007f,D1
	BSR.S	TransformSinus
	MOVE.W	#$0080,D0
	BSR.S	RotLTable
	MOVEA.L	TremoloTab_PTR+2(PC),A1
	MOVE.W	#$0100,D7
	MOVE.L	#$0002d000,D0
	MOVE.W	#$007f,D1
	BSR.S	TransformSinus
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
RotLTable:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	SUBQ.W	#2,D7
	BMI.S	RotLTable_X
	SUBQ.W	#1,D0
	BMI.S	RotLTable_X
RotLTable_L2:
	MOVE.W	D7,D6
	MOVEA.L	A1,A0
RotLTable_L1:
	MOVE.L	(A0),D1
	SWAP	D1
	MOVE.L	D1,(A0)
	ADDQ.L	#2,A0
	DBF	D6,RotLTable_L1
	DBF	D0,RotLTable_L2
RotLTable_X:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
TransformSinus:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	SINTAB(PC),A0
	MOVE.W	D1,D4
	MOVEQ	#0,D1
	LSR.W	#1,D7
	SUBQ.W	#1,D7
	MOVE.W	D7,D6
BuildSinusTab_L:
	MOVE.L	D1,D2
	SWAP	D2
	DC.W	$3630
	MOVE.L	D0,D1
	MULU	D4,D3
	DIVU	#$0370,D3
	MOVE.W	D3,(A1)+
	ADD.L	D0,D1
	DBF	D6,BuildSinusTab_L
	MOVEQ	#0,D1
BuildSinusTab_L2:
	MOVE.L	D1,D2
	SWAP	D2
	DC.W	$3630
	MOVE.L	D0,D1
	MULU	D4,D3
	DIVU	#$0370,D3
	NEG.W	D3
	MOVE.W	D3,(A1)+
	ADD.L	D0,D1
	DBF	D7,BuildSinusTab_L2
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
PlayPrevPosition:
	JSR	PosNumDown
	BSR.W	PlayFromActualPos
	RTS
PlayNextPosition:
	JSR	PosNumUp
	BSR.W	PlayFromActualPos
	RTS
MEM_DEBUG_INFO:
	ORI.B	#$00,D0
LAB_109F:
	ORI.B	#$00,D0
LAB_10A0:
	ORI.B	#$00,D0
LAB_10A1:
	ORI.B	#$00,D0
LAB_10A2:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
OpenAutoLiblist:
	MOVEM.L	D1-D7/A0-A6,-(A7)
LAB_10A4:
	MOVEQ	#0,D0
	CMPI.B	#$ff,(A0)
	BEQ.S	LAB_10A6
	MOVEA.L	A0,A2
	MOVE.L	(A0),D7
	CLR.L	(A0)+
	MOVE.W	(A0)+,D0
	MOVEA.L	A0,A1
	BSR.W	MoveNextString
	BSR.S	sub_190DC
	MOVEA.L	A0,A3
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-552(A6)
	MOVE.L	D0,(A2)
	BNE.S	LAB_10A5
	TST.L	D7
	BNE.S	LAB_10A5
	MOVEQ	#-1,D0
	BSR.W	WarnFlash
	BRA.S	LAB_10A6
LAB_10A5:
	MOVEA.L	A3,A0
	BRA.S	LAB_10A4
LAB_10A6:
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
CloseAutoLiblist:
	MOVEM.L	D1-D7/A0-A6,-(A7)
LAB_10A8:
	CMPI.B	#$ff,(A0)
	BEQ.S	LAB_10A9
	MOVEA.L	(A0)+,A1
	MOVE.W	(A0)+,D0
	BSR.W	MoveNextString
	BSR.S	sub_190DC
	DC.W	$4a89
	BEQ.S	LAB_10A8
	MOVEA.L	A0,A3
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-414(A6)
	MOVEA.L	A3,A0
	BRA.S	LAB_10A8
LAB_10A9:
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
ActivateCopList:
	MOVE.W	#$0080,DMACON
	MOVE.L	A0,COP1LCH
	MOVE.L	A0,COP1LCH
	CLR.W	COPJMP1
	MOVE.W	#$8080,DMACON
	RTS
sub_190DC:
	MOVE.L	D0,-(A7)
	MOVE.L	A0,D0
	ADDQ.L	#1,D0
	BCLR	#0,D0
	MOVEA.L	D0,A0
	MOVE.L	(A7)+,D0
	RTS
AutoGetMem:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVEA.L	A0,A1
	MOVEQ	#-1,D7
LAB_10AD:
	MOVEA.L	(A1)+,A0
	CMPA.W	#$ffff,A0
	BEQ.S	LAB_10AE
	BSR.W	GetMem
	TST.L	D0
	BNE.S	LAB_10AD
	MOVEQ	#0,D7
	BRA.S	LAB_10AD
LAB_10AE:
	MOVE.W	D7,D0
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
AutoFreeMem:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	A0,A1
LAB_10B0:
	MOVEA.L	(A1)+,A0
	CMPA.W	#$ffff,A0
	BEQ.S	LAB_10B1
	ADDQ.L	#1,LAB_109F
	BSR.W	FreeMem
	BRA.S	LAB_10B0
LAB_10B1:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
MENUCOL:
	BTST	D0,D0
AutoMenu:
	MOVEM.L	D0-D7/A0-A6,-(A7)
loc_19A94:
	MOVEA.L	A0,A2
	BSR.S	sub_19AB0
	ADDQ.L	#1,A1
	TST.B	(A1)
	BEQ.S	loc_19AAA
	MOVE.L	A0,(A2)
	ADD.W	word_19B44,D0
	BRA.S	loc_19A94
loc_19AAA:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
sub_19AFC:
	MOVE.L	A0,-(A7)
	MOVEQ	#0,D0
loc_19B00:
	TST.B	(A0)+
	BEQ.S	loc_19B08
	ADDQ.L	#1,D0
	BRA.S	loc_19B00
loc_19B08:
	MOVEA.L	(A7)+,A0
	RTS
sub_19B0C:
	MOVEM.L	D0-D7/A1-A6,-(A7)
	MOVEA.L	A0,A2
	LEA	30(A2),A3
	CLR.L	(A2)+
	MOVE.W	D0,(A2)+
	MOVE.W	D1,(A2)+
	MOVEA.L	A1,A0
	BSR.S	sub_19AFC
	LSL.W	#3,D0
	MOVE.W	D0,word_19B44
	MOVE.W	D0,(A2)+
	MOVE.W	MENUFONT_H+2,(A2)+
	MOVE.W	#$0001,(A2)+
	MOVE.L	A1,(A2)+
	CLR.L	(A2)+
	MOVEA.L	A3,A0
	MOVEM.L	(A7)+,D0-D7/A1-A6
	RTS
word_19B44:
	DC.W	$0000
sub_19AB0:
	MOVEM.L	D0-D7/A2-A6,-(A7)
	MOVEA.L	A0,A2
	BSR.S	sub_19B0C
	MOVEQ	#0,D0
	MOVEQ	#0,D1
	EXG	A0,A1
	BSR.W	MoveNextString
	EXG	A0,A1
	TST.B	(A1)
	BEQ.S	loc_19AF6
	MOVE.L	A0,18(A2)
	MOVEA.L	A0,A2
	BSR.W	sub_19B46
loc_19AD6:
	ADD.W	LAB_0698,D1
	EXG	A0,A1
	BSR.W	MoveNextString
	EXG	A0,A1
	TST.B	(A1)
	BEQ.S	loc_19AF6
	MOVE.L	A0,(A2)
	MOVEA.L	A0,A2
	BSR.W	sub_19B46
	BRA.S	loc_19AD6
loc_19AF6:
	MOVEM.L	(A7)+,D0-D7/A2-A6
	RTS
sub_190EC:
	MOVE.L	D1,-(A7)
	LSL.L	#1,D0
	MOVE.L	D0,D1
	LSL.L	#2,D0
	ADD.L	D1,D0
	MOVE.L	(A7)+,D1
	RTS
AddString:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	EXG	A1,A0
	BSR.W	sub_19256
	EXG	A1,A0
	BSR.W	CopyString
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ConvDecBytePtr:
	MOVEM.L	D0-D4/A0,-(A7)
	ADDQ.L	#3,A0
	BRA.S	loc_19142
ConvertToDecByte:
	MOVEM.L	D0-D4/A0,-(A7)
	LEA	DecByteTemp+3(PC),A0
loc_19142:
	MOVE.W	D0,D1
	MOVEQ	#2,D4
loc_19146:
	ANDI.L	#$000003ff,D1
	DIVU	#$000a,D1
	MOVE.L	D1,D3
	SWAP	D3
	ANDI.B	#$0f,D3
	ADDI.B	#$30,D3
	MOVE.B	D3,-(A0)
	DBF	D4,loc_19146
	MOVEM.L	(A7)+,D0-D4/A0
LAB_10C4:
	RTS
DecByteSave:
DecByteTemp:
LAB_10C5:
	MOVE.W	0(A0,D3.W),D0
ConvertToDecWord:
	MOVEM.L	D0-D4/A0-A1,-(A7)
	MOVEA.L	A0,A1
	ADDQ.L	#5,A0
	MOVE.W	D0,D1
	MOVE.W	#$0004,D4
loc_1917A:
	ANDI.L	#$0000ffff,D1
	DIVU	#$000a,D1
	MOVE.L	D1,D3
	SWAP	D3
	ANDI.B	#$0f,D3
	ADDI.B	#$30,D3
	MOVE.B	D3,-(A0)
	DBF	D4,loc_1917A
	MOVEQ	#3,D0
loc_19198:
	CMPI.B	#$30,(A1)
	BNE.S	loc_191A6
	MOVE.B	#$20,(A1)+
	DBF	D0,loc_19198
loc_191A6:
	MOVEM.L	(A7)+,D0-D4/A0-A1
	RTS
CopyString:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	GetLen
	ADDQ.W	#1,D0
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-624(A6)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
sub_191DE:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	BSR.S	sub_1920A
	MOVE.L	D0,D7
	MOVEQ	#0,D0
	SUBQ.W	#1,D7
	BMI.S	loc_19204
loc_191EE:
	BSR.W	sub_190EC
	MOVE.B	(A0)+,D1
	SUBI.B	#$30,D1
	ANDI.L	#$0000000f,D1
	ADD.L	D1,D0
	DBF	D7,loc_191EE
loc_19204:
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
sub_1920A:
	MOVEM.L	D1/A0,-(A7)
	MOVEQ	#-1,D0
loc_19210:
	ADDQ.L	#1,D0
	MOVE.B	(A0)+,D1
	CMPI.B	#$39,D1
	BHI.S	loc_19220
	CMPI.B	#$30,D1
	BCC.S	loc_19210
loc_19220:
	MOVEM.L	(A7)+,D1/A0
	RTS
GetLen:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVEQ	#0,D0
loc_1922C:
	TST.B	(A0)+
	BEQ.S	loc_19234
	ADDQ.L	#1,D0
	BRA.S	loc_1922C
loc_19234:
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
MoveNextString:
	TST.B	(A0)+
	BNE.S	MoveNextString
	RTS
sub_19256:
	BSR.S	MoveNextString
	SUBQ.L	#1,A0
	RTS
sub_1934E:
	MOVEA.L	A7,A3
	LEA	dword_1937C(PC),A4
	MOVE.L	(A3)+,(A4)+
	MOVE.L	(A3)+,(A4)+
	MOVE.L	(A3)+,(A4)+
	MOVE.L	(A3)+,(A4)+
	MOVE.L	(A3)+,(A4)+
	MOVE.L	(A3)+,(A4)+
	MOVE.L	(A3)+,(A4)+
	MOVE.L	(A3)+,(A4)+
	MOVE.L	(A3)+,(A4)+
	MOVE.L	(A3)+,(A4)+
	MOVE.L	(A3)+,(A4)+
	MOVE.L	(A3)+,(A4)+
	MOVE.L	(A3)+,(A4)+
	MOVE.L	(A3)+,(A4)+
	MOVE.L	(A3)+,(A4)+
	MOVE.L	(A3),(A4)
	BSR.W	sub_19FA8
	RTS
dword_1937C:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
CheckMem:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	A0,LAB_10A0
	MOVE.L	4(A0),LAB_10A1
	MOVE.L	8(A0),LAB_10A2
	TST.L	(A0)
	BEQ.S	LAB_10DC
	MOVEA.L	(A0),A1
	MOVE.L	4(A0),D0
	BEQ.S	LAB_10DC
	TST.L	D0
	BEQ.S	LAB_10DC
	BMI.S	LAB_10DC
	MOVE.L	A1,D7
	TST.L	D7
	BEQ.S	LAB_10DC
	BMI.S	LAB_10DC
	SUBQ.L	#4,A1
	ADDQ.L	#8,D0
	MOVEA.L	A1,A2
	ADDA.L	D0,A2
	CMPI.L	#$53594d32,(A1)
	BEQ.S	LAB_10DB
	BSR.W	sub_1934E
LAB_10DB:
	CMPI.L	#$53594d32,-4(A2)
	BEQ.S	LAB_10DC
	BSR.W	sub_1934E
LAB_10DC:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
GetMem:
	MOVEM.L	D1-D7/A0-A6,-(A7)
	MOVEA.L	A0,A2
	MOVE.L	4(A2),D0
	TST.L	D0
	BEQ.S	LAB_10DE
	MOVE.L	8(A2),D1
	MOVE.L	D0,D2
	ADDQ.L	#8,D0
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-198(A6)
	TST.L	D0
	BNE.S	loc_19824
	MOVE.L	D0,(A2)
	MOVE.L	#ERRFastMem_TXT,ErrorText_TXT+2
LAB_10DE:
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
loc_19824:
	MOVEA.L	D0,A0
	MOVE.L	#$53594d32,(A0)+
	MOVE.L	A0,(A2)
	ADDA.L	D2,A0
	MOVE.L	#$53594d32,(A0)+
	MOVEM.L	(A7)+,D1-D7/A0-A6
	RTS
FreeMem:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	A0,LAB_10A0
	MOVE.L	4(A0),LAB_10A1
	MOVE.L	8(A0),LAB_10A2
	TST.L	(A0)
	BEQ.S	LAB_10E3
	MOVEA.L	(A0),A1
	CLR.L	(A0)
	MOVE.L	4(A0),D0
	BEQ.S	LAB_10E3
	TST.L	D0
	BEQ.S	LAB_10E4
	BMI.S	LAB_10E4
	MOVE.L	A1,D7
	TST.L	D7
	BEQ.S	LAB_10E4
	BMI.S	LAB_10E4
	BTST	#0,D7
	BNE.S	LAB_10E4
	SUBQ.L	#4,A1
	ADDQ.L	#8,D0
	MOVEA.L	A1,A2
	ADDA.L	D0,A2
	CMPI.L	#$53594d32,(A1)
	BEQ.S	LAB_10E1
	BSR.W	WarnFlash
	BSR.W	sub_1934E
LAB_10E1:
	CMPI.L	#$53594d32,-4(A2)
	BEQ.S	LAB_10E2
	BSR.W	WarnFlash
	BSR.W	sub_1934E
LAB_10E2:
	MOVEA.L	ABSEXECBASE.W,A6
	JSR	-210(A6)
LAB_10E3:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_10E4:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	MOVE.L	(A7),LAB_1726
	MOVE.L	#$4672654d,DEBUG
	RTS
sub_19B46:
	MOVEM.L	D0-D7/A1-A6,-(A7)
	MOVE.L	A0,dword_19CF4
	MOVEA.L	A0,A2
	LEA	50(A0),A3
	CLR.L	(A2)+
	CMPI.W	#$ffff,word_19CFA+2
	BNE.S	loc_19B6C
	MOVEM.W	word_19CFC,D0-D2
	ADD.W	D2,D0
loc_19B6C:
	MOVE.W	D0,(A2)+
	MOVE.W	D1,(A2)+
	MOVE.W	D0,D4
	MOVE.W	D1,D5
	MOVEA.L	A1,A0
	BSR.W	sub_19AFC
	MOVE.W	D0,D1
	LSL.W	#3,D0
	MOVE.W	D0,(A2)+
	MOVE.W	D0,word_19CF8
	MOVE.W	D0,D2
	MOVE.W	D0,D6
	MOVE.W	MENUFONT_H+2,(A2)+
	MOVE.W	word_19D04,D0
	CMPI.B	#$2d,(A1)
	BNE.S	loc_19BA4
	MOVE.W	word_19D0A+2,D0
loc_19BA4:
	MOVE.B	-1(A1,D1.W),byte_19CF0
	CMPI.B	#$41,-1(A1,D1.W)
	BNE.S	loc_19BD0
	MOVE.B	#$20,-1(A1,D1.W)
	MOVE.B	-2(A1,D1.W),D2
	MOVE.B	#$20,-2(A1,D1.W)
	MOVE.B	D2,word_19D0C
	MOVE.W	word_19D08,D0
loc_19BD0:
	CMPI.B	#$3f,(A1)
	BNE.S	loc_19BF2
	MOVE.B	#$20,(A1)
	MOVE.W	word_19D06+2,D0
	CMPI.B	#$2b,1(A1)
	BNE.S	loc_19BF2
	ORI.W	#$0100,D0
	MOVE.B	#$20,1(A1)
loc_19BF2:
	CMPI.B	#$26,-1(A1,D1.W)
	BNE.S	loc_19C24
	MOVE.B	#$20,-1(A1,D1.W)
	CMPI.W	#$ffff,word_19CFA+2
	BEQ.S	loc_19C1C
	MOVE.W	#$ffff,word_19CFA+2
	MOVEM.W	D4-D6,word_19CFC
	BRA.S	loc_19C36
loc_19C1C:
	ADD.W	D6,word_19D00
	BRA.S	loc_19C36
loc_19C24:
	CMPI.W	#$ffff,word_19CFA+2
	BNE.S	loc_19C36
	MOVE.W	#$007b,word_19CFA+2
loc_19C36:
	MOVE.W	D0,(A2)+
	CLR.L	(A2)+
	MOVE.L	A3,(A2)+
	CLR.L	(A2)+
	MOVE.W	word_19D0C,(A2)+
	CLR.L	(A2)+
	CLR.L	(A2)+
	MOVEA.L	A3,A2
	MOVE.W	MENUCOL,(A2)+
	MOVE.W	#$0001,(A2)+
	CLR.W	(A2)+
	MOVE.W	#$0001,(A2)+
	CLR.L	(A2)+
	MOVE.L	A1,(A2)+
	CLR.L	(A2)+
	MOVEA.L	A2,A0
	MOVEM.L	(A7)+,D0-D7/A1-A6
	CMPI.B	#$bb,byte_19CF0
	BNE.S	loc_19CD4
	MOVEM.L	D0-D7/A2-A6,-(A7)
	MOVEA.L	dword_19CF4,A3
	MOVE.L	A0,28(A3)
	MOVEA.L	A0,A3
	MOVEA.L	A0,A2
	MOVEA.L	A1,A0
	BSR.W	MoveNextString
	ADD.W	word_19CF8,D0
	SUBI.W	#$0014,D0
	MOVEQ	#3,D1
	TST.B	(A0)
	BEQ.S	loc_19CCC
loc_19CA6:
	MOVEA.L	A0,A1
	MOVEA.L	A2,A0
	BSR.S	sub_19D10
	MOVEA.L	A0,A2
	MOVEA.L	A1,A0
	BSR.W	MoveNextString
	ADD.W	LAB_0698,D1
	TST.B	(A0)
	BEQ.S	loc_19CCC
	MOVE.L	A2,(A3)
	MOVEA.L	A2,A3
	BRA.S	loc_19CA6
loc_19CCC:
	MOVEA.L	A0,A1
	MOVEA.L	A2,A0
	MOVEM.L	(A7)+,D0-D7/A2-A6
loc_19CD4:
	CMPI.W	#$007b,word_19CFA+2
	BNE.S	locret_19CEE
	MOVEM.W	word_19CFC,D0-D1
	CLR.W	word_19CFA+2
locret_19CEE:
	RTS
byte_19CF0:
	ORI.B	#$00,D0
dword_19CF4:
	ORI.B	#$00,D0
word_19CF8:
word_19CFA:
	ORI.B	#$00,D0
word_19CFC:
	ORI.B	#$00,D0
word_19D00:
	ORI.B	#$00,D0
word_19D04:
word_19D06:
	ORI.W	#$005b,(A2)
word_19D08:
word_19D0A:
	ORI.W	#$0042,(A6)
word_19D0C:
	DC.W	$0000
	BTST	D0,D2
sub_19D10:
	MOVEM.L	D0-D7/A1-A6,-(A7)
	ANDI.W	#$feff,word_19EE8+2
	MOVEA.L	A0,A2
	LEA	34(A0),A3
	CLR.L	(A2)+
	CMPI.W	#$ffff,word_19EDA
	BNE.S	loc_19D38
	MOVEM.W	word_19EDC+2,D0-D2
	ADD.W	D2,D0
loc_19D38:
	MOVE.W	D0,(A2)+
	MOVE.W	D1,(A2)+
	MOVE.W	D0,D4
	MOVE.W	D1,D5
	MOVEA.L	A1,A0
	BSR.W	GetLen
	MOVE.W	D0,D1
	LSL.W	#3,D0
	MOVE.W	D0,(A2)+
	MOVE.W	D0,D2
	MOVE.W	D0,D6
	MOVE.W	LAB_0698,(A2)+
	MOVE.W	word_19EE4+2,D0
	CMPI.B	#$2d,(A1)
	BNE.S	loc_19D6A
	MOVE.W	word_19EEC+2,D0
loc_19D6A:
	CMPI.B	#$41,-1(A1,D1.W)
	BNE.S	loc_19D8E
	MOVE.B	#$20,-1(A1,D1.W)
	MOVE.B	-2(A1,D1.W),D2
	MOVE.B	#$20,-2(A1,D1.W)
	MOVE.B	D2,word_19EEE
	MOVE.W	word_19EEA,D0
loc_19D8E:
	CMPI.B	#$3f,(A1)
	BNE.S	loc_19E02
	MOVE.B	#$20,(A1)
	MOVE.W	word_19EE6,D0
	CMPI.B	#$39,1(A1)
	BHI.S	loc_19DE8
	CMPI.B	#$30,1(A1)
	BCS.S	loc_19DE8
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	1(A1),A0
	BSR.W	sub_191DE
	MOVE.W	D0,word_19EFC+2
	SUBQ.W	#1,D0
	LSL.W	#2,D0
	LEA	dword_19F00+2(PC),A0
	MOVE.L	0(A0,D0.W),D0
	MOVE.L	D0,dword_19EF4+2
	MOVE.L	#$fffffffe,dword_19EF8+2
	MOVEM.L	(A7)+,D0-D7/A0-A6
	MOVE.B	#$20,1(A1)
loc_19DE8:
	CMPI.B	#$2b,1(A1)
	BNE.S	loc_19E02
	ORI.W	#$0100,D0
	ORI.W	#$0100,word_19EE8+2
	MOVE.B	#$20,1(A1)
loc_19E02:
	CMPI.B	#$26,-1(A1,D1.W)
	BNE.S	loc_19E34
	MOVE.B	#$20,-1(A1,D1.W)
	CMPI.W	#$ffff,word_19EDA
	BEQ.S	loc_19E2C
	MOVE.W	#$ffff,word_19EDA
	MOVEM.W	D4-D6,word_19EDC+2
	BRA.S	loc_19E46
loc_19E2C:
	ADD.W	D6,word_19EE0+2
	BRA.S	loc_19E46
loc_19E34:
	CMPI.W	#$ffff,word_19EDA
	BNE.S	loc_19E46
	MOVE.W	#$007b,word_19EDA
loc_19E46:
	MOVE.W	D0,(A2)+
	CLR.L	dword_19EF0+2
	TST.W	word_19EFC+2
	BEQ.S	loc_19E82
	MOVEM.L	dword_19EF4+2,D0-D1
	AND.L	D1,D0
	MOVE.L	D0,dword_19EF0+2
	ROL.L	#1,D1
	MOVE.L	D1,dword_19EF8+2
	SUBQ.W	#1,word_19EFC+2
	MOVE.W	word_19EE8+2,D0
	MOVE.W	D0,-2(A2)
loc_19E82:
	MOVE.L	dword_19EF0+2,(A2)+
	MOVE.L	A3,(A2)+
	CLR.L	(A2)+
	MOVE.W	word_19EEE,(A2)+
	CLR.L	(A2)+
	CLR.L	(A2)+
	MOVEA.L	A3,A2
	MOVE.W	MENUCOL,(A2)+
	MOVE.W	#$0001,(A2)+
	CLR.W	(A2)+
	MOVE.W	#$0001,(A2)+
	CLR.L	(A2)+
	MOVE.L	A1,(A2)+
	CLR.L	(A2)+
	MOVEA.L	A2,A0
	MOVEM.L	(A7)+,D0-D7/A1-A6
	CMPI.W	#$007b,word_19EDA
	BNE.S	locret_19ED8
	MOVEM.W	word_19EDC+2,D0-D1
	CLR.W	word_19EDA
locret_19ED8:
	RTS
word_19EDA:
word_19EDC:
	ORI.B	#$00,D0
word_19EE0:
	ORI.B	#$00,D0
word_19EE4:
	ORI.B	#$52,D0
word_19EE6:
word_19EE8:
	ORI.W	#$0053,(A3)+
word_19EEA:
word_19EEC:
	ORI.W	#$0042,(A6)
word_19EEE:
dword_19EF0:
	ORI.B	#$00,D0
dword_19EF4:
	ORI.B	#$00,D0
dword_19EF8:
	ORI.B	#$00,D0
word_19EFC:
	ORI.B	#$00,D0
dword_19F00:
	ORI.B	#$00,D0
	ORI.B	#$00,D1
	ORI.B	#$00,D3
	ORI.B	#$00,D7
	DC.W	$000f
	ORI.B	#$f1,D0
	ORI.B	#$f3,D0
	ORI.B	#$f7,D0
	ORI.B	#$ff,D0
	DC.W	$0000
	BSET	D7,0(A1,D0.W)
	BSET	D7,0(A3,D0.W)
	BSET	D7,0(A7,D0.W)
	DC.W	$0fff
	DC.W	$0000
	DC.W	$fff1
	DC.W	$0000
	DC.W	$fff3
	DC.W	$0000
	DC.W	$fff7
	DC.W	$0000
	DC.W	$ffff
	DC.W	$000f
	DC.W	$fff1
	DC.W	$000f
	DC.W	$fff3
	DC.W	$000f
	DC.W	$fff7
	DC.W	$000f
	DC.W	$ffff
	DC.W	$00ff
	DC.W	$fff1
	DC.W	$00ff
	DC.W	$fff3
	DC.W	$00ff
	DC.W	$fff7
	DC.W	$00ff
	DC.W	$ffff
	DC.W	$0fff
	DC.W	$fff1
	DC.W	$0fff
	DC.W	$fff3
	DC.W	$0fff
	DC.W	$fff7
	DC.W	$0fff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$fff1
	DC.W	$ffff
	DC.W	$fff3
	DC.W	$ffff
	DC.W	$fff7
	DC.W	$ffff
	DC.W	$ffff
sub_19FA8:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	LEA	MEM_DEBUG_INFO(PC),A2
	MOVE.L	12(A2),D0
	MOVE.L	16(A2),D1
	JSR	PrintDblAssHex
	MOVE.L	(A2),D0
	MOVE.L	4(A2),D1
	JSR	PrintDblAssHex
	MOVE.L	#MemFail_ERR,AssText_TXT
	BSR.W	PrintHexBlock
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LinkNullSpriteCopList:
	MOVEM.L	D0-D1,-(A7)
	MOVE.L	SpriteNULL_PTR,D0
	MOVE.L	D0,D1
	SWAP	D0
	MOVE.W	#$0120,(A0)+
	MOVE.W	D0,(A0)+
	MOVE.W	#$0122,(A0)+
	MOVE.W	D1,(A0)+
	MOVE.W	#$0124,(A0)+
	MOVE.W	D0,(A0)+
	MOVE.W	#$0126,(A0)+
	MOVE.W	D1,(A0)+
	MOVE.W	#$0128,(A0)+
	MOVE.W	D0,(A0)+
	MOVE.W	#$012a,(A0)+
	MOVE.W	D1,(A0)+
	MOVE.W	#$012c,(A0)+
	MOVE.W	D0,(A0)+
	MOVE.W	#$012e,(A0)+
	MOVE.W	D1,(A0)+
	MOVE.W	#$0130,(A0)+
	MOVE.W	D0,(A0)+
	MOVE.W	#$0132,(A0)+
	MOVE.W	D1,(A0)+
	MOVE.W	#$0134,(A0)+
	MOVE.W	D0,(A0)+
	MOVE.W	#$0136,(A0)+
	MOVE.W	D1,(A0)+
	MOVE.W	#$0138,(A0)+
	MOVE.W	D0,(A0)+
	MOVE.W	#$013a,(A0)+
	MOVE.W	D1,(A0)+
	MOVE.W	#$013c,(A0)+
	MOVE.W	D0,(A0)+
	MOVE.W	#$013e,(A0)+
	MOVE.W	D1,(A0)+
	MOVEM.L	(A7)+,D0-D1
	RTS
OldCopList:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.W	#$0080,DMACON
	MOVEA.L	_GraphicsBase,A0
	MOVE.L	38(A0),COP1LCH
	MOVE.L	38(A0),COP1LCH
	CLR.W	COPJMP1
	MOVE.W	#$8080,DMACON
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
Para_FileName:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
Para_PTR:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
TimeString_TXT:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
Position_BUF:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
PATDRAW_FAST:
Test_PATTED:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
First_PATHEAD:
	ORI.B	#$00,D0
LAB_111F:
	ORI.B	#$00,D0
	ORI.B	#$01,D0
NoteMem_PTR:
	ORI.B	#$00,D0
LAB_1121:
	ORI.B	#$00,D0
	ORI.B	#$01,D0
	DC.W	$0000
PosCache:
	DC.W	$ffff
LAB_1123:
	DC.W	$ffff
LAB_1124:
	DC.W	$ffff
LAB_1125:
	DC.W	$ffff
LAB_1126:
	DC.W	$ffff
LAB_1127:
	DC.W	$ffff
LAB_1128:
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
InstrumentCache:
	DC.W	$ffff
LAB_112A:
	DC.W	$ffff
LAB_112B:
	DC.W	$ffff
LAB_112C:
	DC.W	$ffff
LAB_112D:
	DC.W	$ffff
LAB_112E:
	DC.W	$ffff
LAB_112F:
	DC.W	$ffff
LAB_1130:
	DC.W	$ffff
LAB_1131:
	DC.W	$ffff
LAB_1132:
	DC.W	$ffff
	DC.W	$ffff
LAB_1133:
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
LoadActualModule_HEAD:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
tempstring:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
DELYHARM_BAK:
	ORI.B	#$00,D0
SAMPLEPreOverS:
	ORI.B	#$01,D0
InstNum:
	ORI.B	#$00,D0
LineSampleEnd_PTR:
	ORI.B	#$00,D0
BuildTransSample_TEMP:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
TempProjName:
	ORI.B	#$00,D0
	DC.W	$0000
	BTST	D0,D0
	ORI.B	#$00,D1
NewLoadSample_INFO:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
PathBufID:
	ORI.B	#$00,D0
SongDuration:
	ORI.B	#$00,D0
LAB_113F:
	ORI.B	#$00,D0
SequenceDuration:
	ORI.B	#$00,D0
LAB_1141:
	ORI.B	#$00,D0
RelTimeBase_STAMP:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
RelTimeMaster_STAMP:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
ActTime_STAMP:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
StreamCount:
	ORI.B	#$00,D0
StreamBufLen:
	ORI.B	#$00,D0
StreamPeriod:
NotifySeqEnd:
	ORI.B	#$00,D0
CALC_PatternLen:
	ORI.B	#$00,D0
VexBufferNumb:
	ORI.B	#$08,D0
VexBufferSize:
	ORI.B	#$00,D0
VexPeriod:
	ORI.B	#$00,D0
System_FreqBase:
	ORI.B	#$00,D0
VexQuality:
	ORI.B	#$64,D0
VexSpeed:
	ORI.B	#$53,D0
VEX_LinesPerPattern:
	ORI.B	#$40,D0
VEX_NotePerPattern:
	ORI.B	#$00,D0
VEX_NoteSize:
	ORI.B	#$04,D0
VEX_TrackSize:
	ORI.B	#$00,D0
VEX_PatternSize:
	ORI.B	#$00,D0
VEX_PattNumb:
	ORI.B	#$40,D0
VEX_PosNumb:
	DC.W	$0000
VEX_LineSize:
	ANDI.B	#$00,D0
VEXDSP_FLAG:
	ORI.B	#$00,D0
VEXDSP_INFO:
	ORI.B	#$00,D0
VexVoicesPerAudio:
VEX_StartSetup:
	ORI.B	#$01,D2
VexAudioNumb:
CHANNEL_NUMB:
	ORI.B	#$08,D4
OverSamp_FLAG:
LargeBufCount:
	ORI.B	#$00,D0
BuildLineSample_PITCHSTART:
	ORI.B	#$00,D0
	MOVE.B	D0,D0
	DC.W	$0000
	MOVE.B	0(A1,D0.W),(A0)+
	MOVE.B	0(A3,D0.W),EXT_0008.W
	DC.W	$0000
	MOVE.B	0(A0),D2
	MOVE.B	(A4)+,0(A2)
	MOVE.B	(A7)+,(A3)
	DC.W	$0000
	DC.W	$17f7
	DC.W	$0000
	MOVE.B	-(A4),0(A4)
	MOVE.B	-(A5),(A5)+
	DC.W	$0000
	DC.W	$1c7e
	DC.W	$0000
	MOVE.B	0(A1,D0.W),D7
	MOVE.L	D0,D0
	DC.W	$0000
	MOVE.L	-(A3),EXT_0000.W
	MOVE.L	-(A7),EXT_000f
	DC.W	$0000
	MOVEA.L	(A1),A4
	DC.W	$0000
	MOVE.L	EXT_0000.W,(A5)
	DC.W	$2d3f
	DC.W	$0000
	DC.W	$2fef
	DC.W	$0000
	MOVE.W	A0,(A1)+
	DC.W	$0000
	DC.W	$35ca
	DC.W	$0000
	DC.W	$38fd
	DC.W	$0000
	MOVEA.W	-(A2),A6
	DC.W	$0000
	NEGX.B	D0
	DC.W	$0000
	DC.W	$43c6
	DC.W	$0000
	DC.W	$47ce
	DC.W	$0000
	DC.W	$4c18
	DC.W	$0000
	ADDQ.L	#8,-(A3)
	DC.W	$0000
	SUBQ.W	#2,0(A0,D0.W)
	DC.W	$5a7e
	DC.W	$0000
	SLE	(A7)+
	DC.W	$0000
	DC.W	$6591
	DC.W	$0000
	DC.W	$6b95
	DC.W	$0000
	DC.W	$71fb
	DC.W	$0000
	MOVEQ	#-60,D4
	DC.W	$0000
	OR.B	D0,D0
	DC.W	$0000
	DC.W	$878d
	DC.W	$0000
	OR.L	D7,(A5)+
	DC.W	$0000
	SUB.B	0(A1,D0.W),D4
	DC.W	$a147
	DC.W	$0000
	DC.W	$aae1
	DC.W	$0000
	DC.W	$b4fd
	DC.W	$0000
	DC.W	$bfbe
	DC.W	$0000
	AND.B	D5,-(A2)
	DC.W	$0000
	ADD.B	D3,0(A3)
	LSL	0(A7,D0.W)
	DC.W	$f189
BuildLineSample_FREQBASE:
	ORI.B	#$00,D1
LAB_1162:
	DC.W	$0001
	BTST	D7,(A2)+
	DC.W	$0001
LAB_1163:
	MOVE.B	LAB_1163+3(PC,D0.W),-(A7)
	MOVEA.W	-(A2),A0
	DC.W	$0001
	DC.W	$428f
	DC.W	$0001
	SCS	D2
	DC.W	$0001
	DC.W	$69fb
	DC.W	$0001
	DC.W	$7f7c
	DC.W	$0001
	SUB.W	D5,D3
	DC.W	$0001
	DC.W	$ae56
	DC.W	$0001
	MULS	1(A7),D3
	ROXL.B	#1,D2
	ORI.B	#$00,D2
	DC.W	$0002
	MOVE.B	2(A4,D0.W),D7
	MOVEA.W	2(A6,D0.W),A7
	BRA.S	LAB_1162
	DC.W	$0002
	OR.B	D2,(A6)+
	DC.W	$0002
	DC.W	$ab84
	DC.W	$0002
	ADDA.L	2(A6,D0.W),A1
	DC.W	$fef8
	DC.W	$0003
	MOVE.L	A2,(A6)
	DC.W	$0003
	ADDQ.L	#6,3(A4)
	DIVS	(A6)+,D7
	DC.W	$0003
	AND.B	-(A4),D3
	ORI.B	#$00,D4
	DC.W	$0004
	MOVEA.W	4(A0),A6
	MOVEQ	#-20,D6
	DC.W	$0004
	EXG	D0,A0
	DC.W	$0005
	EORI.B	#$05,CCR
	DC.W	$5708
	DC.W	$0005
	DC.W	$a7ec
	DC.W	$0005
	DC.W	$fdf0
	DC.W	$0006
	SUBQ.B	#4,(A4)
	DC.W	$0006
	EOR.W	D4,(A0)+
	DC.W	$0007
	DC.W	$1fbc
	DC.W	$0007
	DC.W	$8c48
	DC.W	$0008
	ORI.B	#$08,D0
	MOVEQ	#-48,D4
	DC.W	$0008
	DC.W	$f9d8
	DC.W	$0009
	OR.B	D1,(A0)
	DC.W	$000a
	DC.W	$1478
	DC.W	$000a
	DC.W	$ae10
	DC.W	$000b
	DC.W	$4fd8
	DC.W	$000b
	DC.W	$fbe0
	DC.W	$000c
	CMP.B	13(A0),D1
	MOVEQ	#-80,D1
	DC.W	$000e
	DC.W	$3f78
	DC.W	$000f
	MOVE.B	(A0),(A4)
	ORI.B	#$00,(A0)
	DC.W	$0010
	DC.W	$f1a0
	DC.W	$0011
	DC.W	$f3b0
	DC.W	$0013
	ADDI.B	#$14,-(A0)
	MOVE.L	21(A0,D0.W),(A4)+
	ADDQ.B	#6,-(A0)
	DC.W	$0016
	SUB.L	D7,23(A0,D0.W)
	DC.W	$f7c0
	DC.W	$0019
	BCC.S	PattedTit_PTR+2
	DC.W	$001a
	ASL.W	D2,D0
	DC.W	$001c
	MOVEQ	#-16,D7
	DC.W	$001e
	MOVE.W	-(A0),-(A0)
	ORI.B	#$00,(A0)
	DC.W	$0010
	DC.W	$f1a0
	DC.W	$0011
	DC.W	$f3b0
	DC.W	$0013
	ADDI.B	#$14,-(A0)
	MOVE.L	21(A0,D0.W),(A4)+
	ADDQ.B	#6,-(A0)
	DC.W	$0016
	SUB.L	D7,23(A0,D0.W)
	DC.W	$f7c0
	DC.W	$0019
	BCC.S	LAB_116D+2
	DC.W	$001a
	ASL.W	D2,D0
	DC.W	$001c
	MOVEQ	#-16,D7
	DC.W	$001e
	MOVE.W	-(A0),-(A0)
	ORI.B	#$00,D0
LAB_1164:
	ORI.B	#$00,D0
ProjectName_PTR:
	ORI.B	#$00,D0
	DC.W	$0000
	SUBI.B	#$01,D0
PattedTit_PTR:
	ORI.B	#$00,D1
	ORI.B	#$00,D0
	SUBI.B	#$01,D0
Shift_KEY:
	ORI.B	#$00,D1
ShiftL_KEY:
NGSampleBoost:
	ORI.B	#$00,D0
SAMPLEBOOST:
	BCLR	D5,EXT_0000.W
JumpLen:
	ORI.W	#$0000,-(A4)
FastIHandle_INSTRLIST:
	ORI.B	#$00,D1
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
LAB_116D:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.W	$0000
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
Test_INSTRMAN:
	DC.L	FastIHandle_INSTRLIST+2
	DC.L	FastIHandle_INSTRLIST+2
	ORI.B	#$00,D4
	DC.W	$00ff
ActualInstrumentNum:
	DC.W	$ffff
KNACKLEN:
	ORI.B	#$00,D0
FORCEKNACK:
KNACKSTEPS:
	ORI.B	#$00,D0
KNACKMAXVOLSTEP:
	ORI.B	#$20,-(A0)
Standard_KEYTRANS:
	DC.L	Standard_KEYDEF
	DC.L	Upper_KEYDEF
LAB_1175:
	ORI.B	#$00,D0
	DC.W	$0000
	BTST	#1,D0
	DC.W	$0000
	BTST	D0,D0
	DC.L	Normal_FREQDEF
	ORI.B	#$00,D0
Standard_KEYDEF:
	DC.W	$000c
	MOVE.B	D2,D0
	MOVE.B	D3,-(A0)
	MOVE.B	(A3),D1
	BTST	D2,(A4)
	DC.W	$0615
	BTST	D3,(A6)
	DC.W	$1709
	DC.W	$180a
	MOVE.B	(A2)+,-(A4)
	DC.W	$0c1b
	BTST	D6,D0
Upper_KEYDEF:
	DC.W	$0000
	MOVE.W	-(A1),-(A0)
	MOVE.W	-(A2),D1
	DC.W	$3334
	DC.W	$2435
	DC.W	$2536
	MOVE.L	40(A7,D3.L),D3
	MOVE.W	14848(A1),-(A4)
SequenceMem_PTR:
	ORI.B	#$00,D0
LAB_1179:
	ORI.B	#$00,D0
	SUBI.B	#$01,D0
MACROPROCESS:
	ORI.B	#$00,D0
	DC.W	$0000
	DC.L	PlayLineNote_ComplexFXErr
ComplexFX_JMP:
	DC.L	PlayLineNote_ComplexFXErr
	DC.L	PlayLineNote_FxVSlideUp
	DC.L	PlayLineNote_FxVSlideDown
	DC.L	PlayLineNote_FxPSlideDown
	DC.L	PlayLineNote_FxPSlideUp
	DC.L	ReplayFXStartSample
	DC.L	ReplayFXStartPitch
	DC.L	ReplayFXSetFromAdd
	DC.L	ReplayFXFromAdd
	DC.L	ReplayFXSetSpeed
	DC.L	Play_FxAddPitch
	DC.L	Play_FxAddVol
	DC.L	PlayLineNote_Vibrato
	DC.L	PlayLineNote_Tremolo
	DC.L	PlayLineNote_SampleVib
	DC.L	PlayNotePSLIDETO
	DC.L	PlayNoteRETRIG
	DC.L	PlayNoteShEmphasis
	DC.L	Play_FxAddHalvTone
	DC.L	PNoteCV
	DC.L	PNoteCVAdd
	DC.L	PlayLineNote_ComplexFXErr
	DC.L	PlayLineNote_ComplexFXErr
	DC.L	PlayLNFilter
	DC.L	PlayLineNote_SetDsp
	DC.L	PlayLineNote_SetDelay
	DC.L	PlayLineNote_ComplexFXErr
	DC.L	PlayLineNote_ComplexFXErr
	DC.L	PlayLineNote_ComplexFXErr
	DC.L	PlayLineNote_ComplexFXErr
	DC.L	PlayLineNote_ComplexFXErr
	DC.L	PlayLineNote_ComplexFXErr
	DC.L	PlayLineNote_ComplexFXErr
	DC.L	PlayLineNote_ComplexFXErr
	DC.L	PlayLineNote_ComplexFXErr
	DC.L	PlayLineNote_ComplexFXErr
	DC.L	PlayLineNote_ComplexFXErr
	DC.L	PlayLineNote_ComplexFXErr
VOLUMECOM_JL:
	DC.L	PlayLineNote_PitchDown3
	DC.L	PlayLineNote_PitchUp3
	DC.L	PlayLineNote_PitchDown2
	DC.L	PlayLineNote_PitchUp2
	DC.L	PlayLineNote_PitchDown
	DC.L	PlayLineNote_PitchUp
	DC.L	PlayLineNote_VError
	DC.L	PlayLineNote_SpeedUp
	DC.L	PlayLineNote_SpeedDown
	DC.L	PlayLineNote_KeyOff
	DC.L	PlayLineNote_VError
	DC.L	PlayLineNote_ContSample
	DC.L	PlayLineNote_StopSample
VEX_ACTUALLINE:
	ORI.B	#$00,D0
ActualSongData:
	ORI.B	#$00,D0
PlayCVList:
	DC.L	PlayCV0
	DC.L	PlayCV1
	DC.L	PlayCV2
	DC.L	PlayCV2
	DC.L	PlayCV4
AddHalvTone_NOTE:
	ORI.B	#$00,D0
TestSongData_PTR:
	ORI.B	#$00,D0
LAB_1182:
	DC.W	$0000
	NEGX.B	D0
	ORI.B	#$00,D1
Test_SONG:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.W	$ffff
	ORI.B	#$00,D5
Song_CHNUMB:
	ORI.B	#$00,D0
	DC.W	$0000
	DC.L	FastIHandle_INSTRLIST+2
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
LAB_1185:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
SequenzTune:
PlayStereoCheck:
	ORI.B	#$00,D0
SignalACount:
DrySamples:
	BTST	D0,D0
DelayFX:
LAB_118A:
	ORI.B	#$00,D0
	DC.W	$0000
	DC.L	DelayCopyNrm
DelayFXList:
	DC.L	DelayCopyNrm
	DC.L	DelayCopyCross
	DC.L	DelayCopyHall
	DC.L	DelayCopyCrHall
DELAYINFO:
	DC.W	$0008
CHORUSINFO:
LAB_118E:
	ORI.B	#$00,D1
	DC.W	$fffc
	ORI.B	#$13,(A4)
	DC.W	$000a
	DC.W	$000a
HallInfo:
LAB_1190:
	ORI.B	#$02,(A0)
COPYBACK_JR:
	DC.L	CopyBackStream9Bit_Stereo
CopyBuffer_PTR:
	ORI.B	#$00,D0
LAB_1194:
	ORI.B	#$00,D0
	ORI.B	#$00,D1
PostDspBuffer_PTR:
	ORI.B	#$00,D0
LAB_1196:
	ORI.B	#$00,D0
	ORI.B	#$00,D1
ResoFilter_PTR:
	ORI.B	#$00,D0
LAB_1198:
	ORI.B	#$00,D0
	ORI.B	#$00,D1
DryDspBuffer_OFF:
Dry_COUNT:
	ORI.B	#$00,D0
DryDspBuffer_PTR:
	ORI.B	#$00,D0
LAB_119C:
	ORI.B	#$00,D0
	ORI.B	#$00,D1
CopySampleSF_OFFSET:
	ORI.B	#$00,D0
Actual_FREQDEF:
	DC.L	Normal_FREQDEF
LAB_119F:
	DC.W	$000c
Normal_FREQDEF:
	ORI.L	#$000c000c,12(A0)
	DC.L	NormalFREQLIST_PTR
	DC.L	Gleichschwebend_FREQBASE
Gleichschwebend_FREQBASE:
	MOVE.L	(A0),-(A3)
	MOVE.L	-(A3),11225(A4)
	DC.W	$2e74
	DC.W	$3137
	MOVE.W	-(A4),D2
	DC.W	$373e
	MOVE.W	D7,(A5)
	MOVE.W	D2,D7
	DC.W	$41b2
	CHK.W	(A2)+,D2
	DC.W	$49be
Math_FREQDEF:
	ORI.W	#$0010,10(A0,D0.W)
	DC.W	$0010
	DC.L	NormalFREQLIST_PTR
	DC.L	Math_FREQBASE16
Math_FREQDEF2:
	ORI.W	#$0011,10(A4)
	DC.W	$0011
	DC.L	NormalFREQLIST_PTR
	DC.L	Math_FREQBASE17
Math_FREQBASE:
	MOVE.L	(A0),-(A3)
	DC.W	$2981
	DC.W	$2bf2
	MOVEA.L	-44(A4,D3.W),A7
	MOVE.W	(A5),D2
	DC.W	$373e
	MOVE.W	(A0)+,(A5)
	MOVE.W	D2,D7
	DC.W	$411a
	CHK.W	(A2)+,D2
	DC.W	$493e
Math_FREQBASE17:
	MOVE.L	(A0),-(A3)
	DC.W	$28b0
	MOVEA.L	-(A2),A5
	MOVE.L	-(A5),D6
	DC.W	$2dfb
	DC.W	$2fe5
	DC.W	$31e4
	DC.W	$33f7
	MOVE.W	-(A1),D3
	MOVEA.W	-(A1),A4
	MOVE.W	LAB_1390(PC),(A5)
	DC.W	$3fb7
	CLR.W	(A6)+
	DC.W	$4521
	NBCD	D2
	DC.W	$4b01
Math_FREQBASE16:
	MOVE.L	(A0),-(A3)
	MOVE.L	A3,(A4)+
	MOVE.L	(A1)+,(A5)
	MOVEA.L	#$2e743083,A6
	MOVE.W	13543(A0),(A1)
	DC.W	$373e
	DC.W	$39b0
	DC.W	$3c3e
	MOVE.W	16818(A1),(A7)+
	NEG.L	(A3)+
	CHK.W	-(A4),D3
	TAS	(A0)
Math_FREQBASE18:
	MOVE.L	(A0),-(A3)
	MOVE.L	(A1)+,(A4)
	DC.W	$2a31
	DC.W	$2bd9
	DC.W	$2d91
	MOVE.L	(A3)+,12599(A7)
	MOVE.W	-(A6),-(A1)
	MOVE.W	14142(A0),-(A2)
	MOVE.W	15274(A1),15874(A4)
	DC.W	$4071
	DC.W	$42f9
	CHK.W	(A2)+,D2
	PEA	(A5)
	DC.W	$4b2c
NormalFREQLIST_PTR:
	ORI.B	#$00,D0
	DC.W	$0000
	MOVE.B	D0,D0
	ORI.B	#$00,D1
Test_VOICEEXPANDER:
	DC.W	$0000
	BTST	D0,D0
	ORI.B	#$00,D0
Test_VOICEEXANumb:
	ORI.B	#$00,D0
	ORI.B	#$a0,D0
	ORI.B	#$00,(A0)
	ORI.B	#$00,D0
	DC.W	$0000
	DC.L	Audio0_Buffer
	ORI.B	#$00,(A4)+
	DC.W	$5630
	MOVE.L	0(A0,D0.W),D7
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
Audio0_Buffer:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.L	BufferMem0_PTR+2
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
Audio1_Buffer:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.L	BufferMem1_PTR+2
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
Audio2_Buffer:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.L	BufferMem2_PTR+2
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
Audio3_Buffer:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.L	BufferMem3_PTR+2
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
FADETOSTEPS:
LAB_11B0:
	ORI.B	#$09,D0
FADETOSTEPSm:
	DC.W	$0008
BufferMem0_PTR:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$01,D0
BufferMem1_PTR:
	ORI.B	#$00,D3
	ORI.B	#$00,D0
	ORI.B	#$01,D0
BufferMem2_PTR:
	ORI.B	#$00,D3
	ORI.B	#$00,D0
	ORI.B	#$01,D0
BufferMem3_PTR:
	ORI.B	#$00,D3
	ORI.B	#$00,D0
	ORI.B	#$01,D0
Test_SAMPLE:
	ORI.B	#$00,D3
	ORI.B	#$01,D0
	BTST	D0,D0
	ORI.B	#$00,D1
DspHPFilt_LASTSAMPLE:
	ORI.B	#$00,D0
PREDSP:
	DC.L	CopyDSP_Echo
Stream9BitTAB_PTR:
	ORI.B	#$00,D0
	DC.W	$0000
	BTST	#1,D0
Bit14Tab_PTR:
	ORI.B	#$00,D0
	ORI.B	#$02,D0
	ORI.B	#$01,D0
CB8BITSHIFT:
	ORI.B	#$02,D0
SAMPLE_IPTR:
	ORI.B	#$00,D0
SEPERATECHANNELS:
	ORI.B	#$00,D0
FASTPOSSIBLE:
DSPPLUG_STATUS:
	DC.W	$0000
ForceUpdate:
EmAbort:
	DC.W	$ffff
SURROUNDMIX:
	DC.W	$ff00
DSPDELAY_LIST:
	DC.L	DeactivateDelay
	DC.L	SetDspDelay
	DC.L	SetDspDelay
DSPFX_LIST:
	DC.L	DeactivateDsp
	DC.L	DspEcho
	DC.L	DspCrossEcho
	DC.L	DspCrossEcho2
	DC.L	DspCenterEcho
DSPFX:
	ORI.B	#$00,D0
DSP_ECHO_LVL:
	ORI.B	#$01,D0
DSP_ECHO_LEN:
	ORI.B	#$08,D0
MAXDSP_ECHO_LEN:
	ORI.B	#$10,D0
POSTDSP:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
PostDspBUFFERNUMB:
	ORI.B	#$10,D0
CALCBUF_INFO:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
PostDspBUF_INFO:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
DELYHARM:
POSTDSP_FLAG:
DSPREINITECHO:
	ORI.B	#$00,D0
DSPFilterEcho:
	ORI.B	#$00,D0
CheckQJMsg_JMP:
	ORI.B	#$00,D0
BufferSet:
	DC.L	SetBufferB
LAB_11D4:
	DC.L	SetBufferA
VolumeList_PTR:
	ORI.B	#$00,D0
	DC.W	$0000
	AND.L	D4,(A4)
	ORI.B	#$00,D1
PLAYER_STATUS:
	ORI.B	#$00,D0
IRQStuff_STATUS:
AudioIRQ_STATUS:
	ORI.B	#$00,D0
	DC.W	$0000
SYSTEM_VOLUME:
	BTST	D0,D0
VL_PROCVLIMIT:
LAB_11DA:
	ORI.B	#$63,D0
VL_NOISELIMIT:
	ORI.B	#$05,D0
BufferSyncFlag:
	DC.W	$0000
Declicking:
PITCHDIFF_COUNTER:
	DC.W	$ff00
DOSAMPLEDIFF:
SAMPLEDIFF:
	ORI.B	#$00,D0
PITCHDIFF:
LAB_11E3:
	ORI.B	#$00,D0
LAB_11E5:
	ORI.B	#$00,D0
OldIntVector:
	DC.W	$ffff
	DC.W	$ffff
allocport:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	SUBI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
reqlist:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	BTST	D2,D0
allocreq:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.W	$057f
	ORI.B	#$00,D0
	DC.L	allocport
	ORI.W	#$0000,D4
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.L	sttempo
	ORI.B	#$01,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.W	$0000
sttempo:
	BTST	D7,D0
audiodevname:
	DC.W	$6175
	DC.W	$6469
	BLE.S	LAB_11EF
	DC.W	$6465
	MOVEQ	#105,D3
	DC.W	$6365
	ORI.B	#$00,D0
audiointerrupt:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.W	$0219
	DC.L	audiointname+1
	DC.L	serportalloc
	DC.L	SymphonieAudioInterrrupt
serportalloc:
audiointname:
	ORI.W	#$796d,(A3)
	MOVEQ	#104,D0
	BLE.S	sigbitnum
	DC.W	$6965
	MOVEA.L	D1,A0
	DC.W	$7564
LAB_11EF:
	DC.W	$696f
	MOVEA.L	A1,A0
	BGT.S	LAB_11FE
	BCS.S	LAB_11FE
	MOVEQ	#117,D1
	MOVEQ	#116,D0
	ORI.B	#$00,D0
SoftInterrupt:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.W	$0200
	DC.L	SoftIntName+1
	DC.L	serportalloc2
	DC.L	SymphonieSoftIRQ
serportalloc2:
SoftIntName:
	ORI.W	#$796d,(A3)
	MOVEQ	#104,D0
	BLE.S	LAB_1203
	DC.W	$6965
	MOVEA.L	(A3),A0
	BLE.S	LAB_1202
	MOVEQ	#32,D2
	DC.W	$496e
	MOVEQ	#101,D2
	MOVEQ	#114,D1
	DC.W	$7570
	MOVEQ	#0,D2
AudioIRQOld_JMP:
	ORI.B	#$00,D0
VexSyncBufNumb:
	ORI.B	#$02,D0
SoftInterruptb:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.W	$0200
	DC.L	SoftIntName+1
	DC.L	serportalloc2b
	DC.L	SymphonieSoftIRQ
SoftInt:
	DC.L	SoftInterrupt
LAB_11F7:
	DC.L	SoftInterruptb
serportalloc2b:
LowCPUWarn:
	DC.W	$0000
sigbitnum:
AUDIODEV_TAKEN:
	DC.W	$ff00
PubScreen_PUBLIC:
PubScreenName:
	ORI.W	#$796d,(A3)
	MOVEQ	#104,D0
	BLE.S	InfoOK_TXT
	DC.W	$6965
	DC.W	$4564
	BVS.S	LAB_120A
	BLE.S	LAB_120A
MainScreen_TXT:
LAB_11FE:
	ORI.W	#$796d,(A3)
	MOVEQ	#104,D0
	BLE.S	LAB_120B
	DC.W	$6965
	MOVEA.L	(A0),A0
	MOVEQ	#111,D1
	DC.W	$2033
MainScreenVoc_TXT:
	MOVE.L	32(A3,D2.W),D7
	MOVE.L	EXT_000e.W,D0
	DC.W	$6f63
	MOVE.L	D0,D0
MainScreenVoc2_TXT:
	MOVE.L	17193(A0),D0
LAB_1202:
	MOVEA.L	(A0),A0
LAB_1203:
	BSR.S	LAB_1214
	MOVEQ	#105,D1
	DC.W	$636b
	MOVEA.L	A5,A0
	BCS.S	ErrorText_TXT+2
	BEQ.S	LAB_1206
	DC.W	$3139
AdjustPath_TXT:
	MOVE.W	EXT_001d,-(A4)
	DC.W	$6563
	MOVEQ	#32,D2
	MOVE.L	A5,USP
	DC.W	$7720
	SUBQ.W	#1,-(A1)
	BLT.S	LAB_1218+2
	DC.W	$6c65
	MOVEA.L	(A0),A0
	BSR.S	LAB_121A+2
LongRequestDef_TXT:
	BVC.W	LAB_14E0
	MOVEQ	#101,D2
LAB_1206:
	MOVEQ	#32,D1
	BSR.S	LAB_120A
	DC.W	$6e75
	BLT.S	LAB_1219
	BCS.S	LAB_121B
FileAccess_TXT:
	ORI.W	#$696c,D6
	BCS.S	TestWin_SCR
	ADDQ.W	#1,-(A5)
	DC.W	$7175
	DC.W	$6573
	MOVEQ	#0,D2
InfoOK_TXT:
	MOVEA.L	A7,A0
	DC.W	$4b20
	ORI.B	#$00,D0
PSDEBUG:
	ORI.B	#$00,D0
LAB_120A:
	ORI.B	#$00,D0
LAB_120B:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
TestWin_SCR:
	ORI.B	#$00,D0
TestWin_RP:
	ORI.B	#$00,D0
TestWin_UP:
	ORI.B	#$00,D0
SymphonieTask_PTR:
	ORI.B	#$00,D0
Restart_FLAG:
Resync_FLAG:
	ORI.B	#$00,D0
VEX_Setup:
	ORI.B	#$04,D1
LAB_1213:
	DC.W	$0008
ErrorText_TXT:
LAB_1214:
	ORI.B	#$00,D0
	DC.W	$0000
ErrorTest_TXT:
	MOVE.L	D0,D0
ErrName:
	DC.W	$434f
	DC.W	$4e3a
	DC.W	$3230
	MOVE.L	47(A2,D3.W),-(A7)
	MOVE.W	47(A0,D3.W),-(A1)
	DC.W	$3430
LAB_1218:
	MOVE.L	(A3),31085(A7)
	MOVEQ	#104,D0
	BLE.S	LAB_1220
LAB_1219:
	DC.W	$6965
LAB_121A:
	MOVE.L	8261(A5),D0
	MOVEQ	#114,D1
	BLE.S	LAB_1223
	MOVEA.L	A5,A0
	DC.W	$6573
	DC.W	$7361
	DC.W	$6765
ERRChipMem_TXT:
LAB_121B:
	ORI.W	#$5252,D5
	DC.W	$4f52
	MOVE.W	-(A0),D5
	MOVE.L	USP,A7
	MOVEQ	#32,D2
	BCS.S	LAB_1225
	DC.W	$6f75
	BEQ.S	LAB_1224
	MOVEA.L	D3,A0
	DC.W	$4849
	ADDQ.B	#8,-(A0)
	DC.W	$6d65
	DC.W	$6d6f
	MOVEQ	#121,D1
	MOVE.L	-(A1),D0
	MOVE.L	D0,D7
ERRFastMem_TXT:
	DC.W	$4552
	ADDQ.W	#1,A7
	DC.W	$523a
	MOVEA.L	A6,A0
	BLE.S	LAB_1229
	MOVEA.L	-(A5),A0
	DC.W	$6e6f
	DC.W	$7567
	BVC.S	LAB_121F
	DC.W	$6d65
	DC.W	$6d6f
	MOVEQ	#121,D1
	MOVE.L	-(A1),D0
	MOVE.L	D0,D7
ERRProc_TXT:
	DC.W	$4552
	ADDQ.W	#1,A7
	DC.W	$523a
	MOVEA.L	A6,A0
	BLE.S	LAB_1222
	MOVE.W	EXT_0015.W,D3
	MOVE.W	12339(A7),D0
	MOVE.W	12340(A7),D0
LAB_121F:
	MOVE.W	12342(A7),D0
	MOVE.W	-(A0),D0
	DC.W	$4350
LAB_1220:
	SUBQ.B	#2,-(A0)
	DC.W	$666f
	DC.W	$756e
	BCC.S	LAB_1228
ERRNoCia_TXT:
	ORI.W	#$5252,D5
LAB_1222:
	DC.W	$4f52
LAB_1223:
	MOVE.W	-(A0),D5
	DC.W	$4369
	BSR.S	LAB_1227
	MOVEQ	#105,D2
	DC.W	$6d65
	MOVEQ	#32,D1
	DC.W	$6e6f
	MOVEQ	#32,D2
LAB_1224:
	DC.W	$666f
LAB_1225:
	DC.W	$756e
	BCC.S	LAB_122B
ERRNoVoiceEx_TXT:
	ORI.W	#$5252,D5
	DC.W	$4f52
	MOVE.W	-(A0),D5
	MOVE.L	USP,A7
	DC.W	$2076
	DC.W	$6f69
	DC.W	$6365
LAB_1227:
	MOVEA.L	-(A5),A0
LAB_1228:
	MOVEQ	#112,D4
	BSR.S	LAB_122F
	DC.W	$6465
	MOVEQ	#32,D1
	BCS.S	LAB_1231
	MOVEQ	#111,D1
	MOVEQ	#46,D1
ERRNoMainMem_TXT:
LAB_1229:
	ORI.W	#$5252,D5
	DC.W	$4f52
	MOVE.W	-(A0),D5
	MOVE.L	USP,A7
	MOVEA.L	25965(A5),A0
LAB_122B:
	BLE.S	ERRNoFileReq_TXT
	DC.W	$7920
	DC.W	$666f
	DC.W	$756e
	BCC.S	LAB_122D
ERRNoWindow_TXT:
	ORI.W	#$5252,D5
	DC.W	$4f52
	MOVE.W	-(A0),D5
	DC.W	$436f
	DC.W	$756c
	BCC.S	LAB_122D
	DC.W	$6e6f
	MOVEQ	#32,D2
	BLE.S	LAB_1236
	BCS.S	LAB_1236
	DC.W	$2077
	BVS.S	LAB_1237
	DC.W	$646f
	DC.W	$7773
	MOVE.L	28271(A0),D0
	MOVEA.L	-(A3),A0
	DC.W	$6869
	MOVEQ	#32,D0
	DC.W	$6d65
	DC.W	$6d6f
	MOVEQ	#121,D1
ERRNoVisualInfo_TXT:
LAB_122D:
	MOVE.L	69(A6),-(A4)
	ADDQ.W	#1,(A2)
	DC.W	$4f52
	MOVE.W	-(A0),D5
	MOVE.L	USP,A7
	DC.W	$2076
	DC.W	$6973
	DC.W	$7561
	DC.W	$6c69
	BGT.S	LAB_1239
	BLE.S	LAB_1232
	DC.W	$666f
	DC.W	$756e
	BCC.S	LAB_1234
ERRNoResMem_TXT:
LAB_122F:
	ORI.W	#$5252,D5
	DC.W	$4f52
	MOVE.W	-(A0),D5
	MOVE.L	USP,A7
LAB_1231:
	MOVEA.L	-(A2),A0
	DC.W	$6173
	BCS.S	LAB_1235
	DC.W	$6d65
	DC.W	$6d6f
	MOVEQ	#121,D1
	MOVEA.L	-(A6),A0
	DC.W	$6f75
LAB_1232:
	BGT.S	LAB_123C+2
	MOVE.L	D0,D7
ERRNoFileReq_TXT:
	DC.W	$4552
	ADDQ.W	#1,A7
	DC.W	$523a
	MOVEA.L	D6,A0
	BVS.S	LAB_123F
	BCS.S	LAB_1240
	DC.W	$6571
	DC.W	$7565
LAB_1234:
	DC.W	$7374
LAB_1235:
	BCS.S	MemFail_ERR
	MOVEA.L	28532(A6),A0
	MOVEA.L	-(A6),A0
LAB_1236:
	DC.W	$6f75
	BGT.S	LAB_1241
LAB_1237:
	MOVE.L	D0,D7
ERRNoScrMode_TXT:
	DC.W	$4552
	ADDQ.W	#1,A7
	DC.W	$523a
	MOVEA.L	(A3),A0
	BLS.S	LAB_1246
	DC.W	$6565
	DC.W	$6e6d
	BLE.S	LAB_1244
	BCS.S	LAB_123B
	MOVEQ	#101,D1
	DC.W	$7175
	DC.W	$6573
	MOVEQ	#101,D2
	MOVEQ	#32,D1
	DC.W	$6e6f
	MOVEQ	#32,D2
LAB_1239:
	DC.W	$666f
	DC.W	$756e
	BCC.S	LAB_123E
ERRNoLibs_TXT:
	ORI.W	#$5252,D5
	DC.W	$4f52
	MOVE.W	-(A0),D5
	DC.W	$4c69
	BHI.S	LAB_1249
LAB_123B:
	BSR.S	LAB_1249+2
	DC.W	$7920
	DC.W	$6e6f
	MOVEQ	#32,D2
	DC.W	$666f
	DC.W	$756e
	BCC.S	LAB_1243
ENoAudioDev:
LAB_123C:
	ORI.W	#$5252,D5
	DC.W	$4f52
	MOVE.W	-(A0),D5
	DC.W	$4361
	BGT.S	LAB_124E
	BLE.S	LAB_1251
	MOVEA.L	-(A1),A0
	BGE.S	LAB_1250
	DC.W	$6f63
LAB_123E:
	BSR.S	LAB_1252+2
LAB_123F:
	BCS.S	LAB_1245
	DC.W	$6175
	DC.W	$6469
	BLE.S	LAB_1247
LAB_1240:
	DC.W	$6465
	MOVEQ	#105,D3
LAB_1241:
	DC.W	$6365
	MOVE.L	D0,D7
MemFail_ERR:
	DC.W	$4d65
	DC.W	$6d6f
	MOVEQ	#121,D1
	MOVEA.L	(A0),A0
LAB_1243:
	MOVEQ	#111,D1
	MOVEQ	#101,D2
	BLS.S	LAB_1256
LAB_1244:
	DC.W	$696f
	BGT.S	LAB_1248
LAB_1245:
	NOT.W	-(A1)
	BVS.S	LAB_1256
LAB_1246:
	DC.W	$7572
	BCS.S	LAB_124D
	MOVEA.L	(A0),A0
	DC.W	$6c65
	DC.W	$6173
	BCS.S	LAB_124C
	MOVEQ	#101,D1
	DC.W	$626f
LAB_1247:
	BLE.S	LAB_1259
	MOVEA.L	-(A1),A0
	DC.W	$7320
	DC.W	$736f
	BLE.S	LAB_125A
	MOVEA.L	-(A1),A0
LAB_1248:
	DC.W	$7320
	MOVEQ	#111,D0
	DC.W	$7373
	BVS.S	LAB_1259
	DC.W	$6c65
	MOVE.L	-(A1),D0
NoUpdateSigtxt:
LAB_1249:
	ORI.W	#$5252,D5
LAB_124C:
	DC.W	$4f52
	MOVE.W	-(A0),D5
	MOVE.L	USP,A7
LAB_124D:
	MOVEA.L	(A5),A0
	MOVEQ	#100,D0
	BSR.S	LAB_125F
	BCS.S	LAB_1254
	SUBQ.W	#1,26478(A1)
LAB_124E:
	BSR.S	LAB_125F
GotoInstr_TXT:
	DC.W	$0049
LAB_1250:
	DC.W	$6e73
	MOVEQ	#114,D2
LAB_1251:
	DC.W	$756d
	BCS.S	LAB_1262
	MOVEQ	#32,D2
LAB_1252:
	STOP	#$2028
	MOVE.W	11826(A6),D0
	DC.W	$3535
	MOVE.L	D0,-(A4)
EasyDOLD:
	DC.W	$7772
LAB_1254:
	BVS.S	LAB_1267
	BVS.S	LAB_1266
	BEQ.S	LAB_1258
	MOVEQ	#111,D2
	MOVEA.L	-(A6),A0
	BVS.S	LAB_1268
	BCS.S	LAB_125A
	MOVE.W	D0,D5
EasyDO:
	MOVEQ	#101,D1
LAB_1256:
	BSR.S	LAB_1268
	BVS.S	LAB_126A
	BEQ.S	LAB_125B
	BNE.S	LAB_126D+2
	DC.W	$6f6d
	MOVEA.L	-(A6),A0
	BVS.S	LAB_126D+2
	BCS.S	LAB_125C
	MOVE.W	D0,D5
EasyDWERR:
	DC.W	$692f
LAB_1258:
	BLE.S	LAB_125E
	BCS.S	Resident_AUTOMEM
	MOVEQ	#111,D1
LAB_1259:
	MOVEQ	#32,D1
LAB_125A:
	DC.W	$7768
	BVS.S	LAB_126F+2
	BCS.S	LAB_1260
	DC.W	$7772
	BVS.S	LAB_1272
LAB_125B:
	BVS.S	LAB_1271
	BEQ.S	LAB_1261
	DC.W	$6f63
	DC.W	$6375
	MOVEQ	#101,D1
LAB_125C:
	BCC.S	LAB_1263
	MOVE.L	D0,-(A0)
EasyDRERR:
	DC.W	$692f
LAB_125E:
	BLE.S	LAB_1264+2
	BCS.S	LAB_1274+2
	MOVEQ	#111,D1
	MOVEQ	#32,D1
	DC.W	$7768
LAB_125F:
	BVS.S	LAB_1275
LAB_1260:
	BCS.S	LAB_1267
	MOVEQ	#101,D1
	BSR.S	LAB_1274+2
	BVS.S	LAB_1276+2
LAB_1261:
	BEQ.S	LAB_1269
LAB_1262:
	DC.W	$6f63
	DC.W	$6375
	MOVEQ	#101,D1
LAB_1263:
	BCC.S	LAB_126B
	MOVE.L	D0,-(A0)
EasyDOERR:
LAB_1264:
	NEG.W	29472(A7)
	BCS.S	LAB_1278
	MOVEQ	#111,D1
	MOVEQ	#58,D1
LAB_1266:
	MOVEA.L	D3,A0
	DC.W	$6f75
LAB_1267:
	BGE.S	LAB_1277
LAB_1268:
	DC.W	$6e27
	MOVEQ	#32,D2
	BLE.S	LAB_1279+2
LAB_1269:
	BCS.S	LAB_1279+2
	MOVEA.L	-(A6),A0
	BVS.S	LAB_127A
LAB_126A:
	BCS.S	LAB_1273
ERRTXT_AUTOLIBLIST:
LAB_126B:
	ORI.B	#$00,D0
LAB_126D:
	ORI.B	#$25,D0
LAB_126E:
	DC.W	$646f
	DC.W	$732e
	DC.W	$6c69
	BHI.S	LAB_127B
	BSR.S	LAB_127B+2
	DC.W	$7900
	DC.W	$ff00
Resident_AUTOMEM:
LAB_126F:
	DC.L	midimsgbufferPtr
	DC.L	SampleNames_PTR+2
	DC.L	InstrName_PTR+2
LAB_1271:
	DC.L	NormalFREQLIST_PTR
LAB_1272:
	DC.L	LAB_1175
	DC.L	FileName_PTR+2
LAB_1273:
	DC.L	NGGadHGrp_PTR
	DC.L	NGGadInfo_PTR
LAB_1274:
	DC.L	NGWinList_PTR+2
LAB_1275:
	DC.L	BuildCT_DATA
	DC.L	Blitmem_PTR
LAB_1276:
	DC.L	OverSample3_PTR
	DC.L	Delta16Buf_PTR
	DC.L	Bit14Tab_PTR+2
	DC.L	TempAssString
	DC.L	SeqPuffer_PTR
LAB_1277:
	DC.L	AutoMenu_PTR
LAB_1278:
	DC.L	FileNameRT_PTR
	DC.L	FinalFileNameRT_PTR
	DC.L	AnalyzeMsgRecMem_PTR
LAB_1279:
	DC.L	TempInstrName_PTR
LAB_127A:
	DC.L	ScreenTitle_PTR+2
	DC.L	PattedTxtBuf_PTR
	DC.L	BuildLineINFO_PTR+2
	DC.L	SpecBuffer_PTR
	DC.L	Stream9BitTAB_PTR
	DC.L	Test_SAMPLE+2
LAB_127B:
	DC.L	ProjectName_PTR
	DC.L	PattedTit_PTR+2
	DC.L	SinusTab
	DC.L	VibratoTab_PTR
	DC.L	SaVibratoTab_PTR+2
	DC.L	TremoloTab_PTR+2
	DC.L	SuperSupportTable_PTR
	DC.L	FLInfo_PTR
	DC.L	PathBuf_PTR
	DC.L	TempProjName
	DC.L	SCANTRANSBIG_PTR
	DC.L	PosLine_TXT
	DC.L	SAMPLEMANLIST_PTR
	DC.L	FirstEntry_INSTR
	DC.L	CopperList_PTR
	DC.L	RGB_Table_PTR
	DC.L	ResoSource1Ptr+2
	DC.W	$ffff
	DC.W	$ffff
SuperSupportTable_PTR:
	ORI.B	#$00,D0
	DC.W	$0000
	BTST	#1,D0
SampleNames_PTR:
	ORI.B	#$00,D0
LAB_127F:
	ORI.B	#$01,D0
	ORI.B	#$01,D0
FileName_PTR:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ANDI.B	#$01,D0
InstrName_PTR:
	ORI.B	#$00,D1
	ORI.B	#$00,D0
	ANDI.B	#$01,D0
TrackBuffer_PTR:
	ORI.B	#$00,D1
LAB_1283:
	ORI.B	#$00,D0
	ORI.B	#$01,D0
ScreenTitle_PTR:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	BTST	D0,D0
	ORI.B	#$01,D1
AutoMenu_PTR:
	ORI.B	#$00,D0
	DC.W	$0000
	ADDQ.B	#8,D0
	ORI.B	#$01,D1
SpriteNULL_PTR:
	ORI.B	#$00,D0
	ORI.B	#$40,D0
	ORI.B	#$03,D1
CopperList_PTR:
	ORI.B	#$00,D0
	DC.W	$0000
	MOVE.B	D0,-(A4)
	ORI.B	#$03,D1
RenderBuffer_PTR:
	ORI.B	#$00,D0
LAB_1289:
	ORI.B	#$00,D0
	ORI.B	#$00,D1
File_PTR:
	ORI.B	#$00,D0
_GraphicsBase:
	ORI.B	#$00,D0
	DC.W	$0000
	BEQ.S	LAB_1292
	BSR.S	LAB_1292
	DC.W	$6869
	DC.W	$6373
	MOVEA.L	26978(A4),A7
	MOVEQ	#97,D1
	MOVEQ	#121,D1
_AslBase:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.W	$6173
	BGE.S	LAB_128F+2
	DC.W	$6c69
	BHI.S	LAB_1294
	BSR.S	LAB_1295
	DC.W	$7900
_LayersBase:
	ORI.B	#$00,D0
	DC.W	$0000
	DC.W	$6c61
	DC.W	$7965
	MOVEQ	#115,D1
	MOVEA.L	26978(A4),A7
	MOVEQ	#97,D1
	MOVEQ	#121,D1
_GadToolsBase:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.W	$6761
	BCC.S	LAB_129A
	DC.W	$6f6f
	DC.W	$6c73
LAB_128F:
	MOVEA.L	26978(A4),A7
	MOVEQ	#97,D1
	MOVEQ	#121,D1
_ReqToolsBase:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	MOVEQ	#101,D1
	DC.W	$7174
	DC.W	$6f6f
	DC.W	$6c73
	MOVEA.L	26978(A4),A7
	MOVEQ	#97,D1
	MOVEQ	#121,D1
_XpkBase:
	ORI.B	#$00,D0
	ORI.B	#$00,D1
	MOVEQ	#112,D4
	DC.W	$6b6d
LAB_1292:
	DC.W	$6173
	MOVEQ	#101,D2
	MOVEQ	#46,D1
	DC.W	$6c69
	BHI.S	LAB_12A0
	BSR.S	LAB_12A0+2
	DC.W	$7900
_CamdBase:
	ORI.B	#$01,D0
	DC.W	$0000
	DC.W	$6361
	BLT.S	LAB_12A0
	MOVEA.L	26978(A4),A7
	MOVEQ	#97,D1
LAB_1294:
	MOVEQ	#121,D1
LAB_1295:
	DC.W	$0000
	DC.W	$ff00
MainScreen_PTR:
	ORI.B	#$00,D0
	DC.W	$0000
LAB_1297:
	OR.B	D0,D0
	ORI.B	#$00,1(A4)
	OR.B	D0,D0
	DC.W	$0028
	DC.L	MainScreen_TXT+1
DisplayID2_ADR:
	OR.B	D0,D0
LAB_1299:
	ORI.B	#$06,36(A2,A1.W)
	OR.B	D0,D0
LAB_129A:
	ORI.B	#$00,-(A3)
	ANDI.L	#$80000024,D0
LAB_129C:
	DC.W	$0000
	BCLR	D0,(A0)
	OR.B	D0,D0
LAB_129D:
	ORI.B	#$00,-(A5)
	DC.W	$0002
	OR.B	D0,D0
	ORI.W	#$ffff,D7
	DC.W	$ffff
	OR.B	D0,D0
	DC.W	$003a
	DC.L	Main_Pens
MyScreenAutoScroll:
	OR.B	D0,D0
	DC.W	$0039
	DC.W	$ffff
	DC.W	$ffff
MyScreenAutoType:
	OR.B	D0,D0
	ORI.B	#$00,16386(A5)
	OR.B	D0,D0
LAB_12A0:
	ORI.W	#$ffff,D2
	DC.W	$ffff
	OR.B	D0,D0
	DC.W	$002f
	DC.L	PubScreenName+1
	OR.B	D0,D0
	DC.W	$003b
	DC.W	$ffff
	DC.W	$ffff
	ORI.B	#$00,D0
MyScreenPubSig:
	OR.B	D0,D0
	ORI.B	#$00,0(A0,D0.W)
MyScreenTask:
	OR.B	D0,D0
LAB_12A4:
	ORI.B	#$00,0(A1,D0.W)
	ORI.B	#$00,D0
Main_Pens:
	DC.W	$ffff
	DC.W	$ffff
	ORI.B	#$00,D0
RequesterScreen_PTR:
	ORI.B	#$00,D0
RQReqStruct_PTR:
	ORI.B	#$00,D0
SinusTab:
	ORI.B	#$00,D0
	DC.W	$0000
	DC.W	$02d0
	ORI.B	#$00,D1
VibratoTab_PTR:
	ORI.B	#$00,D0
	DC.W	$0000
	ANDI.B	#$01,D0
SaVibratoTab_PTR:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	SUBI.B	#$01,D0
TremoloTab_PTR:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ANDI.B	#$01,D0
RenderF_TAB:
	ORI.B	#$00,D0
	DC.W	$0000
	DC.L	RendForm0+1
	ORI.B	#$01,D0
	DC.L	RendForm1+1
	ORI.B	#$02,D0
	DC.L	RendForm2+3
	ORI.B	#$03,D0
	DC.L	RendForm3+1
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
RendMdTypeList:
	ORI.B	#$00,D0
	SUBQ.W	#1,(A1)+
	MOVE.W	EXT_0000.W,D2
	DC.W	$0001
	SUBQ.W	#1,(A1)+
	MOVEA.W	D1,A2
	ORI.B	#$02,D0
	SUBQ.W	#1,(A1)+
	DC.W	$3439
	ORI.B	#$03,D0
	SUBQ.W	#1,(A1)+
	MOVEA.W	D2,A2
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
RendMdTxtList:
	DC.W	$0000
	DC.W	$0800
	DC.L	Rend80+1
	DC.W	$0000
	DC.W	$0801
	DC.L	Rend81+1
	DC.W	$0000
	MOVE.B	D0,D0
	DC.L	Rend160+1
	DC.W	$0000
	MOVE.B	D1,D0
	DC.L	Rend161
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
RenderBgnStatus:
	DC.W	$4175
	DC.W	$6469
	BLE.S	LAB_12B1
	ADDQ.W	#1,-(A5)
	BGT.S	LAB_12B6
	BCS.S	LAB_12BB
	BVS.S	LAB_12BA
	BEQ.S	LAB_12B2
	MOVEA.L	(A0),A0
	MOVEQ	#101,D1
	DC.W	$7373
	MOVEA.L	D5,A0
	SUBQ.W	#1,D3
	DC.W	$2074
	BLE.S	LAB_12B2
	BSR.S	LAB_12BC
	BLE.S	LAB_12BE
	MOVEQ	#0,D2
RenderEnd0:
	DC.W	$4175
LAB_12B1:
	DC.W	$6469
	BLE.S	LAB_12B3
	ADDQ.W	#1,-(A5)
	BGT.S	LAB_12BD
	BCS.S	LAB_12C1
	BVS.S	LAB_12C0
	BEQ.S	LAB_12B6
	MOVEA.L	D3,A0
	DC.W	$6c65
	BSR.S	LAB_12C2
	BVS.S	RenderDone_TXT
	BEQ.S	LAB_12B5
LAB_12B2:
	DC.W	$7570
	MOVE.L	11808(A6),D7
	ADDQ.W	#8,25953(A4)
	DC.W	$7365
LAB_12B3:
	DC.W	$2077
	DC.W	$6169
	MOVEQ	#32,D2
	MOVE.L	11776(A6),D7
RenderEnd1:
	DC.W	$4175
	DC.W	$6469
	BLE.S	LAB_12B8+2
	ADDQ.W	#1,-(A5)
	BGT.S	LAB_12C5
LAB_12B5:
	BCS.S	LAB_12C8
	BVS.S	LAB_12C6
	BEQ.S	LAB_12BF
	MOVE.L	10794(A2),D0
	MOVEA.L	D3,A0
	DC.W	$6f6d
	MOVEQ	#108,D0
LAB_12B6:
	BCS.S	LAB_12CC+2
	BCS.S	LAB_12CA
	MOVE.L	10794(A2),D0
Render_SILENCE:
	DC.W	$0000
RendERR_TXT:
LAB_12B8:
	NEG.W	29472(A7)
LAB_12BA:
	BCS.S	LAB_12CD
LAB_12BB:
	MOVEQ	#111,D1
	MOVEQ	#32,D1
LAB_12BC:
	DC.W	$7768
	BVS.S	LAB_12CE
	BCS.S	LAB_12C2
	DC.W	$7772
	BVS.S	LAB_12D1
	BVS.S	LAB_12CF+2
	BEQ.S	Rend_TXT
	MOVEA.L	(A2),A0
LAB_12BD:
	BCS.S	LAB_12D2
LAB_12BE:
	DC.W	$6465
	MOVEQ	#105,D1
	DC.W	$6e67
	MOVEA.L	28532(A6),A0
LAB_12BF:
	MOVEA.L	-(A3),A0
LAB_12C0:
	DC.W	$6f6d
LAB_12C1:
	MOVEQ	#108,D0
	BCS.S	LAB_12D5+2
	BCS.S	LAB_12D3
LAB_12C2:
	MOVE.L	D0,D7
RenderDone_TXT:
	MOVE.L	10784(A2),D5
	ADDQ.W	#1,-(A5)
	BGT.S	LAB_12D4
	BCS.S	LAB_12D7+2
	BVS.S	LAB_12D7
	BEQ.S	LAB_12CA+2
	NEG.W	28261(A7)
	MOVE.L	D0,D7
Rend_TXT:
	SUBQ.W	#1,-(A5)
	DC.W	$6c65
LAB_12C5:
	BLS.S	LAB_12DA
	MOVEA.L	(A2),A0
	BCS.S	LAB_12D9
	DC.W	$6465
	MOVEQ	#32,D1
	NOT.W	27749(A1)
Rend_MATCH:
LAB_12C6:
	DC.W	$0023
LAB_12C8:
	MOVE.W	D0,-(A7)
RendDos:
	MOVE.W	-(A0),D4
LAB_12CA:
	CLR.W	29736(A1)
	SUBQ.W	#2,29545(A6)
	BEQ.S	LAB_12DE
	BCS.S	LAB_12DD
LAB_12CC:
	MOVE.L	8241(A4),-(A4)
	MOVEA.W	D2,A3
	BVS.S	LAB_12E0
	MOVEA.L	A7,A4
	MOVEQ	#100,D1
	BCS.S	LAB_12E1
LAB_12CD:
	MOVEA.L	(A2),A0
LAB_12CE:
	BCS.S	LAB_12E3
	BCS.S	LAB_12E2
	DC.W	$7365
	DC.W	$6429
Rend80:
LAB_12CF:
	ORI.W	#$6573,(A2)
	BLE.S	LAB_12E4
LAB_12D1:
	DC.W	$7574
LAB_12D2:
	DC.W	$696f
	BGT.S	LAB_12DC
	MOVE.L	EXT_000c.W,D0
	BVS.S	LAB_12E7
LAB_12D3:
	MOVE.L	-(A0),D6
	DC.W	$4d6f
	DC.W	$6465
	MOVE.W	-(A0),D5
	DC.W	$4d6f
LAB_12D4:
	DC.W	$6e6f
Rend81:
LAB_12D5:
	ORI.W	#$6573,(A2)
	BLE.S	LAB_12E8+2
	DC.W	$7574
	DC.W	$696f
	BGT.S	LAB_12E0
LAB_12D7:
	MOVE.L	EXT_000c.W,D0
	BVS.S	LAB_12EB
	MOVE.L	-(A0),D6
	DC.W	$4d6f
	DC.W	$6465
	MOVE.W	-(A0),D5
	DC.W	$5374
	BCS.S	LAB_12EC
LAB_12D9:
	DC.W	$656f
Rend160:
LAB_12DA:
	ORI.W	#$6573,(A2)
	BLE.S	LAB_12EC+2
	DC.W	$7574
LAB_12DC:
	DC.W	$696f
	BGT.S	LAB_12E6
	DC.W	$2031
LAB_12DD:
	MOVE.W	-(A0),D3
	CLR.W	29740(A1)
	MOVEA.L	A5,A0
LAB_12DE:
	BLE.S	LAB_12EF
	BCS.S	LAB_12E9
	MOVEA.L	A5,A0
	BLE.S	LAB_12F1
	DC.W	$6f00
Rend161:
	ADDQ.W	#1,-(A5)
	DC.W	$736f
	DC.W	$6c75
LAB_12E0:
	MOVEQ	#105,D2
	BLE.S	LAB_12F2
LAB_12E1:
	MOVE.W	-(A0),D5
	MOVE.W	66(A6,D2.W),-(A0)
LAB_12E2:
	BVS.S	LAB_12F4+2
LAB_12E3:
	MOVE.L	-(A0),D6
LAB_12E4:
	DC.W	$4d6f
	DC.W	$6465
	MOVE.W	-(A0),D5
	DC.W	$5374
	BCS.S	LAB_12F7
	DC.W	$656f
RendForm0:
	ORI.W	#$6f72,D6
	DC.W	$6d61
LAB_12E6:
	MOVEQ	#58,D2
LAB_12E7:
	MOVEA.L	(A2),A0
	DC.W	$6177
	MOVE.L	18500(A0),D0
LAB_12E8:
	ADDQ.B	#1,28271(A4)
LAB_12E9:
	MOVEA.L	25953(A0),A0
	DC.W	$6465
	MOVEQ	#41,D1
RendForm1:
	ORI.W	#$6f72,D6
	DC.W	$6d61
	MOVEQ	#58,D2
	MOVEA.L	A5,A0
LAB_12EB:
	DC.W	$6165
	DC.W	$7374
	MOVEQ	#111,D1
	MOVE.L	18500(A0),D0
RendForm2:
LAB_12EC:
	ADDQ.B	#1,70(A1)
	BLE.S	LAB_12F9
	DC.W	$6d61
	MOVEQ	#58,D2
	MOVEA.L	(A7),A0
LAB_12EF:
	BSR.S	LAB_12FA
	BCS.S	RenderF
	MOVEA.L	A0,A4
	NEG.W	(A2)
	MOVEA.L	(A0),A6
	DC.W	$4329
RendForm3:
	ORI.W	#$6f72,D6
LAB_12F1:
	DC.W	$6d61
	MOVEQ	#58,D2
	MOVEA.L	D1,A0
	BVS.S	LAB_12FB+2
	BNE.S	LAB_12F8
	MOVEA.L	A0,A4
LAB_12F2:
	NEG.W	(A2)
	MOVEA.L	A1,A6
	NOT.W	D6
	MOVE.L	D0,-(A4)
RenderF:
	ORI.B	#$00,D0
RenderWaveHead_ADR:
LAB_12F4:
	ORI.B	#$2c,D0
LAB_12F6:
	ADDQ.W	#1,A1
	NOT.W	D6
	DC.W	$0001
	DC.W	$ac74
LAB_12F7:
	SUBQ.W	#3,D1
	ADDQ.W	#3,D5
	DC.W	$666d
LAB_12F8:
	MOVEQ	#32,D2
	MOVE.B	D0,D0
	DC.W	$0000
	BTST	D0,D0
	DC.W	$0200
	NEG.L	0(A4)
	MOVE.B	0(A3),-(A0)
	DC.W	$0400
	MOVE.B	D0,D0
	DC.W	$6461
	MOVEQ	#97,D2
	DC.W	$0001
	DC.W	$ac00
	DC.W	$464f
	ADDQ.W	#1,A5
	DC.W	$0001
	DC.W	$ac74
	DC.W	$4d41
	SUBQ.W	#2,D4
	DC.W	$4d48
	NEG.W	(A2)
	ORI.B	#$20,D0
LAB_12F9:
	DC.W	$0001
	DC.W	$ac00
	DC.W	$0008
	DC.W	$0008
	DC.W	$0000
	EOR.L	D5,D0
LAB_12FA:
	ORI.B	#$00,D1
LAB_12FB:
	ORI.B	#$00,D1
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	DC.W	$414e
	TRAP	#15
	ORI.B	#$38,D0
	MOVEA.L	(A6),A2
	DC.W	$4552
	MOVE.W	-(A0),D5
	ADDQ.W	#1,-(A5)
	BGT.S	LAB_1306+2
	BCS.S	LAB_1309+2
	BCS.S	LAB_1307
	DC.W	$2077
	BVS.S	LAB_130A+2
	BVC.S	LAB_12FC
	DC.W	$5379
	BLT.S	LAB_130B
	DC.W	$686f
	DC.W	$6e69
	BCS.S	LAB_12FD
	DC.W	$5072
	BLE.S	LAB_12FE+2
	MOVE.W	13088(A6),-(A1)
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_12FC:
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	DC.W	$4d44
	DC.W	$4154
	DC.W	$0001
LAB_12FD:
	DC.W	$ac00
RenderMaestroHead_ADR:
LAB_12FE:
	ORI.B	#$18,D0
LAB_1300:
	DC.W	$4d41
	DC.W	$4553
	ADDQ.W	#2,(A2)
	DC.W	$4f00
	BTST	D0,D0
	ANDI.B	#$00,D0
	DC.W	$0000
	DC.W	$ffff
	DC.W	$ffff
	ORI.B	#$00,D0
GuiPrefsHead:
	ORI.W	#$594d,(A3)
LAB_1302:
	ADDQ.W	#8,(A2)
	NOT.W	(A3)
LAB_1303:
	ORI.B	#$00,D1
GuiPrefs:
	ORI.B	#$02,D0
LAB_1306:
	ORI.B	#$03,D0
	DC.W	$0000
LAB_1307:
	BTST	D0,D0
LAB_1308:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
LAB_1309:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
LAB_130A:
	ORI.B	#$00,D0
LAB_130B:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
AudioPrefs:
	ORI.B	#$01,D0
	ORI.B	#$03,D0
	DC.W	$0000
	BTST	D0,D0
LAB_130D:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
StructPrefs:
	ORI.B	#$03,D0
	ORI.B	#$03,D0
	DC.W	$0000
	BTST	D0,D0
LAB_130F:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
PrefsHead_END:
	ORI.B	#$00,D0
APrefs_MAKELIST:
	DC.L	LAB_130D
	ORI.B	#$00,D0
	DC.L	VexBufferNumb
	ORI.B	#$00,D0
	DC.L	MAXDSP_ECHO_LEN
	ORI.B	#$00,D0
	DC.L	VexQuality
	ORI.B	#$00,D0
	DC.L	PrefsHead_END
	ORI.B	#$00,D0
	DC.L	PITCHDIFF+2
	ORI.B	#$00,D0
	DC.L	SAMPLEDIFF+2
	ORI.B	#$00,D0
	DC.L	KNACKSTEPS+2
	ORI.B	#$01,D0
	DC.L	VL_PROCVLIMIT+2
	DC.W	$ffff
	DC.W	$ffff
StructPrefs_MAKELIST:
	DC.L	LAB_130F
	ORI.B	#$00,D0
	DC.L	VexSpeed
	ORI.B	#$00,D0
	DC.L	VEX_LinesPerPattern
	ORI.B	#$00,D0
	DC.L	VEX_PattNumb
	ORI.B	#$01,D0
	DC.L	CHANNEL_NUMB+2
	DC.W	$ffff
	DC.W	$ffff
SINTAB:
	ORI.B	#$08,D0
	DC.W	$000f
	ORI.B	#$1f,(A7)
	ORI.B	#$2e,-(A6)
	ORI.B	#$3d,69(A6,D0.W)
	DC.W	$004d
	ORI.W	#$005c,(A4)
	ORI.W	#$006b,-(A4)
	ORI.W	#$007a,-126(A3,D0.W)
	DC.W	$008a
	ORI.L	#$009900a0,(A1)
	ORI.L	#$00af00b7,190(A0)
	DC.W	$00c6
	DC.W	$00cd
	DC.W	$00d5
	DC.W	$00dc
	DC.W	$00e4
	DC.W	$00eb
	DC.W	$00f3
	DC.W	$00fa
	BTST	D0,D1
	MOVEP.W	272(A1),D0
	BTST	D0,(A7)
	BTST	D0,(A6)+
	BTST	D0,-(A6)
	BTST	D0,308(A5)
	DC.W	$013b
	BCHG	D0,D3
	MOVEP.L	337(A2),D0
	BCHG	D0,(A0)+
	BCHG	D0,(A7)+
	BCHG	D0,-(A6)
	BCHG	D0,372(A5)
	DC.W	$017b
	BCLR	D0,D2
	MOVEP	D0,400(A1)
	BCLR	D0,(A6)
	BCLR	D0,(A5)+
	BCLR	D0,-(A4)
	BCLR	D0,433(A3)
	BCLR	D0,EXT_0005.W
	BSET	D0,D5
	MOVEP.L	D0,466(A4)
	BSET	D0,(A1)+
	BSET	D0,(A7)+
	BSET	D0,-(A6)
	BSET	D0,498(A4)
	BSET	D0,EXT_002d
	DC.W	$020b
	DC.W	$0212
	DC.W	$0218
	DC.W	$021e
	DC.W	$0224
	DC.W	$022a
	DC.W	$0230
	DC.W	$0236
	DC.W	$023c
	ANDI.W	#$0247,D1
	DC.W	$024d
	ANDI.W	#$0258,(A3)
	ANDI.W	#$0263,(A6)+
	ANDI.W	#$026e,628(A1)
	DC.W	$0279
	DC.W	$027e
	ANDI.L	#$0289028e,D4
	ANDI.L	#$0298029d,(A3)
	ANDI.L	#$02a702ac,-(A2)
	DC.W	$02b1
	DC.W	$02b5
	DC.W	$02ba
	DC.W	$02bf
	DC.W	$02c3
	DC.W	$02c8
	DC.W	$02cc
	DC.W	$02d1
	DC.W	$02d5
	DC.W	$02da
	DC.W	$02de
	DC.W	$02e2
	DC.W	$02e6
	DC.W	$02ea
	DC.W	$02ee
	DC.W	$02f2
	DC.W	$02f6
	DC.W	$02fa
	DC.W	$02fe
	BTST	D1,D2
	BTST	D1,D5
	MOVEP.W	781(A1),D1
	BTST	D1,(A0)
	BTST	D1,(A4)
	BTST	D1,(A7)
	BTST	D1,(A2)+
	BTST	D1,(A6)+
	BTST	D1,-(A1)
	BTST	D1,-(A4)
	BTST	D1,-(A7)
	BTST	D1,813(A2)
	DC.W	$0330
	DC.W	$0333
	DC.W	$0336
	BTST	D1,EXT_0007.W
	DC.W	$033e
	BCHG	D1,D0
	BCHG	D1,D3
	BCHG	D1,D5
	BCHG	D1,D7
	MOVEP.L	844(A2),D1
	MOVEP.L	848(A6),D1
	BCHG	D1,(A2)
	BCHG	D1,(A4)
	BCHG	D1,(A6)
	BCHG	D1,(A0)+
	BCHG	D1,(A1)+
	BCHG	D1,(A3)+
	BCHG	D1,(A5)+
	BCHG	D1,(A6)+
	BCHG	D1,-(A0)
	BCHG	D1,-(A1)
	BCHG	D1,-(A3)
	BCHG	D1,-(A4)
	BCHG	D1,-(A5)
	BCHG	D1,-(A6)
	BCHG	D1,-(A7)
	BCHG	D1,873(A0)
	BCHG	D1,875(A2)
	BCHG	D1,877(A4)
	BCHG	D1,878(A5)
	BCHG	D1,879(A6)
	BCHG	D1,879(A7)
	DC.W	$0370
	DC.W	$0370
	DC.W	$0370
	DC.W	$0370
	DC.W	$0370
	DC.W	$0370
	DC.W	$0370
	BCHG	D1,879(A7)
	BCHG	D1,878(A7)
	BCHG	D1,877(A6)
	BCHG	D1,876(A5)
	BCHG	D1,874(A3)
	BCHG	D1,872(A1)
	BCHG	D1,-(A7)
	BCHG	D1,-(A6)
	BCHG	D1,-(A5)
	BCHG	D1,-(A4)
	BCHG	D1,-(A3)
	BCHG	D1,-(A1)
	BCHG	D1,-(A0)
	BCHG	D1,(A6)+
	BCHG	D1,(A5)+
	BCHG	D1,(A3)+
	BCHG	D1,(A1)+
	BCHG	D1,(A0)+
	BCHG	D1,(A6)
	BCHG	D1,(A4)
	BCHG	D1,(A2)
	BCHG	D1,(A0)
	MOVEP.L	844(A6),D1
	MOVEP.L	839(A2),D1
	BCHG	D1,D5
	BCHG	D1,D3
	BCHG	D1,D0
	DC.W	$033e
	DC.W	$033b
	BTST	D1,EXT_0006.W
	DC.W	$0333
	DC.W	$0330
	BTST	D1,810(A5)
	BTST	D1,-(A7)
	BTST	D1,-(A4)
	BTST	D1,-(A1)
	BTST	D1,(A6)+
	BTST	D1,(A2)+
	BTST	D1,(A7)
	BTST	D1,(A4)
	BTST	D1,(A0)
	MOVEP.W	777(A5),D1
	BTST	D1,D5
	BTST	D1,D2
	DC.W	$02fe
	DC.W	$02fa
	DC.W	$02f6
	DC.W	$02f2
	DC.W	$02ee
	DC.W	$02ea
	DC.W	$02e6
	DC.W	$02e2
	DC.W	$02de
	DC.W	$02da
	DC.W	$02d5
	DC.W	$02d1
	DC.W	$02cc
	DC.W	$02c8
	DC.W	$02c3
	DC.W	$02bf
	DC.W	$02ba
	DC.W	$02b5
	DC.W	$02b1
	ANDI.L	#$02a702a2,669(A4)
	ANDI.L	#$0293028e,(A0)+
	DC.W	$0289
	ANDI.L	#$027e0279,D4
	DC.W	$0274
	ANDI.W	#$0269,611(A6)
	ANDI.W	#$0258,(A6)+
	ANDI.W	#$024d,(A3)
	ANDI.W	#$0241,D7
	DC.W	$023c
	DC.W	$0236
	DC.W	$0230
	DC.W	$022a
	DC.W	$0224
	DC.W	$021e
	DC.W	$0218
	DC.W	$0212
	DC.W	$020b
	DC.W	$0205
	DC.W	$01ff
	BSET	D0,EXT_002c
	BSET	D0,-(A6)
	BSET	D0,(A7)+
	BSET	D0,(A1)+
	BSET	D0,(A2)
	MOVEP.L	D0,453(A4)
	DC.W	$01bf
	BCLR	D0,EXT_0004.W
	BCLR	D0,420(A3)
	BCLR	D0,(A5)+
	BCLR	D0,(A6)
	BCLR	D0,(A0)
	MOVEP	D0,386(A1)
	DC.W	$017b
	DC.W	$0174
	BCHG	D0,358(A5)
	BCHG	D0,(A7)+
	BCHG	D0,(A0)+
	BCHG	D0,(A1)
	MOVEP.L	323(A2),D0
	DC.W	$013b
	DC.W	$0134
	BTST	D0,294(A5)
	BTST	D0,(A6)+
	BTST	D0,(A7)
	BTST	D0,(A0)
	MOVEP.W	257(A1),D0
	DC.W	$00fa
	DC.W	$00f3
	DC.W	$00eb
	DC.W	$00e4
	DC.W	$00dc
	DC.W	$00d5
	DC.W	$00cd
	DC.W	$00c6
	DC.W	$00be
	ORI.L	#$00af00a8,-96(A7,D0.W)
	ORI.L	#$0091008a,(A1)+
	ORI.L	#$007a0073,D2
	ORI.W	#$0064,92(A3)
	ORI.W	#$004d,(A4)
	ORI.W	#$003d,D5
	ORI.B	#$2e,38(A6,D0.W)
	ORI.B	#$17,(A7)+
	DC.W	$000f
	DC.W	$0008
PACKHEAD:
	ADDQ.W	#8,D1
	DC.W	$434b
PACKRESULT:
LAB_1315:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
SAMPLEMANLIST_PTR:
	ORI.B	#$00,D0
	DC.W	$0000
	MOVE.W	D0,D4
	ORI.B	#$00,D1
FirstEntry_INSTR:
	ORI.B	#$00,D0
	DC.W	$0000
	NEGX.B	D0
	ORI.B	#$00,D1
DSPGUIDefMem:
	ORI.B	#$00,D0
LAB_131A:
	ORI.B	#$00,D0
LAB_131B:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
LinkFadeRGB32_TEMP:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
LAB_131D:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
MMENU_JL:
	DC.W	$0000
	DC.W	$ffff
	DC.L	SetOldCList
	DC.W	$0000
	DC.W	$f800
	DC.L	AboutRequest
	DC.W	$0000
	DC.W	$f820
	DC.L	ShowSongInfoAll
	ORI.B	#$01,D0
	DC.L	PlayActualSong
	DC.W	$0000
	DC.W	$0801
	DC.L	PlayActualSeq
	DC.W	$0000
	MOVE.B	D1,D0
	DC.L	PlayFromActualPos
	DC.W	$0000
	MOVE.B	D1,D4
	DC.L	PlayActualPattern
	DC.W	$0000
	MOVE.L	D1,D0
	DC.L	MuteActualTrack
	DC.W	$0000
	MOVE.W	D1,D0
	DC.L	StopSong2
	ORI.B	#$41,D0
	DC.L	DeactivateDsp
	DC.W	$0000
	DC.W	$1041
	DC.L	DspEcho
	DC.W	$0000
	DC.W	$1841
	DC.L	DspCrossEcho
	DC.W	$0000
	MOVEA.L	D1,A0
	DC.L	DspCrossEcho2
	DC.W	$0000
	MOVEA.L	D1,A4
	DC.L	DspCenterEcho
	DC.W	$0000
	MOVEA.W	D1,A0
	DC.L	DspFilter
	DC.W	$0000
	NEGX.W	D1
	DC.L	DspDelay
	DC.W	$0000
	SWAP	D1
	DC.L	DspCrossDelay
	DC.W	$0000
	ADDQ.W	#8,D1
	DC.L	DspHall
	DC.W	$0000
	ADDQ.W	#4,D1
	DC.L	DspCrossHall
	DC.W	$0000
	DC.W	$6041
	DC.L	SelectPostFilter
	ORI.B	#$21,D0
	DC.L	SetOS9Bit
	DC.W	$0000
	DC.W	$0821
	DC.L	SetStereo9Mode
	DC.W	$0000
	MOVE.B	-(A1),D0
	DC.L	SetOS14Bit
	DC.W	$0000
	MOVE.B	-(A1),D4
	DC.L	SetStereo14Mode
	DC.W	$0000
	MOVE.L	-(A1),D4
	DC.L	SetMonoMode
	DC.W	$0000
	MOVE.W	-(A1),D0
	DC.L	SetMonoSurrMode
	DC.W	$0000
	NEGX.B	-(A1)
	DC.L	SetLeftSurrMode
	DC.W	$0000
	NBCD	-(A1)
	DC.L	SetRightSurrMode
	DC.W	$0000
	DC.W	$f881
	DC.L	QuitActualProject
	ORI.B	#$03,D0
	DC.L	CutActSeq
	DC.W	$0000
	DC.W	$0803
	DC.L	CopyActSeq
	DC.W	$0000
	MOVE.B	D3,D0
	DC.L	PasteActSeq
	ORI.B	#$23,D0
	DC.L	CutPosition
	DC.W	$0000
	DC.W	$0823
	DC.L	CopyPosition
	DC.W	$0000
	MOVE.B	-(A3),D0
	DC.L	PastePosition
	ORI.B	#$43,D0
	DC.L	CutActualPattern
	DC.W	$0000
	DC.W	$0843
	DC.L	CopyPattern
	DC.W	$0000
	DC.W	$1043
	DC.L	PastePattern
	DC.W	$0000
	MOVEA.L	D3,A0
	DC.L	PartDupPattern
	DC.W	$0000
	MOVEA.L	D3,A4
	DC.L	ShrinkPattern
	DC.W	$0000
	MOVEA.W	D3,A0
	DC.L	ExpandPattern
	DC.W	$0000
	MOVEA.W	D3,A4
	DC.L	DuplicatePattern
	ORI.B	#$63,D0
	DC.L	CutActualTrack
	DC.W	$0000
	DC.W	$0863
	DC.L	CopyActualTrack
	DC.W	$0000
	DC.W	$1063
	DC.L	PasteActualTrack
	DC.W	$0000
	MOVEA.L	-(A3),A0
	DC.L	MirrorTrack
	DC.W	$0000
	MOVEA.L	-(A3),A4
	DC.L	SwapActualTrack
	DC.W	$0000
	MOVEA.W	-(A3),A0
	DC.L	RotDownTrack
	DC.W	$0000
	MOVEA.W	-(A3),A4
	DC.L	RotUpTrack
	ORI.B	#$83,D0
	DC.L	XXCutActualBlock
	DC.W	$0000
	DC.W	$0883
	DC.L	XXCopyActualBlock
	DC.W	$0000
	MOVE.B	D3,(A0)
	DC.L	XXPasteActualBlock
	DC.W	$0000
	MOVE.B	D3,(A4)
	DC.L	XXAddActualBlock
	DC.W	$0000
	MOVE.L	D3,(A4)
	DC.L	ExpandActualBlock
	DC.W	$0000
	MOVE.W	D3,(A0)
	DC.L	ClrActualBlock
	DC.W	$0000
	MOVE.W	D3,(A4)
	DC.L	XXSwapActualBlock+2
	ORI.B	#$a3,D0
	DC.L	CutActualNote
	DC.W	$0000
	DC.W	$08a3
	DC.L	MarkNote
	DC.W	$0000
	MOVE.B	-(A3),(A0)
	DC.L	PasteActualNote
	DC.W	$0000
	MOVE.L	-(A3),(A0)
	DC.L	InsertTrackLine
	DC.W	$0000
	MOVE.L	-(A3),(A4)
	DC.L	DeleteTrackLine
	ORI.B	#$e3,D0
	DC.L	RecordMacro
	DC.W	$0000
	DC.W	$08e3
	DC.L	ReplayMacro
	DC.W	$0000
	MOVE.B	-(A3),(A0)+
	DC.L	LoadMacro
	DC.W	$0000
	MOVE.B	-(A3),(A4)+
	DC.L	LoadAndRunMacro
	DC.W	$0000
	MOVE.L	-(A3),(A0)+
	DC.L	SaveMacro
	DC.W	$0000
	DC.W	$f923
	DC.L	UndoPattern
	ORI.B	#$04,D0
	DC.L	SequenzDwn
	DC.W	$0000
	DC.W	$0804
	DC.L	SequenzUp
	DC.W	$0000
	MOVE.B	D4,D4
	DC.L	MoveFirstSeq
	DC.W	$0000
	MOVE.L	D4,D0
	DC.L	MoveLastSeq
	ORI.B	#$24,D0
	DC.L	KeyPosNumDown
	DC.W	$0000
	DC.W	$0824
	DC.L	KeyPosNumUp
	DC.W	$0000
	MOVE.B	-(A4),D4
	DC.L	MoveFirstPosition
	DC.W	$0000
	MOVE.L	-(A4),D0
	DC.L	MoveLastPosition
	ORI.B	#$44,D0
	DC.L	KeyPatNumDown
	DC.W	$0000
	DC.W	$0844
	DC.L	KeyPatNumUp
	DC.W	$0000
	DC.W	$1844
	DC.L	MoveFirstPattern
	DC.W	$0000
	MOVEA.L	D4,A0
	DC.L	MoveLastPattern
	ORI.B	#$64,D0
	DC.L	CrsrTL
	DC.W	$0000
	DC.W	$0864
	DC.L	CrsrBR
	DC.W	$0000
	DC.W	$1864
	DC.L	CrsrT
	DC.W	$0000
	MOVEA.L	-(A4),A0
	DC.L	CrsrB
	ORI.B	#$25,D0
	DC.L	LoadInstrSetup
	DC.W	$0000
	DC.W	$0825
	DC.L	SaveInstrSetup
	DC.W	$0000
	DC.W	$f845
	DC.L	KillActualInstr
	ORI.B	#$85,D0
	DC.L	BuildLineSample
	DC.W	$0000
	DC.W	$0885
	DC.L	BuildRowSample
	DC.W	$0000
	MOVE.B	D5,(A0)
	DC.L	CloneToLineSample
	DC.W	$0000
	MOVE.B	D5,(A4)
	DC.L	BuildNewTransWave
	DC.W	$0000
	MOVE.L	D5,(A4)
	DC.L	AutoReCalcLineSamples
	DC.W	$0000
	DC.W	$08c5
	DC.L	ReloadInstrSetup
	ORI.B	#$c5,D0
	DC.L	SetSamplenamePath
	DC.W	$0000
	MOVE.B	D5,(A0)+
	DC.L	ExportSample
	DC.W	$0000
	MOVE.B	D5,(A4)+
	DC.L	SelectAdjustVol
	DC.W	$0000
	MOVE.L	D5,(A0)+
	DC.L	PrepareCDDA
	ORI.B	#$02,D0
	DC.L	LoadActualProject
	DC.W	$0000
	DC.W	$0802
	DC.L	SaveActualProjectAs
	DC.W	$0000
	MOVE.B	D2,D0
	DC.L	SaveActualProject
	DC.W	$0000
	DC.W	$0822
	DC.L	SaveActualModule
	DC.W	$0000
	MOVE.B	-(A2),D0
	DC.L	SelectModuleDiz
	DC.W	$0000
	MOVE.B	-(A2),D4
	DC.L	ExtractActualModule
	DC.W	$0000
	MOVE.L	-(A2),D0
	DC.L	ExtractActual8Bit
	DC.W	$0000
	MOVE.L	-(A2),D4
	DC.L	ExtractSetQuality
	DC.W	$0000
	MOVE.W	-(A2),D4
	DC.L	SelectModuleDiz2
	ORI.B	#$62,D0
	DC.L	TooglePackSong
	DC.W	$0000
	DC.W	$0862
	DC.L	ToogleModDeltaWrite
	DC.W	$0000
	DC.W	$f805
	DC.L	LoadNewSample
	ORI.B	#$22,D0
	DC.L	LoadActualModule
	ORI.B	#$42,D0
	DC.L	LoadPrefs
	DC.W	$0000
	DC.W	$0842
	DC.L	SavePrefsAs
	DC.W	$0000
	DC.W	$1042
	DC.L	SavePrefs
	DC.W	$0000
	MOVEA.L	D2,A0
	DC.L	TAudioPrefs
	DC.W	$0000
	MOVEA.L	D2,A4
	DC.L	TVideoPrefs
	DC.W	$0000
	MOVEA.W	D2,A0
	DC.L	TStructPrefs
	ORI.B	#$06,D0
	DC.L	SelectBufferNumb
	DC.W	$0000
	DC.W	$0806
	DC.L	SetMaxDspBuffer
	DC.W	$0000
	MOVE.B	D6,D0
	DC.L	ReqFileBLen
	DC.W	$0000
	MOVE.L	D6,D0
	DC.L	SetNoiseLimit
	ORI.B	#$26,D0
	DC.L	ToogleNoPosChange
	DC.W	$0000
	DC.W	$0826
	DC.L	ToogleNoScroll
	DC.W	$0000
	MOVE.B	-(A6),D0
	DC.L	ToogleNoSpectrum
	DC.W	$0000
	MOVE.B	-(A6),D4
	DC.L	ToogleNoScopes
	DC.W	$0000
	MOVE.L	-(A6),D0
	DC.L	ToogleNoInstr
	DC.W	$0000
	MOVE.W	-(A6),D0
	DC.L	ToogleForceUpdate
	DC.W	$0000
	NEGX.B	-(A6)
	DC.L	ToogleAutoActWindow
	ORI.B	#$46,D0
	DC.L	InitMidi
	DC.W	$0000
	DC.W	$0846
	DC.L	SetMidiChannel
	ORI.B	#$66,D0
	DC.L	SetEditJump
	DC.W	$0000
	DC.W	$0866
	DC.L	SetEditPunch
	DC.W	$0000
	DC.W	$1066
	DC.L	ToogleSoloMode
	DC.W	$0000
	MOVEA.L	-(A6),A0
	DC.L	ToogleSetNoteP
	DC.W	$0000
	MOVEA.L	-(A6),A4
	DC.L	ToogleSetNoteI
	DC.W	$0000
	MOVEA.W	-(A6),A0
	DC.L	ToogleSetNoteV
	ORI.B	#$86,D0
	DC.L	ToogleKeepPatternMumb
	DC.W	$0000
	DC.W	$0886
	DC.L	ToogleSongConv
	ORI.B	#$a6,D0
	DC.L	SetKnackDeepth
	DC.W	$0000
	DC.W	$08a6
	DC.L	NGSetSampleBoost
	DC.W	$0000
	MOVE.B	-(A6),(A0)
	DC.L	SetSamplePreOverS
	DC.W	$0000
	MOVE.B	-(A6),(A4)
	DC.L	SetNoiseFilter
	DC.W	$0000
	MOVE.L	-(A6),(A4)
	DC.L	ToogleForceAKnack
	DC.W	$0000
	MOVE.W	-(A6),(A0)
	DC.L	ToogleLinVol+4
	ORI.B	#$c6,D0
	DC.L	SetStSampleDiff
	DC.W	$0000
	DC.W	$08c6
	DC.L	SetStPitchDiff
	DC.W	$0000
	MOVE.B	D6,(A0)+
	DC.L	SetFadeToSteps
	ORI.B	#$e6,D0
	DC.L	ToogleGUILook
	DC.W	$0000
	MOVE.B	-(A6),(A0)+
	DC.L	ToogleFASTGFX
	DC.W	$0000
	MOVE.B	-(A6),(A4)+
	DC.L	ChangeScreenMode
	DC.W	$0000
	DC.W	$f827
	DC.L	EnterColorOrgan
	DC.W	$0000
	DC.W	$f807
	DC.L	SetOldCList
	DC.W	$ffff
	DC.W	$ffff
MRAWKEY_JL:
	ORI.B	#$46,D0
	DC.L	KbdDownInstr
	ORI.B	#$5f,D0
	DC.L	KbdUpInstr
	ORI.B	#$55,D0
	DC.L	EnterColorOrgan
	ORI.B	#$59,D0
	DC.L	KbdLoadNewSample
	ORI.B	#$54,D0
	DC.L	PlayActualSong
	ORI.B	#$53,D0
	DC.L	PlayActualSeq
	ORI.B	#$52,D0
	DC.L	PlayFromActualPos
	ORI.B	#$51,D0
	DC.L	PlayActualPattern
	ORI.B	#$45,D0
	DC.L	StopSong2
	ORI.B	#$58,D0
	DC.L	KeySwapRecordState
	ORI.B	#$4e,D0
	DC.L	KbdCrsrRight
	ORI.B	#$4f,D0
	DC.L	KbdCrsrLeft
	ORI.B	#$4c,D0
	DC.L	KbdCrsrUp
	ORI.B	#$4d,D0
	DC.L	KbdCrsrDown
	ORI.B	#$50,D0
	DC.L	MuteActualTrack
	ORI.B	#$40,D0
	DC.L	KbdSpace
	ORI.B	#$5c,D0
	DC.L	KbdPatNumDown
	ORI.B	#$5d,D0
	DC.L	KbdPatNumUp
	ORI.B	#$3c,D0
	DC.L	KbdDeleteTrackLine
	ORI.B	#$0f,D0
	DC.L	KbdInsertTrackLine
	ORI.B	#$c2,D0
	DC.L	SetTab
	ORI.B	#$44,D0
	DC.L	KbdReturn
	ORI.B	#$2f,D0
	DC.L	KbdNoteInstrUp
	ORI.B	#$3f,D0
	DC.L	KbdNoteInstrDown
	ORI.B	#$2e,D0
	DC.L	KbdPitchUp
	ORI.B	#$3e,D0
	DC.L	KbdPitchDown
	ORI.B	#$4a,D0
	DC.L	KbdVolumeDown
	ORI.B	#$5e,D0
	DC.L	KbdVolumeUp
	ORI.B	#$5a,D0
	DC.L	KbdPosNumDown
	ORI.B	#$5b,D0
	DC.L	KbdPosNumUp
	DC.W	$ffff
	DC.W	$ffff
NIL_JL:
	DC.W	$ffff
	DC.W	$ffff
NGGadActionList:
	DC.W	$03f3
	DC.W	$fffe
	DC.L	LAB_07E2+1
	DC.W	$03f3
	DC.W	$ffff
	DC.L	LAB_07E3+1
	BSET	D1,-2(A4,D0.W)
	DC.L	LAB_07E9+1
	BSET	D1,-1(A4,D0.W)
	DC.L	LAB_07EA+3
	DC.W	$03f4
	DC.W	$01fe
	DC.L	LAB_07E6+1
	DC.W	$03f4
	DC.W	$01ff
	DC.L	LAB_07E7+1
	DC.W	$03f4
	DC.W	$02fe
	DC.L	LAB_07EB+3
	DC.W	$03f4
	DC.W	$02ff
	DC.L	LAB_07EC+3
	DC.W	$03f4
	DC.W	$03fb
	DC.L	LAB_0113+1
	DC.W	$03f4
	DC.W	$03fc
	DC.L	LAB_0149+1
	DC.W	$03f4
	DC.W	$03fd
	DC.L	LAB_014F+3
	DC.W	$03f4
	DC.W	$03fe
	DC.L	LAB_013A+1
	DC.W	$03f4
	DC.W	$03ff
	DC.L	LAB_013F+5
	DC.W	$03f4
	DC.W	$0400
	DC.L	LAB_011E+3
	DC.W	$03f4
	DC.W	$050a
	DC.L	LAB_0116+1
	DC.W	$03f4
	DC.W	$04fb
	DC.L	LAB_015E+1
	DC.W	$03f4
	DC.W	$04fc
	DC.L	LAB_015B+1
	DC.W	$03f4
	DC.W	$04fd
	DC.L	LAB_0141+1
	DC.W	$03f4
	DC.W	$04fe
	DC.L	LAB_0124+1
	DC.W	$03f4
	DC.W	$04ff
	DC.L	LAB_0144+5
	DC.W	$03f4
	BTST	D2,D0
	DC.L	LAB_012C+1
	DC.W	$03f4
	BTST	D2,D1
	DC.L	LAB_0106+1
	DC.W	$03f4
	BTST	D2,D2
	DC.L	LAB_010A+3
	DC.W	$03f4
	DC.W	$05fb
	DC.L	LAB_0122+3
	DC.W	$03f4
	DC.W	$05fc
	DC.L	LAB_0135+1
	DC.W	$03f4
	DC.W	$05fd
	DC.L	LAB_0137+5
	DC.W	$03f4
	DC.W	$05fe
	DC.L	LAB_012A+3
	DC.W	$03f4
	DC.W	$05ff
	DC.L	LAB_0120+1
	DC.W	$03f4
	DC.W	$0600
	DC.L	LAB_012E+3
	DC.W	$03f4
	DC.W	$06fa
	DC.L	LAB_0170+3
	DC.W	$03f4
	DC.W	$06fb
	DC.L	LAB_0156+1
	DC.W	$03f4
	DC.W	$06fc
	DC.L	LAB_0152+1
	DC.W	$03f4
	DC.W	$06fd
	DC.L	LAB_0146+3
	DC.W	$03f4
	DC.W	$06fe
	DC.L	LAB_0126+7
	DC.W	$03f4
	DC.W	$06ff
	DC.L	LAB_0118+1
	DC.W	$03f4
	BTST	D3,D0
	DC.L	LAB_011A+3
	DC.W	$03f4
	BTST	D3,D1
	DC.L	LAB_0130+1
	DC.W	$03f3
	DC.W	$fffc
	DC.L	LAB_0160+3
	DC.W	$03f3
	DC.W	$fffd
	DC.L	LAB_0790+1
	DC.W	$03f4
	DC.W	$07fd
	DC.L	LAB_0585+3
	BSET	D1,-5(A4,D0.W)
	DC.L	LAB_00FF+1
	BSET	D1,-4(A4,D0.W)
	DC.L	LAB_00FD+1
	BSET	D1,-3(A4,D0.W)
	DC.L	LAB_0169+7
	DC.W	$03f4
	DC.W	$01fb
	DC.L	LAB_0102+1
	DC.W	$03f4
	DC.W	$01fc
	DC.L	LAB_0104+1
	DC.W	$03f4
	DC.W	$01fd
	DC.L	LAB_0100+3
	DC.W	$03f4
	DC.W	$02fb
	DC.L	LAB_016D+1
	DC.W	$03f4
	DC.W	$02fc
	DC.L	LAB_0175+1
	DC.W	$03f4
	DC.W	$02fd
	DC.L	LAB_0163+5
	DC.W	$03f4
	DC.W	$07fa
	DC.L	LAB_0580+3
	DC.W	$03f4
	DC.W	$07fc
	DC.L	LAB_0570+5
	DC.W	$03f4
	DC.W	$07ff
	DC.L	LAB_0582+1
	BSET	D1,2(A4,D0.L)
	DC.L	LAB_0595+1
	BSET	D1,0(A4,D0.L)
	DC.L	LAB_0598+1
	BSET	D1,1(A4,D0.L)
	DC.L	LAB_0597+1
	DC.W	$11f4
	BSET	D0,LAB_0368+1
	DC.W	$11f4
	DC.W	$01fa
	DC.L	LAB_0366+3
	DC.W	$11f4
	DC.W	$01fb
	DC.L	LAB_0373+3
	DC.W	$11f4
	DC.W	$01fc
	DC.L	LAB_0376+1
	DC.W	$11f4
	DC.W	$01fd
	DC.L	LAB_0374+1
	DC.W	$11f4
	DC.W	$01fe
	DC.L	LAB_036B+3
	DC.W	$11f4
	DC.W	$01ff
	DC.L	LAB_0370+3
	DC.W	$11f4
	DC.W	$02f9
	DC.L	LAB_0385+1
	DC.W	$11f4
	DC.W	$02fa
	DC.L	LAB_0383+3
	DC.W	$11f4
	DC.W	$02fb
	DC.L	LAB_0396+1
	DC.W	$11f4
	DC.W	$02fc
	DC.L	LAB_0393+1
	DC.W	$11f4
	DC.W	$02fd
	DC.L	LAB_038C+1
	DC.W	$11f4
	DC.W	$02fe
	DC.L	LAB_0388+1
	DC.W	$11f4
	DC.W	$02ff
	DC.L	LAB_038E+1
	DC.W	$11f4
	BTST	D1,D0
	DC.L	LAB_0391+1
	DC.W	$11f4
	BSET	D1,LAB_0D2D+3
	DC.W	$11f4
	DC.W	$03fa
	DC.L	LAB_0D2F+1
	DC.W	$11f4
	DC.W	$03fb
	DC.L	LAB_0D32+5
	DC.W	$11f4
	DC.W	$03fc
	DC.L	LAB_0D34+5
	DC.W	$11f4
	DC.W	$03fd
	DC.L	LAB_01DA+1
	DC.W	$11f4
	DC.W	$03fe
	DC.L	LAB_096F+1
	DC.W	$11f4
	DC.W	$03ff
	DC.L	LAB_01DE+3
	DC.W	$11f4
	DC.W	$0400
	DC.L	LAB_01DF+1
	DC.W	$11f4
	DC.W	$0401
	DC.L	LAB_01CF+1
	DC.W	$11f4
	DC.W	$0402
	DC.L	LAB_01D4+1
	DC.W	$11f4
	DC.W	$04f9
	DC.L	LAB_0D5E+1
	DC.W	$11f4
	DC.W	$04fa
	DC.L	LAB_0D5C+3
	DC.W	$11f4
	DC.W	$04fb
	DC.L	LAB_0D64+3
	DC.W	$11f4
	DC.W	$04fc
	DC.L	LAB_0D62+1
	DC.W	$11f4
	DC.W	$04fd
	DC.L	LAB_0D53+1
	DC.W	$11f4
	DC.W	$04fe
	DC.L	LAB_0D4F+1
	DC.W	$11f4
	DC.W	$04ff
	DC.L	LAB_0D59+5
	DC.W	$11f4
	BTST	D2,D0
	DC.L	LAB_0D56+1
	DC.W	$11f4
	BTST	D2,D1
	DC.L	LAB_097B+7
	DC.W	$11f4
	BTST	D2,D2
	DC.L	LAB_097A+3
	MOVE.B	D2,-(A1)
	DC.W	$12fa
	DC.L	LAB_08BA+1
	MOVE.B	D2,-(A1)
	DC.W	$12fb
	DC.L	LAB_0687+1
	DC.W	$11f3
	DC.W	$fffa
	DC.L	LAB_0D43+1
	DC.W	$11f3
	DC.W	$fffb
	DC.L	LAB_0B3B+3
	DC.W	$11f3
	DC.W	$fffc
	DC.L	LAB_0A03+1
	DC.W	$11f3
	DC.W	$fffd
	DC.L	LAB_0A01+3
	DC.W	$11f3
	DC.W	$fffe
	DC.L	LAB_0A0D+1
	DC.W	$11f4
	DC.W	$00f9
	DC.L	LAB_1019+1
	DC.W	$11f4
	DC.W	$00fa
	DC.L	LAB_1020+3
	DC.W	$11f4
	DC.W	$00fb
	DC.L	LAB_101C+3
	DC.W	$11f3
	DC.W	$fffe
	DC.L	LAB_0A0D+1
	MOVE.B	D4,D3
	DC.W	$fffa
	DC.L	LAB_08C5+3
	MOVE.B	D4,D3
	DC.W	$fffb
	DC.L	LAB_0D49+3
	MOVE.B	D4,D3
	DC.W	$fffc
	DC.L	LAB_0D4D+1
	MOVE.B	D4,D3
	DC.W	$fffd
	DC.L	LAB_08CD+3
	MOVE.B	D4,D3
	DC.W	$fffe
	DC.L	LAB_0C0F+1
	MOVE.B	D4,D3
	DC.W	$ffff
	DC.L	LAB_08CC+1
	MOVE.B	D5,D3
	DC.W	$0000
	DC.L	LAB_08CC+1
	MOVE.B	D5,D3
	DC.W	$0011
	DC.L	LAB_0891+5
	MOVE.B	D5,D3
	DC.W	$0002
	DC.L	LAB_0787+3
	MOVE.B	D5,D3
	DC.W	$000a
	DC.L	LAB_0788+5
	MOVE.B	D5,D3
	DC.W	$000b
	DC.L	LAB_0789+3
	MOVE.B	D5,D3
	DC.W	$000c
	DC.L	LAB_077B+1
	MOVE.B	D5,D3
	DC.W	$000d
	DC.L	LAB_077E+3
	MOVE.B	D5,D3
	DC.W	$000e
	DC.L	LAB_077C+1
	MOVE.B	D5,D3
	DC.W	$000f
	DC.L	LAB_0780+1
	MOVE.B	D5,D3
	DC.W	$0010
	DC.L	LAB_075E+3
	MOVE.B	D5,D3
	DC.W	$00fa
	DC.L	LAB_0906+1
	MOVE.B	D5,D3
	DC.W	$00fb
	DC.L	LAB_08F7+1
	MOVE.B	D5,D3
	DC.W	$00fc
	DC.L	LAB_08FC+1
	MOVE.B	D5,D3
	DC.W	$00ff
	DC.L	LAB_088D+5
	MOVE.B	D5,D3
	BTST	D0,D0
	DC.L	LAB_088E+3
	MOVE.B	D5,D3
	BTST	D0,D2
	DC.L	LAB_08CF+3
	MOVE.B	D5,D3
	DC.W	$010c
	DC.L	LAB_088F+1
	MOVE.B	D5,D3
	DC.W	$010d
	DC.L	LAB_0890+1
	MOVE.B	D5,D3
	DC.W	$01fb
	DC.L	LAB_07EF+3
	MOVE.B	D5,D3
	DC.W	$01fc
	DC.L	LAB_07F1+1
	MOVE.B	D5,D3
	DC.W	$01fe
	DC.L	LAB_07F4+3
	MOVE.B	D5,D3
	DC.W	$01ff
	DC.L	LAB_07FC+1
	MOVE.B	D5,D3
	DC.W	$0202
	DC.L	LAB_0882+1
	MOVE.B	D5,D3
	DC.W	$020a
	DC.L	LAB_0883+3
	MOVE.B	D5,D3
	DC.W	$020c
	DC.L	LAB_0880+3
	MOVE.B	D5,D3
	DC.W	$020d
	DC.L	LAB_0881+3
	MOVE.B	D5,D3
	DC.W	$0210
	DC.L	LAB_0770+3
	MOVE.B	D5,D3
	DC.W	$0211
	DC.L	LAB_0775+3
	MOVE.B	D5,D3
	DC.W	$0212
	DC.L	LAB_0746+3
	MOVE.B	(A5)+,-(A3)
	MOVE.B	(A6)+,-(A4)
	DC.L	LAB_0104+1
	MOVE.B	(A5)+,-(A3)
	DC.W	$190d
	DC.L	LAB_0102+1
	MOVE.B	(A5)+,-(A3)
	MOVE.L	(A6)+,D0
	DC.L	LAB_00FD+1
	MOVE.B	(A5)+,-(A3)
	MOVE.L	A5,D0
	DC.L	LAB_00FF+1
	MOVE.B	(A5)+,-(A3)
	MOVE.L	(A6)+,D3
	DC.L	LAB_0175+1
	MOVE.B	(A5)+,-(A3)
	MOVE.L	A5,D3
	DC.L	LAB_016D+1
	MOVE.B	(A4)+,-(A3)
	MOVE.L	A3,D4
	DC.L	LAB_0231+3
	MOVE.B	(A4)+,-(A3)
	DC.W	$130b
	DC.L	LAB_0220+1
	MOVE.B	(A4)+,-(A3)
	MOVE.L	A3,D3
	DC.L	LAB_0240+1
	MOVE.B	(A4)+,-(A3)
	DC.W	$120b
	DC.L	LAB_024E+1
	MOVE.B	(A4)+,-(A3)
	DC.W	$150b
	DC.L	LAB_024F+1
	DC.W	$0ef3
	DC.W	$fffb
	DC.L	LAB_0D32+5
	DC.W	$0ef3
	DC.W	$fffc
	DC.L	LAB_0D34+5
	DC.W	$0ef4
	DC.W	$00fd
	DC.L	LAB_02DC+1
	DC.W	$0ef4
	DC.W	$00fe
	DC.L	LAB_02DA+3
	DC.W	$0ef3
	DC.W	$fffd
	DC.L	LAB_0208+1
	DC.W	$0ef3
	DC.W	$fffe
	DC.L	LAB_020C+1
	DC.W	$0ef3
	DC.W	$ffff
	DC.L	LAB_0209+3
	DC.W	$0ef4
	DC.W	$0000
	DC.L	LAB_0211+5
	DC.W	$0ef4
	DC.W	$0001
	DC.L	LAB_0220+1
	DC.W	$0ef4
	DC.W	$0002
	DC.L	LAB_0231+3
	DC.W	$0ef4
	DC.W	$000a
	DC.L	LAB_0240+1
	DC.W	$0ef4
	DC.W	$000b
	DC.L	LAB_021E+1
	DC.W	$0ef4
	DC.W	$000c
	DC.L	LAB_024E+1
	DC.W	$0ef4
	DC.W	$000d
	DC.L	LAB_0244+1
	DC.W	$0ef4
	DC.W	$000e
	DC.L	LAB_0249+3
	DC.W	$0ef4
	DC.W	$000f
	DC.L	LAB_024C+5
	DC.W	$0ef4
	DC.W	$0010
	DC.L	LAB_09E0+3
	DC.W	$0ef4
	DC.W	$0011
	DC.L	LAB_09E7+7
	DC.W	$0ef4
	DC.W	$00f9
	DC.L	LAB_0799+1
	DC.W	$0ef4
	DC.W	$00fa
	DC.L	LAB_02D5+1
	DC.W	$0ef4
	BTST	D0,D1
	DC.L	LAB_025A+3
	DC.W	$0ef4
	BTST	D0,D0
	DC.L	LAB_0260+1
	DC.W	$0ef4
	DC.W	$010a
	DC.L	LAB_0224+1
	DC.W	$0ef4
	DC.W	$010b
	DC.L	LAB_0222+1
	DC.W	$0ef4
	DC.W	$010d
	DC.L	LAB_022D+1
	DC.W	$0ef4
	DC.W	$010e
	DC.L	LAB_022B+1
	DC.W	$0ef4
	BTST	D0,(A0)
	DC.L	LAB_0229+3
	DC.W	$0ef4
	BTST	D0,(A1)
	DC.L	LAB_0226+5
	DC.W	$0ef4
	BTST	D0,(A2)
	DC.L	LAB_082F+1
	DC.W	$0ef4
	BTST	D0,(A3)
	DC.L	LAB_0831+1
	DC.W	$1208
	DC.W	$01fa
	DC.L	LAB_0E9E+3
	DC.W	$1208
	DC.W	$01fb
	DC.L	LAB_0EB1+3
	DC.W	$1208
	DC.W	$01fc
	DC.L	LAB_0EA8+1
	DC.W	$1208
	DC.W	$01fd
	DC.L	LAB_0E95+5
	DC.W	$1208
	DC.W	$01fe
	DC.L	LAB_0E20+5
	DC.W	$1208
	DC.W	$02fa
	DC.L	LAB_05A3+1
	DC.W	$1208
	DC.W	$02fe
	DC.L	LAB_05A7+1
	DC.W	$1208
	DC.W	$032e
	DC.L	LAB_059D+3
	DC.W	$1208
	DC.W	$032c
	DC.L	LAB_056E+1
	DC.W	$1208
	DC.W	$032b
	DC.L	LAB_056A+3
	DC.W	$1208
	DC.W	$032d
	DC.L	LAB_059E+1
	DC.W	$1208
	DC.W	$030a
	DC.L	LAB_06DD+5
	DC.W	$1208
	DC.W	$030b
	DC.L	LAB_06D5+1
	DC.W	$1208
	DC.W	$030e
	DC.L	LAB_06D0+1
	DC.W	$1208
	DC.W	$030f
	DC.L	LAB_06D4+3
	DC.W	$1208
	DC.W	$07fa
	DC.L	LAB_08BF+1
	DC.W	$1208
	DC.W	$07fe
	DC.L	LAB_08C0+1
	DC.W	$1208
	DC.W	$00fa
	DC.L	LAB_06F1+5
	DC.W	$1208
	DC.W	$00fb
	DC.L	LAB_06E0+1
	DC.W	$0ef4
	BTST	D0,(A7)
	DC.L	LAB_027A+1
	DC.W	$1208
	DC.W	$00fc
	DC.L	LAB_06E3+1
	DC.W	$1208
	DC.W	$00fd
	DC.L	LAB_06E5+3
	DC.W	$1208
	DC.W	$00fe
	DC.L	LAB_06EA+1
	DC.W	$1208
	DC.W	$00ff
	DC.L	LAB_06EC+1
	DC.W	$1208
	BSET	D1,LAB_0E1D+3
	DC.W	$1208
	DC.W	$03fa
	DC.L	LAB_0E81+3
	DC.W	$1208
	DC.W	$03fb
	DC.L	LAB_0E7D+1
	DC.W	$1208
	DC.W	$03fc
	DC.L	LAB_0E83+1
	DC.W	$1208
	DC.W	$03fd
	DC.L	LAB_0E85+3
	DC.W	$1208
	DC.W	$03fe
	DC.L	LAB_0E86+1
	DC.W	$1208
	DC.W	$0401
	DC.L	LAB_0E76+9
	DC.W	$1208
	DC.W	$0402
	DC.L	LAB_0E79+1
	DC.W	$1208
	DC.W	$040b
	DC.L	LAB_0E7B+1
	DC.W	$1208
	DC.W	$040a
	DC.L	LAB_0E77+5
	DC.W	$1208
	DC.W	$040c
	DC.L	LAB_0704+1
	DC.W	$1208
	DC.W	$07fb
	DC.L	LAB_08CA+5
	DC.W	$1208
	DC.W	$07fc
	DC.L	LAB_08CB+5
	DC.W	$1208
	DC.W	$07ff
	DC.L	LAB_08C7+3
	DC.W	$1208
	DC.W	$0800
	DC.L	LAB_08C8+3
	DC.W	$1208
	DC.W	$04fc
	DC.L	LAB_03E5+1
	DC.W	$1208
	DC.W	$04fd
	DC.L	LAB_03E8+5
	DC.W	$1208
	BTST	D2,D0
	DC.L	LAB_03EC+3
	DC.W	$1208
	BTST	D2,D1
	DC.L	LAB_03EE+1
	DC.W	$1208
	DC.W	$05fc
	DC.L	LAB_03F0+1
	DC.W	$1208
	DC.W	$05fd
	DC.L	LAB_03F4+1
	DC.W	$1208
	DC.W	$0600
	DC.L	LAB_03F8+3
	DC.W	$1208
	DC.W	$0601
	DC.L	LAB_03F9+5
	DC.W	$1208
	DC.W	$06fc
	DC.L	LAB_03FA+1
	DC.W	$1208
	DC.W	$06fd
	DC.L	LAB_03FE+5
	DC.W	$1208
	BTST	D3,D0
	DC.L	LAB_03FF+1
	DC.W	$1208
	BTST	D3,D1
	DC.L	LAB_0402+5
	DC.W	$1208
	DC.W	$08fa
	DC.L	LAB_07A7+1
	DC.W	$1208
	DC.W	$08fb
	DC.L	LAB_07C5+1
	DC.W	$1208
	DC.W	$08fc
	DC.L	LAB_07C8+1
	DC.W	$1208
	DC.W	$08ff
	DC.L	LAB_07D4+3
	DC.W	$1208
	BTST	D4,D0
	DC.L	LAB_07D7+1
	DC.W	$1208
	BTST	D4,D2
	DC.L	LAB_07D9+5
	DC.W	$1208
	DC.W	$090a
	DC.L	LAB_07DE+1
	DC.W	$0ef4
	BTST	D0,(A4)
	DC.L	LAB_1059+3
	DC.W	$0ef4
	BTST	D0,(A5)
	DC.L	LAB_1066+1
	DC.W	$0ef4
	BTST	D0,(A6)
	DC.L	LAB_1057+1
	DC.W	$11f4
	DC.W	$020a
	DC.L	LAB_037C+1
	MOVE.B	D5,D3
	DC.W	$0001
	DC.L	LAB_0783+1
	DC.W	$1208
	BTST	D2,D2
	DC.L	LAB_0496+5
	DC.W	$1208
	DC.W	$0602
	DC.L	LAB_049A+3
	DC.W	$1208
	BTST	D3,D2
	DC.L	LAB_049D+3
	MOVE.B	D5,D3
	DC.W	$0213
	DC.L	LAB_0655+1
	MOVE.B	D5,D3
	DC.W	$010e
	DC.L	LAB_089C+5
	MOVE.B	D7,-(A3)
	MOVE.B	(A6)+,-(A1)
	DC.L	LAB_0186+3
	MOVE.B	D7,-(A3)
	DC.W	$130d
	DC.L	LAB_0188+3
	MOVE.B	D7,-(A3)
	MOVE.B	(A5),-(A1)
	DC.L	LAB_0191+1
	MOVE.B	D7,-(A3)
	MOVE.B	(A3)+,-(A1)
	DC.L	LAB_018D+1
	MOVE.B	D7,-(A3)
	MOVE.B	(A5),-(A4)
	DC.L	LAB_01E4+3
	MOVE.B	D7,-(A3)
	MOVE.B	(A4)+,-(A4)
	DC.L	LAB_01E6+1
	MOVE.B	D7,-(A3)
	MOVE.B	(A4)+,D7
	DC.L	LAB_0C0F+1
	MOVE.B	D7,-(A3)
	DC.W	$190d
	DC.L	LAB_0D49+3
	MOVE.B	D7,-(A3)
	MOVE.B	(A6)+,-(A4)
	DC.L	LAB_0D4D+1
	MOVE.B	D7,-(A3)
	MOVE.L	(A1)+,-(A1)
	DC.L	LAB_0D46+3
	MOVE.B	D7,-(A3)
	MOVE.L	(A5)+,D1
	DC.L	LAB_0211+5
	MOVE.B	D7,-(A3)
	MOVE.L	A5,D0
	DC.L	LAB_0D2D+3
	MOVE.B	D7,-(A3)
	MOVE.L	(A6)+,D0
	DC.L	LAB_0D2F+1
	MOVE.B	D7,-(A3)
	DC.W	$400d
	DC.L	LAB_0D32+5
	MOVE.B	D7,-(A3)
	NEGX.B	(A6)+
	DC.L	LAB_0D34+5
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
EFXList:
	DC.L	EFX1
	DC.L	EFX2
	DC.L	EFX3
	DC.L	EFX4
	DC.L	EFX5
	DC.L	EFX6
	DC.L	EFX7
	DC.L	EFX8
	DC.L	EFX9
	DC.L	EFX10
	DC.L	EFX11
	DC.L	EFX12
	DC.L	EFX13
	DC.L	EFX14
	DC.L	EFX15
	DC.L	EFX16
	DC.L	EFX17
	DC.L	EFX18
	DC.L	EFX19
	DC.L	EFX20
	DC.L	ENone
	DC.L	ENone
	DC.L	EFX23
	DC.L	EFX24
	DC.L	EFX25
	DC.L	EFX26
ENone:
	DC.L	EDrawNone
	DC.L	EDrawNone
	DC.L	EDrawNone
	MOVE.L	USP,A7
	MOVEA.L	D5,A0
	MOVEQ	#101,D3
	BGT.S	LAB_1326
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
	MOVE.L	D0,-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	45(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	D0,-(A6)
EKeyOn:
	DC.L	DrawNotePitch
	DC.L	EVENTDrawDecByte
	DC.L	DrawDecByte6
	DC.W	$4b65
	DC.W	$7920
	DC.W	$4f6e
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$6974,(A0)
	BLS.S	LAB_1328
	MOVE.L	D0,D0
	DC.W	$496e
	DC.W	$7374
	MOVEQ	#32,D1
	ORI.W	#$6f6c,(A6)
	DC.W	$756d
	DC.W	$6500
EFX1:
	DC.L	EDrawNone
	DC.L	EDrawNone
	DC.L	DrawDecByte6
	ADDQ.W	#3,(A3)
	DC.W	$6c69
	DC.W	$6465
	MOVEA.L	(A5),A0
	MOVEQ	#32,D0
	MOVE.L	-(A0),D0
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
	MOVE.L	D0,-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	83(A5),-(A6)
	MOVEQ	#101,D0
	BCS.S	LAB_132C+2
LAB_1326:
	MOVE.L	D0,D0
EFX2:
	DC.L	EDrawNone
	DC.L	EDrawNone
	DC.L	DrawDecByte6
	ADDQ.W	#3,(A3)
	DC.W	$6c69
	DC.W	$6465
	MOVEA.L	D4,A0
	DC.W	$6f77
	BGT.S	LAB_132A+2
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
	MOVE.L	D0,-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	83(A5),-(A6)
	MOVEQ	#101,D0
LAB_1328:
	BCS.S	LAB_132E+2
	MOVE.L	D0,D0
EFX3:
	DC.L	EDrawNone
	DC.L	EDrawNone
LAB_132A:
	DC.L	DrawDecByte6
	ADDQ.W	#8,(A3)
	DC.W	$6c69
	DC.W	$6465
	MOVEA.L	(A5),A0
	MOVEQ	#32,D0
	MOVE.L	-(A0),D0
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
	MOVE.L	D0,-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	83(A5),-(A6)
	MOVEQ	#101,D0
	BCS.S	LAB_1331+2
	MOVE.L	D0,D0
EFX4:
	DC.L	EDrawNone
LAB_132C:
	DC.L	EDrawNone
	DC.L	DrawDecByte6
	ADDQ.W	#8,(A3)
	DC.W	$6c69
	DC.W	$6465
	MOVEA.L	D4,A0
	DC.W	$6f77
	BGT.S	LAB_132F+2
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
	MOVE.L	D0,-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	83(A5),-(A6)
	MOVEQ	#101,D0
	BCS.S	LAB_1333+2
	MOVE.L	D0,D0
EFX5:
	DC.L	DrawFromPi
LAB_132E:
	DC.L	DrawFromInstr
LAB_132F:
	DC.L	DrawPerHexXY
	ADDQ.W	#1,-(A5)
	MOVEQ	#108,D0
	DC.W	$6179
	SUBQ.W	#1,-(A1)
	DC.W	$4672
	DC.W	$6f6d
	DC.W	$0028
	DC.W	$5074
	BLS.S	LAB_1334
	MOVE.L	D0,-(A4)
	MOVEA.L	A1,A4
	DC.W	$6e73
	MOVEQ	#41,D2
	ORI.W	#$612e,(A3)
	ADDQ.W	#8,29440(A7)
EFX6:
	DC.L	DrawNotePitch
LAB_1331:
	DC.L	DrawDecByte6
	DC.L	DrawPerHexXY
	SUBQ.W	#1,-(A1)
	DC.W	$4672
	DC.W	$6f6d
	MOVEA.L	(A0),A3
	BVS.S	EFX9
	BLS.S	LAB_1336
	ORI.W	#$6974,(A0)
	BLS.S	LAB_1337
	MOVE.L	D0,D0
	DC.W	$496e
	DC.W	$7374
	MOVEQ	#32,D1
	ORI.W	#$612e,(A3)
	ADDQ.W	#8,29440(A7)
EFX7:
	DC.L	EDrawNone
LAB_1333:
	DC.L	DrawDecByte6
	DC.L	DrawPerHexXY
	SUBQ.W	#1,-(A1)
	DC.W	$4672
	DC.W	$6f6d
	DC.W	$4f66
	DC.W	$6673
	BCS.S	LAB_1339+2
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
	MOVE.L	D0,-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	83(A5),-(A6)
	BSR.S	LAB_1337
LAB_1334:
	ADDQ.W	#8,29440(A7)
EFX8:
	DC.L	EDrawNone
	DC.L	DrawDecByte6
	DC.L	DrawFx8V
	DC.W	$4d6f
	DC.W	$6469
	DC.W	$6679
	DC.W	$464f
	BNE.S	LAB_133D
	DC.W	$7374
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
	MOVE.L	D0,-(A6)
	MOVE.L	11565(A5),-(A6)
LAB_1336:
	MOVE.L	70(A5),-(A6)
	BVS.S	LAB_1341
LAB_1337:
	BCS.S	LAB_133D
	DC.W	$6f00
EFX9:
	DC.L	EDrawNone
	DC.L	EDrawNone
	DC.L	DrawDecByte6
	SUBQ.W	#1,-(A5)
	MOVEQ	#32,D2
	DC.W	$5370
	DC.W	$6565
	BCC.S	LAB_133B
	MOVE.L	-(A0),D0
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
	MOVE.L	D0,-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	67(A5),-(A6)
	DC.W	$7963
	BGE.S	LAB_133C
	MOVE.L	D0,D0
EFX10:
LAB_1339:
	DC.L	EDrawNone
	DC.L	EDrawNone
LAB_133B:
	DC.L	DrawFx12V
	DC.W	$4164
	BCC.S	LAB_133E+2
	ADDQ.W	#8,29795(A1)
	BVC.S	LAB_1340
	MOVE.L	-(A0),D0
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
LAB_133C:
	MOVE.L	D0,-(A6)
LAB_133D:
	MOVE.L	11565(A5),-(A6)
	MOVE.L	73(A5),-(A6)
	BGT.S	LAB_1347
	BCS.S	LAB_1346
	DC.W	$7300
EFX11:
LAB_133E:
	DC.L	EDrawNone
	DC.L	EDrawNone
LAB_1340:
	DC.L	DrawFx11V
	DC.W	$4164
LAB_1341:
	BCC.S	LAB_1342+2
	ADDQ.W	#3,27765(A7)
	DC.W	$6d65
	MOVE.L	-(A0),D0
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
	MOVE.L	D0,-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	73(A5),-(A6)
	BGT.S	LAB_134D
	BCS.S	LAB_134C
	DC.W	$7300
EFX12:
LAB_1342:
	DC.L	EDrawNone
	DC.L	DrawDecByte6
	DC.L	DrawPerHexXY
	DC.W	$5472
	DC.W	$656d
	BLE.S	LAB_1350
	BLE.S	LAB_1345+2
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
	MOVE.L	D0,-(A6)
	DC.W	$5370
	DC.W	$6565
	BCC.S	LAB_1348
	ORI.W	#$6174,(A2)
	BCS.S	LAB_1349
	MOVE.L	D0,D0
EFX13:
	DC.L	EDrawNone
LAB_1345:
	DC.L	DrawDecByte6
	DC.L	DrawPerHexXY
	ADDQ.W	#3,25202(A1)
LAB_1346:
	BSR.S	LAB_1354
	BLE.S	LAB_134B+2
LAB_1347:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_1348:
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
LAB_1349:
	MOVE.L	D0,-(A6)
	DC.W	$5370
	DC.W	$6565
	BCC.S	LAB_134E
	ORI.W	#$6174,(A2)
	BCS.S	LAB_134F
	MOVE.L	D0,D0
EFX14:
	DC.L	EDrawNone
LAB_134B:
	DC.L	DrawDecByte6
	DC.L	DrawPerHexXY
	SUBQ.W	#1,-(A1)
	BLT.S	LAB_1357
LAB_134C:
	DC.W	$6c65
	DC.W	$5074
LAB_134D:
	MOVEQ	#86,D1
	BVS.S	LAB_1356
LAB_134E:
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
LAB_134F:
	MOVE.L	D0,-(A6)
	DC.W	$5370
LAB_1350:
	DC.W	$6565
	BCC.S	LAB_1352+2
	ORI.W	#$6174,(A2)
	BCS.S	LAB_1353
	MOVE.L	D0,D0
EFX15:
	DC.L	DrawNotePitch
	DC.L	DrawDecByte6
	DC.L	DrawDecByte6
	ADDQ.W	#8,29795(A1)
	DC.W	$6853
	DC.W	$6c69
	DC.W	$6465
LAB_1352:
	ADDQ.W	#2,80(A7)
	BVS.S	LAB_135B+2
	BLS.S	LAB_1359
LAB_1353:
	MOVE.L	D0,D0
	DC.W	$496e
	DC.W	$7374
	MOVEQ	#32,D1
	ORI.W	#$7065,(A3)
LAB_1354:
	BCS.S	LAB_135B+2
	MOVE.L	D0,D0
EFX16:
	DC.L	EDrawNone
	DC.L	DrawDecPlus1
	DC.L	DrawDecByte6
	ADDQ.W	#1,-(A5)
	MOVEQ	#114,D2
	DC.W	$6967
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
LAB_1356:
	MOVE.L	D0,-(A6)
	DC.W	$4379
	BLS.S	LAB_135F+2
LAB_1357:
	MOVE.L	-(A0),D0
	DC.W	$004e
	DC.W	$756d
	DC.W	$6265
	MOVEQ	#0,D1
EFX17:
	DC.L	DrawDecByte6
	DC.L	DrawDecByte6
	DC.L	DrawDecByte6
	SUBQ.W	#1,20326(A0)
	DC.W	$456d
	MOVEQ	#104,D0
	DC.W	$6173
	DC.W	$6973
	ORI.W	#$7461,(A3)
	MOVEQ	#116,D1
	MOVE.L	D0,-(A2)
	DC.W	$456e
	DC.W	$6425
	MOVE.L	-(A0),D0
	ORI.W	#$7970,(A4)
LAB_1359:
	BCS.S	LAB_135C
	MOVE.L	D0,D0
EFX18:
	DC.L	EDrawNone
LAB_135B:
	DC.L	EDrawNone
	DC.L	DrawEVCV
	DC.W	$4164
	BCC.S	LAB_135D+2
	DC.W	$4861
	BGE.S	EFX23
	ADDQ.W	#2,28261(A7)
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
LAB_135C:
	MOVE.L	D0,-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	79(A5),-(A6)
	BNE.S	LAB_1365+2
	DC.W	$7365
	MOVEQ	#0,D2
EFX19:
LAB_135D:
	DC.L	DrawCVIdXY
LAB_135F:
	DC.L	DrawDecByte6
	DC.L	DrawEVCV
	DC.W	$4368
	BSR.S	LAB_1368
	DC.W	$6e65
	BGE.S	LAB_1361+2
	ADDQ.W	#3,27680(A7)
	ORI.W	#$7970,(A4)
	BCS.S	LAB_1362
	MOVE.L	D0,D0
	ADDQ.W	#8,29472(A7)
	MOVE.L	-(A0),D0
	ORI.W	#$6d70,D1
	BGE.S	LAB_1363
	MOVE.L	D0,D0
EFX20:
	DC.L	DrawSignDecByte6
LAB_1361:
	DC.L	DrawSignDecByte6
	DC.L	DrawSignDecByte6
	DC.W	$496c
	DC.W	$6c65
LAB_1362:
	DC.W	$6761
	BGE.S	LAB_1365+2
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$6564,(A2)
	MOVE.L	-(A0),D0
LAB_1363:
	MOVE.L	D0,D0
	DC.W	$4772
	DC.W	$6565
	BGT.S	LAB_1366
	ORI.W	#$6c75,D2
	BCS.S	LAB_1367
	MOVE.L	D0,D0
EFX23:
	DC.L	EDrawFilterID
LAB_1365:
	DC.L	DrawDecByte6
	DC.L	DrawDecByte6
	ADDQ.W	#1,-(A5)
	DC.W	$736f
	NOT.W	27764(A1)
	BCS.S	LAB_136E+2
	MOVE.L	-(A0),D0
LAB_1366:
	ORI.W	#$7970,(A4)
	BCS.S	LAB_136A
LAB_1367:
	MOVE.L	D0,D0
	ADDQ.W	#1,-(A5)
LAB_1368:
	DC.W	$736f
	MOVE.L	-(A0),D0
	ORI.W	#$7265,D6
	DC.W	$7120
	MOVE.L	D0,D0
EFX24:
	DC.L	DrawDspFxXY
	DC.L	DrawEVEchoLvl
	DC.L	DrawDecByte6
	NEG.W	32(A3,D7.W)
LAB_136A:
	DC.W	$4563
	DC.W	$686f
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.L	#$004c6576,-(A7)
	BCS.S	LAB_1371+2
	MOVE.L	D0,D0
	DC.W	$4c65
	BGT.S	LAB_136C+4
	MOVE.L	-(A0),D0
	DC.W	$0000
EFX25:
	DC.L	DrawDspFxXY
	DC.L	DrawEVDelayLvl
	DC.L	DrawDecByte6
	NEG.W	32(A3,D7.W)
	NEG.W	-(A5)
	DC.W	$6c61
	DC.W	$7920
	MOVE.L	-(A0),D0
LAB_136C:
	ORI.L	#$004c6576,-(A7)
	BCS.S	LAB_1375+2
	MOVE.L	D0,D0
	DC.W	$4c65
	BGT.S	LAB_136F+4
	MOVE.L	-(A0),D0
	DC.W	$0000
EFX26:
	DC.L	DrawDspFxXY
LAB_136E:
	DC.L	DrawDecByte6
	DC.L	DrawDecByte6
	NEG.W	32(A3,D7.W)
	DC.W	$4368
	BLE.S	ESimpleFX
	DC.W	$7573
	MOVE.L	-(A0),D0
LAB_136F:
	ORI.L	#$004c6576,-(A7)
	BCS.S	LAB_1379+2
	MOVE.L	D0,D0
	DC.W	$4c65
	BGT.S	LAB_1372+2
	MOVE.L	-(A0),D0
	DC.W	$0000
EVibrato:
	DC.L	EDrawNone
	DC.L	DrawDecByte6
	DC.L	DrawPerHexXY
LAB_1371:
	ADDQ.W	#3,25202(A1)
	BSR.S	LAB_137C
	BLE.S	LAB_1374+2
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	DC.W	$002d
LAB_1372:
	MOVE.L	11565(A5),-(A6)
	MOVE.L	D0,-(A6)
	DC.W	$5370
	DC.W	$6565
	BCC.S	LAB_1376
	ORI.W	#$6174,(A2)
	BCS.S	LAB_1377
	MOVE.L	D0,D0
ETremolo:
	DC.L	EDrawNone
LAB_1374:
	DC.L	DrawDecByte6
LAB_1375:
	DC.L	DrawPerHexXY
	ADDQ.W	#3,25202(A1)
	BSR.S	AdjustVol
	BLE.S	LAB_1379+2
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_1376:
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
LAB_1377:
	MOVE.L	D0,-(A6)
	DC.W	$5370
	DC.W	$6565
	BCC.S	LAB_137A
	ORI.W	#$6174,(A2)
	BCS.S	LAB_137B
	MOVE.L	D0,D0
ESimpleFX:
	DC.L	EDrawNone
LAB_1379:
	DC.L	EDrawNone
	DC.L	DrawNoteVolume
	SUBQ.W	#1,28016(A1)
	DC.W	$6c65
	MOVEA.L	D6,A0
	ADDQ.B	#4,-(A0)
	MOVE.L	-(A0),D0
LAB_137A:
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
LAB_137B:
	MOVE.L	D0,-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	70(A5),-(A6)
	ADDQ.B	#4,-(A0)
LAB_137C:
	DC.W	$4944
	MOVE.L	D0,D0
PrefsDir_TXT:
	DC.W	$454e
	ADDQ.W	#3,D1
	ADDQ.W	#1,D3
	MOVE.W	D0,D5
TempPrefs_TXT:
	DC.W	$454e
	ADDQ.W	#3,D1
	ADDQ.W	#1,D3
	MOVEA.W	(A3),A5
	DC.W	$796d
	MOVEQ	#104,D0
	BLE.S	LAB_1385
	DC.W	$6965
	MOVEA.L	A6,A0
	DC.W	$4754
	BLT.S	LAB_1388+2
	DC.W	$2e70
	MOVEQ	#101,D1
	DC.W	$6673
	ORI.W	#$4158,(A0)+
Encode_START:
	DC.W	$4100
AdjustVol:
	ORI.B	#$00,D0
AdjustVol_TXT:
	ADDQ.W	#3,27765(A7)
	DC.W	$6d65
	MOVEA.L	D1,A0
	BCC.S	LAB_138D
	DC.W	$7573
	MOVEQ	#32,D2
	DC.W	$2831
	MOVE.L	12848(A6),D7
	MOVE.W	-(A5),D0
	MOVE.L	D0,-(A4)
CVId_TXT:
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D0
LAB_1383:
	ORI.B	#$00,D0
	DC.W	$0000
	SUBQ.W	#1,-(A5)
	MOVEQ	#32,D2
	ORI.B	#$01,D0
	NOT.W	-(A1)
	DC.W	$6465
	ORI.B	#$02,D0
	NOT.W	-(A1)
	ADDQ.W	#2,0(A7)
	DC.W	$0003
	NOT.W	-(A1)
	DC.W	$4c6e
	ORI.B	#$04,D0
	ADDQ.W	#8,-(A1)
	BGT.S	LAB_138B
	ORI.B	#$04,D0
CVId_ill:
	DC.W	$496c
	DC.W	$6c67
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
LAB_1385:
	DC.W	$ffff
	ORI.B	#$00,D0
ValueText6:
LAB_1386:
	DC.W	$002d
LAB_1388:
	MOVE.L	8224(A5),-(A6)
LAB_1389:
	MOVE.L	D0,D0
None_TXT:
	MOVE.L	-(A0),-(A6)
	MOVE.L	-(A0),D0
LAB_138B:
	MOVE.L	-(A0),D0
Note_TXT:
	DC.W	$002d
	MOVE.L	8237(A5),-(A6)
	MOVE.L	8237(A5),-(A6)
NoteNameB_TAB:
LAB_138D:
	ORI.W	#$2043,D3
	MOVE.L	D4,8260(A1)
	MOVE.L	D5,8262(A1)
	MOVEA.L	D6,A0
	MOVE.L	D7,8263(A1)
	MOVE.L	D1,8257(A1)
	MOVE.L	A0,8265(A1)
	MOVEA.L	A2,A0
	MOVEA.L	A3,A0
	MOVEA.L	A4,A0
	MOVEA.L	A5,A0
	MOVEA.L	A6,A0
	MOVEA.L	A7,A0
	MOVEA.L	(A0),A0
	MOVEA.L	(A1),A0
	MOVEA.L	(A2),A0
	MOVEA.L	(A3),A0
	MOVEA.L	(A4),A0
	MOVEA.L	(A5),A0
	MOVEA.L	(A6),A0
	MOVEA.L	(A7),A0
	MOVEA.L	(A0)+,A0
	MOVEA.L	(A1)+,A0
	MOVEA.L	(A2)+,A0
FXDraw_CONVERTAB:
	ORI.B	#$01,D0
	DC.W	$5673
	DC.W	$6c55
	ORI.B	#$02,D0
	DC.W	$5673
	BGE.S	LAB_1391
	ORI.B	#$03,D0
	DC.W	$5073
	DC.W	$6c55
	ORI.B	#$04,D0
	DC.W	$5073
	BGE.S	LAB_1392
	ORI.B	#$05,D0
	DC.W	$4672
	DC.W	$6f6d
	ORI.B	#$06,D0
	DC.W	$4672
	MOVEA.L	(A0),A3
LAB_1390:
	ORI.B	#$07,D0
	NOT.W	(A3)
	DC.W	$4554
	ORI.B	#$08,D0
	NOT.W	D1
	NEG.W	D4
	ORI.B	#$09,D0
	DC.W	$4379
	DC.W	$6c3d
	ORI.B	#$0a,D0
	ADDQ.W	#8,A1
	ADDQ.B	#2,0(A3)
	DC.W	$000b
LAB_1391:
	ADDQ.W	#3,A7
	DC.W	$4c2b
	ORI.B	#$18,D0
	DC.W	$4543
	DC.W	$484f
	ORI.B	#$19,D0
LAB_1392:
	NEG.W	D5
	DC.W	$4c59
	ORI.B	#$1a,D0
	DC.W	$4348
	DC.W	$4f52
	ORI.B	#$0c,D0
	ADDQ.W	#2,(A2)
	DC.W	$454d
	ORI.B	#$0d,D0
	ADDQ.W	#3,A1
	CLR.W	(A2)
	ORI.B	#$0e,D0
	SUBQ.W	#1,-(A1)
	ADDQ.W	#3,A1
	ORI.B	#$0f,D0
	DC.W	$2d3e
	ADDQ.W	#8,A1
	ORI.B	#$10,D0
	ADDQ.W	#2,(A2)
	DC.W	$4947
	ORI.B	#$12,D0
	DC.W	$4144
	PEA	(A4)
	ORI.B	#$11,D0
	DC.W	$454d
	ADDQ.W	#8,A0
	ORI.B	#$13,D0
	DC.W	$4356
	DC.W	$203d
	ORI.B	#$14,D0
	DC.W	$4356
	MOVE.L	0(A3),D0
	DC.W	$0017
	DC.W	$4649
	DC.W	$4c54
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
PEDSiFx_CONVTAB:
	ORI.B	#$f7,D0
	ADDQ.W	#8,(A5)
	MOVE.L	D0,D0
	ORI.B	#$f5,D0
	ADDQ.W	#8,(A5)
	MOVE.W	D0,D1
	ORI.B	#$f3,D0
	ADDQ.W	#8,(A5)
	MOVE.W	D0,D2
	ORI.B	#$f6,D0
	ADDQ.W	#8,D4
	MOVE.L	D0,D0
	ORI.B	#$f4,D0
	ADDQ.W	#8,D4
	MOVE.W	D0,D1
	ORI.B	#$f2,D0
	ADDQ.W	#8,D4
	MOVE.W	D0,D2
	ORI.B	#$fe,D0
	DC.W	$4f46
	NOT.B	D0
	ORI.B	#$fd,D0
	DC.W	$4f4e
	MOVE.L	D0,D0
	ORI.B	#$fb,D0
	DC.W	$4b6f
	DC.W	$6600
	ORI.B	#$f9,D0
	DC.W	$5370
	SUBQ.B	#2,D0
	ORI.B	#$fa,D0
	DC.W	$5370
	NEG.B	D0
	ORI.B	#$f8,D0
	ADDQ.W	#8,A1
	ADDQ.B	#2,D0
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
	DC.W	$ffff
MKperiodconv:
	BCHG	D1,(A0)+
	BTST	D1,762(A0)
	DC.W	$02d0
	ANDI.L	#$0280025c,-(A6)
	DC.W	$023a
	DC.W	$021a
	DC.W	$01fc
	BSET	D0,-(A0)
	BSET	D0,D5
	BCLR	D0,404(A4)
	DC.W	$017d
	BCHG	D0,339(A0)
	BCHG	D0,D0
	BTST	D0,285(A6)
	MOVEP.W	254(A5),D0
	DC.W	$00f0
	DC.W	$00e2
	DC.W	$00d6
	DC.W	$00ca
	DC.W	$00be
	ORI.L	#$00aa00a0,-105(A4,D0.W)
	DC.W	$008f
	ORI.L	#$007f0078,D7
	ORI.W	#$ffff,0(A1,D0.W)
IFF_HEAD:
	DC.W	$464f
	ADDQ.W	#1,A5
LAB_1396:
	DC.W	$0000
	DC.W	$8dbc
	MOVEA.W	(A3),A4
	ADDQ.W	#3,(A0)+
	ADDQ.W	#3,A0
	NEG.W	(A2)
	ORI.B	#$14,D0
LAB_1397:
	DC.W	$0000
	NOT.L	0(A0)
	ORI.B	#$00,D0
	DC.W	$0020
	DC.W	$8d3d
	BTST	D0,D0
	ORI.B	#$00,D1
	TRAP	#1
	DC.W	$4d45
	ORI.B	#$14,D0
	DC.W	$436f
	BGT.S	LAB_139C
	MOVE.L	-(A0),D7
	DC.W	$6279
	MOVE.L	-(A0),D0
	DC.W	$5379
	BLT.S	IllegalSLen_TXT
	DC.W	$686f
	DC.W	$6e69
	DC.W	$6500
	DC.W	$414e
	TRAP	#15
	ORI.B	#$14,D0
	MOVE.L	-(A0),-(A6)
	SUBQ.W	#2,27502(A6)
	DC.W	$6f77
	BGT.S	LAB_139B
	MOVE.L	-(A0),-(A6)
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	DC.W	$4348
	DC.W	$414e
	ORI.B	#$04,D0
	ORI.B	#$06,D0
IFF_HEAD1:
	DC.W	$424f
	NEG.W	(A1)+
LAB_1399:
	DC.W	$0000
	OR.W	D6,(A0)
IFF_HEADE:
	DC.W	$3e3e
LAB_139B:
	MOVE.W	-(A0),D7
	SUBQ.W	#3,-(A1)
	MOVEQ	#110,D1
	BVS.S	LAB_13A3
	BEQ.S	LAB_139F
	MOVEA.L	A6,A0
	BLE.S	LAB_13A4
	MOVEA.L	(A0),A0
	MOVEQ	#111,D1
	DC.W	$6665
	DC.W	$7373
	DC.W	$696f
	DC.W	$6e61
	BGE.S	LAB_139E
	MOVE.W	66(A6,D2.W),-(A0)
	BVS.S	LAB_13AB
	MOVEA.L	(A1),A0
	SUBQ.W	#2,D1
	DC.W	$4c49
	ADDQ.W	#2,(A1)+
	MOVE.L	A4,20307(A6)
	SUBQ.B	#1,-(A0)
	MOVEQ	#97,D0
	DC.W	$636b
LAB_139C:
	BCS.S	WaveCHNK_ID
	MOVE.L	D0,D7
IllegalSLen_TXT:
	DC.W	$3e3e
	MOVE.W	-(A0),D7
LAB_139E:
	SUBQ.W	#3,-(A1)
	MOVEQ	#110,D1
	BVS.S	LAB_13B1
	BEQ.S	LAB_13A4+2
LAB_139F:
	MOVEA.L	D6,A0
	BVS.S	LAB_13B2
	BCS.S	LAB_13A0
	DC.W	$636f
	MOVEQ	#114,D1
	DC.W	$7570
	MOVEQ	#44,D2
	MOVEA.L	27756(A1),A0
	DC.W	$6567
	BSR.S	LAB_13B3
	MOVEA.L	25966(A4),A0
	BEQ.S	LAB_13B5
	BVC.S	LAB_13A6+2
	DC.W	$6465
	MOVEQ	#101,D2
	BLS.S	LAB_13B6
	BCS.S	LAB_13B4
LAB_13A0:
	MOVE.L	D0,D7
NameFormat_TXT:
	MOVE.L	10784(A2),D5
LAB_13A2:
	SUBQ.W	#3,D1
	ADDQ.B	#3,-(A0)
	MOVEA.L	D6,A0
LAB_13A3:
	DC.W	$4f52
	DC.W	$4d41
	ADDQ.B	#2,-(A0)
LAB_13A4:
	MOVE.L	10784(A2),D5
aifformat_TXT:
LAB_13A6:
	MOVE.W	66(A6,D2.W),-(A0)
	DC.W	$4954
	MOVE.L	-(A0),D6
LAB_13A8:
	SUBQ.W	#1,(A4)
	DC.W	$4552
LAB_13A9:
	DC.W	$454f
body_TXT:
	ORI.W	#$6f64,D2
	DC.W	$7920
	DC.W	$666f
LAB_13AB:
	DC.W	$756e
	DC.W	$6400
WaveCHNK_ID:
	MOVE.L	11565(A5),-(A6)
MODULE_SONGTYPE:
	DC.W	$0000
NoNote_TXT:
	MOVE.L	11520(A5),-(A6)
FinalNote_TXT:
	DC.W	$4320
	MOVE.W	D0,D0
NoteName_TAB:
	DC.W	$4320
	DC.W	$4323
	NEG.B	-(A0)
	NEG.B	-(A3)
LAB_13B1:
	DC.W	$4520
	NOT.B	-(A0)
LAB_13B2:
	NOT.B	-(A3)
	DC.W	$4720
	DC.W	$4723
	DC.W	$4120
	DC.W	$4123
	NBCD	-(A0)
	DC.W	$4920
	TST.B	-(A0)
	DC.W	$4b20
LAB_13B3:
	DC.W	$4c20
	DC.W	$4d20
	DC.W	$4e20
	DC.W	$4f20
LAB_13B4:
	ADDQ.B	#8,-(A0)
	SUBQ.B	#8,-(A0)
	ADDQ.B	#1,-(A0)
LAB_13B5:
	SUBQ.B	#1,-(A0)
	ADDQ.B	#2,-(A0)
	SUBQ.B	#2,-(A0)
	ADDQ.B	#3,-(A0)
LAB_13B6:
	SUBQ.B	#3,-(A0)
	ADDQ.B	#4,-(A0)
	SUBQ.B	#4,-(A0)
DspBuffer_TXT:
	ADDQ.W	#5,A5
	BSR.S	LAB_13C1
	MOVEA.L	D4,A0
	DC.W	$7370
	MOVEA.L	D2,A0
	DC.W	$7566
	DC.W	$6665
	MOVEQ	#115,D1
	MOVE.L	12598(A0),D0
	MOVE.L	12853(A6),D7
OS3_TXT:
	MOVE.W	79(A1),-(A2)
	MOVEQ	#101,D3
	MOVEQ	#115,D1
	DC.W	$616d
	MOVEQ	#108,D0
	BCS.S	LAB_13BE
	DC.W	$4c61
	DC.W	$7965
	MOVEQ	#32,D1
	DC.W	$4949
OS3_TXTc:
	DC.W	$4920
OS3_TXTb:
	MOVE.W	11565(A5),D5
	MOVE.L	D0,-(A6)
SongDir_TXT:
	SUBQ.W	#1,28263(A7)
	DC.W	$7300
ModuleDir_TXT:
	DC.W	$4d6f
	DC.W	$6475
	DC.W	$6c65
	DC.W	$7300
SampleDir_TXT:
	SUBQ.W	#1,-(A1)
LAB_13BE:
	BLT.S	LAB_13C6
	DC.W	$6c65
	DC.W	$7300
NGtxt:
	MOVE.L	-(A0),D5
	TRAP	#7
	MOVEA.L	(A3),A0
	DC.W	$616d
	MOVEQ	#108,D0
	BCS.S	LAB_13C7
	DC.W	$6f6f
	DC.W	$7374
Command_TXT:
	ORI.W	#$5953,(A3)
	MOVEA.W	(A5),A5
	MOVEQ	#105,D2
	DC.W	$6c69
	MOVEQ	#105,D2
	DC.W	$6573
	MOVE.L	A5,30060(A7)
	MOVEQ	#105,D2
	MOVEQ	#105,D3
	DC.W	$6577
	MOVEA.L	(A7),A0
	DC.W	$494e
	DC.W	$444f
	SUBQ.B	#3,-(A0)
LAB_13C1:
	ADDQ.W	#8,(A5)
	CLR.W	(A3)
	DC.W	$4352
	DC.W	$4545
	DC.W	$4e3d
	DC.W	$5379
	BLT.S	LAB_13CD+2
	DC.W	$686f
	DC.W	$6e69
	DC.W	$6545
	DC.W	$6469
	MOVEQ	#111,D2
	MOVEQ	#32,D1
TempDizName:
	MOVEQ	#58,D2
	SUBQ.W	#1,A7
	TRAP	#7
	DC.W	$494e
	DC.W	$464f
Macro_MATCH:
	DC.W	$0023
LAB_13C4:
	MOVE.W	21369(A6),-(A7)
	DC.W	$6d4d
	DC.W	$4143
	ADDQ.W	#1,A7
UnpackedName:
	DC.W	$0074
	DC.W	$3a74
	DC.W	$656d
	MOVEQ	#117,D0
	BGT.S	LAB_13CE+2
	DC.W	$6163
LAB_13C6:
	DC.W	$6b5f
LAB_13C7:
	DC.W	$7379
	DC.W	$6d6d
	BLE.S	LAB_13CE
DeleteTempXPKFile:
	DC.W	$0000
AUTOLOADSAMPLE:
ProjMod_TXT:
	DC.W	$ff4d
	DC.W	$4f44
	MOVE.L	-(A0),D0
ProjSong_TXT:
	ORI.W	#$4f4e,(A3)
	DC.W	$4720
	MOVE.L	D0,D0
LineSampleDef_Txt:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
LAB_13CD:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
LAB_13CE:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
Prefs_MATCH:
	DC.W	$233f
LAB_13D1:
	DC.W	$2e70
	MOVEQ	#101,D1
	DC.W	$6673
Block_MATCH:
	DC.W	$0023
LAB_13D3:
	MOVE.W	21369(A6),-(A7)
	BLT.S	LAB_13DD
	DC.W	$4c4b
DSPPLUG_MATCH:
	DC.W	$0023
LAB_13D5:
	MOVE.W	21369(A6),-(A7)
	BLT.S	LAB_13E0
	SUBQ.W	#1,(A0)
Song_EXT:
	DC.W	$002e
	SUBQ.W	#1,EXT_0036
	DC.W	$4700
SampleList_EXT:
	MOVEA.L	(A3),A7
	DC.W	$796d
	SUBQ.W	#1,D1
	DC.W	$4d50
SongData_EXT:
	DC.W	$002e
	SUBQ.W	#1,EXT_0035
	DC.W	$4100
SongSeq_EXT:
	MOVEA.L	(A3),A7
	DC.W	$796d
	SUBQ.W	#1,D5
	SUBQ.B	#8,D0
SoundModule_EXT:
	MOVEA.L	(A3),A7
	DC.W	$796d
	DC.W	$4d4f
	NEG.B	D0
MK_Name:
	MOVEQ	#58,D2
	SUBQ.W	#1,-(A1)
	BLT.S	LAB_13E9
	DC.W	$6c65
LAB_13DC:
	MOVEA.L	D1,A0
Ex8Bit:
LAB_13DD:
	DC.W	$0000
Song_MATCH:
	DC.W	$233f
	MOVEA.L	(A3),A7
	DC.W	$796d
	SUBQ.W	#1,A7
	TRAP	#7
SampleList_MATCH:
LAB_13E0:
	DC.W	$0023
	MOVE.W	21369(A6),-(A7)
	DC.W	$6d53
	DC.W	$414d
	ADDQ.B	#8,D0
SongData_MATCH:
	DC.W	$233f
	MOVEA.L	(A3),A7
	DC.W	$796d
	SUBQ.W	#1,D4
	ADDQ.W	#2,D1
SongSeq_MATCH:
	DC.W	$0023
	MOVE.W	21369(A6),-(A7)
	DC.W	$6d53
	DC.W	$4551
SoundModule_MATCH:
	DC.W	$0023
	MOVE.W	A5,20292(A7)
	DC.W	$233f
All_MATCH:
	DC.W	$0023
	MOVE.W	D0,-(A7)
NoMod_TXT:
	MOVE.L	USP,A7
	MOVEA.L	(A0),A0
	ADDQ.B	#2,-(A0)
	DC.W	$4d6f
	BCC.S	LAB_13E8
	NOT.W	29293(A7)
	BSR.S	LAB_13F2
PTMod_TXT:
	DC.W	$002a
	MOVE.L	8272(A2),D5
	ADDQ.B	#2,-(A0)
	DC.W	$4d6f
	BCC.S	LAB_13EA
	NOT.W	29293(A7)
	BSR.S	RBufLen_TXT
	MOVE.L	8268(A5),D0
	DC.W	$6f61
	DC.W	$6469
LAB_13E8:
	DC.W	$6e67
	MOVEA.L	-(A1),A0
	BGT.S	LAB_13F3+2
	MOVEA.L	-(A3),A0
	BLE.S	LAB_13F5
LAB_13E9:
	MOVEQ	#101,D3
	MOVEQ	#116,D1
	BVS.S	LAB_13F6
	BEQ.S	LAB_13F0
MKFORMAT:
EasyDWBuf_STATUS:
CommandPic_TXT:
LAB_13EA:
	ORI.B	#$63,D0
	MOVEA.W	(A6),A5
	DC.W	$6973
	DC.W	$6167
	BCS.S	LAB_13EF
	SUBQ.W	#3,D2
	DC.W	$4d4f
	TRAP	#9
	ADDQ.W	#2,A7
	ADDQ.B	#1,-(A0)
	MOVEQ	#58,D2
	SUBQ.W	#1,A7
	TRAP	#7
	DC.W	$494e
	DC.W	$464f
PosListtitle:
	ORI.W	#$4f53,(A0)
	MOVEA.L	(A0),A0
	DC.W	$4154
	MOVEA.L	D2,A0
	DC.W	$474e
LAB_13EF:
	MOVEA.L	A4,A0
LAB_13F0:
	DC.W	$454e
	MOVEA.L	A4,A0
	DC.W	$4f4f
	ADDQ.B	#8,-(A0)
	DC.W	$4359
	DC.W	$4c20
	ADDQ.W	#2,(A2)
	DC.W	$4e00
SetEx8bQuality_TXT:
	DC.W	$436f
	BGT.S	LAB_1408+2
	BCS.S	LAB_1408
	DC.W	$7369
	BLE.S	LAB_1408
LAB_13F2:
	MOVEA.L	D4,A0
	BCS.S	DspTextList
	MOVEQ	#104,D2
	MOVE.L	13358(A0),D0
	MOVE.L	EXT_0010.W,D7
LAB_13F3:
	CLR.W	29696(A1)
RBufLen_TXT:
	ADDQ.W	#1,-(A5)
	BGT.S	LAB_140C
	BCS.S	LAB_140D+2
	MOVEA.L	D2,A0
	DC.W	$7566
	DC.W	$6665
LAB_13F5:
	MOVEQ	#32,D1
	MOVE.L	EXT_0013.W,D4
LAB_13F6:
	MOVE.W	48(A0,D3.W),-(A0)
	MOVE.W	-(A0),D0
	DC.W	$4b42
	MOVE.L	D0,-(A4)
PlayRen_TXT:
	DC.W	$4175
	DC.W	$6469
	BLE.S	SYSVOL
	ADDQ.W	#1,-(A5)
	BGT.S	LAB_1410
	BCS.S	LAB_1414
	BVS.S	LAB_1413+2
	BEQ.S	LAB_1406+2
	MOVE.L	8304(A6),D7
	DC.W	$6c65
	DC.W	$6173
	BCS.S	LAB_1405
	DC.W	$7761
	BVS.S	LAB_1416+2
	MOVE.L	D0,D7
SmoothStatus:
EventED_STATUS:
PED_ViewDetail:
	ORI.B	#$00,D0
SYSVOLOLD:
	DC.W	$6400
SYSVOL:
LAB_13FC:
	BCC.W	LAB_16EC
SetNote_PREFS:
Loopactive:
DSPPlug_INMEM:
	ORI.B	#$00,D0
FromPi_FLAG:
DrawFromPi_TXT:
	ORI.W	#$6f49,D4
DrawFromPi_TXT2:
	DC.W	$004f
	BNE.S	LAB_1418+2
SEQPlay_TXT:
	ORI.W	#$6c61,(A0)
LAB_1405:
	DC.W	$7900
SEQSkip_TXT:
LAB_1406:
	SUBQ.W	#1,26992(A3)
SEQLast_TXT:
LAB_1408:
	ORI.W	#$6e64,D5
	MOVE.L	D0,D0
DspTextList:
	DC.W	$4f66
	BNE.S	LAB_140F
	MOVE.L	-(A0),D0
LAB_140C:
	DC.W	$004e
	BLE.S	LAB_141F
	BLT.S	LAB_1412
	MOVE.L	D0,D0
	DC.W	$4372
	DC.W	$6f73
	DC.W	$7320
LAB_140D:
	ORI.W	#$726f,D3
	DC.W	$7373
	MOVE.W	D0,D1
	DC.W	$4365
	BGT.S	LAB_1421
	BCS.S	LAB_1421
DspTextIll_TXT:
	DC.W	$0049
LAB_140F:
	DC.W	$6c65
	DC.W	$6761
MarkBlocktxt:
LAB_1410:
	BGE.W	LAB_16CF
LAB_1412:
	DC.W	$4d61
	MOVEQ	#107,D1
	BVS.S	LAB_1423
	BEQ.S	LAB_1418
LAB_1413:
	CLR.W	28515(A4)
LAB_1414:
	BMI.S	LAB_141B+2
MarkBlocktxt2:
	MOVE.L	66(A6),D7
	DC.W	$6c6f
	DC.W	$636b
	MOVEA.L	A5,A0
	BSR.S	LAB_1425
	DC.W	$6b65
	BCC.S	LAB_141E
EditVolume_TXT:
LAB_1416:
	ORI.W	#$6f6c,(A6)
	DC.W	$756d
	BCS.S	LAB_141D
	DC.W	$2831
LAB_1418:
	MOVE.L	12592(A6),D7
EditPitch_TXT:
	MOVE.W	80(A1),D0
	BVS.S	LAB_142E
	BLS.S	InstrNoTune_TXT
	MOVE.L	12334(A0),D0
	DC.W	$2e37
PatLocked:
LAB_141B:
	MOVE.W	84(A1),D1
	DC.W	$6865
	MOVEA.L	-(A1),A0
	BLS.S	InstrKilled_TXT
	DC.W	$7561
LAB_141D:
	BGE.S	LAB_1421
	ADDQ.W	#8,-(A1)
	MOVEQ	#116,D2
LAB_141E:
	BCS.S	LAB_1432
	BGT.S	LAB_1422
LAB_141F:
	DC.W	$6861
	DC.W	$7320
	DC.W	$6265
	BCS.S	LAB_1434
	MOVEA.L	28515(A4),A0
	DC.W	$6b65
	BCC.S	LAB_1426
Patunlocked:
	ORI.W	#$6865,(A4)
	MOVEA.L	(A0),A0
	BSR.S	LAB_1439
LAB_1421:
	MOVEQ	#101,D2
	MOVEQ	#110,D1
	MOVEA.L	29472(A1),A0
LAB_1422:
	DC.W	$6e6f
	DC.W	$7720
LAB_1423:
	DC.W	$756e
	DC.W	$6c6f
	DC.W	$636b
	BCS.S	LAB_143A
	MOVE.L	D0,D7
ScreenModeReq_txt:
	SUBQ.W	#1,-(A3)
	MOVEQ	#101,D1
	BCS.S	LAB_143C
	DC.W	$6d6f
	DC.W	$6465
	MOVEA.L	(A2),A0
	DC.W	$6571
LAB_1425:
	DC.W	$7565
LAB_1426:
	DC.W	$7374
InstrNoDSPPOS_TXT:
	DC.W	$0028
	MOVE.L	8192(A1),D5
InstrNoDSP_TXT:
	MOVE.L	8192(A1),D4
InstrFill_TXT:
	MOVE.W	D0,D5
InstrNoTune_TXT:
	MOVE.L	-(A0),D5
InstrLeft_TXT:
	DC.W	$004c
	MOVE.L	D0,D0
InstrRight_TXT:
	ADDQ.B	#1,-(A0)
InstrNo_TXT:
	DC.W	$0031
LAB_142E:
	SUBQ.W	#1,A0
	DC.W	$4f54
	MOVE.L	D0,D0
InstrLooped_TXT:
	DC.W	$4c4f
	DC.W	$4f50
	MOVE.L	D0,D0
InstrSustained_TXT:
	SUBQ.W	#1,(A5)
	SUBQ.W	#1,(A4)
	MOVE.L	D0,D0
InstrKilled_TXT:
	MOVEA.W	D5,A6
	DC.W	$4d50
	ADDQ.W	#2,(A1)+
	MOVE.W	-(A0),D7
InstrSilent_TXT:
LAB_1432:
	DC.W	$004d
	SUBQ.W	#2,(A4)
	DC.W	$4520
InstrLead_TXT:
LAB_1434:
	DC.W	$0049
	DC.W	$6e73
	MOVEQ	#114,D2
	MOVE.L	D0,D0
InstrNoFASTPLAY_TXT:
	DC.W	$3e3e
	MOVE.L	D0,D0
NGWTitle_TXT:
	SUBQ.W	#2,28257(A6)
	DC.W	$6d65
	DC.W	$6400
pedtxt:
	DC.W	$5072
LAB_1439:
	DC.W	$6573
	DC.W	$7320
LAB_143A:
	DC.W	$4d42
	DC.W	$2074
	BLE.S	LAB_143D
	DC.W	$7365
	MOVEQ	#32,D2
	BLS.S	LAB_1446
	DC.W	$7372
pedtxtb:
	DC.W	$004d
	BLE.S	LAB_1447
LAB_143C:
	BCS.S	LAB_143F
	DC.W	$4d6f
	DC.W	$7573
	BCS.S	LAB_1440
	MOVEQ	#111,D2
	MOVEA.L	28534(A5),A0
	BCS.S	LAB_1442
	BLS.S	LAB_1449
	DC.W	$7372
pedtxtc:
LAB_143D:
	ORI.W	#$7265,(A0)
	DC.W	$7373
	MOVEA.L	A5,A0
	CLR.B	-(A0)
	MOVEQ	#111,D2
	MOVEA.L	A5,A0
LAB_143F:
	SUBQ.W	#2,(A4)
	DC.W	$4520
	MOVEQ	#114,D2
LAB_1440:
	DC.W	$6163
	DC.W	$6b00
Areaerrtxt:
	DC.W	$4172
	DC.W	$6561
LAB_1442:
	MOVEA.L	D5,A0
	MOVEQ	#114,D1
	BLE.S	Midireqtxt2
LPFilter_TXT:
	DC.W	$004c
	ADDQ.B	#8,-(A0)
	NOT.W	27764(A1)
	BCS.S	LAB_144C
	MOVE.L	11571(A0),D0
	MOVE.W	11825(A6),D1
	DC.W	$3237
	MOVE.L	D0,-(A4)
Midireqtxt:
	DC.W	$496e
	MOVEQ	#117,D0
	MOVEQ	#32,D2
	DC.W	$4368
	BSR.S	LAB_144D
	DC.W	$6e65
	BGE.S	EventMax_TXT
	DC.W	$2830
	MOVE.L	12597(A6),D7
	MOVE.L	D0,-(A4)
EventQuant_TXT:
	DC.W	$4576
	BCS.S	LAB_1451
	MOVEQ	#32,D2
	DC.W	$5175
	BSR.S	LAB_1452
LAB_1446:
	MOVEQ	#105,D2
	MOVEQ	#101,D5
	MOVE.L	12590(A0),D0
	DC.W	$2e32
LAB_1447:
	DC.W	$3535
	MOVE.L	D0,-(A4)
EventMax_TXT:
	DC.W	$4576
	BCS.S	LAB_1454
	MOVEQ	#32,D2
	DC.W	$4d61
	MOVEQ	#105,D4
LAB_1449:
	DC.W	$6d75
	BLT.S	Midireqtxt2
	DC.W	$2830
	MOVE.L	12853(A6),D7
EventMin_TXT:
	MOVE.W	69(A1),-(A2)
	MOVEQ	#101,D3
	BGT.S	LAB_1457
	MOVEA.L	A5,A0
	BVS.S	Eventoff
	DC.W	$696d
	DC.W	$756d
	MOVE.L	12334(A0),D0
	DC.W	$2e32
	DC.W	$3535
	MOVE.L	D0,-(A4)
Midireqtxt2:
	DC.W	$4b62
	BCC.S	LAB_144F
	DC.W	$5075
	DC.W	$6e63
	BVC.S	LAB_1450
LAB_144C:
	DC.W	$2830
	MOVE.L	12592(A6),D7
	MOVE.W	12349(A4),D0
	DC.W	$6479
	DC.W	$6e61
	DC.W	$6d69
	DC.W	$6329
Loopseltxtb:
LAB_144D:
	ORI.W	#$6574,(A3)
	MOVEA.L	-(A5),A0
	BGT.S	LAB_145A
LAB_144F:
	MOVEA.L	26144(A7),A0
	DC.W	$6c6f
LAB_1450:
	BLE.S	LAB_145C
LAB_1451:
	DC.W	$2072
	BSR.S	LAB_145D
	DC.W	$6765
LAB_1452:
	MOVE.L	D0,D7
Loopseltxt:
	DC.W	$5072
	DC.W	$6573
	DC.W	$7320
	DC.W	$4d42
	DC.W	$2074
	BLE.S	Eventoff
	BCS.S	LAB_145F
	MOVEQ	#101,D2
LAB_1454:
	MOVEQ	#32,D1
	DC.W	$6c6f
	BLE.S	LAB_1460
	MOVEA.L	28516(A5),A0
	DC.W	$7573
	MOVE.L	D0,D7
Eventon:
	DC.W	$4576
	BCS.S	LAB_1463
	MOVEQ	#32,D2
	DC.W	$6c6f
	DC.W	$636b
	BCS.S	LAB_1462
	MOVE.L	D0,D7
Eventoff:
	DC.W	$4576
LAB_1457:
	BCS.S	LAB_1467
	MOVEQ	#32,D2
	DC.W	$756e
	DC.W	$6c6f
	DC.W	$636b
	BCS.S	LAB_1467
	MOVE.L	D0,D7
DSPPLUG_Dir:
	NEG.W	(A3)
	ADDQ.W	#8,30055(A4)
	BVS.S	LAB_1469
DSPLoad_TXT:
	ORI.W	#$656c,(A3)
	DC.W	$6563
	MOVEQ	#32,D2
	NEG.W	(A3)
	ADDQ.B	#8,-(A0)
	ADDQ.W	#8,30055(A4)
LAB_145A:
	BVS.S	LAB_146C
NoDSPPlugMem_TXT:
	ORI.W	#$7272,D5
	BLE.S	LAB_146D
	MOVE.W	-(A0),D5
	DC.W	$4361
	BGT.S	LAB_146E
	BLE.S	LAB_1471
	MOVEA.L	28513(A4),A0
LAB_145C:
	BCC.S	LAB_1461
LAB_145D:
	NEG.W	32(A3,D7.W)
	ADDQ.W	#8,30055(A4)
	DC.W	$496e
UnknownMsgIn:
	DC.W	$004d
	DC.W	$4944
	DC.W	$493a
	MOVEA.L	(A5),A0
LAB_145F:
	DC.W	$6e6b
	DC.W	$6e6f
	DC.W	$776e
	MOVEA.L	A5,A0
	DC.W	$7367
LAB_1460:
	DC.W	$2072
	DC.W	$6563
LAB_1461:
	DC.W	$6569
	MOVEQ	#101,D3
LAB_1462:
	BCC.S	LAB_146A+2
MLInName:
LAB_1463:
	DC.W	$0049
	DC.W	$6e00
MLLocation:
	BVS.S	NoCAMDlib
MidiLinkOk:
	MOVE.L	77(A0,D0.W),D7
	BVS.S	LAB_1475
	BVS.S	LAB_146A+2
LAB_1467:
	DC.W	$4c69
	DC.W	$6e6b
	MOVEA.L	A1,A0
	DC.W	$4e3a
	MOVEA.L	27392(A7),A0
MidiNodeOk:
	DC.W	$4f70
	BCS.S	LAB_1479
	BVS.S	LAB_147A
	BEQ.S	LAB_146F
LAB_1469:
	DC.W	$4d69
	DC.W	$6469
	MOVEA.L	A6,A0
	BLE.S	LAB_147A
	BCS.S	LAB_1474
LAB_146A:
	MOVEA.L	27392(A7),A0
OpenCamd:
	DC.W	$4f70
	BCS.S	LAB_147C
LAB_146C:
	BVS.S	LAB_147D
	BEQ.S	LAB_1472
	DC.W	$4341
	DC.W	$4d44
	MOVEA.L	(A3),A0
LAB_146D:
	DC.W	$7973
LAB_146E:
	MOVEQ	#101,D2
LAB_146F:
	DC.W	$6d00
NoMidiNode:
	DC.W	$4572
	MOVEQ	#111,D1
LAB_1471:
	MOVEQ	#32,D1
	DC.W	$4f70
	BCS.S	LAB_1480
	BVS.S	LAB_1481
	BEQ.S	LAB_1476
	DC.W	$4d69
	DC.W	$6469
	MOVEA.L	A6,A0
LAB_1472:
	BLE.S	LAB_1481
	DC.W	$6500
NoCamdMIDI:
	DC.W	$4572
	MOVEQ	#111,D1
	MOVEQ	#32,D1
	DC.W	$4f70
	BCS.S	LAB_1484
LAB_1474:
	BVS.S	LAB_1485
	BEQ.S	LAB_1478
	DC.W	$4d69
	DC.W	$6469
	MOVEA.L	A4,A0
LAB_1475:
	BVS.S	ERRNoLSMem
LAB_1476:
	DC.W	$6b00
NoCAMDlib:
	MOVE.L	USP,A7
	MOVEA.L	D3,A0
	DC.W	$414d
	NEG.B	-(A0)
	DC.W	$4c69
	BHI.S	LAB_1489
	BSR.S	LAB_148A
	DC.W	$792e
	MOVEA.L	A5,A0
	BVS.S	LAB_1488
	BVS.S	LAB_147E
LAB_1478:
	DC.W	$6973
LAB_1479:
	MOVEA.L	-(A4),A0
LAB_147A:
	DC.W	$6973
	BSR.S	LAB_148A
	DC.W	$6c65
	BCC.S	LAB_1483
MidiName_TXT:
	ORI.W	#$796d,(A3)
	MOVEQ	#104,D0
	BLE.S	LAB_148C
	DC.W	$6965
	MOVEA.L	D3,A0
LAB_147C:
	DC.W	$414d
LAB_147D:
	NEG.B	-(A0)
	DC.W	$4d69
	DC.W	$6469
LAB_147E:
	MOVEA.L	A6,A0
	BLE.S	SetSamplePreOverS_TXT
	DC.W	$6500
ClMidiNode:
	DC.W	$436c
	DC.W	$6f73
	BVS.S	LAB_148F
	BEQ.S	LAB_1486
	DC.W	$4d69
	DC.W	$6469
LAB_1480:
	MOVEA.L	A6,A0
LAB_1481:
	BLE.S	LAB_148F
	DC.W	$6500
ErrNoDSMem_TXT:
	DC.W	$6e6f
LAB_1483:
	MOVEQ	#32,D2
	BCS.S	LAB_1492
	DC.W	$6f75
	BEQ.S	LAB_1491+2
	MOVEA.L	25965(A5),A0
	BLE.S	LAB_1494
	DC.W	$7920
LAB_1484:
	DC.W	$666f
LAB_1485:
	MOVEQ	#32,D1
LAB_1486:
	DC.W	$7361
	BLT.S	SampleDiff_TXT
	DC.W	$6c65
	MOVE.L	D0,D7
ERRNoLSMem:
	DC.W	$6e6f
	MOVEA.L	25965(A5),A0
	BLE.S	LAB_1496
	DC.W	$7920
	DC.W	$666f
LAB_1488:
	MOVEQ	#32,D1
	MOVEQ	#105,D3
	MOVEQ	#116,D1
LAB_1489:
	DC.W	$7561
LAB_148A:
	BGE.S	LAB_148E
	DC.W	$7361
	BLT.S	LAB_1498
	DC.W	$6c65
	MOVE.L	D0,D7
ReqInstrTXT:
	DC.W	$496e
	DC.W	$7374
	MOVEQ	#117,D1
	DC.W	$6d65
	BGT.S	LAB_149B
	MOVE.L	12334(A0),D0
LAB_148C:
	DC.W	$2e31
	DC.W	$3237
	MOVE.L	D0,-(A4)
SetSamplePreOverS_TXT:
	DC.W	$5072
	BCS.S	LAB_1492
LAB_148E:
	DC.W	$4f76
	BCS.S	LAB_149C
	DC.W	$7361
	BLT.S	LAB_149C+2
	DC.W	$6c65
	MOVE.L	12590(A0),D0
LAB_148F:
	DC.W	$2e34
	MOVE.L	D0,-(A4)
ScopeFrame_TXT:
	DC.W	$4672
	DC.W	$616d
	DC.W	$6573
	MOVE.L	12590(A0),D0
LAB_1491:
	MOVE.L	41(A5,D3.W),D7
PitchDiff_TXT:
LAB_1492:
	ORI.W	#$6974,(A0)
	BLS.S	LAB_14A0
	MOVEA.L	D4,A0
	BVS.S	LAB_14A0+2
	BNE.S	SetSampleVol_TXT
	DC.W	$2830
LAB_1494:
	MOVE.L	12592(A6),D7
	DC.W	$3030
	MOVE.L	D0,-(A4)
SampleDiff_TXT:
	SUBQ.W	#1,-(A1)
	BLT.S	SetSampleBoost_TXT
	DC.W	$6c65
	MOVEA.L	D4,A0
	BVS.S	LAB_14A2+2
	BNE.S	LAB_1499
	DC.W	$2830
LAB_1496:
	MOVE.L	12848(A6),D7
	DC.W	$3030
	MOVE.L	D0,-(A4)
SetSampleVol_TXT:
	SUBQ.W	#1,-(A1)
	BLT.S	LAB_14A5
	DC.W	$6c65
	MOVEA.L	(A6),A0
LAB_1498:
	BLE.S	noprefs_TXT
	DC.W	$756d
	BCS.S	LAB_149E
	DC.W	$2831
	MOVE.L	11825(A6),-(A2)
	DC.W	$3939
NoiseFilt_TXT:
LAB_1499:
	MOVE.L	65(A1),-(A2)
LAB_149B:
	BGT.S	LAB_14A7
	DC.W	$6941
	DC.W	$6c69
	DC.W	$6173
	MOVEA.L	D4,A0
	BCS.S	LAB_14A8
	MOVEQ	#104,D2
	DC.W	$2830
LAB_149C:
	MOVE.L	12592(A6),D7
LAB_149E:
	MOVE.L	D0,-(A4)
ProcVLimit_TXT:
	DC.W	$4d61
	MOVEQ	#32,D4
	DC.W	$5072
	DC.W	$6f63
	MOVEA.L	(A6),A0
	BLE.S	LAB_14AB
	DC.W	$756d
	BCS.S	LAB_14A4
	DC.W	$2831
LAB_14A0:
	MOVE.L	12592(A6),D7
	MOVE.W	78(A1),D0
	DC.W	$6f69
	DC.W	$7365
	MOVEA.L	A4,A0
	DC.W	$696d
	BVS.S	SaveActualProject_TXT
	MOVE.L	12590(A0),D0
LAB_14A2:
	MOVE.L	48(A1,D3.W),D7
	MOVE.L	D0,-(A4)
SetSampleBoost_TXT:
	SUBQ.W	#1,-(A1)
LAB_14A4:
	BLT.S	LAB_14AF
	DC.W	$6c65
	MOVEA.L	D2,A0
	DC.W	$6f6f
	DC.W	$7374
	MOVE.L	12590(A0),D0
	MOVE.L	48(A1,D3.W),D7
	DC.W	$3030
LAB_14A5:
	MOVE.L	D0,-(A4)
noprefs_TXT:
	DC.W	$4162
	BLE.S	LAB_14B2
	MOVEQ	#101,D2
	BCC.S	LAB_14A9
	MOVE.L	-(A0),-(A0)
	MOVE.L	-(A0),-(A6)
	ADDQ.W	#2,26995(A0)
	MOVEA.L	29472(A1),A0
	DC.W	$6e6f
	MOVEA.L	(A3),A0
	DC.W	$796d
LAB_14A7:
	MOVEQ	#104,D0
	BLE.S	LAB_14B5
	DC.W	$6965
LAB_14A8:
	DC.W	$2070
	MOVEQ	#101,D1
	DC.W	$6673
	MOVEA.L	-(A6),A0
LAB_14A9:
	BVS.S	LAB_14B7
	BCS.S	LAB_14AE
SavePrefsAs_TXT:
	ORI.W	#$6176,(A3)
	BCS.S	SaveActualProject_TXT
LAB_14AB:
	DC.W	$5072
	BCS.S	LAB_14B8
	BCS.S	LAB_14BA
	BCS.S	LAB_14B9
	DC.W	$6365
	DC.W	$7320
	DC.W	$4173
LoadPrefs_TXT:
	DC.W	$004c
	DC.W	$6f61
	BCC.S	Block_Diz_TXT
	DC.W	$5072
	BCS.S	LAB_14BC
	BCS.S	LAB_14BE+2
	BCS.S	LAB_14BE
	DC.W	$6365
	DC.W	$7300
SaveActualProject_TXT:
	SUBQ.W	#1,-(A1)
	MOVEQ	#101,D3
	MOVEA.L	D1,A0
	BLS.S	LAB_14C1
LAB_14AE:
	DC.W	$7561
LAB_14AF:
	BGE.S	LAB_14B3
	DC.W	$5072
	BLE.S	LAB_14C0
	DC.W	$6563
	MOVEQ	#0,D2
Block_Diz_TXT:
	CLR.W	28515(A4)
	BMI.S	LAB_14B5
	DC.W	$496e
	DC.W	$666f
SaveInstrSetup_TXT:
	ORI.W	#$6176,(A3)
	BCS.S	LAB_14B7
LAB_14B2:
	DC.W	$496e
	DC.W	$7374
	MOVEQ	#32,D1
	SUBQ.W	#1,-(A5)
LAB_14B3:
	MOVEQ	#117,D2
	MOVEQ	#0,D0
LoadInstrSetup_TXT:
	DC.W	$4c6f
	BSR.S	LAB_14C5
	MOVEA.L	A1,A0
	DC.W	$6e73
	MOVEQ	#114,D2
LAB_14B5:
	MOVEA.L	(A3),A0
	BCS.S	LAB_14C8
	DC.W	$7570
SaveProj_PRE:
	DC.W	$002a
	MOVEA.L	(A3),A0
LAB_14B7:
	BSR.S	LAB_14CA
	BVS.S	LAB_14C9
	BEQ.S	LAB_14BE
LAB_14B8:
	DC.W	$6163
	MOVEQ	#117,D2
	BSR.S	LAB_14CA
	MOVEA.L	(A0),A0
	MOVEQ	#111,D1
	DC.W	$6a65
LAB_14B9:
	BLS.S	LAB_14CD
LAB_14BA:
	MOVEA.L	-(A1),A0
	DC.W	$7320
LoadProj_PRE:
	DC.W	$002a
LAB_14BC:
	MOVEA.L	A4,A0
	DC.W	$6f61
	DC.W	$6469
	DC.W	$6e67
	MOVE.L	D0,D0
Delta16_TXT:
	MOVE.L	-(A0),D5
LAB_14BE:
	MOVE.W	66(A6,D2.W),-(A0)
	BVS.S	LAB_14D1
	MOVEA.L	D4,A0
	BCS.S	LAB_14D0
	MOVEQ	#97,D2
	MOVEQ	#97,D0
	DC.W	$636b
LAB_14C0:
	BVS.S	LAB_14D2
LAB_14C1:
	BEQ.S	LAB_14C7
Delta_TXT:
	DC.W	$002a
	MOVEA.L	D4,A0
	BCS.S	LAB_14D4
	MOVEQ	#97,D2
	MOVEQ	#97,D0
	DC.W	$636b
	BVS.S	LAB_14D6
	BEQ.S	LAB_14CA
Done_TXT:
	ORI.W	#$6f6e,D4
	BCS.S	LAB_14CC+2
Fail_TXT:
	DC.W	$004f
	MOVEQ	#101,D0
LAB_14C5:
	MOVEQ	#97,D1
	MOVEQ	#105,D2
	BLE.S	LAB_14D8+2
	MOVEA.L	D6,A0
	DC.W	$4149
	DC.W	$4c45
Block_Diz_INCLUDED:
	NEG.B	42(A6)
	MOVEA.L	D2,A0
	DC.W	$6c6f
LAB_14C7:
	DC.W	$636b
	MOVEA.L	A1,A0
	BGT.S	LAB_14DA
LAB_14C8:
	BLE.S	LAB_14CE
	BVS.S	LAB_14DE
LAB_14C9:
	BLS.S	LAB_14DE
	DC.W	$7564
	BCS.S	LAB_14DB+4
LAB_14CA:
	MOVE.L	D0,D7
Dizwrite_TXT:
	MOVE.L	-(A0),D5
LAB_14CC:
	NEG.W	31331(A1)
	MOVEQ	#105,D1
	MOVEQ	#116,D0
	DC.W	$696f
	BGT.S	LAB_14D2+2
LAB_14CD:
	BVS.S	LAB_14E3
	BLS.S	LAB_14E3
	DC.W	$7564
	BCS.S	LAB_14E2
LAB_14CE:
	MOVE.L	D0,D7
Dizwrite2_TXT:
	MOVE.L	-(A0),D5
	NEG.W	31331(A1)
	MOVEQ	#105,D1
	MOVEQ	#116,D0
LAB_14D0:
	DC.W	$696f
	BGT.S	LAB_14D7
LAB_14D1:
	DC.W	$4f62
	DC.W	$6a65
	BLS.S	LAB_14E6
LAB_14D2:
	MOVEA.L	28259(A1),A0
	DC.W	$6c75
LAB_14D4:
	DC.W	$6465
	BCC.S	LAB_14DD
Extracting_TXT:
	DC.W	$002a
	MOVEA.L	D5,A0
	MOVEQ	#116,D4
LAB_14D6:
	MOVEQ	#97,D1
	BLS.S	LAB_14E9
	BVS.S	LAB_14E8+2
	BEQ.S	LAB_14DD
	SUBQ.W	#1,-(A1)
LAB_14D7:
	BLT.S	LAB_14EA
	DC.W	$6c65
	DC.W	$732e
ErrNoFileLen:
LAB_14D8:
	MOVE.L	70(A6),D7
	BVS.S	LAB_14EB
	BCS.S	LAB_14E1
	DC.W	$6e6f
	MOVEQ	#32,D2
	DC.W	$666f
LAB_14DA:
	DC.W	$756e
	BCC.S	LAB_14E5
ErrTempSample2:
LAB_14DB:
	ORI.W	#$2f6f,8293(A1)
LAB_14DD:
	MOVEQ	#114,D1
LAB_14DE:
	BLE.S	LAB_14EE
	MOVE.L	D0,D7
ErrTempSample:
	DC.W	$6e6f
	MOVEQ	#32,D2
LAB_14E0:
	BCS.S	LAB_14F0
	DC.W	$6f75
	BEQ.S	LAB_14EF
LAB_14E1:
	MOVEA.L	25965(A5),A0
	BLE.S	LAB_14F2
LAB_14E2:
	DC.W	$7920
	DC.W	$666f
LAB_14E3:
	MOVEQ	#32,D1
	SUBQ.W	#1,-(A1)
	BLT.S	LAB_14F3
	DC.W	$6c65
	MOVE.L	D0,D7
Errsavefile:
	DC.W	$416e
	MOVEA.L	-(A5),A0
LAB_14E5:
	MOVEQ	#114,D1
	BLE.S	LAB_14F6
	MOVEA.L	25443(A7),A0
	DC.W	$7572
	BCS.S	LAB_14F4
	MOVEA.L	105(A7,D6.L),A0
	DC.W	$6c65
	DC.W	$2073
LAB_14E6:
	BSR.S	LAB_14F8
	BVS.S	LAB_14F7
	BEQ.S	LAB_14ED
ErrLoadMod:
	ORI.W	#$7272,D5
	BLE.S	LAB_14FB
	MOVE.W	-(A0),D5
LAB_14E8:
	SUBQ.W	#3,26988(A0)
	BCS.S	LAB_14ED
LAB_14E9:
	DC.W	$6c6f
	BSR.S	LAB_14F9+2
LAB_14EA:
	BVS.S	LAB_14FC
	BEQ.S	LAB_14EF
	DC.W	$4d6f
LAB_14EB:
	DC.W	$6475
	DC.W	$6c65
	MOVE.L	D0,D7
ErrLoadHunk:
	DC.W	$4572
	MOVEQ	#111,D1
	MOVEQ	#58,D1
	MOVEA.L	(A7),A0
	DC.W	$6869
	DC.W	$6c65
	MOVEA.L	28513(A4),A0
LAB_14ED:
	DC.W	$6469
	DC.W	$6e67
	MOVEA.L	A5,A0
LAB_14EE:
	BLE.S	LAB_1500
LAB_14EF:
	DC.W	$756c
LAB_14F0:
	BCS.S	LAB_14F5
	DC.W	$4875
	DC.W	$6e6b
	MOVE.L	D0,D7
WriteModErr_TXT:
	DC.W	$4572
	MOVEQ	#111,D1
	MOVEQ	#32,D1
LAB_14F2:
	SUBQ.W	#3,26988(A0)
	BCS.S	LAB_14F7
	BVS.S	LAB_1505+2
LAB_14F3:
	BLS.S	LAB_1505+2
	DC.W	$7564
	BVS.S	LAB_1507+2
	BEQ.S	LAB_14F9+2
LAB_14F4:
	SUBQ.W	#1,-(A1)
	BLT.S	LAB_1508
LAB_14F5:
	DC.W	$6c65
LAB_14F6:
	DC.W	$7320
	MOVE.L	-(A0),-(A0)
	MOVEA.L	28532(A6),A4
	MOVEA.L	-(A5),A0
	DC.W	$6e6f
	DC.W	$7567
	BVC.S	LAB_14FD+2
LAB_14F7:
	DC.W	$6d65
	DC.W	$6d6f
	MOVEQ	#121,D1
LAB_14F8:
	MOVE.L	D0,-(A4)
MK_AnalyzeSample:
LAB_14F9:
	MOVE.L	10784(A2),D5
LAB_14FB:
	ADDQ.W	#8,(A4)
	MOVEA.L	A4,A0
	DC.W	$6f61
	DC.W	$6469
	DC.W	$6e67
LAB_14FC:
	MOVEA.L	(A3),A0
	DC.W	$616d
	MOVEQ	#108,D0
	DC.W	$6573
Song_TXT:
LAB_14FD:
	ORI.W	#$6f6e,(A3)
	BEQ.S	LAB_1503
Instr_TXT:
	DC.W	$0049
	DC.W	$6e73
	MOVEQ	#114,D2
	DC.W	$756d
	BCS.S	LAB_150E
LAB_1500:
	MOVEQ	#115,D2
	MOVE.L	D0,D0
Seq_TXT:
	SUBQ.W	#1,-(A5)
	DC.W	$7175
	BCS.S	LAB_1510
	DC.W	$6365
	MOVE.L	D0,D0
Pos_TXT:
	ADDQ.W	#8,29545(A7)
	MOVEQ	#105,D2
	BLE.S	LAB_1511
LAB_1503:
	DC.W	$7320
Packed_TXT:
	DC.W	$0070
	DC.W	$6163
	DC.W	$6b65
	BCC.S	LAB_150A
ERRUnpacked_TXT:
LAB_1505:
	ORI.W	#$7272,D5
	BLE.S	LAB_1514
LAB_1507:
	MOVEA.L	28192(A1),A0
	MOVEQ	#97,D0
	DC.W	$636b
	BCS.S	LAB_1513
LAB_1508:
	MOVEA.L	-(A4),A0
	BSR.S	LAB_1516
	BSR.S	LAB_150C
	DC.W	$7374
	MOVEQ	#101,D1
	DC.W	$616d
	MOVE.L	8257(A5),D0
	DC.W	$626f
	MOVEQ	#116,D1
	BVS.S	LAB_1517
	BEQ.S	LAB_150D
	MOVE.L	D0,-(A0)
Unpacked_TXT:
	SUBQ.W	#2,28769(A6)
LAB_150A:
	DC.W	$636b
	BCS.S	LAB_1518
	MOVE.L	D0,D7
Sampleboost_TXT:
	MOVE.L	-(A0),D5
LAB_150C:
	SUBQ.W	#1,-(A1)
	BLT.S	LAB_151C
	DC.W	$6c65
	DC.W	$626f
	DC.W	$6f73
	MOVEQ	#32,D2
	DC.W	$6861
	DC.W	$7320
	DC.W	$6265
LAB_150D:
	BCS.S	LAB_151E
	DC.W	$2073
	BCS.S	LAB_1520
LAB_150E:
	MOVE.L	D0,D7
SelectModuleDiz2_TXT:
	SUBQ.W	#1,-(A5)
	DC.W	$6c65
	BLS.S	LAB_1523
	MOVEA.L	A7,A0
LAB_1510:
	BHI.S	LAB_1521
	DC.W	$6563
	MOVEQ	#32,D2
	MOVEQ	#111,D2
	MOVEA.L	28259(A1),A0
LAB_1511:
	DC.W	$6c75
	DC.W	$6465
SelectModuleDiz_TXT:
	ORI.W	#$656c,(A3)
	DC.W	$6563
	MOVEQ	#32,D2
	NOT.W	27749(A1)
LAB_1513:
	DC.W	$2074
	BLE.S	LAB_1519
LAB_1514:
	BVS.S	LAB_1524
	BLS.S	LAB_1524
	DC.W	$7564
	DC.W	$6500
ExtractMod_TXT:
	DC.W	$4578
	MOVEQ	#114,D2
	DC.W	$6163
	MOVEQ	#32,D2
LAB_1516:
	SUBQ.W	#1,-(A1)
	BLT.S	LAB_1528
	DC.W	$6c65
	DC.W	$7320
	BLE.S	LAB_1526
	MOVEA.L	A5,A0
LAB_1517:
	BLE.S	LAB_1527
LAB_1518:
	DC.W	$756c
LAB_1519:
	DC.W	$6500
SaveActualBlock_TXT:
	SUBQ.W	#1,-(A1)
	MOVEQ	#101,D3
	MOVEA.L	D2,A0
	DC.W	$6c6f
	DC.W	$636b
LoadActualBlock_TXT:
	DC.W	$004c
	DC.W	$6f61
	BCC.S	LAB_1523
LAB_151C:
	CLR.W	28515(A4)
	DC.W	$6b00
LoadMod_TXT:
	DC.W	$4c6f
	BSR.S	LAB_152C
	MOVEA.L	A5,A0
	BLE.S	MKNUMBPOS_TXT
LAB_151E:
	DC.W	$756c
	DC.W	$6500
SaveMod_TXT:
	SUBQ.W	#1,-(A1)
	MOVEQ	#101,D3
	MOVEA.L	A5,A0
LAB_1520:
	BLE.S	LAB_152E+2
LAB_1521:
	DC.W	$756c
	DC.W	$6500
UnpackXpk_TXT:
	ADDQ.W	#4,(A0)
LAB_1523:
	DC.W	$4b20
	MOVEQ	#97,D0
	DC.W	$636b
	BCS.S	LAB_1530
	MOVE.L	-(A0),D7
	SUBQ.W	#2,28769(A6)
	DC.W	$636b
	BVS.S	LAB_1532
	BEQ.S	LAB_152A
	BSR.S	LAB_1534
	BCC.S	LAB_152B
	DC.W	$6c6f
	BSR.S	LAB_1532
	BVS.S	LAB_1535
LAB_1524:
	DC.W	$6700
XMnomem_TXT:
	MOVE.L	USP,A7
	MOVEQ	#32,D2
	BCS.S	LAB_1538
	DC.W	$6f75
	BEQ.S	LAB_1537
	MOVEA.L	25965(A5),A0
LAB_1526:
	BLE.S	LAB_1539
LAB_1527:
	DC.W	$792e
XMFormat_TXT:
LAB_1528:
	DC.W	$002a
LAB_152A:
	MOVEA.L	(A0)+,A0
	DC.W	$4d20
LAB_152B:
	NOT.W	29293(A7)
	BSR.S	LAB_153C+2
	MOVE.L	-(A0),D6
	MOVE.L	USP,A7
	MOVEQ	#32,D2
	DC.W	$7375
	MOVEQ	#112,D0
	BLE.S	LAB_153E
	MOVEQ	#101,D2
	BCC.S	LAB_1530+2
LAB_152C:
	DC.W	$7965
	MOVEQ	#0,D2
MKNUMBPOS_TXT:
	MOVE.L	10784(A2),D5
	RTS
	BLT.S	LAB_153E
	BCS.S	ReselectSample_TXT
LAB_152E:
	MOVEA.L	26144(A7),A0
	ADDQ.W	#8,29545(A7)
	MOVEQ	#105,D2
	BLE.S	LAB_1541
	DC.W	$733a
MKNOPAT_TXT:
	DC.W	$002a
LAB_1530:
	MOVE.L	8270(A2),D5
	DC.W	$756d
	DC.W	$6265
	MOVEQ	#32,D1
	BLE.S	LAB_1543
	MOVEA.L	(A0),A0
	BSR.S	LAB_1544
	MOVEQ	#101,D2
	MOVEQ	#110,D1
LAB_1532:
	DC.W	$733a
LoadModskip_TXT:
	DC.W	$0048
LAB_1534:
	DC.W	$756e
	BMI.S	LAB_153B
	SUBQ.W	#1,26992(A3)
LAB_1535:
	MOVEQ	#101,D0
	DC.W	$6400
ImportSongContent_TXT:
	DC.W	$496d
LAB_1537:
	MOVEQ	#111,D0
LAB_1538:
	MOVEQ	#116,D1
	MOVEA.L	(A3),A0
	BLE.S	LAB_1546
	BEQ.S	LAB_153E
	DC.W	$436f
	BGT.S	LAB_1549+2
	BCS.S	LAB_1548+2
LAB_1539:
	MOVEQ	#0,D2
LoadActualProject_TXT:
	DC.W	$4c6f
	BSR.S	LAB_1547+2
LAB_153B:
	MOVEA.L	(A0),A0
	MOVEQ	#111,D1
	DC.W	$6a65
	BLS.S	LAB_154B
Exporttxt:
LAB_153C:
	ORI.W	#$7870,D5
	BLE.S	LAB_154C
	MOVEQ	#32,D2
	SUBQ.W	#1,-(A1)
	BLT.S	LAB_154E
LAB_153E:
	DC.W	$6c65
	MOVEA.L	D1,A0
	DC.W	$7300
LoadNewSample_TXT:
	DC.W	$4c6f
	BSR.S	LAB_154C+2
	MOVEA.L	(A3),A0
	DC.W	$616d
	MOVEQ	#108,D0
	DC.W	$6500
ReselectSample_TXT:
	DC.W	$4368
	BSR.S	LAB_1550+2
	DC.W	$6765
	MOVEA.L	(A3),A0
LAB_1541:
	DC.W	$616d
	MOVEQ	#108,D0
	DC.W	$6500
XPKErrMsg2:
	MOVE.L	USP,A7
LAB_1543:
	MOVEA.L	A5,A0
	DC.W	$656d
	BLE.S	LAB_1553
	DC.W	$7920
	DC.W	$666f
	MOVEQ	#32,D1
	DC.W	$756e
	MOVEQ	#97,D0
	DC.W	$636b
LAB_1544:
	BVS.S	LAB_1555
	BEQ.S	LAB_1549+2
	DC.W	$6461
	MOVEQ	#97,D2
	MOVE.L	D0,D7
KnackDeep_TXT:
	DC.W	$416e
	MOVEQ	#105,D2
	DC.W	$436c
	DC.W	$6963
	BMI.S	LAB_154B
	DC.W	$4c65
	DC.W	$6e67
LAB_1546:
	MOVEQ	#104,D2
LAB_1547:
	MOVE.L	12334(A0),D0
LAB_1548:
	MOVE.L	48(A2,D3.W),D7
Declicktxt:
LAB_1549:
	MOVE.W	82(A1),D0
	DC.W	$6561
	BGE.S	Stop2_TXT
	DC.W	$696d
	BCS.S	LAB_1550
	NEG.W	-(A5)
	DC.W	$436c
	DC.W	$6963
LAB_154B:
	DC.W	$6b69
	DC.W	$6e67
LAB_154C:
	MOVE.L	13358(A0),D0
LAB_154E:
	MOVE.L	EXT_0014.W,D7
	MOVE.L	D0,-(A4)
EditJump_TXT:
	DC.W	$4a75
	BLT.S	LAB_1559
	BCS.S	LAB_155A
	MOVE.L	19785(A0),D0
	DC.W	$4e20
LAB_1550:
	MOVE.W	8269(A4),-(A0)
	DC.W	$4158
	DC.W	$2036
EmptyProject_TXT:
	MOVE.W	85(A1),D2
	BGT.S	LAB_155D+2
	DC.W	$616d
	BCS.S	LAB_155C
	MOVEA.L	(A0),A0
	MOVEQ	#111,D1
	DC.W	$6a65
LAB_1553:
	BLS.S	LAB_1560
ERRNoBufferMem_TXT:
	ORI.W	#$7272,D5
	BLE.S	LAB_1561
	MOVE.W	-(A0),D5
LAB_1555:
	TRAP	#15
	MOVEA.L	D2,A0
	SUBQ.W	#2,D6
	NOT.W	D5
	ADDQ.B	#1,-(A0)
	DC.W	$4d45
	DC.W	$4d4f
	ADDQ.W	#1,(A1)+
	MOVEA.L	D6,A0
	DC.W	$4f55
	TRAP	#4
EventVol_TXT:
	ORI.W	#$6f6c,(A6)
	DC.W	$756d
	DC.W	$6500
Stop_TXT:
	ADDQ.W	#8,24953(A4)
	BCS.S	LAB_1565
	DC.W	$2073
	MOVEQ	#111,D2
	MOVEQ	#112,D0
	BCS.S	LAB_1563
	MOVE.L	D0,D7
Stop2_TXT:
	ADDQ.W	#8,24953(A4)
	BCS.S	LAB_1569
	DC.W	$2073
	MOVEQ	#111,D2
	MOVEQ	#112,D0
	BCS.S	LAB_1567
	MOVE.L	17264(A0),D0
	DC.W	$7520
	MOVEQ	#111,D2
	BLE.S	LAB_155E+2
LAB_1559:
	DC.W	$736c
	DC.W	$6f77
PlaySo_TXT:
LAB_155A:
	MOVE.L	80(A6),-(A4)
	DC.W	$6c61
	DC.W	$7969
	DC.W	$6e67
LAB_155C:
	MOVEA.L	101(A4,D6.L),A0
LAB_155D:
	MOVEA.L	111(A7,D6.L),A0
	DC.W	$6c65
	MOVEA.L	(A3),A0
	BLE.S	LAB_156E
	BEQ.S	LAB_1563+2
PlaySe_TXT:
LAB_155E:
	ORI.W	#$6c61,(A0)
	DC.W	$7969
	DC.W	$6e67
LAB_1560:
	MOVEA.L	-(A6),A0
	MOVEQ	#111,D1
LAB_1561:
	BLT.S	LAB_1563+2
	DC.W	$6163
	MOVEQ	#117,D2
	BSR.S	LAB_1571
	MOVEA.L	(A3),A0
	DC.W	$6571
	DC.W	$7565
	DC.W	$6e63
	BCS.S	LAB_156B
PlayPo_TXT:
	ORI.W	#$6c61,(A0)
	DC.W	$7969
	DC.W	$6e67
	MOVEA.L	-(A6),A0
	MOVEQ	#111,D1
	BLT.S	LAB_156B
LAB_1563:
	ADDQ.W	#8,29545(A7)
	MOVEQ	#105,D2
LAB_1565:
	BLE.S	LAB_1575
LAB_1566:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	DC.W	$2074
	BLE.S	LAB_156C
LAB_1567:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_1568:
	MOVE.L	-(A0),D4
LAB_1569:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),-(A4)
PlayPa_TXT:
	ORI.W	#$6c61,(A0)
	DC.W	$7969
LAB_156B:
	DC.W	$6e67
	MOVEA.L	-(A1),A0
	BLS.S	LAB_1578
	DC.W	$7561
	BGE.S	LAB_1570
	ADDQ.W	#8,-(A1)
	MOVEQ	#116,D2
	BCS.S	LAB_157B
LAB_156C:
	BGT.S	LAB_1573
SelectBuffer_TXT:
	ORI.W	#$7566,D2
	DC.W	$6665
	MOVEQ	#32,D1
	RTS
	BLT.S	LAB_1579+2
	BCS.S	LAB_157C
LAB_156E:
	MOVE.L	12846(A0),D0
	DC.W	$2e31
DSPLength_TXT:
	MOVE.W	68(A1),D3
LAB_1570:
	SUBQ.W	#1,(A0)
	MOVEA.L	A4,A0
	BCS.S	LAB_157F
	BCS.S	LAB_157E
	MOVE.L	-(A0),D0
LAB_1571:
	DC.W	$2830
	MOVE.L	14377(A6),D7
SetSmoothLen_TXT:
	ORI.W	#$6d6f,(A3)
	BLE.S	LAB_1580+2
LAB_1573:
	DC.W	$6865
	BGT.S	LAB_1576
	NEG.W	-(A5)
	MOVEQ	#116,D0
	BVC.S	LAB_1577+2
	MOVE.L	12334(A0),D0
	DC.W	$2e36
TryWbScr_CTXT:
	MOVE.W	83(A1),D2
	BLS.S	LAB_1584
LAB_1575:
	DC.W	$6565
	DC.W	$6e4d
	BLE.S	LAB_1583
	BCS.S	Quit_CTXT
	DC.W	$4361
	DC.W	$6e63
	BCS.S	LAB_1585
LAB_1576:
	DC.W	$6c65
	BCC.S	LAB_157D
LAB_1577:
	ORI.W	#$6574,(A2)
	MOVEQ	#121,D1
	MOVEQ	#87,D6
	BLE.S	LAB_1589
	BMI.S	LAB_1586
	BCS.S	LAB_1589
	BLS.S	LAB_1588
	MOVEQ	#81,D6
LAB_1578:
	DC.W	$7569
	MOVEQ	#0,D2
Quit_CTXT:
LAB_1579:
	ADDQ.W	#2,25888(A0)
LAB_157B:
	DC.W	$4163
	MOVEQ	#117,D2
	BSR.S	LAB_158C
	MOVEA.L	(A0),A0
	MOVEQ	#111,D1
	DC.W	$6a65
	BLS.S	LAB_158E
	DC.W	$2077
LAB_157C:
	BVS.S	CustomPatternN_TXT
	BGE.S	LAB_1582
LAB_157D:
	DC.W	$6265
	MOVEA.L	28531(A4),A0
	MOVEQ	#46,D2
LAB_157E:
	ORI.W	#$7569,(A1)
	MOVEQ	#124,D2
	SUBQ.W	#1,-(A1)
LAB_157F:
	MOVEQ	#101,D3
	MOVEA.L	D1,A0
	DC.W	$737c
	DC.W	$4361
	DC.W	$6e63
	BCS.S	LAB_1590
Kill_CTXT:
LAB_1580:
	ORI.W	#$6865,(A4)
LAB_1582:
	MOVEA.L	D1,A0
	BLS.S	LAB_1594
	DC.W	$7561
	BGE.S	LAB_1587
	DC.W	$5072
LAB_1583:
	BLE.S	LAB_1593
	DC.W	$6563
	MOVEQ	#32,D2
	DC.W	$7769
LAB_1584:
	BGE.S	LAB_1596
	MOVEA.L	-(A2),A0
	BCS.S	LAB_158B
	DC.W	$6c6f
LAB_1585:
	DC.W	$7374
	MOVE.L	D0,D7
	MOVE.L	A5,USP
LAB_1586:
	DC.W	$777c
	SUBQ.W	#1,-(A1)
	MOVEQ	#101,D3
	MOVEA.L	D1,A0
LAB_1587:
	DC.W	$737c
LAB_1588:
	DC.W	$4361
	DC.W	$6e63
LAB_1589:
	BCS.S	LAB_159C
CustomPatternL_TXT:
	ORI.W	#$6174,(A0)
	MOVEQ	#101,D2
	MOVEQ	#110,D1
LAB_158B:
	MOVEA.L	A6,A0
	DC.W	$756d
	DC.W	$6265
LAB_158C:
	MOVEQ	#32,D1
	DC.W	$2831
	MOVE.L	12592(A6),D7
	DC.W	$3234
	MOVE.L	D0,-(A4)
CustomPatternN_TXT:
	ADDQ.W	#8,-(A1)
	MOVEQ	#116,D2
LAB_158E:
	BCS.S	LAB_159F
	BGT.S	LAB_1592
	DC.W	$4c65
	DC.W	$6e67
	MOVEQ	#104,D2
	MOVE.L	12590(A0),D0
	MOVE.L	50(A1,D3.W),D7
MacroDir_TXT:
	MOVE.W	77(A1),D2
	DC.W	$6163
	MOVEQ	#111,D1
MacroLoad2_TXT:
LAB_1590:
	DC.W	$004c
	DC.W	$6f61
	BCC.S	LAB_1598
	BSR.S	LAB_15A2
	BCC.S	LAB_1599
LAB_1592:
	DC.W	$5275
	BGT.S	LAB_159B
LAB_1593:
	DC.W	$4d61
LAB_1594:
	BLS.S	LAB_15A6
	DC.W	$6f00
MacroLoad_TXT:
	DC.W	$4c6f
	BSR.S	LAB_15A5
LAB_1596:
	MOVEA.L	A5,A0
	DC.W	$6163
	MOVEQ	#111,D1
MacroSaveAs_TXT:
	ORI.W	#$6176,(A3)
	BCS.S	LAB_159D
	DC.W	$4d61
LAB_1598:
	BLS.S	LAB_15AC
	BLE.S	DizCleared_TXT
LAB_1599:
	DC.W	$4173
NoMacroFile_TXT:
	DC.W	$002a
LAB_159B:
	MOVEA.L	D5,A0
	MOVEQ	#114,D1
	BLE.S	LAB_15AF
LAB_159C:
	MOVE.W	-(A0),D5
	DC.W	$496c
	DC.W	$6c65
	DC.W	$6761
	BGE.S	LAB_15A0
	NOT.W	27749(A1)
	MOVEA.L	D6,A0
LAB_159D:
	BLE.S	LAB_15B2
	DC.W	$6d61
	MOVEQ	#0,D2
DizCleared_TXT:
	MOVE.L	-(A0),D5
	NEG.W	31331(A1)
	MOVEQ	#105,D1
	MOVEQ	#116,D0
	DC.W	$696f
	BGT.S	LAB_15A4
	BLS.S	LAB_15B5
LAB_159F:
	DC.W	$6561
	MOVEQ	#101,D1
LAB_15A0:
	BCC.S	LAB_15A9
TimeDur:
	ORI.W	#$696d,(A4)
	BCS.S	LAB_15A6+2
	BCS.S	LAB_15B8
	BSR.S	LAB_15BA
	DC.W	$7365
	BCC.S	LAB_15A9
	DC.W	$736f
	MOVEA.L	-(A6),A0
	BSR.S	DSPChor_TXT
	MOVE.W	-(A0),D5
Audio0:
LAB_15A2:
	DC.W	$004f
LAB_15A4:
	MOVEQ	#101,D3
	MOVEQ	#115,D1
LAB_15A5:
	DC.W	$616d
	MOVEQ	#108,D0
	BCS.S	LAB_15AD
	DC.W	$3134
LAB_15A6:
	CLR.W	29696(A1)
Audio2:
	DC.W	$5374
	BCS.S	LAB_15C1
	DC.W	$656f
LAB_15A9:
	MOVE.L	EXT_0032,D0
Audio3:
	DC.W	$4d6f
	DC.W	$6e6f
Audio4:
	DC.W	$004d
LAB_15AC:
	BLE.S	LAB_15C3
	BLE.S	LAB_15B4
	DC.W	$5375
	MOVEQ	#114,D1
Audio5:
LAB_15AD:
	ORI.W	#$6967,(A2)
LAB_15AF:
	BVC.S	LAB_15C8
Audio6:
	DC.W	$004c
	BCS.S	LAB_15C5
	MOVEQ	#0,D2
Audio7:
	DC.W	$5374
	BCS.S	LAB_15C9
	DC.W	$656f
	DC.W	$2031
	MOVEA.W	D2,A2
LAB_15B2:
	BVS.S	LAB_15CB
Audio8:
	DC.W	$004f
	MOVEQ	#101,D3
LAB_15B4:
	MOVEQ	#115,D1
	DC.W	$616d
	MOVEQ	#108,D0
	BCS.S	DSPChor_TXT
LAB_15B5:
	MOVE.W	D2,26996(A4)
Audio9:
	ORI.W	#$7874,D5
	BCS.S	LAB_15CD
Oversample_TXT:
	BGT.W	LAB_16D4+2
LAB_15B8:
	DC.W	$4f53
DSP_TXT:
	DC.W	$0020
	MOVEA.L	D4,A0
LAB_15BA:
	DC.W	$7370
	MOVE.W	D0,D5
DSPDelay_TXT:
LAB_15BB:
	MOVEA.L	D6,A3
	NEG.W	-(A5)
	DC.W	$6c61
	DC.W	$7900
DSPChor_TXT:
	MOVEA.L	D3,A3
	DC.W	$686f
	MOVEQ	#117,D1
	DC.W	$7300
DSPEcho_TXT:
	NOT.W	D5
	BLS.S	LAB_15CF
	DC.W	$6f00
DSPCrossEcho_TXT:
	NOT.W	D3
	MOVEQ	#69,D1
	BLS.S	LAB_15D1
	DC.W	$6f00
DSPCrossEcho2_TXT:
	NOT.W	D3
LAB_15C1:
	MOVEQ	#69,D1
	BLS.S	LAB_15D2
	BLE.S	LAB_15CC
DSPCenterEcho_TXT:
	ORI.W	#$4365,D6
	BGT.S	LAB_15D4
LAB_15C3:
	DC.W	$4563
	DC.W	$686f
DSPunknown_TXT:
	DC.W	$003f
	DC.W	$3f3f
MACROrecord_TXT:
LAB_15C5:
	DC.W	$0020
	DC.W	$4d52
	DC.W	$4543
Editrecord_TXT:
	DC.W	$0020
	MOVEA.L	(A2),A0
LAB_15C8:
	DC.W	$6563
	BLE.S	LAB_15D5
	DC.W	$6469
	DC.W	$6e67
MenuDef_TXT:
LAB_15C9:
	DC.W	$003f
	MOVE.L	D0,D0
	DC.W	$4162
	DC.W	$6f75
	MOVEQ	#32,D2
LAB_15CB:
	DC.W	$5379
	BLT.S	LAB_15D6
	DC.W	$686f
	DC.W	$6e69
LAB_15CC:
	BCS.S	LAB_15CE+2
	MOVE.W	D1,83(A7)
	BLE.S	LAB_15D7
	BEQ.S	LAB_15D0
	DC.W	$496e
LAB_15CD:
	DC.W	$666f
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A1),D0
	DC.W	$4100
	ORI.W	#$7973,(A3)
	MOVEQ	#101,D2
	BLT.S	LAB_15D3
LAB_15CE:
	ORI.W	#$6c61,(A0)
LAB_15CF:
	DC.W	$7965
	MOVEQ	#32,D1
	MOVE.L	-(A0),D0
LAB_15D0:
	MOVE.L	-(A0),D0
LAB_15D1:
	EOR.B	D5,D0
	SUBQ.W	#1,28263(A7)
	MOVE.L	-(A0),D0
LAB_15D2:
	MOVE.L	-(A0),D0
	ORI.W	#$6571,(A3)
	DC.W	$7565
	DC.W	$6e63
	DC.W	$6500
LAB_15D3:
	ADDQ.W	#8,29545(A7)
	MOVEQ	#105,D2
	BLE.S	LAB_15DB
LAB_15D4:
	ORI.W	#$6174,(A0)
	MOVEQ	#101,D2
	MOVEQ	#110,D1
	MOVE.L	D0,D0
	DC.W	$5472
	DC.W	$6163
	BMI.S	LAB_15D8
	MOVE.L	-(A0),D0
	DC.W	$002d
LAB_15D5:
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11520(A5),-(A6)
	DC.W	$5374
	BLE.S	LAB_15DD
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_15D6:
	DC.W	$0000
	DC.W	$4175
	DC.W	$6469
	BLE.S	LAB_15D9
	DC.W	$4d6f
LAB_15D7:
	DC.W	$6465
LAB_15D8:
	DC.W	$20bb
	DC.W	$004f
	MOVEQ	#101,D3
	MOVEQ	#115,D1
	DC.W	$616d
	MOVEQ	#108,D0
	BCS.S	LAB_15DA
	MOVE.W	D2,21504(A4)
	DC.W	$5374
	BCS.S	LAB_15DF
	DC.W	$656f
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_15D9:
	DC.W	$2039
	CLR.W	(A4)
	DC.W	$004f
	MOVEQ	#101,D3
	MOVEQ	#115,D1
	DC.W	$616d
	MOVEQ	#108,D0
	BCS.S	LAB_15DC
	MOVE.L	-(A0),D0
LAB_15DA:
	MOVE.L	D0,D0
	DC.W	$5374
	BCS.S	LAB_15E0+2
	DC.W	$656f
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_15DB:
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
LAB_15DC:
	MOVE.L	D0,-(A6)
	DC.W	$4d6f
	DC.W	$6e6f
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	DC.W	$004d
	BLE.S	LAB_15E2
LAB_15DD:
	BLE.S	LAB_15DE
	MOVEA.L	(A3),A0
	DC.W	$7572
	MOVEQ	#111,D1
	DC.W	$756e
	DC.W	$6400
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	82(A5),-(A6)
	DC.W	$6967
	BVC.S	LAB_15E5
	MOVEA.L	D3,A0
LAB_15DE:
	DC.W	$6861
	BGT.S	LAB_15E5
	BCS.S	LAB_15E5
LAB_15DF:
	MOVE.L	D0,D0
	DC.W	$4c65
	BNE.S	LAB_15E6
	MOVE.L	-(A0),D0
	DC.W	$4368
	BSR.S	LAB_15E6
	DC.W	$6e65
	BGE.S	LAB_15E1+2
	DC.W	$0000
	NEG.W	32(A3,D7.W)
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_15E0:
	MOVE.L	LAB_15E4(PC,D0.W),(A0)
	DC.W	$6561
	BLS.S	LAB_15E9
	BVS.S	LAB_15EA
	BSR.S	LAB_15EA
	BCS.S	LAB_15E3
	MOVEA.L	-(A4),A0
	DC.W	$4100
LAB_15E1:
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	69(A5),-(A6)
	BLS.S	LAB_15EB
	BLE.S	LAB_15E4
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_15E2:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_15E3:
	MOVE.L	D0,D0
	DC.W	$4372
	DC.W	$6f73
	DC.W	$7320
	DC.W	$4563
	DC.W	$686f
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$726f,D3
	DC.W	$7373
	MOVEA.L	D5,A0
LAB_15E4:
	BLS.S	LAB_15EC
	BLE.S	LAB_15E7
	MOVE.L	0(A2,D2.W),D0
	DC.W	$4365
LAB_15E5:
	BGT.S	LAB_15EF
	BCS.S	LAB_15EF
	MOVEA.L	D5,A0
	BLS.S	LAB_15EE
	BLE.S	LAB_15E8+2
	MOVE.L	-(A0),D0
	DC.W	$004c
LAB_15E6:
	ADDQ.B	#8,-(A0)
	NOT.W	27764(A1)
	BCS.S	LAB_15F0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_15E7:
	MOVE.L	D0,D0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
LAB_15E8:
	MOVE.L	68(A5),-(A6)
LAB_15E9:
	BCS.S	LAB_15F1+2
	DC.W	$6179
LAB_15EA:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	DC.W	$4372
LAB_15EB:
	DC.W	$6f73
	DC.W	$7320
	NEG.W	-(A5)
	DC.W	$6c61
	DC.W	$7920
	MOVE.L	-(A0),D0
	DC.W	$0048
	BSR.S	LAB_15F2
	BGE.S	LAB_15ED
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	DC.W	$4372
	DC.W	$6f73
	DC.W	$7320
	DC.W	$4861
LAB_15EC:
	BGE.S	LAB_15F4
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	DC.W	$004c
	ADDQ.B	#8,-(A0)
	NOT.W	27764(A1)
LAB_15ED:
	BCS.S	LAB_15F7
LAB_15EE:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
LAB_15EF:
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11520(A5),-(A6)
	DC.W	$5175
	BVS.S	LAB_15FA
LAB_15F0:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	DC.W	$7141
	DC.W	$0000
	NOT.W	27749(A1)
	MOVE.L	D0,D0
LAB_15F1:
	SUBQ.W	#1,28263(A7)
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	LAB_15F8(PC,D0.W),(A0)
	DC.W	$6f61
	BCC.S	LAB_15F3
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	DC.W	$6c41
	ORI.W	#$6176,(A3)
	BCS.S	LAB_15F5
	DC.W	$6173
	MOVE.L	-(A0),D0
LAB_15F2:
	DC.W	$7341
	ORI.W	#$6176,(A3)
	BCS.S	LAB_15F6
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	DC.W	$0000
LAB_15F3:
	DC.W	$4d6f
	DC.W	$6475
	DC.W	$6c65
LAB_15F4:
	MOVE.L	-(A0),D0
	MOVE.L	LAB_15FC(PC,D0.W),(A0)
LAB_15F5:
	DC.W	$6f61
	BCC.S	LAB_15F9
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_15F6:
	DC.W	$6d41
LAB_15F7:
	ORI.W	#$6176,(A3)
	BCS.S	LAB_15FB
	DC.W	$6173
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_15F8:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$697a,D4
	BLS.S	LAB_15FD
LAB_15F9:
	BVS.S	LAB_15FD
	MOVEQ	#32,D2
LAB_15FA:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$7874,D5
	MOVEQ	#97,D1
LAB_15FB:
	BLS.S	LAB_15FE
	MOVEA.L	(A3),A0
	DC.W	$616d
	MOVEQ	#108,D0
	DC.W	$6573
	ORI.W	#$7874,D5
	MOVEQ	#97,D1
	BLS.S	LAB_1600
	MOVE.L	EXT_0018.W,D0
LAB_15FC:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$7874,D5
	MOVEQ	#97,D1
	BLS.S	LAB_1602+2
	MOVEA.L	(A1),A0
	DC.W	$7561
	DC.W	$6c69
	MOVEQ	#121,D2
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	73(A5),-(A6)
	DC.W	$6e63
	DC.W	$6c75
	DC.W	$6465
	MOVEA.L	(A0),A0
	DC.W	$6963
	MOVEQ	#117,D2
	MOVEQ	#101,D1
	DC.W	$0000
	DC.W	$5072
	BCS.S	LAB_1605
	DC.W	$7320
	MOVE.L	-(A0),D0
	MOVE.L	LAB_1604(PC,D0.W),(A0)
	DC.W	$6f61
	BCC.S	LAB_15FF
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_15FD:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$6176,(A3)
	BCS.S	LAB_1601
	DC.W	$6173
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_15FE:
	ORI.W	#$6176,(A3)
	BCS.S	LAB_1603
LAB_15FF:
	NEG.W	-(A5)
	DC.W	$6661
	DC.W	$756c
	MOVEQ	#32,D2
	MOVE.L	-(A0),D0
LAB_1600:
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
LAB_1601:
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
LAB_1602:
	MOVE.L	63(A5),-(A6)
	MOVE.L	-(A0),-(A5)
	MOVE.L	-(A0),D0
LAB_1603:
	DC.W	$4175
	DC.W	$6469
	BLE.S	LAB_1606
LAB_1604:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	DC.W	$003f
	MOVE.L	-(A0),-(A5)
	MOVE.L	-(A0),D0
	ADDQ.W	#3,25701(A1)
	BLE.S	LAB_1607
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_1605:
	DC.W	$003f
	MOVE.L	-(A0),-(A5)
	MOVE.L	-(A0),D0
	SUBQ.W	#1,28263(A7)
	MOVEA.L	(A3),A0
LAB_1606:
	BCS.S	LAB_160B
	DC.W	$7570
	DC.W	$0000
	ADDQ.W	#8,-(A1)
	DC.W	$636b
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_1607:
	EOR.B	D5,D0
MT_Flag9:
	MOVE.W	-(A0),-(A7)
	MOVE.L	-(A0),D0
	MOVEA.L	(A3),A0
	BLE.S	LAB_160C
	BEQ.S	LAB_160A
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
MT_Flag10:
	DC.W	$003f
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	SUBQ.W	#1,-(A1)
	BLT.S	LAB_160E
	DC.W	$6c65
	DC.W	$7320
	MOVE.L	D0,D0
	DC.W	$0000
	DC.W	$4564
	BVS.S	LAB_1610
	MOVE.L	D0,D0
	SUBQ.W	#1,-(A5)
	DC.W	$7175
LAB_160A:
	BCS.S	LAB_1611
	DC.W	$6365
	DC.W	$20bb
	ORI.W	#$7574,D3
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$6f70,D3
	DC.W	$7920
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$6173,(A0)
	MOVEQ	#101,D2
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	DC.W	$0000
	ADDQ.W	#8,29556(A7)
	BVS.S	LAB_1613
	DC.W	$696f
	BGT.S	LAB_160D
	EOR.B	D5,D0
	DC.W	$4375
	MOVEQ	#32,D2
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_160B:
	MOVE.L	D0,D0
	DC.W	$436f
	MOVEQ	#121,D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	ADDQ.W	#8,-(A1)
	DC.W	$7374
	BCS.S	LAB_160F
LAB_160C:
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
LAB_160D:
	ORI.W	#$6174,(A0)
	MOVEQ	#101,D2
	MOVEQ	#110,D1
	MOVE.L	-(A0),D0
	EOR.B	D5,D0
	DC.W	$4375
LAB_160E:
	MOVEQ	#32,D2
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	DC.W	$436f
	MOVEQ	#121,D0
	MOVE.L	-(A0),D0
LAB_160F:
	MOVE.L	-(A0),D0
LAB_1610:
	MOVE.L	D0,D0
LAB_1611:
	ADDQ.W	#8,-(A1)
	DC.W	$7374
	BCS.S	LAB_1612
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	D0,-(A6)
	NEG.W	76(A5,D7.W)
	BCS.S	LAB_1615
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	SUBQ.W	#1,29289(A0)
	DC.W	$6e6b
	MOVE.L	-(A0),D0
LAB_1612:
	MOVE.L	D0,D0
	DC.W	$4578
	MOVEQ	#97,D0
	BGT.S	LAB_1617
	MOVE.L	-(A0),D0
LAB_1613:
	MOVE.L	D0,D0
	NEG.W	108(A5,D7.W)
	DC.W	$6963
	BSR.S	LAB_1618
	BCS.W	LAB_1616+2
	MOVEQ	#97,D1
	DC.W	$636b
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	EOR.B	D5,D0
	DC.W	$4375
	MOVEQ	#32,D2
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	DC.W	$436f
	MOVEQ	#121,D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	ADDQ.W	#8,-(A1)
	DC.W	$7374
	BCS.S	LAB_1614
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	D0,-(A6)
	DC.W	$4d69
	MOVEQ	#114,D1
	BLE.S	LAB_161B
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	DC.W	$5377
	BSR.S	LAB_161C
	MOVEA.L	D2,A0
	DC.W	$7566
LAB_1614:
	MOVE.L	D0,D0
	ADDQ.W	#1,29728(A7)
LAB_1615:
	SUBQ.W	#2,32(A0,D2.W)
	MOVE.L	D0,D0
LAB_1616:
	ADDQ.W	#1,29728(A7)
LAB_1617:
	NEG.W	30574(A7)
	MOVE.L	D0,D0
	ORI.W	#$6c6f,D2
	DC.W	$636b
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	EOR.B	D5,D0
	DC.W	$4375
	MOVEQ	#32,D2
	MOVE.L	-(A0),D0
	MOVEA.L	EXT_0017.W,A0
LAB_1618:
	DC.W	$436f
	MOVEQ	#121,D0
	MOVE.L	-(A0),D0
	MOVEA.L	-(A3),A0
	DC.W	$4100
	ADDQ.W	#8,-(A1)
	DC.W	$7374
	BCS.S	LAB_1619
	DC.W	$2076
	DC.W	$4100
	DC.W	$4164
	BCC.S	LAB_161A
	MOVE.L	-(A0),D0
	MOVEA.L	-(A2),A0
	DC.W	$4100
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	D0,-(A6)
	DC.W	$4578
	MOVEQ	#97,D0
	BGT.S	LAB_161F+2
	MOVE.L	-(A0),D0
LAB_1619:
	MOVE.L	D0,D0
	DC.W	$436c
	DC.W	$6561
	MOVEQ	#32,D1
LAB_161A:
	MOVE.L	-(A0),D0
LAB_161B:
	MOVE.L	D0,D0
	DC.W	$5377
	BSR.S	LAB_1620
LAB_161C:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	DC.W	$004e
	BLE.S	LAB_1621
	BCS.S	LAB_161D
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	EOR.B	D5,D0
	DC.W	$4375
	MOVEQ	#32,D2
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	DC.W	$436f
	MOVEQ	#121,D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	ADDQ.W	#8,-(A1)
	DC.W	$7374
	BCS.S	LAB_161E
LAB_161D:
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	D0,-(A6)
	DC.W	$496e
	DC.W	$7365
	MOVEQ	#116,D1
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	NEG.W	-(A5)
	DC.W	$6c65
	MOVEQ	#101,D2
	MOVE.L	-(A0),D0
LAB_161E:
	MOVE.L	D0,D0
	DC.W	$002d
LAB_161F:
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	D0,-(A6)
	DC.W	$4d61
	BLS.S	LAB_1625
	BLE.S	LAB_1622
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	EOR.B	D5,D0
	ADDQ.W	#1,-(A5)
	DC.W	$636f
	MOVEQ	#100,D1
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_1620:
	ORI.W	#$6550,(A2)
	DC.W	$6c61
	DC.W	$7920
	DC.W	$2072
	DC.W	$4100
	DC.W	$4c6f
LAB_1621:
	BSR.S	LAB_1626+2
LAB_1622:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	DC.W	$004c
	DC.W	$6f61
	BCC.S	LAB_1623
	MOVE.L	-(A0),D3
	DC.W	$5275
	DC.W	$6e00
	SUBQ.W	#1,-(A1)
	MOVEQ	#101,D3
	MOVEA.L	D1,A0
	DC.W	$7320
	MOVE.L	-(A0),D0
	DC.W	$0000
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	85(A5),-(A6)
	BGT.S	LAB_1627
LAB_1623:
	BLE.S	LAB_1624
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	DC.W	$7541
	DC.W	$0000
	DC.W	$4d6f
	MOVEQ	#101,D3
	MOVE.L	D0,D0
	SUBQ.W	#1,-(A5)
	DC.W	$7175
	BCS.S	LAB_162A
	DC.W	$6365
	MOVE.L	LAB_1628(PC,D0.W),(A0)
	MOVEQ	#101,D1
	MOVEQ	#105,D3
	DC.W	$6f75
LAB_1624:
	DC.W	$7300
LAB_1625:
	MOVE.L	A5,USP
	MOVEQ	#116,D4
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11520(A5),-(A6)
LAB_1626:
	NOT.W	29299(A1)
	MOVEQ	#32,D2
	MOVE.L	-(A0),D0
	DC.W	$004c
	DC.W	$4153
	ADDQ.B	#2,-(A0)
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	ORI.W	#$6f73,(A0)
	BVS.S	LAB_162C
	DC.W	$696f
	BGT.S	LAB_1629
	EOR.B	D5,D0
	DC.W	$5072
	BCS.S	LAB_162D
	DC.W	$696f
	DC.W	$7573
	DC.W	$004e
	BCS.S	LAB_162E
	MOVEQ	#32,D2
	MOVE.L	-(A0),D0
LAB_1627:
	MOVE.L	D0,D0
	MOVE.L	11565(A5),-(A6)
LAB_1628:
	MOVE.L	11565(A5),-(A6)
	ORI.W	#$6972,D6
LAB_1629:
	DC.W	$7374
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	DC.W	$4c61
	DC.W	$7374
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	DC.W	$0000
	ADDQ.W	#8,-(A1)
LAB_162A:
	MOVEQ	#116,D2
	BCS.S	LAB_1630
	BGT.S	LAB_162B+2
	MOVE.L	LAB_162F+2(PC,D0.W),(A0)
	MOVEQ	#101,D1
	MOVEQ	#105,D3
	DC.W	$6f75
	DC.W	$7300
	MOVE.L	A5,USP
	MOVEQ	#116,D4
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11520(A5),-(A6)
LAB_162B:
	NOT.W	29299(A1)
	MOVEQ	#32,D2
	MOVE.L	-(A0),D0
	DC.W	$004c
	DC.W	$6173
	MOVEQ	#32,D2
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	ORI.W	#$7273,D3
	MOVEQ	#32,D1
	MOVE.L	-(A0),D0
LAB_162C:
	MOVE.L	-(A0),D0
	EOR.B	D5,D0
	ADDQ.W	#2,28704(A7)
	DC.W	$4c65
	BNE.S	LAB_1634
LAB_162D:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$6f74,D2
	MOVEQ	#111,D2
LAB_162E:
	BLT.S	LAB_1630
LAB_162F:
	ADDQ.W	#1,26472(A1)
	MOVEQ	#0,D2
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	ORI.W	#$6f70,(A4)
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
LAB_1630:
	CLR.W	29812(A7)
	DC.W	$6f6d
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.B	#$53,D0
	DC.W	$616d
	MOVEQ	#108,D0
	BCS.S	LAB_1631
	DC.W	$004c
	DC.W	$6f61
	BCC.S	LAB_1632
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$616e,D2
	BMI.S	LAB_1633
	MOVE.L	-(A0),D0
	MOVE.L	LAB_1636(PC,D0.W),(A0)
	DC.W	$6f61
	BCC.S	LAB_1635
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	SUBQ.W	#1,-(A1)
LAB_1631:
	MOVEQ	#101,D3
	MOVEA.L	-(A1),A0
	DC.W	$7320
LAB_1632:
	DC.W	$0000
	ADDQ.W	#1,-(A5)
	DC.W	$6d6f
	MOVEQ	#101,D3
	MOVE.L	-(A0),D0
LAB_1633:
	MOVE.L	D0,D0
LAB_1634:
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
LAB_1635:
	MOVE.L	D0,-(A6)
	ADDQ.W	#3,29268(A1)
	DC.W	$7561
	BGE.S	LAB_1637
	EOR.B	D5,D0
	DC.W	$4d69
	MOVEQ	#32,D4
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$7565,(A1)
	DC.W	$7565
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
LAB_1636:
	ADDQ.W	#1,-(A5)
	DC.W	$6d69
LAB_1637:
	MOVEQ	#32,D4
	DC.W	$4163
	MOVEQ	#117,D2
	BSR.S	LAB_163A
	ORI.W	#$7261,(A4)
	DC.W	$6e73
	DC.W	$7761
	MOVEQ	#101,D3
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	ORI.W	#$6543,(A2)
	BSR.S	LAB_163B
	BLS.S	LAB_1638
	DC.W	$416c
	BGE.S	LAB_1639
	MOVE.L	D0,D0
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	ORI.W	#$7570,(A3)
	MOVEQ	#111,D0
	MOVEQ	#116,D1
	DC.W	$20bb
	ORI.W	#$646a,D1
	DC.W	$7573
LAB_1638:
	MOVEQ	#32,D2
	ADDQ.W	#8,-(A1)
LAB_1639:
	MOVEQ	#104,D2
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	ADDQ.W	#1,-(A5)
	DC.W	$4c6f
	BSR.S	LAB_163C
	MOVEA.L	D1,A0
	BGE.S	LAB_163E
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$7870,D5
	BLE.S	LAB_1640
	MOVEQ	#32,D2
	SUBQ.W	#1,-(A1)
	BLT.S	LAB_1641
	DC.W	$6c65
	MOVE.L	D0,D0
	DC.W	$4164
LAB_163A:
	DC.W	$6a75
	DC.W	$7374
	MOVEA.L	(A6),A0
	BLE.S	LAB_1642
	DC.W	$756d
	DC.W	$6573
	ORI.W	#$7265,(A0)
	MOVEQ	#97,D0
	MOVEQ	#101,D1
	MOVEA.L	D3,A0
	NEG.W	D4
	DC.W	$4120
	MOVE.L	D0,D0
	DC.W	$0000
	DC.W	$5072
LAB_163B:
	BCS.S	LAB_1643
	DC.W	$7320
	ORI.W	#$7973,(A3)
	MOVEQ	#101,D2
	BLT.S	LAB_163D
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	DC.W	$20bb
	ORI.W	#$6574,(A3)
	MOVEA.L	(A3),A0
	DC.W	$7973
	MOVEQ	#101,D2
	BLT.S	LAB_163F
	DC.W	$4275
	BNE.S	LAB_1645
	BCS.S	LAB_1647
	ORI.W	#$6574,(A3)
LAB_163C:
	MOVEA.L	D4,A0
LAB_163D:
	DC.W	$7370
	MOVEA.L	D2,A0
	DC.W	$7566
	DC.W	$6665
	MOVEQ	#32,D1
LAB_163E:
	MOVE.L	-(A0),D0
	ORI.W	#$6574,(A3)
	MOVEA.L	(A2),A0
	BCS.S	LAB_1649
LAB_163F:
	DC.W	$6465
	MOVEQ	#32,D1
	DC.W	$4275
LAB_1640:
	BNE.S	LAB_1649
	BCS.S	LAB_164C
LAB_1641:
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
LAB_1642:
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	ORI.W	#$6574,(A3)
	MOVEA.L	A5,A0
	BSR.S	LAB_164F+2
	MOVEA.L	(A0),A0
	MOVEQ	#111,D1
LAB_1643:
	BLS.S	LAB_1645
	ADDQ.W	#3,27680(A7)
	DC.W	$0000
	ADDQ.W	#1,-(A5)
	BSR.S	LAB_1650+2
	MOVEQ	#105,D2
	DC.W	$6d65
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	EOR.B	D5,D0
MT_Flag1:
	MOVE.W	8224(A3),-(A7)
	MOVEA.L	(A0),A0
	DC.W	$6f73
	MOVEA.L	D3,A0
LAB_1645:
	DC.W	$6861
	DC.W	$6e67
	BCS.S	LAB_164A
	MOVE.L	D0,D0
MT_Flag2:
	MOVE.W	-(A0),-(A7)
	MOVE.L	-(A0),D0
	MOVEA.L	(A3),A0
LAB_1647:
	MOVEQ	#111,D1
	BGE.S	LAB_1652+2
	BVS.S	LAB_1653+2
	BEQ.S	LAB_164D
	MOVE.L	-(A0),D0
MT_Flag3:
	DC.W	$003f
	MOVE.L	-(A0),-(A5)
	MOVE.L	-(A0),D0
	DC.W	$5370
	DC.W	$6563
	MOVEQ	#114,D2
LAB_1649:
	DC.W	$756d
LAB_164A:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
MT_Flag4:
	DC.W	$003f
	MOVE.L	-(A0),-(A5)
	MOVE.L	-(A0),D0
	SUBQ.W	#1,-(A3)
LAB_164C:
	BLE.S	LAB_1656
	DC.W	$6573
LAB_164D:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
MT_Flag5:
	DC.W	$003f
	MOVE.L	-(A0),-(A5)
	MOVE.L	-(A0),D0
	DC.W	$496e
	DC.W	$7374
	MOVEQ	#117,D1
	DC.W	$6d65
	BGT.S	LAB_1657
	MOVE.L	-(A0),D0
	DC.W	$002d
LAB_164F:
	MOVE.L	11565(A5),-(A6)
LAB_1650:
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
MT_Flag6:
	DC.W	$003f
	MOVE.L	-(A0),-(A5)
	MOVE.L	-(A0),D0
	NOT.W	29283(A7)
	BCS.S	LAB_1655+2
	DC.W	$5570
	DC.W	$6461
	MOVEQ	#101,D2
	DC.W	$002d
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
LAB_1652:
	MOVE.L	11565(A5),-(A6)
LAB_1653:
	MOVE.L	11565(A5),-(A6)
MT_Flag7:
	DC.W	$003f
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_1655:
	SUBQ.W	#3,28192(A1)
	MOVEQ	#111,D2
	MOVEA.L	D6,A0
	MOVEQ	#111,D1
	BGT.S	LAB_1659+2
	DC.W	$0000
	DC.W	$4d69
	DC.W	$6469
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	EOR.B	D5,D0
	DC.W	$4163
LAB_1656:
	MOVEQ	#105,D2
	MOVEQ	#97,D3
	MOVEQ	#101,D2
	DC.W	$0049
	BGT.S	LAB_165B+2
	DC.W	$7574
	MOVEA.L	D3,A0
	DC.W	$6861
	BGT.S	LAB_165C
	BCS.S	LAB_165C
	DC.W	$0000
	ADDQ.W	#8,-(A1)
	MOVEQ	#116,D2
	DC.W	$4544
LAB_1657:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	DC.W	$20bb
	ORI.W	#$6574,(A3)
	MOVEA.L	A2,A0
	DC.W	$756d
	MOVEQ	#32,D0
	DC.W	$4c65
	DC.W	$6e67
	MOVEQ	#104,D2
	MOVEA.L	16640(A2),A0
	SUBQ.W	#1,-(A5)
	MOVEQ	#32,D2
	DC.W	$4b62
	BCC.S	LAB_1658+2
	DC.W	$5075
	DC.W	$6e63
	BVC.S	LAB_165A
	MOVE.L	-(A0),D0
	MOVEQ	#65,D0
	DC.W	$003f
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	SUBQ.W	#1,28263(A1)
	DC.W	$6c65
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
LAB_1658:
	MOVE.L	11565(A5),-(A6)
LAB_1659:
	MOVE.L	11565(A5),-(A6)
LAB_165A:
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	63(A5),-(A6)
	MOVE.L	-(A0),-(A5)
	MOVE.L	-(A0),D0
LAB_165B:
	ADDQ.W	#8,29795(A1)
	BVC.S	LAB_165D
	MOVE.L	-(A0),D0
LAB_165C:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	MOVE.W	8224(A3),-(A7)
	MOVEA.L	A1,A0
	DC.W	$6e73
	MOVEQ	#114,D2
	DC.W	$756d
	BCS.S	LAB_1660
	MOVEQ	#32,D2
	MOVE.L	-(A0),D0
	DC.W	$003f
	MOVE.L	-(A0),-(A5)
	MOVE.L	-(A0),D0
LAB_165D:
	ADDQ.W	#3,27765(A7)
	DC.W	$6d65
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	DC.W	$004c
	DC.W	$6f61
	BCC.S	LAB_165E
	SUBQ.W	#1,28263(A7)
	MOVE.L	A5,28516(A7)
	MOVE.L	-(A0),D0
	EOR.B	D5,D0
	MOVE.W	-(A0),-(A7)
	MOVE.L	-(A0),D0
	MOVEA.L	A3,A0
	DC.W	$6565
	MOVEQ	#32,D0
	ADDQ.W	#8,-(A1)
	MOVEQ	#116,D2
	BCS.S	LAB_1664
	BGT.S	LAB_165F
	MOVE.L	D0,-(A1)
LAB_165E:
	MOVE.W	-(A0),-(A7)
	MOVE.L	-(A0),D0
	MOVEA.L	D3,A0
	BLE.S	LAB_1665
	MOVEQ	#101,D3
	MOVEQ	#116,D1
	MOVEA.L	(A3),A0
	BLE.S	LAB_1667
	BEQ.S	LAB_1661
	DC.W	$0000
	SUBQ.B	#1,-(A0)
	DC.W	$5072
	BCS.S	LAB_1663
	MOVEQ	#111,D1
	DC.W	$6365
LAB_165F:
	DC.W	$7373
	BLE.S	LAB_1669
	DC.W	$20bb
	ORI.W	#$6574,(A3)
	MOVEA.L	D1,A0
	BGT.S	LAB_166A+2
	DC.W	$6963
	DC.W	$6c69
LAB_1660:
	DC.W	$636b
LAB_1661:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$6574,(A3)
	MOVEA.L	(A3),A0
	DC.W	$616d
	MOVEQ	#108,D0
	BCS.S	LAB_1662
	CLR.W	28531(A7)
	MOVEQ	#32,D2
	MOVE.L	-(A0),D0
	ORI.W	#$6574,(A3)
	MOVEA.L	A7,A0
	MOVEQ	#101,D3
	MOVEQ	#115,D1
	DC.W	$616d
	MOVEQ	#108,D0
	BCS.S	LAB_1666+2
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$6574,(A3)
LAB_1662:
	MOVEA.L	D1,A0
	BGT.S	LAB_166D
	DC.W	$6941
LAB_1663:
	DC.W	$6c69
	DC.W	$6173
LAB_1664:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	DC.W	$002d
LAB_1665:
	MOVE.L	11565(A5),-(A6)
LAB_1666:
	MOVE.L	11565(A5),-(A6)
LAB_1667:
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
MT_Flag8:
	MOVE.L	63(A5),-(A6)
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVEA.L	D6,A0
	BLE.S	LAB_166F
	DC.W	$6365
LAB_1669:
	MOVEA.L	D1,A0
	MOVEA.L	D3,A7
	DC.W	$6c69
	DC.W	$636b
	DC.W	$0000
LAB_166A:
	SUBQ.W	#1,30062(A7)
	BCC.S	LAB_166B+2
	DC.W	$436f
	BGT.S	LAB_1671
	MOVEQ	#111,D1
	BGE.S	LAB_166C
	EOR.B	D5,D0
	SUBQ.W	#1,-(A5)
	MOVEQ	#32,D2
	SUBQ.W	#1,-(A1)
	BLT.S	LAB_1673
	DC.W	$6c65
	MOVEA.L	D4,A0
	BVS.S	LAB_1672
	DC.W	$6600
	SUBQ.W	#1,-(A5)
	MOVEQ	#32,D2
LAB_166B:
	ADDQ.W	#8,29795(A1)
	BVC.S	LAB_166E
	MOVEA.L	D4,A0
	BVS.S	LAB_1674
LAB_166C:
	DC.W	$6600
	SUBQ.W	#1,-(A5)
	MOVEQ	#32,D2
	NEG.W	-(A5)
	DC.W	$436c
	DC.W	$6963
	DC.W	$6b69
	DC.W	$6e67
LAB_166D:
	MOVE.L	D0,D0
	ORI.W	#$7569,D7
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	EOR.B	D5,D0
LAB_166E:
	DC.W	$4348
	DC.W	$4720
	DC.W	$4c6f
	DC.W	$6f6b
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$4847,D3
	MOVEA.L	D7,A0
	BSR.S	LAB_1676
	DC.W	$6765
	MOVEQ	#115,D2
	MOVE.L	-(A0),D0
LAB_166F:
	MOVE.L	D0,D0
MT_Flag11:
	MOVE.W	-(A0),-(A7)
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	NOT.W	-(A1)
	DC.W	$7374
	MOVEA.L	D7,A0
	NOT.W	(A0)+
	ORI.W	#$4847,D3
	MOVEA.L	(A3),A0
	BLS.S	LAB_167A
LAB_1671:
	DC.W	$6565
	DC.W	$6e4d
	BLE.S	LAB_1679
LAB_1672:
	DC.W	$6500
	DC.W	$0000
LAB_1673:
	NOT.W	EXT_000a.W
	DC.W	$004f
	BNE.S	LAB_167B
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
LAB_1674:
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVEA.L	-(A6),A0
	DC.W	$4100
	DC.W	$436f
	DC.W	$6c6f
	MOVEQ	#79,D1
	MOVEQ	#103,D1
	BSR.S	LAB_167D
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.B	#$00,D0
	DC.W	$0000
About_TXT:
	DC.W	$4162
	DC.W	$6f75
	MOVEQ	#32,D2
	DC.W	$5379
	BLT.S	LAB_167E
	DC.W	$686f
	DC.W	$6e69
	BCS.S	LAB_1677
	DC.W	$5072
	BLE.S	LAB_1678
LAB_1676:
	MOVE.W	13156(A6),-(A1)
	DC.W	$0a0a
	MOVEA.L	D3,A4
	MOVE.L	-(A0),-(A4)
	MOVE.W	EXT_0031,-(A0)
	DC.W	$7920
	ADDQ.W	#8,-(A1)
	MOVEQ	#114,D2
	DC.W	$6963
	BMI.S	LAB_167C
	DC.W	$4d65
LAB_1677:
	DC.W	$6e67
	DC.W	$0a0a
LAB_1678:
	MOVE.W	66(A6,D2.W),-(A0)
LAB_1679:
	BVS.S	LAB_1681
	MOVEA.L	(A3),A0
	DC.W	$796d
	MOVEQ	#104,D0
LAB_167A:
	BLE.S	LAB_1682
	DC.W	$6965
	MOVE.L	A2,D7
LAB_167B:
	EORI.W	#$796d,(A3)
	MOVEQ	#104,D0
	BLE.S	LAB_1685
LAB_167C:
	DC.W	$6965
	MOVEA.L	A1,A0
	DC.W	$4949
	MOVEA.L	29472(A1),A0
	BSR.S	LAB_1688
	DC.W	$6169
	DC.W	$6c61
	BHI.S	LAB_1687
	BCS.S	LAB_167F
	BSR.S	LAB_168A
LAB_167D:
	MOVE.W	A2,D5
	DC.W	$0a20
	MOVE.L	-(A0),D0
	ADDQ.W	#1,-(A5)
	BSR.S	LAB_168B
	ADDQ.W	#2,28005(A1)
	MOVEA.L	(A3),A0
	BLE.S	LAB_168C
	MOVEQ	#119,D2
	BSR.S	LAB_168D
LAB_167E:
	BCS.S	LAB_1680
	MOVE.L	-(A0),D0
	MOVEA.L	(A0),A0
	BSR.S	LAB_168E
LAB_167F:
	MOVEQ	#105,D1
	DC.W	$636b
LAB_1680:
	MOVEA.L	A5,A0
	BCS.S	LAB_168F
	BEQ.S	LAB_1683
	MOVEA.L	(A2),A0
	DC.W	$6f73
	BCS.S	LAB_1691
	DC.W	$6665
	BGE.S	LAB_1690
	DC.W	$7765
	BEQ.S	LAB_1684
	MOVE.W	2592(A4),D2
	MOVE.L	-(A0),D0
	DC.W	$4348
	MOVE.L	8246(A5),D0
	MOVE.W	32(A4,D3.L),D0
	PEA	29303(A7)
LAB_1681:
	MOVE.L	-(A0),D6
LAB_1682:
	DC.W	$5377
	BVS.S	LAB_1693
	MOVEQ	#101,D5
	MOVEQ	#108,D1
LAB_1683:
	BSR.S	LAB_1693
LAB_1684:
	BCC.S	LAB_1686
LAB_1685:
	DC.W	$0a20
	MOVE.L	-(A0),D0
	DC.W	$654d
	DC.W	$4149
	DC.W	$4c20
LAB_1686:
	MOVE.W	-(A0),D5
	MOVEQ	#109,D0
	BCS.S	NGWinDef
LAB_1687:
	BEQ.S	LAB_1692
	MOVEQ	#116,D3
LAB_1688:
	MOVEQ	#46,D4
	BLS.S	LAB_1695+2
SymTest_TXT:
	ORI.W	#$796d,(A3)
LAB_168A:
	MOVEQ	#104,D0
LAB_168B:
	BLE.S	LAB_1698
LAB_168C:
	DC.W	$6965
	ORI.W	#$7661,D1
	BVS.S	LAB_1699
	BSR.S	LAB_1697
	DC.W	$6c65
	MOVEA.L	-(A1),A0
	MOVEQ	#32,D2
LAB_168D:
	MOVE.W	-(A0),D5
	ADDQ.W	#1,-(A5)
	BSR.S	LAB_169A
	ADDQ.W	#2,28005(A1)
LAB_168E:
	MOVEA.L	(A3),A0
LAB_168F:
	BLE.S	LAB_169B
LAB_1690:
	MOVEQ	#119,D2
	BSR.S	LAB_169C+2
	BCS.S	LAB_1694
LAB_1691:
	MOVEA.L	(A0),A0
	BSR.S	LAB_169D
	MOVEQ	#105,D1
	DC.W	$636b
	MOVEA.L	A5,A0
	BCS.S	LAB_169E
	BEQ.S	NGWinDef
LAB_1692:
	MOVEA.L	(A2),A0
	DC.W	$6f73
	BCS.S	LAB_16A0
	DC.W	$6665
	BGE.S	LAB_169F
	DC.W	$7765
	BEQ.S	LAB_1695+2
	MOVE.W	8259(A4),D2
	NBCD	13872(A5)
	MOVE.W	EXT_000d.W,D2
LAB_1693:
	BLE.S	LAB_16A1
	DC.W	$772c
LAB_1694:
	MOVEA.L	(A3),A0
	DC.W	$7769
	MOVEQ	#122,D2
	BCS.S	LAB_16A2
	DC.W	$6c61
	BGT.S	LAB_16A1
	MOVE.L	D0,D0
NGWinDef:
LAB_1695:
	MOVE.L	D3,21586(A5)
	DC.W	$4c2c
	DC.W	$5379
	DC.W	$7374
	DC.W	$656d
	MOVEA.L	D3,A0
LAB_1697:
	BLE.S	LAB_16A3
LAB_1698:
	MOVEQ	#114,D2
	BLE.S	LAB_16A4
	DC.W	$002b
LAB_1699:
	SUBQ.W	#3,A1
	TRAP	#2
	MOVEA.L	(A3),A6
	BLE.S	LAB_16A6
	BEQ.S	LAB_169E
	DC.W	$4564
	DC.W	$002b
LAB_169A:
	ADDQ.W	#8,(A4)
LAB_169B:
	DC.W	$4544
	MOVEA.L	(A0),A6
	BSR.S	LAB_16A8
	MOVEQ	#101,D2
	MOVEQ	#110,D1
	MOVEA.L	D5,A0
	DC.W	$6400
LAB_169C:
	MOVE.L	D5,22085(A5)
	NEG.B	17782(A4)
	BCS.S	LAB_16A9+2
LAB_169D:
	MOVEQ	#32,D2
LAB_169E:
	DC.W	$4564
LAB_169F:
	BVS.S	LAB_16AA
	BLE.S	LAB_16AA
	DC.W	$002b
LAB_16A0:
	SUBQ.W	#3,A1
	DC.W	$4e53
	MOVEA.L	A1,A6
	DC.W	$6e73
	MOVEQ	#114,D2
	DC.W	$756d
	BCS.S	LAB_16AB
	MOVEQ	#32,D2
	DC.W	$4564
	DC.W	$002b
	SUBQ.W	#3,A1
	TRAP	#1
	MOVEA.L	(A3),A6
LAB_16A1:
	MOVEQ	#101,D0
	BLS.S	LAB_16AC
	MOVEQ	#117,D1
	BLT.S	LAB_16A5
	DC.W	$416e
LAB_16A2:
	BSR.S	LAB_16AC
	DC.W	$797a
	BCS.S	LAB_16AD
	DC.W	$002b
	SUBQ.W	#1,D3
	DC.W	$4f50
	MOVEA.L	(A3),A6
	DC.W	$636f
	MOVEQ	#101,D0
LAB_16A3:
	DC.W	$002b
LAB_16A4:
	SUBQ.W	#3,A1
	TRAP	#3
	MOVEA.L	D1,A6
	DC.W	$7373
	DC.W	$6973
LAB_16A5:
	MOVEQ	#0,D2
LAB_16A6:
	DC.W	$0000
NGAreaDef:
	SUBQ.W	#1,D3
	DC.W	$4f50
	MOVEA.L	(A3),A4
	DC.W	$636f
	MOVEQ	#101,D0
	MOVEA.L	(A0),A0
	MOVEQ	#101,D1
	DC.W	$6673
	MOVEA.L	(A3),A6
LAB_16A8:
	DC.W	$4350
	ADDQ.B	#8,12592(A4)
	MOVE.W	-(A5),D0
	DC.W	$3030
LAB_16A9:
	MOVE.W	-(A7),12336(A0)
	MOVEA.W	-(A1),A0
	MOVE.L	21315(A4),-(A4)
	DC.W	$4f50
	MOVEA.L	(A7),A4
LAB_16AA:
	BSR.S	LAB_16B0
	BCS.S	LAB_16AF
	BLE.S	LAB_16B0
	BLT.S	LAB_16AE+2
	SUBQ.W	#1,D3
	ADDQ.W	#8,D1
LAB_16AB:
	MOVE.L	48(A1,D3.W),D6
	MOVE.L	48(A1,D3.W),-(A2)
	MOVE.L	48(A0,D3.W),-(A2)
	DC.W	$6129
	MOVE.L	D0,D6
	SUBQ.W	#3,A1
	TRAP	#1
	MOVEA.L	A0,A4
LAB_16AC:
	BSR.S	LAB_16B1+2
	DC.W	$6d6f
	DC.W	$6e79
	MOVEA.L	D1,A6
	DC.W	$3030
LAB_16AD:
	MOVE.W	12592(A4),-(A0)
	MOVE.W	-(A5),D0
LAB_16AE:
	MOVE.W	37(A0,D3.W),-(A0)
	MOVE.W	97(A0,D3.W),D0
	MOVE.L	87(A4),-(A4)
	DC.W	$494e
	DC.W	$4328
	DC.W	$496e
	DC.W	$666f
	MOVEA.L	D3,A6
	DC.W	$3030
	MOVE.W	12592(A4),-(A0)
	MOVE.W	-(A5),D0
	MOVE.W	37(A0,D3.W),-(A0)
	MOVE.W	97(A0,D3.W),D0
	MOVE.L	22345(A4),-(A4)
	TRAP	#3
	MOVEA.L	(A3),A4
	MOVEQ	#97,D2
	MOVEQ	#117,D2
	DC.W	$732c
	DC.W	$4330
	DC.W	$3032
LAB_16AF:
	MOVE.L	48(A1,D3.W),D6
	MOVE.L	49(A0,D3.W),-(A2)
	BEQ.S	LAB_16B2
	DC.W	$3030
	DC.W	$6129
LAB_16B0:
	MOVE.L	D0,D6
	SUBQ.W	#3,A1
	DC.W	$4e53
	MOVEA.L	A1,A4
	DC.W	$6e73
	MOVEQ	#114,D2
	MOVEA.L	(A3),A6
	DC.W	$4755
	DC.W	$492c
	MOVE.W	37(A0,D3.W),-(A0)
	MOVE.W	37(A5,D3.W),D0
	DC.W	$3030
LAB_16B1:
	MOVE.W	-(A7),10540(A1)
	SUBQ.W	#3,A1
	DC.W	$4e53
	MOVEA.L	(A7),A4
	BSR.S	LAB_16B6
	BCS.S	LAB_16B5+2
	BLE.S	LAB_16B6
LAB_16B2:
	BLT.S	LAB_16B3+2
	SUBQ.W	#1,(A7)
	DC.W	$4156
	MOVE.L	48(A1,D3.W),D6
	DC.W	$2530
	DC.W	$3530
	MOVE.L	48(A0,D3.W),-(A2)
	DC.W	$6129
	MOVE.L	D0,D6
	SUBQ.W	#3,A1
	TRAP	#2
	MOVEA.L	(A3),A4
	BLE.S	LAB_16B7
	BEQ.S	LAB_16B4+2
	CLR.B	49(A0,D3.W)
	MOVE.L	48(A1,D3.W),D6
	DC.W	$2530
	DC.W	$3135
LAB_16B3:
	MOVE.L	50(A0,D3.W),-(A2)
	DC.W	$6729
	MOVEA.L	(A7),A6
	DC.W	$494e
	CLR.B	21349(A0)
	DC.W	$7175
	BCS.S	LAB_16B9
	DC.W	$6365
	MOVEA.L	D2,A6
	DC.W	$3030
	MOVE.W	12592(A4),D1
	MOVE.W	-(A5),D0
LAB_16B4:
	MOVE.W	37(A2,D3.W),D0
	DC.W	$3030
	MOVE.W	-(A7),10540(A1)
	SUBQ.W	#3,A1
	TRAP	#2
	MOVEA.L	(A0),A4
	DC.W	$6f73
	BVS.S	LAB_16BA+2
	DC.W	$696f
	BGT.S	LAB_16B8
LAB_16B5:
	CLR.B	51(A0,D3.W)
	MOVE.L	48(A1,D3.W),D6
	DC.W	$2530
	DC.W	$3430
	MOVE.L	53(A0,D3.W),-(A2)
LAB_16B6:
	DC.W	$6729
	MOVEA.L	(A7),A6
	DC.W	$494e
	CLR.B	20591(A0)
	DC.W	$736c
	DC.W	$6973
	MOVEQ	#32,D2
	MOVEA.L	D2,A6
	DC.W	$3030
	MOVE.W	12592(A4),D2
	MOVE.W	-(A5),D0
LAB_16B7:
	DC.W	$3032
LAB_16B8:
	MOVE.W	-(A5),-(A2)
	MOVE.W	97(A0,D3.W),D0
	MOVE.L	D0,-(A4)
	ADDQ.W	#8,(A4)
	DC.W	$4544
	MOVEA.L	(A0),A4
	DC.W	$4544
	MOVEA.L	D5,A0
	DC.W	$6469
	MOVEQ	#44,D2
	ADDQ.W	#8,D5
	DC.W	$4431
	MOVE.L	48(A1,D3.W),D6
LAB_16B9:
	MOVE.L	50(A0,D3.W),-(A2)
	BEQ.S	LAB_16BB
	DC.W	$3030
	DC.W	$6129
	MOVEA.L	(A0),A6
	ADDQ.W	#2,D5
	NEG.B	20577(A0)
	MOVEQ	#116,D2
	BCS.S	LAB_16BD+2
	BGT.S	LAB_16BC
	ADDQ.W	#8,D5
	DC.W	$4432
	MOVE.L	48(A1,D3.W),D6
	MOVE.L	48(A1,D3.W),-(A2)
LAB_16BA:
	MOVE.L	48(A0,D3.W),-(A2)
	DC.W	$6129
	MOVE.L	D0,D6
	DC.W	$4556
	DC.W	$4544
	MOVEA.L	D5,A4
	MOVEQ	#101,D3
	BGT.S	LAB_16BF
LAB_16BB:
	MOVEA.L	D5,A6
	DC.W	$4544
	MOVE.W	12592(A4),-(A0)
	MOVE.W	-(A5),D0
	DC.W	$3034
	MOVE.W	-(A5),-(A2)
LAB_16BC:
	MOVE.W	97(A0,D3.W),D0
	MOVE.L	17750(A4),-(A4)
	DC.W	$4544
	MOVEA.L	(A3),A4
	MOVEQ	#101,D0
	DC.W	$6369
	BSR.S	LAB_16C0
	MOVEA.L	D6,A0
	MOVEQ	#44,D4
	DC.W	$4545
	DC.W	$4432
	MOVE.L	48(A1,D3.W),D6
	DC.W	$2530
	DC.W	$3535
	MOVE.L	48(A0,D3.W),-(A2)
	DC.W	$6129
	MOVE.L	D0,D6
	DC.W	$4354
	ADDQ.W	#1,A4
	MOVEA.L	(A3),A4
	DC.W	$7973
	MOVEQ	#101,D2
	BLT.S	LAB_16BE
	SUBQ.W	#1,(A1)+
	DC.W	$5331
	MOVE.L	48(A1,D3.W),D6
	DC.W	$2530
	DC.W	$3332
LAB_16BD:
	MOVE.L	48(A0,D3.W),-(A2)
	DC.W	$6129
	MOVEA.L	D3,A6
	ADDQ.W	#2,(A2)
	DC.W	$4c28
	ADDQ.W	#1,-(A5)
	BGT.S	LAB_16C2
	BCS.S	LAB_16C3
	MOVEA.L	(A3),A6
	SUBQ.W	#4,(A3)
	MOVE.W	12592(A4),D1
	MOVE.W	-(A5),D0
	DC.W	$3031
	MOVE.W	-(A5),D1
LAB_16BE:
	MOVE.W	97(A0,D3.W),D0
LAB_16BF:
	MOVE.L	17236(A4),-(A4)
	ADDQ.W	#1,A4
	MOVEA.L	D4,A4
	DC.W	$7370
	MOVEA.L	(A3),A6
	SUBQ.W	#4,(A3)
	MOVE.W	12592(A4),-(A1)
	MOVE.W	-(A5),D0
	DC.W	$3035
	MOVE.W	-(A5),D3
LAB_16C0:
	MOVE.W	97(A0,D3.W),D0
	MOVE.L	0(A4),-(A4)
NGGadgetDef:
	ORI.W	#$494e,(A7)
	DC.W	$4343
	DC.W	$3030
	MOVEA.W	A1,A1
	TRAP	#6
	MOVE.W	11565(A4),D1
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	ORI.W	#$434f,(A3)
	ADDQ.W	#8,(A3)
	DC.W	$4350
	ADDQ.W	#8,(A4)
	SUBQ.W	#1,D3
	MOVE.W	9773(A4),-(A0)
	MOVEA.W	D2,A0
LAB_16C2:
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	D6,A6
	ADDQ.W	#1,D1
	DC.W	$4d45
	SUBQ.B	#1,D0
	ADDQ.W	#2,(A3)
	DC.W	$4332
LAB_16C3:
	MOVE.L	11569(A5),D6
	CLR.B	11565(A5)
	MOVE.L	17481(A4),-(A6)
	NOT.W	D6
	DC.W	$0000
	SUBQ.W	#3,A1
	DC.W	$4e53
	SUBQ.W	#1,D7
	SUBQ.W	#2,A1
	SUBQ.W	#3,(A6)
	DC.W	$3031
	MOVE.L	-(A6),D6
	DC.W	$2630
	ADDQ.B	#3,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	D0,D0
	SUBQ.W	#3,(A6)
	DC.W	$3032
	MOVE.L	-(A6),D6
	DC.W	$2630
	CLR.B	11565(A5)
	ADDQ.B	#1,15360(A4)
	SUBQ.W	#3,(A6)
	DC.W	$3033
	MOVE.L	-(A6),D6
	DC.W	$2630
	CLR.B	11565(A5)
	ADDQ.B	#1,15872(A4)
	SUBQ.W	#3,(A6)
	DC.W	$3034
	MOVE.L	-(A6),D6
	DC.W	$2630
	CLR.B	11565(A5)
	MOVE.L	20992(A4),-(A6)
	SUBQ.W	#3,(A6)
	DC.W	$3035
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	19535(A4),-(A6)
	DC.W	$4144
	ORI.W	#$5630,(A7)
	MOVE.W	9766(A4),D3
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	(A6),A6
	BLE.S	LAB_16C4+2
	ORI.W	#$5630,(A7)
	MOVE.W	9766(A4),-(A3)
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	ORI.W	#$5630,(A7)
	NBCD	9773(A4)
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	D6,A6
	ORI.W	#$5630,(A7)
	MOVE.W	9773(A4),D4
	MOVEA.W	(A0),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	8241(A3),D6
	SUBQ.W	#1,A0
	DC.W	$4f54
	MOVE.L	8268(A5),D6
	DC.W	$4f4f
	ADDQ.B	#8,-(A0)
	MOVE.L	8275(A5),D6
	SUBQ.W	#2,(A3)
	ADDQ.B	#2,-(A0)
	ORI.W	#$5630,(A7)
	DC.W	$432c
	MOVE.L	-(A6),D3
	MOVE.W	D2,11565(A0)
	MOVE.L	11326(A5),-(A6)
	MOVE.W	D0,D7
	SUBQ.W	#3,(A6)
	MOVEA.W	D4,A0
	MOVE.L	-(A6),D6
	DC.W	$2631
	CLR.B	11565(A5)
	MOVE.L	10281(A4),-(A6)
LAB_16C4:
	ORI.W	#$5630,(A7)
	DC.W	$452c
	MOVE.L	12610(A5),D3
	MOVE.L	11565(A5),-(A6)
	MOVE.L	87(A2),D6
	DC.W	$5630
	NOT.B	9773(A4)
	MOVE.W	D2,11565(A0)
	MOVE.L	11341(A5),-(A6)
	ORI.W	#$5630,(A7)
	DC.W	$472c
	MOVE.L	12354(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A3,A6
	DC.W	$4943
	DC.W	$4b00
	SUBQ.W	#3,(A6)
	DC.W	$3230
	MOVE.L	-(A6),D6
	DC.W	$2630
	ADDQ.B	#2,11565(A5)
	MOVE.L	21621(A4),-(A6)
	DC.W	$6e65
	ORI.W	#$5632,(A7)
	MOVE.W	9766(A4),D2
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	ORI.W	#$5632,(A7)
	MOVE.W	9766(A4),-(A2)
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00575632,D6
	MOVE.W	9773(A4),D3
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	ORI.W	#$5632,(A7)
	MOVE.W	9766(A4),D0
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	D6,A6
	BVS.S	LAB_16C5
	DC.W	$6500
	SUBQ.W	#3,(A6)
	DC.W	$3231
	MOVE.L	-(A6),D6
	DC.W	$2630
	ADDQ.B	#3,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	D0,D0
	SUBQ.W	#3,(A6)
	DC.W	$3232
	MOVE.L	-(A6),D6
	DC.W	$2630
	CLR.B	11565(A5)
	ADDQ.B	#1,15360(A4)
	SUBQ.W	#3,(A6)
	DC.W	$3233
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	ADDQ.B	#1,15872(A4)
	SUBQ.W	#3,(A6)
	DC.W	$3136
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	21078(A4),-(A6)
	SUBQ.B	#1,D0
	SUBQ.W	#3,(A6)
	DC.W	$3137
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	18766(A4),-(A6)
	ADDQ.B	#3,D0
	SUBQ.W	#3,(A6)
	MOVE.W	EXT_002e,-(A0)
	CLR.B	11565(A5)
	MOVE.L	17408(A4),-(A6)
	SUBQ.W	#3,(A6)
	MOVE.W	D1,11302(A0)
LAB_16C5:
	DC.W	$2d30
	ADDQ.B	#3,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	D0,D0
	SUBQ.W	#3,(A6)
	MOVE.W	D5,11302(A0)
	DC.W	$2630
	CLR.B	11565(A5)
	MOVE.L	17993(A4),-(A6)
	DC.W	$4900
	SUBQ.W	#3,(A6)
	MOVE.W	D3,11302(A0)
	DC.W	$2630
	CLR.B	11565(A5)
	MOVE.L	17920(A4),-(A6)
	SUBQ.W	#3,(A6)
	MOVE.W	D4,11309(A0)
	DC.W	$2d30
	ADDQ.B	#3,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	D0,D0
	SUBQ.W	#3,(A6)
	DC.W	$3131
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	19785(A4),-(A6)
	ADDQ.B	#4,D0
	SUBQ.W	#3,(A6)
	DC.W	$3132
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	21093(A4),-(A6)
	DC.W	$4d49
	ADDQ.B	#4,D0
	SUBQ.W	#3,(A6)
	DC.W	$3133
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	20821(A4),-(A6)
	DC.W	$4500
	SUBQ.W	#3,(A6)
	MOVE.W	EXT_0012.W,D1
	DC.W	$2630
	ADDQ.B	#2,11565(A5)
	MOVE.L	19502(A4),-(A6)
	DC.W	$456e
	DC.W	$6400
	SUBQ.W	#3,(A6)
	MOVE.W	EXT_002e,D1
	CLR.B	11565(A5)
	ADDQ.B	#1,15360(A4)
	SUBQ.W	#3,(A6)
	MOVEA.W	D1,A1
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	ADDQ.B	#1,15872(A4)
	SUBQ.W	#3,(A6)
	MOVEA.W	D2,A1
	MOVE.L	-(A6),D6
	DC.W	$2630
	ADDQ.B	#2,11565(A5)
	MOVE.L	16999(A4),-(A6)
	DC.W	$6e00
	SUBQ.W	#3,(A6)
	MOVEA.W	D3,A1
	MOVE.L	-(A6),D6
	DC.W	$2630
	CLR.B	11565(A5)
	ADDQ.B	#1,15360(A4)
	SUBQ.W	#3,(A6)
	MOVEA.W	D4,A1
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	ADDQ.B	#1,15872(A4)
	SUBQ.W	#3,(A6)
	MOVEA.W	D5,A1
	MOVE.L	-(A6),D6
	DC.W	$2630
	ADDQ.B	#2,11565(A5)
	MOVE.L	21104(A4),-(A6)
	ORI.W	#$5632,(A7)
	NOT.B	9766(A4)
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	ORI.W	#$5632,(A7)
	DC.W	$472c
	MOVE.L	-(A6),D3
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	ORI.W	#$5632,(A7)
	NBCD	9773(A4)
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00575632,D6
	DC.W	$492c
	MOVE.L	12354(A5),D3
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	(A3),A6
	SUBQ.W	#4,A6
	DC.W	$4300
	SUBQ.W	#3,(A6)
	MOVEA.W	A2,A1
	MOVE.L	11568(A5),D6
	CLR.B	11565(A5)
	MOVE.L	18176(A4),-(A6)
	ORI.W	#$494e,(A7)
	CLR.W	D2
	DC.W	$3030
	MOVE.W	(A3),17712(A0)
	MOVE.W	9773(A4),-(A0)
	MOVE.W	D2,11565(A0)
	MOVE.L	11346(A5),-(A6)
	DC.W	$4543
	ORI.W	#$4530,(A3)
	MOVE.W	9773(A4),D1
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A4,A6
	DC.W	$4f41
	NEG.B	D0
	SUBQ.W	#1,D5
	DC.W	$3033
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	21313(A4),-(A6)
	ADDQ.W	#3,D5
	MOVEA.L	D1,A0
	SUBQ.B	#1,D0
	SUBQ.W	#1,D5
	DC.W	$3034
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	21313(A4),-(A6)
	ADDQ.W	#3,D5
	ORI.W	#$4530,(A3)
	MOVE.W	11565(A4),-(A2)
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A5,A6
	DC.W	$4f44
	ORI.W	#$4531,(A3)
	MOVE.W	9773(A4),D0
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A6,A6
	DC.W	$4557
	ORI.W	#$4531,(A3)
	MOVE.W	9766(A4),-(A0)
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A4,A6
	DC.W	$454e
	ORI.W	#$5630,(A3)
	MOVE.W	9773(A4),-(A0)
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	SUBQ.W	#1,D5
	DC.W	$3132
	MOVE.L	-(A6),D6
	DC.W	$2630
	CLR.B	11565(A5)
	MOVE.L	20545(A4),-(A6)
	ADDQ.B	#2,D0
	SUBQ.W	#1,(A6)
	DC.W	$3032
	MOVE.L	11568(A5),D6
	ADDQ.B	#3,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	-(A0),D0
	DC.W	$0000
	SUBQ.W	#3,A1
	TRAP	#2
	CLR.B	50(A0,D3.W)
	SUBQ.W	#1,(A6)
	DC.W	$3033
	MOVE.L	-(A6),D6
	DC.W	$2630
	ADDQ.B	#3,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	D0,D0
	SUBQ.W	#1,D5
	DC.W	$3230
	MOVE.L	-(A6),D6
	DC.W	$2630
	CLR.B	11565(A5)
	ADDQ.B	#1,15360(A4)
	SUBQ.W	#1,D5
	DC.W	$3231
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	ADDQ.B	#1,15872(A4)
	SUBQ.W	#1,D5
	MOVEA.W	D1,A1
	MOVE.L	-(A6),D6
	MOVE.L	45(A0,D5.W),-(A6)
	MOVE.L	11564(A5),-(A6)
	MOVE.L	-(A0),-(A6)
	ADDQ.W	#8,24953(A4)
	MOVE.L	8275(A3),D6
	DC.W	$6b69
	MOVEQ	#44,D0
	MOVE.L	-(A0),-(A6)
	DC.W	$456e
	BCC.S	LAB_16C6
	ORI.W	#$4532,(A3)
	MOVE.W	9766(A4),D1
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	D3,A6
	ORI.W	#$4532,(A3)
	MOVE.W	9766(A4),-(A1)
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	(A0)+,A6
LAB_16C6:
	ORI.W	#$4532,(A3)
	MOVE.W	9773(A4),D2
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	(A0),A6
	ORI.W	#$4532,(A3)
	MOVE.W	11565(A4),-(A2)
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	D4,A6
	SUBQ.W	#2,(A0)
	ORI.W	#$3047,(A4)
	MOVE.W	9773(A4),D1
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	D2,A6
	BEQ.S	LAB_16C7+2
	ORI.W	#$5630,(A3)
	MOVE.W	9766(A4),-(A2)
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	ORI.W	#$4533,(A3)
	MOVE.W	9766(A4),D0
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00534533,D6
	MOVE.W	9773(A4),-(A0)
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	ORI.W	#$3047,(A4)
	MOVE.W	9773(A4),D1
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	(A4),A6
	MOVEQ	#110,D1
	DC.W	$7300
	SUBQ.W	#1,(A6)
	DC.W	$3036
	MOVE.L	-(A6),D6
	DC.W	$2630
	ADDQ.B	#3,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	D0,D0
	SUBQ.W	#1,D5
	DC.W	$3332
	MOVE.L	-(A6),D6
	DC.W	$2630
	CLR.B	11565(A5)
	ADDQ.B	#1,15360(A4)
	SUBQ.W	#1,D5
	DC.W	$3333
LAB_16C7:
	MOVE.L	11568(A5),D6
	CLR.B	11565(A5)
	ADDQ.B	#1,15872(A4)
	DC.W	$5430
	DC.W	$4732
	MOVE.L	-(A6),D6
	DC.W	$2d30
	ADDQ.B	#2,11565(A5)
	MOVE.L	19557(A4),-(A6)
	DC.W	$6e00
	SUBQ.W	#1,(A6)
	DC.W	$3037
	MOVE.L	-(A6),D6
	DC.W	$2630
	ADDQ.B	#3,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	D0,D0
	SUBQ.W	#1,D5
	DC.W	$3334
	MOVE.L	-(A6),D6
	DC.W	$2630
	CLR.B	11565(A5)
	ADDQ.B	#1,15360(A4)
	SUBQ.W	#1,D5
	DC.W	$3335
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	ADDQ.B	#1,15872(A4)
	DC.W	$5430
	DC.W	$4732
	MOVE.L	-(A6),D6
	DC.W	$2d30
	ADDQ.B	#2,11565(A5)
	MOVE.L	19567(A4),-(A6)
	BLE.S	LAB_16C8
	ORI.W	#$5630,(A3)
	MOVE.W	9766(A4),D4
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	ORI.W	#$4533,(A3)
	MOVE.W	9766(A4),D3
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00534533,D6
	MOVE.W	11565(A4),-(A3)
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	DC.W	$0000
	SUBQ.W	#3,A1
	TRAP	#2
	CLR.B	51(A0,D3.W)
	DC.W	$5430
	DC.W	$4731
	MOVE.L	-(A6),D6
	DC.W	$2d30
	ADDQ.B	#2,11565(A5)
	MOVE.L	20591(A4),-(A6)
	DC.W	$7300
	SUBQ.W	#1,(A6)
	MOVE.W	EXT_002e,D0
	ADDQ.B	#3,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	D0,D0
	SUBQ.W	#1,D5
	DC.W	$3430
	MOVE.L	-(A6),D6
	DC.W	$2630
	CLR.B	11565(A5)
	ADDQ.B	#1,15360(A4)
LAB_16C8:
	SUBQ.W	#1,D5
	DC.W	$3431
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	ADDQ.B	#1,15872(A4)
	DC.W	$5430
	DC.W	$4731
	MOVE.L	-(A6),D6
	DC.W	$2d30
	ADDQ.B	#2,11565(A5)
	MOVE.L	20577(A4),-(A6)
	MOVEQ	#116,D2
	MOVE.L	D0,D0
	SUBQ.W	#1,(A6)
	DC.W	$3130
	MOVE.L	-(A6),D6
	DC.W	$2630
	ADDQ.B	#3,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	D0,D0
	SUBQ.W	#1,D5
	DC.W	$3432
	MOVE.L	-(A6),D6
	DC.W	$2630
	CLR.B	11565(A5)
	ADDQ.B	#1,15360(A4)
	SUBQ.W	#1,D5
	DC.W	$3433
	MOVE.L	11568(A5),D6
	CLR.B	11565(A5)
	ADDQ.B	#1,15872(A4)
	SUBQ.W	#1,D5
	DC.W	$3434
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	17231(A4),-(A6)
	ADDQ.W	#8,(A1)+
	ORI.W	#$4534,(A3)
	MOVE.W	9773(A4),-(A2)
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	D4,A6
	SUBQ.W	#2,(A0)
	ORI.W	#$4534,(A3)
	MOVE.W	9773(A4),D3
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	(A0),A6
	DC.W	$4153
	ADDQ.W	#2,D5
	ORI.W	#$4534,(A3)
	MOVE.W	9773(A4),-(A3)
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	D3,A6
	DC.W	$4c52
	ORI.W	#$4534,(A3)
	MOVE.W	9773(A4),D4
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A1,A6
	DC.W	$4e53
	ORI.W	#$4534,(A3)
	MOVE.W	11565(A4),-(A4)
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	D4,A6
	DC.W	$454c
	ORI.W	#$3047,(A4)
	MOVE.W	9773(A4),D1
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	D2,A6
	BEQ.S	LAB_16C9+2
	ORI.W	#$5631,(A3)
	MOVE.W	9766(A4),-(A0)
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	ORI.W	#$4535,(A3)
	MOVE.W	9766(A4),D0
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00534535,D6
	MOVE.W	9773(A4),-(A0)
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	ORI.W	#$3047,(A4)
	MOVE.W	9773(A4),D1
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	(A4),A6
	MOVEQ	#110,D1
	DC.W	$7320
	ORI.W	#$5631,(A3)
	MOVE.W	9766(A4),D1
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	ORI.W	#$4535,(A3)
	MOVE.W	9766(A4),D1
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00534535,D6
LAB_16C9:
	MOVE.W	11565(A4),-(A1)
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	ORI.W	#$3047,(A4)
	MOVE.W	9773(A4),D1
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A4,A6
	BCS.S	LAB_16CA+2
	ORI.W	#$5631,(A3)
	MOVE.W	9766(A4),-(A1)
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	ORI.W	#$4535,(A3)
	MOVE.W	9766(A4),D2
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00534535,D6
	MOVE.W	9773(A4),-(A2)
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	ORI.W	#$3047,(A4)
	MOVE.W	9773(A4),D1
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A4,A6
	DC.W	$6f6f
	MOVEQ	#32,D0
	ORI.W	#$5631,(A3)
	MOVE.W	9766(A4),D2
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	ORI.W	#$4535,(A3)
	MOVE.W	9766(A4),D3
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00534535,D6
LAB_16CA:
	MOVE.W	11565(A4),-(A3)
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	ORI.W	#$3047,(A4)
	MOVE.W	9773(A4),D1
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	D3,A6
	DC.W	$796c
	ORI.W	#$5631,(A3)
	MOVE.W	9766(A4),-(A2)
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	ORI.W	#$4535,(A3)
	MOVE.W	9766(A4),D4
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00534535,D6
	MOVE.W	9773(A4),-(A4)
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	ORI.W	#$3047,(A4)
	MOVE.W	9773(A4),D1
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	D5,A6
	MOVEQ	#47,D3
	DC.W	$4c6e
	ORI.W	#$5631,(A3)
	MOVE.W	9766(A4),D3
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	ORI.W	#$4535,(A3)
	DC.W	$412c
	MOVE.L	-(A6),D3
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00534535,D6
	CLR.B	11565(A4)
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	DC.W	$0000
	ADDQ.W	#8,(A4)
	DC.W	$4544
	ADDQ.W	#8,D5
	NEG.B	69(A1,D5.W)
	DC.W	$3031
	MOVE.L	-(A6),D6
	DC.W	$2630
	ADDQ.B	#3,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	-(A0),D0
	ORI.W	#$4530,(A0)
	MOVE.W	9766(A4),D1
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00504530,D6
	MOVE.W	9773(A4),-(A1)
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	ORI.W	#$4530,(A0)
	MOVE.W	9766(A4),D2
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A6,A6
	DC.W	$4f54
	DC.W	$4500
	ADDQ.W	#8,D5
	DC.W	$3035
	MOVE.L	-(A6),D6
	DC.W	$2630
	CLR.B	11565(A5)
	MOVE.L	21586(A4),-(A6)
	DC.W	$4b00
	ADDQ.W	#8,D5
	DC.W	$3036
	MOVE.L	-(A6),D6
	DC.W	$2630
	CLR.B	11565(A5)
	MOVE.L	20545(A4),-(A6)
	ADDQ.B	#2,D0
	ADDQ.W	#8,D5
	DC.W	$3037
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	16972(A4),-(A6)
	DC.W	$4b00
	ADDQ.W	#8,D5
	MOVE.W	EXT_0012.W,D0
	DC.W	$2630
	CLR.B	11565(A5)
	MOVE.L	17152(A4),-(A6)
	ADDQ.W	#8,D5
	MOVE.W	EXT_002e,D0
	CLR.B	11565(A5)
	MOVE.L	22528(A4),-(A6)
	ADDQ.W	#8,D5
	MOVEA.W	D1,A0
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	20480(A4),-(A6)
	ADDQ.W	#8,D5
	MOVEA.W	D7,A0
	MOVE.L	-(A6),D6
	DC.W	$2630
	CLR.B	11565(A5)
	MOVE.L	19456(A4),-(A6)
	ADDQ.W	#8,D5
	MOVEA.W	A0,A0
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	21248(A4),-(A6)
	ADDQ.W	#8,D5
	MOVEA.W	D2,A0
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	17493(A4),-(A6)
	ADDQ.B	#8,D0
	ADDQ.W	#8,D5
	MOVEA.W	D3,A0
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	16708(A4),-(A6)
	NEG.B	D0
	ADDQ.W	#8,D5
	MOVEA.W	D4,A0
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	21320(A4),-(A6)
	ADDQ.B	#1,D0
	ADDQ.W	#8,D5
	MOVEA.W	D5,A0
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	17752(A4),-(A6)
	ADDQ.B	#8,D0
	ADDQ.W	#8,D5
	MOVEA.W	D6,A0
	MOVE.L	11568(A5),D6
	CLR.B	11565(A5)
	MOVE.L	19785(A4),-(A6)
	ADDQ.B	#1,D0
	ADDQ.W	#8,D5
	DC.W	$3130
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	22016(A4),-(A6)
	ADDQ.W	#8,D5
	DC.W	$3131
	MOVE.L	-(A6),D6
	DC.W	$2d31
	CLR.B	11565(A5)
	MOVE.L	19535(A4),-(A6)
	DC.W	$434b
	ORI.W	#$4531,(A0)
	MOVE.W	9766(A4),D1
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A3,A6
	BHI.S	LAB_16CB+2
	ORI.W	#$4531,(A0)
	MOVE.W	9766(A4),-(A1)
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	ORI.W	#$4531,(A0)
	MOVE.W	9766(A4),D2
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00504531,D6
	MOVE.W	9773(A4),-(A2)
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	ORI.W	#$4531,(A0)
	MOVE.W	9766(A4),D3
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	(A2),A6
	ORI.W	#$4531,(A0)
	MOVE.W	9766(A4),-(A3)
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVEA.L	(A5),A6
	ORI.W	#$4531,(A0)
	MOVE.W	9773(A4),D4
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVEA.L	D4,A6
LAB_16CB:
	ORI.W	#$4531,(A0)
	MOVE.W	9766(A4),-(A4)
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	(A0),A6
	ORI.W	#$4531,(A0)
	DC.W	$412c
	MOVE.L	-(A6),D3
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00504531,D6
	CLR.B	9773(A4)
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	ORI.W	#$4531,(A0)
	DC.W	$432c
	MOVE.L	-(A6),D3
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A1,A6
	ORI.W	#$4531,(A0)
	NEG.B	9766(A4)
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00504531,D6
	DC.W	$452c
	MOVE.L	12354(A5),D3
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	ORI.W	#$4531,(A0)
	DC.W	$4e2c
	MOVE.L	-(A6),D3
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	(A6),A6
	ORI.W	#$4531,(A0)
	DC.W	$472c
	MOVE.L	-(A6),D3
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00504531,D6
	NBCD	9773(A4)
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	ORI.W	#$4531,(A0)
	DC.W	$4b2c
	MOVE.L	-(A6),D3
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVEA.L	A4,A6
	ORI.W	#$4531,(A0)
	DC.W	$4c2c
	MOVE.L	-(A6),D3
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVEA.L	(A3),A6
	ORI.W	#$4531,(A0)
	DC.W	$4d2c
	MOVE.L	12354(A5),D3
	MOVE.L	11602(A5),-(A6)
	MOVEA.L	(A2),A6
	ORI.W	#$4531,(A0)
	DC.W	$492c
	MOVE.L	12610(A5),D3
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A5,A6
	ADDQ.W	#1,D5
	DC.W	$4300
	ADDQ.W	#8,D5
	MOVE.W	A2,11309(A0)
	DC.W	$2d30
	CLR.B	11565(A5)
	ADDQ.B	#1,19774(A4)
	MOVE.W	D0,D7
	ORI.W	#$5645,D5
	NEG.W	D5
	DC.W	$4544
	MOVE.W	D5,17712(A0)
	MOVE.W	9773(A4),-(A0)
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	D5,A6
	MOVEQ	#101,D3
	BGT.S	LAB_16CC
	MOVE.L	D0,D0
	DC.W	$4545
	DC.W	$3032
	MOVE.L	-(A6),D6
	DC.W	$2630
	ADDQ.B	#3,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$4530,D5
	MOVE.W	9773(A4),-(A1)
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	D3,A6
	ORI.W	#$4530,D5
	MOVE.W	9773(A4),D2
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A4,A6
	ORI.W	#$4530,D5
	MOVE.W	9766(A4),-(A2)
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	(A2),A6
	ORI.W	#$4530,D5
	MOVE.W	11565(A4),D3
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	(A7),A6
	ORI.W	#$4531,D5
	MOVE.W	9773(A4),D0
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	DC.W	$4545
LAB_16CC:
	DC.W	$3131
	MOVE.L	-(A6),D6
	DC.W	$2630
	ADDQ.B	#3,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$4531,D5
	MOVE.W	9766(A4),D1
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00454531,D6
	MOVE.W	9773(A4),-(A1)
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	ORI.W	#$4531,D5
	MOVE.W	9773(A4),D2
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	D5,A6
	DC.W	$6469
	MOVEQ	#0,D2
	DC.W	$4545
	DC.W	$3135
	MOVE.L	-(A6),D6
	DC.W	$2630
	CLR.B	11565(A5)
	MOVE.L	20992(A4),-(A6)
	DC.W	$4545
	DC.W	$3136
	MOVE.L	11568(A5),D6
	CLR.B	11565(A5)
	MOVE.L	22272(A4),-(A6)
	DC.W	$4545
	DC.W	$3230
	MOVE.L	-(A6),D6
	DC.W	$2d30
	ADDQ.B	#2,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$4532,D5
	MOVE.W	9766(A4),-(A0)
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	DC.W	$4545
	DC.W	$3232
	MOVE.L	-(A6),D6
	DC.W	$2630
	CLR.B	11565(A5)
	ADDQ.B	#1,15360(A4)
	DC.W	$4545
	DC.W	$3233
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	ADDQ.B	#1,15872(A4)
	DC.W	$4545
	DC.W	$3234
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	15945(A4),-(A6)
	DC.W	$6e73
	ORI.W	#$4532,D5
	MOVE.W	9766(A4),-(A2)
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	(A2),A6
	ORI.W	#$4532,D5
	MOVE.W	11565(A4),D3
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	(A7),A6
	ORI.W	#$4533,D5
	MOVE.W	9773(A4),D0
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	DC.W	$4545
	DC.W	$3331
	MOVE.L	-(A6),D6
	DC.W	$2630
	ADDQ.B	#3,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$4533,D5
	MOVE.W	9766(A4),D1
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00454533,D6
	MOVE.W	9773(A4),-(A1)
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	ORI.W	#$4533,D5
	MOVE.W	9773(A4),D2
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	D5,A6
	DC.W	$6469
	MOVEQ	#0,D2
	DC.W	$4545
	DC.W	$3335
	MOVE.L	-(A6),D6
	DC.W	$2630
	CLR.B	11565(A5)
	MOVE.L	20992(A4),-(A6)
	DC.W	$4545
	DC.W	$3336
	MOVE.L	11568(A5),D6
	CLR.B	11565(A5)
	MOVE.L	22272(A4),-(A6)
	ORI.W	#$5645,D5
	NEG.W	D5
	DC.W	$4544
	MOVEA.W	D5,A1
	DC.W	$4534
	MOVE.W	9773(A4),-(A0)
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	(A3),A6
	BNE.S	LAB_16CD+2
	ORI.W	#$4534,D5
	MOVE.W	9773(A4),D1
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A3,A6
	DC.W	$4f66
	DC.W	$6600
	DC.W	$4545
	DC.W	$3433
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	17763(A4),-(A6)
	DC.W	$686f
	ORI.W	#$4534,D5
	MOVE.W	9773(A4),D2
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	D4,A6
	BCS.S	LAB_16CE
	DC.W	$6179
	ORI.W	#$4534,D5
	MOVE.W	9773(A4),-(A2)
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	(A3),A6
	MOVEQ	#100,D0
	ORI.W	#$4534,D5
	MOVE.W	9773(A4),D3
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	D3,A6
	ADDQ.B	#3,D0
	DC.W	$4545
	DC.W	$3437
	MOVE.L	11568(A5),D6
	CLR.B	11565(A5)
	MOVE.L	17920(A4),-(A6)
	DC.W	$4545
	DC.W	$3531
	MOVE.L	-(A6),D6
	DC.W	$2d30
LAB_16CD:
	ADDQ.B	#2,11565(A5)
	MOVE.L	20585(A4),-(A6)
	MOVEQ	#0,D2
	DC.W	$4545
	MOVE.W	D1,11302(A2)
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	21248(A4),-(A6)
	DC.W	$4545
	DC.W	$3532
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	17408(A4),-(A6)
	DC.W	$4545
	DC.W	$3533
LAB_16CE:
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	21760(A4),-(A6)
	DC.W	$4545
	DC.W	$3534
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	16708(A4),-(A6)
	NEG.B	D0
	DC.W	$4545
	DC.W	$3535
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	22089(A4),-(A6)
	CLR.W	(A2)
	ORI.W	#$4535,D5
	MOVE.W	9773(A4),D3
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A0,A6
	ADDQ.B	#2,D0
	DC.W	$4545
	DC.W	$3537
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	21583(A4),-(A6)
	ORI.W	#$4535,D5
	MOVE.W	9773(A4),D4
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	69(A5),D6
	DC.W	$4535
	MOVE.W	11565(A4),-(A4)
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	69(A3),D6
	DC.W	$4536
	MOVE.W	9773(A4),-(A0)
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A1,A6
	DC.W	$6e73
	ORI.W	#$4536,D5
	MOVE.W	9773(A4),D1
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	D6,A6
	MOVEA.L	(A0),A3
	ORI.W	#$4536,D5
	MOVE.W	9773(A4),-(A1)
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	D6,A6
	SUBQ.W	#1,D5
	ADDQ.B	#2,D0
	DC.W	$4545
	DC.W	$3634
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	16708(A4),-(A6)
	NEG.B	D0
	DC.W	$4545
	DC.W	$3635
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	21334(A4),-(A6)
	DC.W	$4942
	ORI.W	#$4536,D5
	MOVE.W	9773(A4),D3
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	D6,A6
	ADDQ.B	#1,D0
	DC.W	$4545
	DC.W	$3637
	MOVE.L	11568(A5),D6
	CLR.B	11565(A5)
	MOVE.L	21586(A4),-(A6)
	DC.W	$4700
	DC.W	$4545
	DC.W	$3730
	MOVE.L	-(A6),D6
	DC.W	$2d30
	ADDQ.B	#2,11565(A5)
	MOVE.L	22127(A4),-(A6)
	DC.W	$6c00
	DC.W	$4545
	DC.W	$3731
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	21248(A4),-(A6)
	DC.W	$4545
	DC.W	$3732
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	17408(A4),-(A6)
	DC.W	$4545
	DC.W	$3733
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	21760(A4),-(A6)
	DC.W	$4545
	DC.W	$3734
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	16708(A4),-(A6)
	NEG.B	D0
	DC.W	$4545
	DC.W	$3735
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	21586(A4),-(A6)
	DC.W	$454d
	ORI.W	#$4537,D5
	MOVE.W	9773(A4),D3
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A7,A6
	NOT.W	D6
	ORI.W	#$4537,D5
	MOVE.W	9773(A4),-(A3)
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A7,A6
	DC.W	$4e00
	DC.W	$4545
	DC.W	$3738
	MOVE.L	11568(A5),D6
	CLR.B	11565(A5)
	MOVE.L	16707(A4),-(A6)
	ORI.W	#$4538,D5
	MOVE.W	9766(A4),-(A3)
	MOVE.W	D2,11565(A0)
LAB_16CF:
	MOVE.L	11344(A5),-(A6)
	ORI.W	#$4538,D5
	MOVE.W	9766(A4),D4
	MOVE.W	D2,11565(A0)
	MOVE.L	11337(A5),-(A6)
	ORI.W	#$4538,D5
	MOVE.W	9773(A4),-(A4)
	MOVE.W	D2,11565(A0)
	MOVE.L	11350(A5),-(A6)
	ORI.W	#$4538,D5
	MOVE.W	9766(A4),-(A0)
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	ORI.W	#$4538,D5
	MOVE.W	9766(A4),D1
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	DC.W	$2c74
	DC.W	$6f00
	DC.W	$4545
	DC.W	$3833
	MOVE.L	-(A6),D6
	DC.W	$2d30
	ADDQ.B	#3,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	D0,D0
	DC.W	$4545
	DC.W	$3834
	MOVE.L	-(A6),D6
	DC.W	$2630
	SUBQ.B	#1,11565(A5)
MEventDef:
	ADDQ.B	#1,12336(A4)
	MOVE.W	-(A5),D0
	ORI.W	#$4538,D5
	MOVE.W	11565(A4),D3
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	DC.W	$0000
	DC.W	$4354
	ADDQ.W	#1,A4
	SUBQ.W	#1,(A1)+
	DC.W	$5331
	SUBQ.W	#1,(A1)+
	DC.W	$3230
	MOVE.L	-(A6),D6
	DC.W	$2d30
	ADDQ.B	#2,11565(A5)
	MOVE.L	20588(A4),-(A6)
	DC.W	$6179
	ORI.W	#$5932,(A3)
	MOVE.W	9773(A4),-(A0)
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	(A3),A6
	ADDQ.W	#2,A7
	ADDQ.B	#8,D0
	SUBQ.W	#1,(A1)+
	DC.W	$3232
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	20545(A4),-(A6)
	ADDQ.B	#2,D0
	SUBQ.W	#1,(A1)+
	DC.W	$3233
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	20559(A4),-(A6)
	SUBQ.B	#1,D0
	SUBQ.W	#1,(A1)+
	DC.W	$3234
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	21317(A4),-(A6)
	SUBQ.B	#8,D0
	SUBQ.W	#1,(A1)+
	DC.W	$3235
	MOVE.L	11568(A5),D6
	CLR.B	11565(A5)
	MOVE.L	21327(A4),-(A6)
	TRAP	#7
	ORI.W	#$5933,(A3)
	MOVE.W	9773(A4),D0
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	(A6),A6
	BLE.S	LAB_16D6
	ORI.W	#$5933,(A3)
	BHI.S	LAB_16D2
	MOVE.L	-(A6),D3
	MOVEA.W	(A3),A0
	MOVE.L	11602(A5),-(A6)
MVolDef:
	MOVE.L	48(A1,D3.W),D6
	MOVE.L	D0,-(A2)
	SUBQ.W	#1,(A1)+
	DC.W	$3331
	MOVE.L	-(A6),D6
	DC.W	$2d30
	ADDQ.B	#3,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	D0,D0
	SUBQ.W	#1,(A1)+
	DC.W	$3334
	MOVE.L	-(A6),D6
	DC.W	$2d30
	ADDQ.B	#2,11565(A5)
LAB_16D2:
	MOVE.L	17004(A4),-(A6)
	ORI.W	#$5933,(A3)
	BLS.S	LAB_16D4
	MOVE.L	-(A6),D3
	MOVEA.W	(A3),A0
	MOVE.L	11602(A5),-(A6)
MBalDef:
	DC.W	$2c30
	DC.W	$3530
	MOVE.L	D0,-(A2)
	SUBQ.W	#1,(A1)+
	DC.W	$3335
	MOVE.L	11568(A5),D6
	ADDQ.B	#3,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	D0,D0
	SUBQ.W	#1,(A1)+
	MOVE.W	EXT_0012.W,-(A1)
	DC.W	$2d30
	ADDQ.B	#2,11565(A5)
LAB_16D4:
	MOVE.L	18034(A4),-(A6)
LAB_16D6:
	DC.W	$7100
	SUBQ.W	#1,(A1)+
	MOVE.W	EXT_002e,-(A1)
	ADDQ.B	#3,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$5933,(A3)
	DC.W	$412c
	MOVE.L	-(A6),D3
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00535933,D6
	CLR.B	9773(A4)
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	ORI.W	#$5933,(A3)
	DC.W	$432c
	MOVE.L	12372(A5),D3
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	(A3),A6
	MOVEQ	#100,D0
	ORI.W	#$5933,(A3)
	NEG.B	9766(A4)
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	ORI.W	#$5933,(A3)
	DC.W	$452c
	MOVE.L	-(A6),D3
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00535933,D6
	NOT.B	11565(A4)
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	ORI.W	#$5933,(A3)
	DC.W	$472c
	MOVE.L	-(A6),D3
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	(A4),A6
	DC.W	$696d
	DC.W	$6500
	SUBQ.W	#1,(A1)+
	MOVE.W	A0,11302(A1)
	DC.W	$2d30
	ADDQ.B	#3,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$5933,(A3)
	BCC.S	LAB_16D8+2
	MOVE.L	-(A6),D3
	MOVEA.W	(A3),A0
	MOVE.L	11602(A5),-(A6)
MTuneDef:
	DC.W	$2c30
	DC.W	$3530
	MOVE.L	D0,-(A2)
	SUBQ.W	#1,(A1)+
	MOVE.W	-(A5),11309(A1)
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	20992(A4),-(A6)
	SUBQ.W	#1,(A1)+
	DC.W	$3130
	MOVE.L	-(A6),D6
	DC.W	$2d30
	ADDQ.B	#2,11565(A5)
LAB_16D8:
	MOVE.L	22127(A4),-(A6)
	DC.W	$6300
	SUBQ.W	#1,(A1)+
	DC.W	$3131
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	14336(A4),-(A6)
	SUBQ.W	#1,(A1)+
	DC.W	$3132
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	12598(A4),-(A6)
	ORI.W	#$5931,(A3)
	MOVE.W	9773(A4),-(A1)
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	DC.W	$2c33
	MOVE.W	D0,D1
	SUBQ.W	#1,(A1)+
	DC.W	$3134
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	13876(A4),-(A6)
	ORI.W	#$5931,(A3)
	MOVE.W	9773(A4),-(A2)
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	DC.W	$2c31
	DC.W	$3238
	ORI.W	#$5931,(A3)
	MOVE.W	11565(A4),D3
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	DC.W	$2c32
	MOVE.W	0(A6,D0.W),-(A2)
	DC.W	$4354
	ADDQ.W	#1,A4
	SUBQ.W	#1,(A1)+
	DC.W	$5332
	SUBQ.W	#1,(A1)+
	DC.W	$3430
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	21061(A4),-(A6)
	TRAP	#4
	DC.W	$4552
	ORI.W	#$5934,(A3)
	MOVE.W	9766(A4),-(A0)
	MOVE.W	D2,11565(A0)
	MOVE.L	11320(A5),-(A6)
	ORI.W	#$5934,(A3)
	MOVE.W	9773(A4),D1
	MOVE.W	D2,11565(A0)
	MOVE.L	11313(A5),-(A6)
	MOVE.W	D0,D3
	SUBQ.W	#1,(A1)+
	DC.W	$3433
	MOVE.L	-(A6),D6
	DC.W	$2631
	CLR.B	11565(A5)
	MOVE.L	19712(A4),-(A6)
	SUBQ.W	#1,(A1)+
	DC.W	$3434
	MOVE.L	-(A6),D6
	DC.W	$2d31
	CLR.B	11565(A5)
	MOVE.L	21332(A4),-(A6)
	ORI.W	#$5934,(A3)
	MOVE.W	9773(A4),-(A2)
	MOVE.W	D2,11565(A0)
	MOVE.L	11344(A5),-(A6)
	DC.W	$4300
	SUBQ.W	#1,(A1)+
	MOVEA.W	D3,A2
	MOVE.L	11568(A5),D6
	ADDQ.B	#8,11565(A5)
	MOVE.L	11040(A4),-(A6)
	DC.W	$4f66
	BNE.S	LAB_16D9
	MOVE.L	-(A0),-(A6)
	MOVEA.W	EXT_000b.W,A1
	MOVE.L	-(A0),-(A6)
	MOVEA.W	EXT_0009.W,A2
	SUBQ.W	#1,(A1)+
	DC.W	$3437
	MOVE.L	-(A6),D6
	DC.W	$2d30
	ADDQ.B	#2,11565(A5)
	MOVE.L	18031(A4),-(A6)
	MOVEQ	#109,D1
	BSR.S	LAB_16DA
	ORI.W	#$5934,(A3)
	MOVE.W	9773(A4),D4
	MOVE.W	D2,11565(A0)
LAB_16D9:
	MOVE.L	11346(A5),-(A6)
	DC.W	$4157
	ORI.W	#$5934,(A3)
	MOVE.W	9773(A4),-(A4)
	MOVE.W	D2,11565(A0)
	MOVE.L	11351(A5),-(A6)
	DC.W	$4156
	ORI.W	#$5934,(A3)
	DC.W	$412c
	MOVE.L	12610(A5),D3
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A5,A6
	DC.W	$4145
	SUBQ.W	#1,(A4)
	ORI.W	#$5934,(A3)
	CLR.B	11565(A4)
	MOVE.W	D2,11565(A0)
	MOVE.L	11329(A5),-(A6)
	DC.W	$4946
	NOT.B	D0
	ORI.W	#$5452,D3
	DC.W	$4c53
	SUBQ.W	#4,(A3)
	MOVE.W	(A3),22840(A1)
	MOVE.W	9773(A4),D0
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	-(A4),A6
	ADDQ.W	#8,29696(A1)
	SUBQ.W	#1,(A1)+
	DC.W	$3831
	MOVE.L	-(A6),D6
	DC.W	$2630
	ADDQ.B	#3,11565(A5)
LAB_16DA:
	MOVE.L	8224(A4),-(A6)
	MOVE.L	D0,D0
	SUBQ.W	#1,(A1)+
	DC.W	$3832
	MOVE.L	-(A6),D6
	DC.W	$2630
	CLR.B	11565(A5)
	ADDQ.B	#1,15360(A4)
	SUBQ.W	#1,(A1)+
	DC.W	$3833
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	ADDQ.B	#1,15872(A4)
	SUBQ.W	#1,(A1)+
	DC.W	$3834
	MOVE.L	-(A6),D6
	DC.W	$2d30
	ADDQ.B	#2,11565(A5)
	MOVE.L	25683(A4),-(A6)
	BLT.S	LAB_16DB+2
	ORI.W	#$5938,(A3)
	MOVE.W	9766(A4),-(A2)
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	SUBQ.W	#1,(A1)+
	DC.W	$3836
	MOVE.L	-(A6),D6
	DC.W	$2630
	CLR.B	11565(A5)
	ADDQ.B	#1,15360(A4)
	SUBQ.W	#1,(A1)+
	DC.W	$3837
	MOVE.L	11568(A5),D6
	CLR.B	11565(A5)
	ADDQ.B	#1,15872(A4)
	SUBQ.W	#1,(A1)+
	DC.W	$3530
	MOVE.L	-(A6),D6
	DC.W	$2630
	ADDQ.B	#2,11565(A5)
	MOVE.L	17763(A4),-(A6)
	DC.W	$686f
	MOVE.L	D0,D0
	SUBQ.W	#1,(A1)+
	MOVE.W	EXT_002f,-(A2)
	ADDQ.B	#8,11565(A5)
	MOVE.L	11040(A4),-(A6)
	DC.W	$4f66
	BNE.S	LAB_16DC
	MOVE.L	8270(A5),D6
	BLE.S	LAB_16DF
	BLT.S	LAB_16DD+2
	MOVE.L	-(A0),-(A6)
	DC.W	$4372
	MOVE.L	8259(A5),D6
	MOVEQ	#50,D1
LAB_16DB:
	MOVE.L	8259(A5),D6
	BCS.S	LAB_16E0
	MOVEQ	#0,D2
	SUBQ.W	#1,(A1)+
	DC.W	$3531
	MOVE.L	-(A6),D6
LAB_16DC:
	DC.W	$2630
	ADDQ.B	#2,11565(A5)
	MOVE.L	19557(A4),-(A6)
	BGT.S	LAB_16DE+2
	MOVE.L	-(A0),D0
	ORI.W	#$5935,(A3)
LAB_16DD:
	MOVE.W	9766(A4),D1
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	ORI.W	#$5935,(A3)
	MOVE.W	9766(A4),-(A1)
	MOVEA.W	D2,A0
LAB_16DE:
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00535935,D6
	MOVE.W	11565(A4),D2
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	ORI.W	#$5935,(A3)
	MOVE.W	9773(A4),D0
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	ORI.W	#$5935,(A3)
LAB_16DF:
	MOVE.W	9766(A4),-(A2)
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A4,A6
	MOVEQ	#108,D3
LAB_16E0:
	ORI.W	#$5935,(A3)
	MOVE.W	9766(A4),D3
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	SUBQ.W	#1,(A1)+
	DC.W	$3537
	MOVE.L	-(A6),D6
	DC.W	$2630
	CLR.B	11565(A5)
	ADDQ.B	#1,15360(A4)
	SUBQ.W	#1,(A1)+
	DC.W	$3538
	MOVE.L	11568(A5),D6
	CLR.B	11565(A5)
	ADDQ.B	#1,15872(A4)
	SUBQ.W	#1,(A1)+
	DC.W	$3630
	MOVE.L	-(A6),D6
	DC.W	$2630
	ADDQ.B	#2,11565(A5)
	MOVE.L	17509(A4),-(A6)
	DC.W	$6c61
	DC.W	$7900
	SUBQ.W	#1,(A1)+
	MOVE.W	EXT_002f,D3
	ADDQ.B	#8,11565(A5)
	MOVE.L	11040(A4),-(A6)
	DC.W	$4f66
	BNE.S	LAB_16E1
	MOVE.L	8270(A5),D6
	BLE.S	LAB_16E3
	BLT.S	LAB_16E2
	MOVE.L	-(A0),-(A6)
	DC.W	$4372
	ORI.W	#$5936,(A3)
	MOVE.W	9766(A4),-(A0)
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A4,A6
	BCS.S	LAB_16E4
	MOVE.L	-(A0),D0
LAB_16E1:
	MOVE.L	D0,D0
	SUBQ.W	#1,(A1)+
	DC.W	$3632
	MOVE.L	-(A6),D6
	DC.W	$2630
	ADDQ.B	#3,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	D0,D0
LAB_16E2:
	SUBQ.W	#1,(A1)+
	DC.W	$3633
	MOVE.L	-(A6),D6
	DC.W	$2630
	CLR.B	11565(A5)
	ADDQ.B	#1,15360(A4)
	SUBQ.W	#1,(A1)+
	DC.W	$3634
	MOVE.L	11568(A5),D6
	CLR.B	11565(A5)
	ADDQ.B	#1,15872(A4)
	SUBQ.W	#1,(A1)+
	DC.W	$3630
	MOVE.L	-(A6),D6
	DC.W	$2d30
	ADDQ.B	#2,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	SUBQ.W	#1,(A1)+
	DC.W	$3635
	MOVE.L	-(A6),D6
	DC.W	$2630
	ADDQ.B	#2,11565(A5)
	MOVE.L	19574(A4),-(A6)
LAB_16E3:
	DC.W	$6c00
	SUBQ.W	#1,(A1)+
	DC.W	$3636
	MOVE.L	-(A6),D6
	DC.W	$2630
	ADDQ.B	#3,11565(A5)
	MOVE.L	8224(A4),-(A6)
	MOVE.L	-(A0),D0
LAB_16E4:
	MOVE.L	-(A0),D0
	ORI.W	#$5936,(A3)
	MOVE.W	9766(A4),-(A3)
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00535936,D6
	MOVE.W	11565(A4),D4
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	ORI.W	#$5937,(A3)
	MOVE.W	9766(A4),D0
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A0,A6
	BSR.S	LAB_16E7+2
	BGE.S	LAB_16E5
	ORI.W	#$5937,(A3)
	MOVE.W	9773(A4),-(A4)
	MOVEA.W	(A0),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	8271(A3),D6
	BNE.S	LAB_16E8
	MOVE.L	11552(A4),D0
	MOVE.L	USP,A7
	MOVEQ	#109,D1
	MOVE.L	8259(A5),D6
LAB_16E5:
	MOVEQ	#0,D1
	SUBQ.W	#1,(A1)+
	DC.W	$3731
	MOVE.L	-(A6),D6
	DC.W	$2630
	ADDQ.B	#2,11565(A5)
	MOVE.L	19557(A4),-(A6)
	BGT.S	LAB_16E6+2
	MOVE.L	-(A0),D0
	ORI.W	#$5937,(A3)
	MOVE.W	9766(A4),D1
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	ORI.W	#$5937,(A3)
	MOVE.W	9766(A4),-(A1)
	MOVEA.W	D2,A0
LAB_16E6:
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00535937,D6
	MOVE.W	11565(A4),D2
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
LAB_16E7:
	ORI.W	#$5937,(A3)
	MOVE.W	9773(A4),D0
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
LAB_16E8:
	MOVE.L	-(A0),D0
	ORI.W	#$5937,(A3)
	MOVE.W	9766(A4),-(A2)
	MOVEA.W	(A4),A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A4,A6
	MOVEQ	#108,D3
	ORI.W	#$5937,(A3)
	MOVE.W	9766(A4),D3
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	-(A0),D6
	MOVE.L	-(A0),D0
	MOVE.L	-(A0),D0
	MOVE.L	D0,D0
	SUBQ.W	#1,(A1)+
	DC.W	$3737
	MOVE.L	-(A6),D6
	DC.W	$2630
	CLR.B	11565(A5)
	ADDQ.B	#1,15360(A4)
	SUBQ.W	#1,(A1)+
	DC.W	$3738
	MOVE.L	11568(A5),D6
	CLR.B	11565(A5)
	ADDQ.B	#1,15872(A4)
	SUBQ.W	#1,(A1)+
	DC.W	$3930
	MOVE.L	-(A6),D6
	DC.W	$2d30
	ADDQ.B	#2,11565(A5)
	MOVE.L	20588(A4),-(A6)
	DC.W	$7567
	MOVEA.L	A1,A0
	DC.W	$6e00
	SUBQ.W	#1,(A1)+
	DC.W	$3931
	MOVE.L	-(A6),D6
	DC.W	$2d30
	CLR.B	11565(A5)
	MOVE.L	19535(A4),-(A6)
	DC.W	$4144
	ORI.W	#$5939,(A3)
	MOVE.W	9773(A4),D1
	MOVEA.W	D2,A0
	MOVE.L	11565(A5),-(A6)
	MOVEA.L	A7,A6
	DC.W	$4e00
	SUBQ.W	#1,(A1)+
	DC.W	$3933
	MOVE.L	11568(A5),D6
	CLR.B	11565(A5)
	MOVE.L	20294(A4),-(A6)
	NOT.B	D0
	SUBQ.W	#1,(A1)+
	DC.W	$3935
	MOVE.L	-(A6),D6
	DC.W	$2630
	ADDQ.B	#3,11565(A5)
	MOVE.L	11565(A4),-(A6)
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),-(A6)
	ORI.W	#$5939,(A3)
	MOVE.W	9766(A4),D3
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00535939,D6
	MOVE.W	9773(A4),-(A3)
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	ORI.W	#$5939,(A3)
	MOVE.W	9766(A4),D4
	MOVEA.W	(A6),A0
	MOVE.L	11565(A5),-(A6)
	MOVE.L	11565(A5),D6
	MOVE.L	83(A5),-(A6)
	SUBQ.B	#4,EXT_0030
	MOVEA.W	D2,A0
	MOVE.L	11602(A5),-(A6)
	MOVE.L	#$00535939,D6
	DC.W	$412c
	MOVE.L	12354(A5),-(A6)
	MOVE.L	11602(A5),-(A6)
	DC.W	$2c3e
	ORI.B	#$00,D0
VFadeBuf:
	ORI.B	#$01,D0
LAB_16EA:
	ORI.B	#$64,D0
VFadeMin_TXT:
	ADDQ.W	#3,27765(A7)
LAB_16EC:
	DC.W	$6d65
	MOVEA.L	D2,A0
	DC.W	$6567
	BVS.S	LAB_16F4
	MOVE.L	12590(A0),D0
	MOVE.L	48(A1,D3.W),D7
	MOVE.L	D0,-(A4)
VFadeMax_TXT:
	ADDQ.W	#3,27765(A7)
	DC.W	$6d65
	MOVEA.L	D5,A0
	BGT.S	LAB_16F5+2
	MOVE.L	12590(A0),D0
	MOVE.L	48(A1,D3.W),D7
	MOVE.L	D0,-(A4)
VFade_INFOTXT:
	MOVE.L	10784(A2),D5
	DC.W	$424c
	DC.W	$4f43
	DC.W	$4b3a
	MOVEA.L	(A6),A0
	BLE.S	LAB_16F9
	DC.W	$756d
	BCS.S	LAB_16F0
	NOT.W	-(A1)
	DC.W	$6465
	MOVE.L	10794(A2),D0
ModFtxt2:
	ORI.W	#$7665,D5
	BGT.S	LAB_16FC
	MOVEA.L	D6,A0
	BVS.S	LAB_16FB
	MOVEQ	#101,D2
	MOVEQ	#61,D1
	MOVEA.L	(A3),A1
	DC.W	$696d
	MOVEQ	#108,D0
	BCS.S	LAB_16F4
	DC.W	$4678
LAB_16F0:
	MOVE.L	A3,25977(A7)
	MOVEA.L	A7,A0
	BGT.S	LAB_16F6
ModFtxt:
	ORI.W	#$7665,D5
	BGT.S	LAB_1700+2
	MOVEA.L	D6,A0
	BVS.S	LAB_16FF
	MOVEQ	#101,D2
	MOVEQ	#61,D1
LAB_16F2:
	MOVE.L	11565(A5),D1
	MOVE.L	-(A2),-(A6)
SampleVFade:
	DC.W	$002a
LAB_16F4:
	MOVEA.L	(A3),A0
	DC.W	$616d
	MOVEQ	#108,D0
	BCS.S	LAB_16F8
LAB_16F5:
	ADDQ.W	#3,27765(A7)
LAB_16F6:
	DC.W	$6d65
	MOVEA.L	D6,A0
	BSR.S	LAB_1702
	DC.W	$6500
SampleVFadeClr:
	MOVE.L	-(A0),D5
	SUBQ.W	#1,-(A1)
	BLT.S	LAB_1704
	DC.W	$6c65
	MOVEA.L	(A6),A0
	BLE.S	LAB_1705
	DC.W	$756d
	BCS.S	LAB_16FC
	NOT.W	-(A1)
	DC.W	$6465
LAB_16F8:
	MOVE.W	-(A0),D5
LAB_16F9:
	BLS.S	LAB_1707
	DC.W	$6561
	MOVEQ	#101,D1
	DC.W	$6400
SampleVFadeBgn:
	DC.W	$416d
	MOVEQ	#108,D0
	BVS.S	LAB_1709+2
	DC.W	$7564
	BCS.S	LAB_16FE
	DC.W	$5374
	BSR.S	LAB_170A
LAB_16FB:
	MOVEQ	#32,D2
	DC.W	$2830
LAB_16FC:
	MOVE.L	12592(A6),D7
SampleVFadeEnd:
	MOVE.W	65(A1),D0
	BLT.S	LAB_170D
	DC.W	$6c69
	MOVEQ	#117,D2
	DC.W	$6465
	MOVEA.L	D5,A0
	BGT.S	LAB_170C
	MOVE.L	12334(A0),D0
LAB_16FE:
	MOVE.L	48(A1,D3.W),D7
LAB_16FF:
	MOVE.L	D0,-(A4)
LPResoFilter_TXT:
LAB_1700:
	NOT.W	27764(A1)
	BCS.S	LAB_1710
	MOVEA.L	D6,A0
	MOVEQ	#101,D1
	DC.W	$7175
	BCS.S	LAB_1712
	DC.W	$6379
	MOVE.L	12334(A0),D0
LAB_1702:
	DC.W	$2e32
	DC.W	$3535
	MOVE.L	D0,-(A4)
LPResoFilterB_TXT:
	NOT.W	27764(A1)
	BCS.S	LAB_1714
	MOVEA.L	(A2),A0
	DC.W	$6573
	BLE.S	LAB_1716
	BSR.S	LAB_1716+2
LAB_1704:
	DC.W	$6365
LAB_1705:
	MOVE.L	12334(A0),D0
	DC.W	$2e32
	DC.W	$3535
	MOVE.L	D0,-(A4)
ResoFilterLP:
	DC.W	$4c50
LAB_1707:
	MOVEA.L	D6,A0
	BVS.S	LAB_1718+2
	MOVEQ	#101,D2
	MOVEQ	#58,D1
	MOVEA.L	(A3),A0
	MOVEQ	#97,D2
	MOVEQ	#116,D1
ResoFilterLPb:
	DC.W	$004c
	ADDQ.B	#8,-(A0)
LAB_1709:
	NOT.W	27764(A1)
	BCS.S	LAB_1719
	MOVE.W	-(A0),D5
LAB_170A:
	DC.W	$456e
	DC.W	$6400
ResoFilterAbort:
	DC.W	$4c50
	MOVEA.L	D6,A0
	BVS.S	LAB_171A+2
LAB_170C:
	MOVEQ	#101,D2
LAB_170D:
	MOVEQ	#32,D1
	MOVEQ	#101,D1
	DC.W	$6d6f
	MOVEQ	#101,D3
	DC.W	$6400
ResoFilterStatic:
	DC.W	$5374
	BSR.S	LAB_171B+2
	DC.W	$6963
LAB_170F:
	MOVEA.L	A4,A0
	ADDQ.B	#8,-(A0)
	NOT.W	27764(A1)
	BCS.S	LAB_171C
	MOVEA.L	(A3),A0
LAB_1710:
	BCS.S	LAB_171D+2
ResoFilterSweep:
	DC.W	$004c
LAB_1712:
	ADDQ.B	#8,-(A0)
	NOT.W	27764(A1)
	BCS.S	LAB_171E+2
	MOVEA.L	(A3),A0
	DC.W	$7765
	BCS.S	LAB_171F+2
	MOVEA.L	(A3),A0
	BCS.S	LAB_1720+2
Encode_END:
	ORI.W	#$4158,(A0)+
PlayTrackInfo:
LAB_1714:
	DC.W	$4100
LAB_1716:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
LAB_1718:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
LAB_1719:
	ORI.B	#$00,D0
LAB_171A:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
LAB_171B:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
LAB_171C:
	ORI.B	#$00,D0
LAB_171D:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
LAB_171E:
	ORI.B	#$00,D0
LAB_171F:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
LAB_1720:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
XPKErrMsg:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
INameBak:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
templong:
	ORI.B	#$00,D0
DUMMY:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
DEBUG:
	ORI.B	#$00,D0
LAB_1726:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
SetOldCList:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	DC.W	$4a3a
	DC.W	$02ce
	BEQ.S	LAB_1728
	CLR.B	CLIST_ENABLED
	JSR	OldCopList
	MOVEA.L	MainScreen_PTR+2(PC),A0
	LEA	44(A0),A0
	MOVEA.L	_GraphicsBase(PC),A6
	JSR	-588(A6)
	MOVEA.L	MainScreen_PTR+2(PC),A0
	MOVEA.L	_IntuitionBase,A6
	JSR	-252(A6)
LAB_1728:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
UpdateColorOrgan:
	DC.W	$0c3a
	DC.W	$00ff
	ANDI.L	#$663a48e7,(A4)
	ASR.L	#8,D0
	ANDI.L	#$000000ff,D0
	LSL.L	#1,D0
	MOVEQ	#0,D2
	MOVE.B	3(A2),D2
	MULU	#$000b,D2
	ANDI.W	#$01ff,D2
	ADD.W	D2,D0
LAB_172A:
	CMPI.W	#$0168,D0
	BCS.S	LAB_172B
	SUBI.W	#$0168,D0
	BRA.S	LAB_172A
LAB_172B:
	MOVE.W	D0,D2
	MULU	#$00be,D2
	DIVU	#$0168,D2
	BSR.W	SetColHSVT2
	MOVEM.L	(A7)+,D0-D2/A0
	RTS
LinkFadeRGB32:
	MOVEM.L	D0-D7/A1,-(A7)
	MOVE.L	D5,D6
	MOVE.L	D2,D5
	MOVE.L	D4,D2
	MOVEA.L	A0,A1
	LEA	LinkFadeRGB32_TEMP(PC),A0
	BSR.S	BuildColFadeTab
	EXG	A0,A1
	MOVE.L	D6,D1
LinkFadeRGB32_L:
	MOVE.L	D5,(A0)+
	MOVE.L	(A1)+,D0
	BSR.W	AddRGB32Clist
	ADD.L	D3,D5
	DBF	D4,LinkFadeRGB32_L
	MOVEM.L	(A7)+,D0-D7/A1
	RTS
	DC.W	$0000
BuildColFadeTab:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVE.L	D0,(A0)+
	LEA	ColFadeTEMP_PTR(PC),A2
	MOVE.L	D1,D3
	ANDI.L	#$0000ffff,D2
	MOVE.L	D2,D4
	MOVE.L	D2,D6
	BSR.S	SplitRGB32
	MOVEM.W	D0-D2,(A2)
	MOVE.L	D3,D0
	BSR.S	SplitRGB32
	MOVEM.W	D0-D2,6(A2)
	MOVEQ	#1,D5
	SUBQ.W	#1,D6
BuildColFadeTab_L2:
	LEA	(A2),A3
	LEA	6(A2),A4
	LEA	12(A2),A5
	MOVEQ	#2,D7
BuildColFadeTab_L1:
	MOVE.W	(A3)+,D0
	MOVE.W	(A4)+,D1
	CMP.W	D1,D0
	BLS.S	BuildColFadeTab_A
	MOVE.W	D0,D2
	SUB.W	D1,D2
	MULU	D5,D2
	DIVU	D4,D2
	SUB.W	D2,D0
	MOVE.W	D0,(A5)+
	BRA.S	BuildColFadeTab_B
BuildColFadeTab_A:
	SUB.W	D0,D1
	MULU	D5,D1
	DIVU	D4,D1
	ADD.W	D0,D1
	MOVE.W	D1,(A5)+
BuildColFadeTab_B:
	DBF	D7,BuildColFadeTab_L1
BuildColFadeTab_C:
	ADDQ.W	#1,D5
	MOVEM.W	12(A2),D0-D2
	BSR.S	UnsplitRGB32
	MOVE.L	D0,(A0)+
	DBF	D6,BuildColFadeTab_L2
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
ColFadeTEMP_PTR:
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
	ORI.B	#$00,D0
SplitRGB32:
	MOVE.W	D0,D1
	MOVE.L	D0,D2
	LSL.W	#8,D2
	LSR.L	#8,D0
	ANDI.W	#$ff00,D0
	ANDI.W	#$ff00,D1
	ANDI.W	#$ff00,D2
	RTS
	DC.W	$0000
UnsplitRGB32:
	LSL.L	#8,D0
	ANDI.L	#$00ff0000,D0
	MOVE.W	D1,D0
	LSR.W	#8,D2
	MOVE.B	D2,D0
	RTS
RGB32toFastRGB32:
	MOVEM.L	D1-D5,-(A7)
	MOVEQ	#0,D4
	MOVEQ	#0,D5
	MOVEQ	#2,D3
LAB_1738:
	MOVE.B	D0,D1
	ANDI.B	#$0f,D1
	OR.B	D1,D4
	LSR.L	#4,D0
	ROR.W	#4,D4
	MOVE.B	D0,D1
	ANDI.B	#$0f,D1
	OR.B	D1,D5
	LSR.L	#4,D0
	ROR.W	#4,D5
	DBF	D3,LAB_1738
	MOVE.W	D4,D0
	SWAP	D0
	MOVE.W	D5,D0
	LSR.L	#4,D0
	MOVEM.L	(A7)+,D1-D5
	RTS
SetRGB32Color:
	BSR.S	RGB32toFastRGB32
	DC.W	$0000
SetFastRGB32Color:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	BSR.S	FastRGB32
	LEA	HARDBASE,A5
	MOVE.W	D2,262(A5)
	MOVE.W	D0,0(A5,D1.W)
	BSET	#9,D2
	MOVE.W	D2,262(A5)
	SWAP	D0
	MOVE.W	D0,0(A5,D1.W)
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
FastRGB32:
	MOVEQ	#0,D2
	MOVE.W	D1,D2
	ANDI.W	#$00e0,D2
	ANDI.W	#$001f,D1
	LSL.W	#1,D1
	ADDI.W	#$0180,D1
	LSL.W	#7,D2
	OR.W	bplcon3_DEFAULT(PC),D2
	BCLR	#9,D2
	RTS
	DC.W	$0000
AddRGB32Clist:
	BSR.W	RGB32toFastRGB32
	BRA.S	AddFastRGB32Clist
	DC.W	$0000
AddFastRGB32Clist:
	MOVEM.L	D0-D7,-(A7)
	BSR.S	FastRGB32
	MOVE.W	#$0106,(A0)+
	MOVE.W	D2,(A0)+
	MOVE.W	D1,(A0)+
	MOVE.W	D0,(A0)+
	BSET	#9,D2
	SWAP	D0
	MOVE.W	#$0106,(A0)+
	MOVE.W	D2,(A0)+
	MOVE.W	D1,(A0)+
	MOVE.W	D0,(A0)+
	MOVEM.L	(A7)+,D0-D7
	RTS
bplcon3_DEFAULT:
	BSET	D0,D1
AddLongCList:
	BCLR	#0,D1
	MOVE.W	D1,(A0)+
	SWAP	D0
	MOVE.W	D0,(A0)+
	SWAP	D0
	ADDQ.W	#2,D1
	MOVE.W	D1,(A0)+
	MOVE.W	D0,(A0)+
	SUBQ.W	#2,D1
	RTS
	DC.W	$0000
MakeCopperList:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	CopperList_PTR(PC),A0
	MOVE.W	#$0106,(A0)+
	MOVE.W	bplcon3_DEFAULT(PC),(A0)+
	MOVE.L	#$01800000,(A0)+
	MOVE.L	#$00960100,(A0)+
	JSR	LinkNullSpriteCopList
	MOVE.L	#$00f00030,D0
	MOVEQ	#80,D1
	MOVE.L	#$4001fffe,D2
	MOVE.L	#$01000000,D3
	MOVEQ	#5,D4
	MOVEQ	#0,D5
	MOVEQ	#0,D0
	CLR.W	D1
	BSR.W	AddRGB32Clist
	MOVE.L	#$3001fffe,D6
	MOVE.L	#$000000c7,D7
	MOVE.L	D6,(A0)+
	MOVE.L	A0,CL_ColorPlane
LAB_1741:
	MOVEQ	#0,D0
	CLR.W	D1
	BSR.W	AddRGB32Clist
	ADDI.L	#$01000000,D6
	MOVE.L	D6,(A0)+
	DBF	D7,LAB_1741
	SUBQ.L	#4,A0
	MOVE.L	#$ff01fffe,(A0)+
	MOVEQ	#0,D0
	CLR.W	D1
	BSR.W	AddRGB32Clist
	MOVE.W	#$0106,(A0)+
	MOVE.W	bplcon3_DEFAULT(PC),(A0)+
	MOVE.L	A0,COLOR_CLADR
	MOVE.L	#$fffffffe,(A0)+
	MOVE.B	#$ff,CLIST_ENABLED
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
CL_ColorPlane:
	ORI.B	#$00,D0
COLOR_CLADR:
	ORI.B	#$00,D0
CLIST_ENABLED:
	ORI.B	#$00,D0
AnimateSpecialFX:
	DC.W	$0c3a
	DC.W	$00ff
	DC.W	$fff8
	BNE.S	LAB_1746
	BSR.W	RGBFadeZeroCol2
	BSR.S	RGBStretchColors
	BSR.W	ColRGBT2CList
LAB_1746:
	RTS
RGBDiffuseColorsDwn:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	RGB_Table_PTR(PC),A1
	MOVE.L	#$000000c7,D7
	MOVEQ	#4,D3
	MOVEQ	#8,D2
	SUBQ.W	#1,D7
	MOVE.L	(A1),D4
LAB_1748:
	MOVE.L	(A1),D0
	BSR.S	LAB_1749
	BSR.S	LAB_1749
	BSR.S	LAB_1749
	ROR.L	D2,D0
	MOVE.L	D0,D4
	MOVE.L	D0,(A1)+
	DBF	D7,LAB_1748
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_1749:
	LSR.B	#5,D4
	ADD.B	D4,D0
	BVC.S	LAB_174A
	MOVE.B	#$ff,D0
LAB_174A:
	ROR.L	D2,D0
	ROR.L	D2,D4
	RTS
RGBStretchColors:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	RGB_Table_PTR(PC),A1
	MOVE.L	#$000000c6,D7
	MOVEQ	#16,D3
	MOVEQ	#8,D2
	MOVEQ	#0,D0
LAB_174C:
	MOVE.L	(A1)+,D4
	TST.L	D4
	BEQ.S	LAB_174D
	MOVE.L	D4,D0
LAB_174D:
	BSR.S	LAB_174F
	BSR.S	LAB_174F
	BSR.S	LAB_174F
	ROR.L	D2,D0
	TST.L	(A1)
	BNE.S	LAB_174E
	MOVE.L	D0,(A1)
LAB_174E:
	DBF	D7,LAB_174C
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_174F:
	CMP.B	D3,D0
	BHI.S	LAB_1750
	CLR.B	D0
	ROR.L	D2,D0
	RTS
LAB_1750:
	SUB.B	D3,D0
	ROR.L	D2,D0
	RTS
RGBFadeZeroCol2:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	RGB_Table_PTR(PC),A1
	MOVE.L	#$000000c7,D7
	MOVEQ	#20,D3
	MOVEQ	#8,D2
LAB_1752:
	MOVE.L	(A1),D0
	BSR.S	LAB_1753
	BSR.S	LAB_1753
	BSR.S	LAB_1753
	ROR.L	D2,D0
	MOVE.L	D0,(A1)+
	DBF	D7,LAB_1752
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
LAB_1753:
	CMP.B	D3,D0
	BHI.S	LAB_1754
	CLR.B	D0
	ROR.L	D2,D0
	RTS
LAB_1754:
	SUB.B	D3,D0
	ROR.L	D2,D0
	RTS
RGBFadeZeroCol:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	RGB_Table_PTR(PC),A1
	MOVE.L	#$000000c7,D7
	MOVEQ	#8,D2
LAB_1756:
	MOVE.L	(A1),D0
	TST.B	D0
	BEQ.S	LAB_1757
	SUBQ.B	#1,D0
LAB_1757:
	ROR.L	D2,D0
	TST.B	D0
	BEQ.S	LAB_1758
	SUBQ.B	#1,D0
LAB_1758:
	ROR.L	D2,D0
	TST.B	D0
	BEQ.S	LAB_1759
	SUBQ.B	#1,D0
LAB_1759:
	ROR.L	D2,D0
	ROR.L	D2,D0
	MOVE.L	D0,(A1)+
	DBF	D7,LAB_1756
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
	DC.W	$0000
ConvHSV2RGB:
	MOVEM.L	A0,-(A7)
	MOVEA.L	BuildCT_DATA(PC),A0
	DC.W	$2030
	DC.W	$0400
	MOVEA.L	(A7)+,A0
	RTS
InitColTTab:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	BuildCT_DATA(PC),A1
	LEA	BuildCT_DEF(PC),A0
	MOVE.W	#$0167,D6
	MOVEQ	#0,D0
	MOVE.B	(A0)+,D0
	ROL.L	#8,D0
	MOVE.B	(A0)+,D0
	ROL.L	#8,D0
	MOVE.B	(A0)+,D0
LAB_175C:
	MOVE.W	(A0)+,D7
	CMPI.W	#$ffff,D7
	BEQ.S	LAB_175E
	MOVE.B	(A0)+,D1
	MOVE.B	(A0)+,D2
	MOVE.B	(A0)+,D3
LAB_175D:
	MOVE.L	D0,(A1)+
	SUBQ.W	#1,D6
	BEQ.S	LAB_175E
	ADD.B	D3,D0
	ROR.L	#8,D0
	ADD.B	D2,D0
	ROR.L	#8,D0
	ADD.B	D1,D0
	ROL.L	#8,D0
	ROL.L	#8,D0
	DBF	D7,LAB_175D
	BRA.S	LAB_175C
LAB_175E:
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
BuildCT_DATA:
	ORI.B	#$00,D0
	DC.W	$0000
	BCLR	D2,-(A0)
	ORI.B	#$00,D1
BuildCT_DEF:
	DC.W	$ff00
	DC.W	$0000
	MOVE.W	D0,-(A5)
	ORI.B	#$3b,D4
	DC.W	$fe02
	DC.W	$0000
	DC.W	$3bfe
	ANDI.B	#$3b,D0
	DC.W	$0400
	DC.W	$fc00
	MOVE.W	D0,-(A5)
	DC.W	$ff00
	DC.W	$003b
	DC.W	$00fd
	DC.W	$0000
	DC.W	$6401
	DC.W	$02ff
	ORI.W	#$ff01,-(A4)
	DC.W	$ffff
	DC.W	$ff00
SetColHSVT4:
	MOVEM.L	D0-D4,-(A7)
	MOVEQ	#8,D4
LAB_1762:
	MOVEM.L	D0-D2,-(A7)
	BSR.W	ConvHSV2RGB
	MOVE.W	D2,D1
	BSR.S	LAB_1763
	MOVEM.L	(A7)+,D0-D2
	ADDQ.B	#2,D0
	LSR.W	#1,D1
	ADDQ.W	#1,D2
	DBF	D4,LAB_1762
	MOVEM.L	(A7)+,D0-D4
	RTS
LAB_1763:
	MOVEM.L	D0-D2/A0,-(A7)
	MOVEA.L	RGB_Table_PTR(PC),A0
	ANDI.W	#$00ff,D1
	DC.W	$41f0
	MOVE.B	D0,D2
	BSR.S	LAB_1764
	ROL.L	#8,D0
	ADDQ.L	#1,A0
	BSR.S	LAB_1764
	ROL.L	#8,D0
	ADDQ.L	#1,A0
	BSR.S	LAB_1764
	ROL.L	#8,D0
	ADDQ.L	#1,A0
	BSR.S	LAB_1764
	MOVEM.L	(A7)+,D0-D2/A0
	RTS
LAB_1764:
	MOVE.B	(A0),D2
	ADD.B	D0,D2
	BCC.S	LAB_1765
	MOVE.B	#$ff,(A0)
	RTS
LAB_1765:
	MOVE.B	D2,(A0)
	RTS
SetColHSVT3:
	MOVEM.L	D0-D4,-(A7)
	MOVEQ	#8,D4
LAB_1767:
	MOVEM.L	D0-D2,-(A7)
	BSR.W	ConvHSV2RGB
	MOVE.W	D2,D1
	BSR.S	LAB_1768
	MOVEM.L	(A7)+,D0-D2
	ADDQ.W	#1,D2
	DBF	D4,LAB_1767
	MOVEM.L	(A7)+,D0-D4
	RTS
LAB_1768:
	MOVEM.L	D0-D2/A0,-(A7)
	MOVEA.L	RGB_Table_PTR(PC),A0
	ANDI.W	#$00ff,D1
	DC.W	$41f0
	MOVE.B	D1,D2
	BSR.S	LAB_1769
	LSR.L	#8,D0
	ADDQ.L	#1,A0
	BSR.S	LAB_1769
	LSR.L	#8,D0
	ADDQ.L	#1,A0
	BSR.S	LAB_1769
	MOVEM.L	(A7)+,D0-D2/A0
	RTS
LAB_1769:
	MOVE.B	(A0),D2
	ADD.B	D0,D2
	BCC.S	LAB_176A
	MOVE.B	#$ff,(A0)
	RTS
LAB_176A:
	MOVE.B	D2,(A0)
	RTS
	DC.W	$0000
SetColHSVT2:
	MOVEM.L	D0-D3,-(A7)
	BSR.W	ConvHSV2RGB
	MOVE.W	D2,D1
	BSR.S	SetColRGBT
	MOVEM.L	(A7)+,D0-D3
	RTS
SetColRGBT:
	MOVEM.L	A0,-(A7)
	MOVEA.L	RGB_Table_PTR(PC),A0
	ANDI.W	#$00ff,D1
	DC.W	$2180
	MOVE.B	D0,D2
	MOVEA.L	(A7)+,A0
	RTS
ColRGBT2CList:
	MOVEM.L	D0-D7/A0-A6,-(A7)
	MOVEA.L	CL_ColorPlane(PC),A0
	MOVEA.L	RGB_Table_PTR(PC),A1
	MOVEQ	#0,D1
	MOVE.L	#$000000c7,D7
LAB_176E:
	MOVE.L	(A1)+,D0
	BSR.W	AddRGB32Clist
	ADDQ.L	#4,A0
	DBF	D7,LAB_176E
	MOVEM.L	(A7)+,D0-D7/A0-A6
	RTS
RGB_Table_PTR:
	ORI.B	#$00,D0
	DC.W	$0000
	BTST	D1,-(A0)
	ORI.B	#$00,D1


	SECTION S_1,CODE

_CloseLibs:
	MOVEM.L	A6,-(A7)
	TST.L	_IntuitionBase
	BEQ.S	l3
	MOVEA.L	_IntuitionBase,A1
	MOVEA.L	_SysBase,A6
	JSR	-414(A6)
l3:
	TST.L	_GraphicsBase
	BEQ.S	l5
	MOVEA.L	_GraphicsBase,A1
	MOVEA.L	_SysBase,A6
	JSR	-414(A6)
l5:
	TST.L	_DosBase
	BEQ.S	l7
	MOVEA.L	_DosBase,A1
	MOVEA.L	_SysBase,A6
	JSR	-414(A6)
l7:
	TST.L	_AslBase+2
	BEQ.S	l9
	MOVEA.L	_AslBase+2,A1
	MOVEA.L	_SysBase,A6
	JSR	-414(A6)
l9:
	TST.L	_LayersBase
	BEQ.S	l11
	MOVEA.L	_LayersBase,A1
	MOVEA.L	_SysBase,A6
	JSR	-414(A6)
l11:
	TST.L	_GadToolsBase+2
	BEQ.S	l13
	MOVEA.L	_GadToolsBase+2,A1
	MOVEA.L	_SysBase,A6
	JSR	-414(A6)
l13:
	TST.L	_ReqToolsBase+2
	BEQ.S	l15
	MOVEA.L	_ReqToolsBase+2,A1
	MOVEA.L	_SysBase,A6
	JSR	-414(A6)
l15:
	TST.L	_CamdBase
	BEQ.S	l17
	MOVEA.L	_CamdBase,A1
	MOVEA.L	_SysBase,A6
	JSR	-414(A6)
l17:
	TST.L	_XpkBase+2
	BEQ.S	l19
	MOVEA.L	_XpkBase+2,A1
	MOVEA.L	_SysBase,A6
	JSR	-414(A6)
l19:
	MOVEA.L	(A7)+,A6
	RTS
_OpenLibs:
	MOVEM.L	D2/A6,-(A7)
	MOVEQ	#1,D2
	MOVEQ	#0,D0
	LEA	l24(PC),A1
	MOVEA.L	_SysBase,A6
	JSR	-552(A6)
	MOVEA.L	D0,A0
	MOVE.L	A0,_IntuitionBase
	MOVEQ	#0,D0
	LEA	l25(PC),A1
	MOVEA.L	_SysBase,A6
	JSR	-552(A6)
	MOVEA.L	D0,A0
	MOVE.L	A0,_GraphicsBase
	MOVEQ	#0,D0
	LEA	l26(PC),A1
	MOVEA.L	_SysBase,A6
	JSR	-552(A6)
	MOVEA.L	D0,A0
	MOVE.L	A0,_DosBase
	MOVEQ	#0,D0
	LEA	l27(PC),A1
	MOVEA.L	_SysBase,A6
	JSR	-552(A6)
	MOVEA.L	D0,A0
	MOVE.L	A0,_AslBase+2
	MOVEQ	#0,D0
	LEA	l28(PC),A1
	MOVEA.L	_SysBase,A6
	JSR	-552(A6)
	MOVEA.L	D0,A0
	MOVE.L	A0,_LayersBase
	MOVEQ	#0,D0
	LEA	l29(PC),A1
	MOVEA.L	_SysBase,A6
	JSR	-552(A6)
	MOVEA.L	D0,A0
	MOVE.L	A0,_GadToolsBase+2
	MOVEQ	#0,D0
	LEA	l30(PC),A1
	MOVEA.L	_SysBase,A6
	JSR	-552(A6)
	MOVEA.L	D0,A0
	MOVE.L	A0,_ReqToolsBase+2
	MOVEQ	#0,D0
	LEA	l31(PC),A1
	MOVEA.L	_SysBase,A6
	JSR	-552(A6)
	MOVEA.L	D0,A0
	MOVE.L	A0,_CamdBase
	MOVEQ	#0,D0
	LEA	l32(PC),A1
	MOVEA.L	_SysBase,A6
	JSR	-552(A6)
	MOVEA.L	D0,A0
	MOVE.L	A0,_XpkBase+2
	TST.L	_IntuitionBase
	BNE.S	l34
l33:
	MOVEQ	#0,D2
l34:
	TST.L	_GraphicsBase
	BNE.S	l36
l35:
	MOVEQ	#0,D2
l36:
	TST.L	_DosBase
	BNE.S	l38
l37:
	MOVEQ	#0,D2
l38:
	TST.L	_AslBase+2
	BNE.S	l40
l39:
	MOVEQ	#0,D2
l40:
	TST.L	_LayersBase
	BNE.S	l42
l41:
	MOVEQ	#0,D2
l42:
	TST.L	_GadToolsBase+2
	BNE.S	l44
l43:
	MOVEQ	#0,D2
l44:
	TST.L	_ReqToolsBase+2
	BNE.S	l46
l45:
	MOVEQ	#0,D2
l46:
	TST.W	D2
	BNE.S	l48
l47:
	BSR.W	_CloseLibs
l48:
	MOVE.W	D2,D0
l23:
	MOVEM.L	(A7)+,D2/A6
	RTS
l24:
	BVS.S	LAB_1795
	MOVEQ	#117,D2
	BVS.S	LAB_1797
	DC.W	$696f
	BGT.S	LAB_1790
	DC.W	$6c69
	BHI.S	LAB_1798
	BSR.S	LAB_1799
	DC.W	$7900
	DC.W	$0000
l25:
	BEQ.S	l32
	BSR.S	l32
	DC.W	$6869
	DC.W	$6373
	MOVEA.L	26978(A4),A7
	MOVEQ	#97,D1
	MOVEQ	#121,D1
	ORI.B	#$00,D0
l26:
	DC.W	$646f
	DC.W	$732e
	DC.W	$6c69
	DC.W	$6272
	DC.W	$6172
	DC.W	$7900
l27:
	DC.W	$6173
	BGE.S	LAB_1794
LAB_1790:
	DC.W	$6c69
	DC.W	$6272
	DC.W	$6172
	DC.W	$7900
l28:
	DC.W	$6c61
	DC.W	$7965
	MOVEQ	#115,D1
	MOVEA.L	26978(A4),A7
	MOVEQ	#97,D1
	MOVEQ	#121,D1
	DC.W	$0000
l29:
	DC.W	$6761
	DC.W	$6474
	DC.W	$6f6f
	DC.W	$6c73
	MOVEA.L	26978(A4),A7
	MOVEQ	#97,D1
	MOVEQ	#121,D1
	ORI.B	#$00,D0
l30:
	MOVEQ	#101,D1
LAB_1794:
	DC.W	$7174
	DC.W	$6f6f
	DC.W	$6c73
	MOVEA.L	26978(A4),A7
LAB_1795:
	MOVEQ	#97,D1
	MOVEQ	#121,D1
	ORI.B	#$00,D0
l31:
	DC.W	$6361
LAB_1797:
	DC.W	$6d64
	MOVEA.L	26978(A4),A7
LAB_1798:
	MOVEQ	#97,D1
LAB_1799:
	MOVEQ	#121,D1
	ORI.B	#$00,D0
l32:
	MOVEQ	#112,D4
	DC.W	$6b2e
	DC.W	$6c69
	DC.W	$6272
	DC.W	$6172
	DC.W	$7900


	SECTION S_2,DATA

_SysBase:
	DC.L	$00000004


	SECTION S_3,BSS

_IntuitionBase:
	DS.L	1
_DosBase:
	DS.L	1
	END
